+ cat
+ cat
+ true
+ true
+ exit 00
+ exit 00
+ rm -f c15528 c25528
+ test -f /dev/cputype -a -f /dev/drivers -a -f /dev/osversion
+ : compute my invocation name
+ me=./Configure
+ case "$0" in
++ echo ./Configure
++ sed -e 's!.*/\(.*\)!\1!'
+ me=Configure
+ test Configure
+ : Proper separator for the PATH environment variable
+ p_=:
+ : On OS/2 this directory should exist if this is not floppy only system ':-]'
+ test -d c:/.
+ test -n ''
+ test -n ''
+ : Proper PATH setting
+ paths='/bin /usr/bin /usr/local/bin /usr/ucb /usr/local /usr/lbin'
+ paths='/bin /usr/bin /usr/local/bin /usr/ucb /usr/local /usr/lbin /opt/bin /opt/local/bin /opt/local /opt/lbin'
+ paths='/bin /usr/bin /usr/local/bin /usr/ucb /usr/local /usr/lbin /opt/bin /opt/local/bin /opt/local /opt/lbin /usr/5bin /etc /usr/gnu/bin /usr/new /usr/new/bin /usr/nbin'
+ paths='/bin /usr/bin /usr/local/bin /usr/ucb /usr/local /usr/lbin /opt/bin /opt/local/bin /opt/local /opt/lbin /usr/5bin /etc /usr/gnu/bin /usr/new /usr/new/bin /usr/nbin /opt/gnu/bin /opt/new /opt/new/bin /opt/nbin'
+ paths='/bin /usr/bin /usr/local/bin /usr/ucb /usr/local /usr/lbin /opt/bin /opt/local/bin /opt/local /opt/lbin /usr/5bin /etc /usr/gnu/bin /usr/new /usr/new/bin /usr/nbin /opt/gnu/bin /opt/new /opt/new/bin /opt/nbin /sys5.3/bin /sys5.3/usr/bin /bsd4.3/bin /bsd4.3/usr/ucb'
+ paths='/bin /usr/bin /usr/local/bin /usr/ucb /usr/local /usr/lbin /opt/bin /opt/local/bin /opt/local /opt/lbin /usr/5bin /etc /usr/gnu/bin /usr/new /usr/new/bin /usr/nbin /opt/gnu/bin /opt/new /opt/new/bin /opt/nbin /sys5.3/bin /sys5.3/usr/bin /bsd4.3/bin /bsd4.3/usr/ucb /bsd4.3/usr/bin /usr/bsd /bsd43/bin /opt/ansic/bin /usr/ccs/bin'
+ paths='/bin /usr/bin /usr/local/bin /usr/ucb /usr/local /usr/lbin /opt/bin /opt/local/bin /opt/local /opt/lbin /usr/5bin /etc /usr/gnu/bin /usr/new /usr/new/bin /usr/nbin /opt/gnu/bin /opt/new /opt/new/bin /opt/nbin /sys5.3/bin /sys5.3/usr/bin /bsd4.3/bin /bsd4.3/usr/ucb /bsd4.3/usr/bin /usr/bsd /bsd43/bin /opt/ansic/bin /usr/ccs/bin /etc /usr/lib /usr/ucblib /lib /usr/ccs/lib'
+ paths='/bin /usr/bin /usr/local/bin /usr/ucb /usr/local /usr/lbin /opt/bin /opt/local/bin /opt/local /opt/lbin /usr/5bin /etc /usr/gnu/bin /usr/new /usr/new/bin /usr/nbin /opt/gnu/bin /opt/new /opt/new/bin /opt/nbin /sys5.3/bin /sys5.3/usr/bin /bsd4.3/bin /bsd4.3/usr/ucb /bsd4.3/usr/bin /usr/bsd /bsd43/bin /opt/ansic/bin /usr/ccs/bin /etc /usr/lib /usr/ucblib /lib /usr/ccs/lib /sbin /usr/sbin /usr/libexec'
+ paths='/bin /usr/bin /usr/local/bin /usr/ucb /usr/local /usr/lbin /opt/bin /opt/local/bin /opt/local /opt/lbin /usr/5bin /etc /usr/gnu/bin /usr/new /usr/new/bin /usr/nbin /opt/gnu/bin /opt/new /opt/new/bin /opt/nbin /sys5.3/bin /sys5.3/usr/bin /bsd4.3/bin /bsd4.3/usr/ucb /bsd4.3/usr/bin /usr/bsd /bsd43/bin /opt/ansic/bin /usr/ccs/bin /etc /usr/lib /usr/ucblib /lib /usr/ccs/lib /sbin /usr/sbin /usr/libexec /system/gnu_library/bin'
+ for p in '$paths'
+ case "$p_$PATH$p_" in
+ for p in '$paths'
+ case "$p_$PATH$p_" in
+ test -d /usr/bin
+ PATH=/usr/src/perl:/bin:/mingw/bin:/C/Windows/system32:/C/Windows:/usr/bin
+ for p in '$paths'
+ case "$p_$PATH$p_" in
+ test -d /usr/local/bin
+ for p in '$paths'
+ case "$p_$PATH$p_" in
+ test -d /usr/ucb
+ for p in '$paths'
+ case "$p_$PATH$p_" in
+ test -d /usr/local
+ for p in '$paths'
+ case "$p_$PATH$p_" in
+ test -d /usr/lbin
+ for p in '$paths'
+ case "$p_$PATH$p_" in
+ test -d /opt/bin
+ for p in '$paths'
+ case "$p_$PATH$p_" in
+ test -d /opt/local/bin
+ for p in '$paths'
+ case "$p_$PATH$p_" in
+ test -d /opt/local
+ for p in '$paths'
+ case "$p_$PATH$p_" in
+ test -d /opt/lbin
+ for p in '$paths'
+ case "$p_$PATH$p_" in
+ test -d /usr/5bin
+ for p in '$paths'
+ case "$p_$PATH$p_" in
+ test -d /etc
+ PATH=/usr/src/perl:/bin:/mingw/bin:/C/Windows/system32:/C/Windows:/usr/bin:/etc
+ for p in '$paths'
+ case "$p_$PATH$p_" in
+ test -d /usr/gnu/bin
+ for p in '$paths'
+ case "$p_$PATH$p_" in
+ test -d /usr/new
+ for p in '$paths'
+ case "$p_$PATH$p_" in
+ test -d /usr/new/bin
+ for p in '$paths'
+ case "$p_$PATH$p_" in
+ test -d /usr/nbin
+ for p in '$paths'
+ case "$p_$PATH$p_" in
+ test -d /opt/gnu/bin
+ for p in '$paths'
+ case "$p_$PATH$p_" in
+ test -d /opt/new
+ for p in '$paths'
+ case "$p_$PATH$p_" in
+ test -d /opt/new/bin
+ for p in '$paths'
+ case "$p_$PATH$p_" in
+ test -d /opt/nbin
+ for p in '$paths'
+ case "$p_$PATH$p_" in
+ test -d /sys5.3/bin
+ for p in '$paths'
+ case "$p_$PATH$p_" in
+ test -d /sys5.3/usr/bin
+ for p in '$paths'
+ case "$p_$PATH$p_" in
+ test -d /bsd4.3/bin
+ for p in '$paths'
+ case "$p_$PATH$p_" in
+ test -d /bsd4.3/usr/ucb
+ for p in '$paths'
+ case "$p_$PATH$p_" in
+ test -d /bsd4.3/usr/bin
+ for p in '$paths'
+ case "$p_$PATH$p_" in
+ test -d /usr/bsd
+ for p in '$paths'
+ case "$p_$PATH$p_" in
+ test -d /bsd43/bin
+ for p in '$paths'
+ case "$p_$PATH$p_" in
+ test -d /opt/ansic/bin
+ for p in '$paths'
+ case "$p_$PATH$p_" in
+ test -d /usr/ccs/bin
+ for p in '$paths'
+ case "$p_$PATH$p_" in
+ for p in '$paths'
+ case "$p_$PATH$p_" in
+ test -d /usr/lib
+ PATH=/usr/src/perl:/bin:/mingw/bin:/C/Windows/system32:/C/Windows:/usr/bin:/etc:/usr/lib
+ for p in '$paths'
+ case "$p_$PATH$p_" in
+ test -d /usr/ucblib
+ for p in '$paths'
+ case "$p_$PATH$p_" in
+ test -d /lib
+ PATH=/usr/src/perl:/bin:/mingw/bin:/C/Windows/system32:/C/Windows:/usr/bin:/etc:/usr/lib:/lib
+ for p in '$paths'
+ case "$p_$PATH$p_" in
+ test -d /usr/ccs/lib
+ for p in '$paths'
+ case "$p_$PATH$p_" in
+ test -d /sbin
+ PATH=/usr/src/perl:/bin:/mingw/bin:/C/Windows/system32:/C/Windows:/usr/bin:/etc:/usr/lib:/lib:/sbin
+ for p in '$paths'
+ case "$p_$PATH$p_" in
+ test -d /usr/sbin
+ PATH=/usr/src/perl:/bin:/mingw/bin:/C/Windows/system32:/C/Windows:/usr/bin:/etc:/usr/lib:/lib:/sbin:/usr/sbin
+ for p in '$paths'
+ case "$p_$PATH$p_" in
+ test -d /usr/libexec
+ for p in '$paths'
+ case "$p_$PATH$p_" in
+ test -d /system/gnu_library/bin
+ PATH=.:/usr/src/perl:/bin:/mingw/bin:/C/Windows/system32:/C/Windows:/usr/bin:/etc:/usr/lib:/lib:/sbin:/usr/sbin
+ export PATH
+ : shall we be using 'ksh?'
+ inksh=
+ needksh=
+ avoidksh=
+ newsh=/bin/ksh
+ changesh=
+ test -f /hp-ux -a -f /bin/ksh
+ test -d /usr/lpp -a -f /usr/bin/bsh -a -f /usr/bin/uname
+ test -f /osf_boot -a -f /usr/sbin/setld
+ case "$inksh/$needksh" in
+ case "$inksh/$avoidksh" in
+ case "$inksh/$needksh-$avoidksh-" in
+ case "$changesh" in
+ : if needed set CDPATH to a harmless value that is not chatty
+ : avoid bash 2.02 problems with empty CDPATH.
+ case "$CDPATH" in
+ : Configure runs within the UU subdirectory
+ test -d UU
+ mkdir UU
+ cd UU
+ rm -f './*'
+ ccname=
+ ccversion=
+ ccsymbols=
+ cppccsymbols=
+ cppsymbols=
+ from=
+ run=
+ targetarch=
+ to=
+ usecrosscompile=
+ mistrustnm=
+ perllibs=
+ dynamic_ext=
+ extensions=
+ known_extensions=
+ nonxs_ext=
+ static_ext=
+ useopcode=
+ useposix=
+ extras=
+ d_bsd=
+ d_eunice=
+ d_xenix=
+ eunicefix=
+ Mcc=
+ ar=
+ awk=
+ bash=
+ bison=
+ byacc=
+ cat=
+ chgrp=
+ chmod=
+ chown=
+ comm=
+ compress=
+ cp=
+ cpio=
+ cpp=
+ csh=
+ date=
+ echo=
+ egrep=
+ emacs=
+ expr=
+ find=
+ flex=
+ gmake=
+ grep=
+ gzip=
+ inews=
+ ksh=
+ less=
+ line=
+ lint=
+ ln=
+ lp=
+ lpr=
+ ls=
+ mail=
+ mailx=
+ make=
+ mkdir=
+ more=
+ mv=
+ nm=
+ nroff=
+ perl=
+ pg=
+ pmake=
+ pr=
+ rm=
+ rmail=
+ sed=
+ sendmail=
+ shar=
+ sleep=
+ smail=
+ sort=
+ submit=
+ tail=
+ tar=
+ tbl=
+ tee=
+ test=
+ touch=
+ tr=
+ troff=
+ uname=
+ uniq=
+ uuname=
+ vi=
+ zcat=
+ zip=
+ full_ar=
+ full_sed=
+ libswanted=
+ hint=
+ myuname=
+ osname=
+ osvers=
+ Author=
+ Date=
+ Header=
+ Id=
+ Locker=
+ Log=
+ RCSfile=
+ Revision=
+ Source=
+ State=
+ _a=
+ _exe=
+ _o=
+ archobjs=
+ exe_ext=
+ firstmakefile=
+ lib_ext=
+ obj_ext=
+ path_sep=
+ afs=
+ afsroot=
+ alignbytes=
+ ansi2knr=
+ archlib=
+ archlibexp=
+ d_archlib=
+ installarchlib=
+ archname=
+ myarchname=
+ d_atolf=
+ d_atoll=
+ baserev=
+ bin=
+ binexp=
+ installbin=
+ byteorder=
+ cc=
+ ccflags=
+ cppflags=
+ ldflags=
+ lkflags=
+ locincpth=
+ optimize=
+ cf_email=
+ cf_by=
+ cf_time=
+ charsize=
+ contains=
+ cpp_stuff=
+ cpplast=
+ cppminus=
+ cpprun=
+ cppstdin=
+ d__fwalk=
+ d_access=
+ d_accessx=
+ d_aintl=
+ d_alarm=
+ asctime_r_proto=
+ d_asctime_r=
+ d_attribute_format=
+ d_attribute_malloc=
+ d_attribute_nonnull=
+ d_attribute_noreturn=
+ d_attribute_pure=
+ d_attribute_unused=
+ d_attribute_warn_unused_result=
+ d_bcmp=
+ d_bcopy=
+ d_bzero=
+ d_casti32=
+ castflags=
+ d_castneg=
+ d_chown=
+ d_chroot=
+ d_chsize=
+ d_class=
+ d_clearenv=
+ d_closedir=
+ d_void_closedir=
+ d_cmsghdr_s=
+ d_const=
+ d_copysignl=
+ cryptlib=
+ d_crypt=
+ crypt_r_proto=
+ d_crypt_r=
+ d_csh=
+ full_csh=
+ ctermid_r_proto=
+ d_ctermid_r=
+ ctime_r_proto=
+ d_ctime_r=
+ d_cuserid=
+ d_dbl_dig=
+ d_dbminitproto=
+ d_difftime=
+ d_dirfd=
+ d_dlerror=
+ d_dlopen=
+ d_dlsymun=
+ d_dosuid=
+ d_suidsafe=
+ d_drand48_r=
+ drand48_r_proto=
+ d_drand48proto=
+ d_dup2=
+ d_eaccess=
+ d_endgrent=
+ d_endgrent_r=
+ endgrent_r_proto=
+ d_endhent=
+ d_endhostent_r=
+ endhostent_r_proto=
+ d_endnent=
+ d_endnetent_r=
+ endnetent_r_proto=
+ d_endpent=
+ d_endprotoent_r=
+ endprotoent_r_proto=
+ d_endpwent=
+ d_endpwent_r=
+ endpwent_r_proto=
+ d_endsent=
+ d_endservent_r=
+ endservent_r_proto=
+ d_faststdio=
+ d_fchdir=
+ d_fchmod=
+ d_fchown=
+ d_fcntl=
+ d_fcntl_can_lock=
+ d_fd_macros=
+ d_fd_set=
+ d_fds_bits=
+ d_fgetpos=
+ d_finite=
+ d_finitel=
+ d_flexfnam=
+ d_flock=
+ d_flockproto=
+ d_fork=
+ d_fp_class=
+ d_fpclass=
+ d_fpclassify=
+ d_fpclassl=
+ d_fpos64_t=
+ d_frexpl=
+ d_fs_data_s=
+ d_fseeko=
+ d_fsetpos=
+ d_fstatfs=
+ d_fsync=
+ d_ftello=
+ d_ftime=
+ d_gettimeod=
+ d_futimes=
+ d_Gconvert=
+ d_getcwd=
+ d_getespwnam=
+ d_getfsstat=
+ d_getgrent=
+ d_getgrent_r=
+ getgrent_r_proto=
+ d_getgrgid_r=
+ getgrgid_r_proto=
+ d_getgrnam_r=
+ getgrnam_r_proto=
+ d_getgrps=
+ d_gethbyaddr=
+ d_gethbyname=
+ d_gethent=
+ aphostname=
+ d_gethname=
+ d_phostname=
+ d_uname=
+ d_gethostbyaddr_r=
+ gethostbyaddr_r_proto=
+ d_gethostbyname_r=
+ gethostbyname_r_proto=
+ d_gethostent_r=
+ gethostent_r_proto=
+ d_gethostprotos=
+ d_getitimer=
+ d_getlogin=
+ d_getlogin_r=
+ getlogin_r_proto=
+ d_getmnt=
+ d_getmntent=
+ d_getnbyaddr=
+ d_getnbyname=
+ d_getnent=
+ d_getnetbyaddr_r=
+ getnetbyaddr_r_proto=
+ d_getnetbyname_r=
+ getnetbyname_r_proto=
+ d_getnetent_r=
+ getnetent_r_proto=
+ d_getnetprotos=
+ d_getpagsz=
+ d_getpent=
+ d_getpgid=
+ d_getpgrp2=
+ d_bsdgetpgrp=
+ d_getpgrp=
+ d_getppid=
+ d_getprior=
+ d_getpbyname=
+ d_getpbynumber=
+ d_getprotobyname_r=
+ getprotobyname_r_proto=
+ d_getprotobynumber_r=
+ getprotobynumber_r_proto=
+ d_getprotoent_r=
+ getprotoent_r_proto=
+ d_getprotoprotos=
+ d_getprpwnam=
+ d_getpwent=
+ d_getpwent_r=
+ getpwent_r_proto=
+ d_getpwnam_r=
+ getpwnam_r_proto=
+ d_getpwuid_r=
+ getpwuid_r_proto=
+ d_getsent=
+ d_getservbyname_r=
+ getservbyname_r_proto=
+ d_getservbyport_r=
+ getservbyport_r_proto=
+ d_getservent_r=
+ getservent_r_proto=
+ d_getservprotos=
+ d_getspnam=
+ d_getspnam_r=
+ getspnam_r_proto=
+ d_getsbyname=
+ d_getsbyport=
+ d_gmtime_r=
+ gmtime_r_proto=
+ d_gnulibc=
+ gnulibc_version=
+ d_hasmntopt=
+ d_htonl=
+ d_ilogbl=
+ d_inetaton=
+ d_int64_t=
+ d_isascii=
+ d_isfinite=
+ d_isinf=
+ d_isnan=
+ d_isnanl=
+ d_killpg=
+ d_lchown=
+ d_ldbl_dig=
+ d_libm_lib_version=
+ d_link=
+ d_localtime_r=
+ localtime_r_proto=
+ d_locconv=
+ d_lockf=
+ d_longdbl=
+ longdblsize=
+ d_longlong=
+ longlongsize=
+ d_lseekproto=
+ d_lstat=
+ d_madvise=
+ d_malloc_good_size=
+ d_malloc_size=
+ d_mblen=
+ d_mbstowcs=
+ d_mbtowc=
+ d_memchr=
+ d_memcmp=
+ d_memcpy=
+ d_memmove=
+ d_memset=
+ d_mkdir=
+ d_mkdtemp=
+ d_mkfifo=
+ d_mkstemp=
+ d_mkstemps=
+ d_mktime=
+ d_mmap=
+ mmaptype=
+ d_modfl=
+ d_modfl_pow32_bug=
+ d_modflproto=
+ d_mprotect=
+ d_msg=
+ d_msgctl=
+ d_msgget=
+ d_msghdr_s=
+ d_msgrcv=
+ d_msgsnd=
+ d_msync=
+ d_munmap=
+ d_nice=
+ d_nl_langinfo=
+ d_off64_t=
+ d_open3=
+ d_fpathconf=
+ d_pathconf=
+ d_pause=
+ d_pipe=
+ d_poll=
+ d_portable=
+ d_procselfexe=
+ procselfexe=
+ d_old_pthread_create_joinable=
+ old_pthread_create_joinable=
+ d_pthread_atfork=
+ d_pthread_attr_setscope=
+ d_pthread_yield=
+ d_sched_yield=
+ sched_yield=
+ d_qgcvt=
+ d_random_r=
+ random_r_proto=
+ d_readdir64_r=
+ readdir64_r_proto=
+ d_readdir=
+ d_rewinddir=
+ d_seekdir=
+ d_telldir=
+ d_readdir_r=
+ readdir_r_proto=
+ d_readlink=
+ d_readv=
+ d_recvmsg=
+ d_rename=
+ d_rmdir=
+ d_safebcpy=
+ d_safemcpy=
+ d_sanemcmp=
+ d_sbrkproto=
+ d_scalbnl=
+ d_select=
+ d_sem=
+ d_semctl=
+ d_semget=
+ d_semop=
+ d_sendmsg=
+ d_setegid=
+ d_seteuid=
+ d_setgrent=
+ d_setgrent_r=
+ setgrent_r_proto=
+ d_setgrps=
+ d_sethent=
+ d_sethostent_r=
+ sethostent_r_proto=
+ d_setitimer=
+ d_setlinebuf=
+ d_setlocale=
+ d_setlocale_r=
+ setlocale_r_proto=
+ d_setnent=
+ d_setnetent_r=
+ setnetent_r_proto=
+ d_setpent=
+ d_setpgid=
+ d_setpgrp2=
+ d_bsdsetpgrp=
+ d_setpgrp=
+ d_setprior=
+ d_setproctitle=
+ d_setprotoent_r=
+ setprotoent_r_proto=
+ d_setpwent=
+ d_setpwent_r=
+ setpwent_r_proto=
+ d_setregid=
+ d_setresgid=
+ d_setresuid=
+ d_setreuid=
+ d_setrgid=
+ d_setruid=
+ d_setsent=
+ d_setservent_r=
+ setservent_r_proto=
+ d_setsid=
+ d_setvbuf=
+ d_sfio=
+ usesfio=
+ d_shm=
+ d_shmat=
+ d_shmatprototype=
+ shmattype=
+ d_shmctl=
+ d_shmdt=
+ d_shmget=
+ d_sigaction=
+ d_sigprocmask=
+ d_sigsetjmp=
+ usesitecustomize=
+ d_sockatmark=
+ d_sockatmarkproto=
+ d_msg_ctrunc=
+ d_msg_dontroute=
+ d_msg_oob=
+ d_msg_peek=
+ d_msg_proxy=
+ d_oldsock=
+ d_scm_rights=
+ d_socket=
+ d_sockpair=
+ sockethdr=
+ socketlib=
+ d_socklen_t=
+ d_socks5_init=
+ d_sprintf_returns_strlen=
+ d_sqrtl=
+ d_srand48_r=
+ srand48_r_proto=
+ d_srandom_r=
+ srandom_r_proto=
+ d_sresgproto=
+ d_sresuproto=
+ d_statblks=
+ d_statfs_f_flags=
+ d_statfs_s=
+ d_fstatvfs=
+ d_statvfs=
+ d_stdio_cnt_lval=
+ d_stdio_ptr_lval=
+ d_stdio_ptr_lval_nochange_cnt=
+ d_stdio_ptr_lval_sets_cnt=
+ d_stdiobase=
+ d_stdstdio=
+ stdio_base=
+ stdio_bufsiz=
+ stdio_cnt=
+ stdio_filbuf=
+ stdio_ptr=
+ d_index=
+ d_strchr=
+ d_strcoll=
+ d_strctcpy=
+ d_strerrm=
+ d_strerror=
+ d_sysernlst=
+ d_syserrlst=
+ d_strerror_r=
+ strerror_r_proto=
+ d_strftime=
+ d_strlcat=
+ d_strlcpy=
+ d_strtod=
+ d_strtol=
+ d_strtold=
+ d_strtoll=
+ d_strtoq=
+ d_strtoul=
+ d_strtoull=
+ d_strtouq=
+ d_strxfrm=
+ d_symlink=
+ d_syscall=
+ d_syscallproto=
+ d_sysconf=
+ d_system=
+ d_tcgetpgrp=
+ d_tcsetpgrp=
+ d_telldirproto=
+ d_time=
+ timetype=
+ clocktype=
+ d_times=
+ d_tmpnam_r=
+ tmpnam_r_proto=
+ d_truncate=
+ d_ttyname_r=
+ ttyname_r_proto=
+ d_tzname=
+ d_u32align=
+ d_ualarm=
+ d_umask=
+ d_semctl_semid_ds=
+ d_semctl_semun=
+ d_union_semun=
+ d_unordered=
+ d_unsetenv=
+ d_usleep=
+ d_usleepproto=
+ d_ustat=
+ d_vfork=
+ usevfork=
+ d_voidsig=
+ signal_t=
+ d_volatile=
+ d_charvspr=
+ d_vprintf=
+ d_wait4=
+ d_waitpid=
+ d_wcstombs=
+ d_wctomb=
+ d_writev=
+ dlext=
+ cccdlflags=
+ ccdlflags=
+ dlsrc=
+ ld=
+ lddlflags=
+ usedl=
+ doublesize=
+ ebcdic=
+ fflushNULL=
+ fflushall=
+ fpossize=
+ fpostype=
+ gccansipedantic=
+ gccosandvers=
+ gccversion=
+ gidformat=
+ gidsign=
+ gidsize=
+ gidtype=
+ groupstype=
+ h_fcntl=
+ h_sysfile=
+ html1dir=
+ html1direxp=
+ installhtml1dir=
+ html3dir=
+ html3direxp=
+ installhtml3dir=
+ i_arpainet=
+ i_crypt=
+ db_hashtype=
+ db_prefixtype=
+ db_version_major=
+ db_version_minor=
+ db_version_patch=
+ i_db=
+ i_dbm=
+ i_rpcsvcdbm=
+ d_dirnamlen=
+ direntrytype=
+ i_dirent=
+ i_dld=
+ i_dlfcn=
+ i_fcntl=
+ i_float=
+ i_fp=
+ i_fp_class=
+ i_gdbm=
+ d_grpasswd=
+ i_grp=
+ i_ieeefp=
+ i_inttypes=
+ i_langinfo=
+ i_libutil=
+ i_limits=
+ i_locale=
+ i_machcthr=
+ i_malloc=
+ i_math=
+ i_memory=
+ i_mntent=
+ i_ndbm=
+ i_netdb=
+ i_neterrno=
+ i_netinettcp=
+ i_niin=
+ i_sysin=
+ i_poll=
+ i_prot=
+ i_pthread=
+ d_pwage=
+ d_pwchange=
+ d_pwclass=
+ d_pwcomment=
+ d_pwexpire=
+ d_pwgecos=
+ d_pwpasswd=
+ d_pwquota=
+ i_pwd=
+ i_sfio=
+ i_shadow=
+ i_socks=
+ i_stddef=
+ i_stdlib=
+ i_string=
+ strings=
+ i_sunmath=
+ i_sysaccess=
+ i_sysdir=
+ i_sysfile=
+ d_voidtty=
+ i_bsdioctl=
+ i_sysfilio=
+ i_sysioctl=
+ i_syssockio=
+ i_syslog=
+ i_sysmman=
+ i_sysmode=
+ i_sysmount=
+ i_sysndir=
+ i_sysparam=
+ i_sysresrc=
+ i_syssecrt=
+ i_sysselct=
+ i_sysstat=
+ i_sysstatfs=
+ i_sysstatvfs=
+ i_systimes=
+ i_systypes=
+ i_sysuio=
+ i_sysun=
+ i_sysutsname=
+ i_sysvfs=
+ i_syswait=
+ i_sgtty=
+ i_termio=
+ i_termios=
+ d_tm_tm_gmtoff=
+ d_tm_tm_zone=
+ i_systime=
+ i_systimek=
+ i_time=
+ timeincl=
+ i_unistd=
+ i_ustat=
+ i_utime=
+ i_values=
+ i_stdarg=
+ i_varargs=
+ i_varhdr=
+ i_vfork=
+ inc_version_list=
+ inc_version_list_init=
+ installprefix=
+ installprefixexp=
+ installstyle=
+ installusrbinperl=
+ intsize=
+ longsize=
+ shortsize=
+ issymlink=
+ libc=
+ ldlibpthname=
+ libperl=
+ shrpenv=
+ useshrplib=
+ glibpth=
+ libpth=
+ loclibpth=
+ plibpth=
+ xlibpth=
+ ignore_versioned_solibs=
+ libs=
+ libsdirs=
+ libsfiles=
+ libsfound=
+ libspath=
+ lns=
+ d_PRIEUldbl=
+ d_PRIFUldbl=
+ d_PRIGUldbl=
+ d_PRIeldbl=
+ d_PRIfldbl=
+ d_PRIgldbl=
+ d_SCNfldbl=
+ sPRIEUldbl=
+ sPRIFUldbl=
+ sPRIGUldbl=
+ sPRIeldbl=
+ sPRIfldbl=
+ sPRIgldbl=
+ sSCNfldbl=
+ lseeksize=
+ lseektype=
+ make_set_make=
+ d_mymalloc=
+ freetype=
+ mallocobj=
+ mallocsrc=
+ malloctype=
+ usemallocwrap=
+ usemymalloc=
+ installman1dir=
+ man1dir=
+ man1direxp=
+ man1ext=
+ installman3dir=
+ man3dir=
+ man3direxp=
+ man3ext=
+ modetype=
+ multiarch=
+ mydomain=
+ myhostname=
+ phostname=
+ c=
+ n=
+ d_eofnblk=
+ eagain=
+ o_nonblock=
+ rd_nodata=
+ need_va_copy=
+ netdb_hlen_type=
+ netdb_host_type=
+ netdb_name_type=
+ netdb_net_type=
+ groupcat=
+ hostcat=
+ passcat=
+ orderlib=
+ ranlib=
+ d_perl_otherlibdirs=
+ otherlibdirs=
+ package=
+ spackage=
+ pager=
+ api_revision=
+ api_subversion=
+ api_version=
+ api_versionstring=
+ patchlevel=
+ perl_patchlevel=
+ revision=
+ subversion=
+ version=
+ version_patchlevel_string=
+ perl5=
+ perladmin=
+ perlpath=
+ d_nv_preserves_uv=
+ d_nv_zero_is_allbits_zero=
+ i16size=
+ i16type=
+ i32size=
+ i32type=
+ i64size=
+ i64type=
+ i8size=
+ i8type=
+ ivsize=
+ ivtype=
+ nv_preserves_uv_bits=
+ nvsize=
+ nvtype=
+ u16size=
+ u16type=
+ u32size=
+ u32type=
+ u64size=
+ u64type=
+ u8size=
+ u8type=
+ uvsize=
+ uvtype=
+ ivdformat=
+ nvEUformat=
+ nvFUformat=
+ nvGUformat=
+ nveformat=
+ nvfformat=
+ nvgformat=
+ uvXUformat=
+ uvoformat=
+ uvuformat=
+ uvxformat=
+ pidtype=
+ prefix=
+ prefixexp=
+ installprivlib=
+ privlib=
+ privlibexp=
+ prototype=
+ ptrsize=
+ d_PRIXU64=
+ d_PRId64=
+ d_PRIi64=
+ d_PRIo64=
+ d_PRIu64=
+ d_PRIx64=
+ sPRIXU64=
+ sPRId64=
+ sPRIi64=
+ sPRIo64=
+ sPRIu64=
+ sPRIx64=
+ d_quad=
+ quadkind=
+ quadtype=
+ uquadtype=
+ drand01=
+ randbits=
+ randfunc=
+ randseedtype=
+ seedfunc=
+ installscript=
+ scriptdir=
+ scriptdirexp=
+ selectminbits=
+ selecttype=
+ sh=
+ sig_count=
+ sig_name=
+ sig_name_init=
+ sig_num=
+ sig_num_init=
+ sig_size=
+ installsitearch=
+ sitearch=
+ sitearchexp=
+ installsitebin=
+ sitebin=
+ sitebinexp=
+ installsitehtml1dir=
+ sitehtml1dir=
+ sitehtml1direxp=
+ installsitehtml3dir=
+ sitehtml3dir=
+ sitehtml3direxp=
+ installsitelib=
+ sitelib=
+ sitelib_stem=
+ sitelibexp=
+ installsiteman1dir=
+ siteman1dir=
+ siteman1direxp=
+ installsiteman3dir=
+ siteman3dir=
+ siteman3direxp=
+ siteprefix=
+ siteprefixexp=
+ installsitescript=
+ sitescript=
+ sitescriptexp=
+ sizesize=
+ sizetype=
+ so=
+ socksizetype=
+ sharpbang=
+ shsharp=
+ spitshell=
+ src=
+ ssizetype=
+ startperl=
+ startsh=
+ stdchar=
+ d_stdio_stream_array=
+ stdio_stream_array=
+ sysman=
+ trnl=
+ uidformat=
+ uidsign=
+ uidsize=
+ uidtype=
+ archname64=
+ use64bitall=
+ use64bitint=
+ usefaststdio=
+ ccflags_uselargefiles=
+ ldflags_uselargefiles=
+ libswanted_uselargefiles=
+ uselargefiles=
+ uselongdouble=
+ usemorebits=
+ usemultiplicity=
+ nm_opt=
+ nm_so_opt=
+ runnm=
+ usenm=
+ useperlio=
+ usesocks=
+ d_oldpthreads=
+ use5005threads=
+ useithreads=
+ usereentrant=
+ usethreads=
+ incpath=
+ mips_type=
+ usrinc=
+ d_vendorarch=
+ installvendorarch=
+ vendorarch=
+ vendorarchexp=
+ d_vendorbin=
+ installvendorbin=
+ vendorbin=
+ vendorbinexp=
+ installvendorhtml1dir=
+ vendorhtml1dir=
+ vendorhtml1direxp=
+ installvendorhtml3dir=
+ vendorhtml3dir=
+ vendorhtml3direxp=
+ d_vendorlib=
+ installvendorlib=
+ vendorlib=
+ vendorlib_stem=
+ vendorlibexp=
+ installvendorman1dir=
+ vendorman1dir=
+ vendorman1direxp=
+ installvendorman3dir=
+ vendorman3dir=
+ vendorman3direxp=
+ usevendorprefix=
+ vendorprefix=
+ vendorprefixexp=
+ d_vendorscript=
+ installvendorscript=
+ vendorscript=
+ vendorscriptexp=
+ versiononly=
+ defvoidused=
+ voidflags=
+ yacc=
+ yaccflags=
+ CONFIG=
+ define=define
+ undef=undef
+ smallmach='pdp11 i8086 z8000 i80286 iAPX286'
+ rmlist=
+ : We must find out about Eunice early
+ eunicefix=:
+ test -f /etc/unixtovms
+ test -f /etc/unixtovms.exe
+ : Set executable suffix now -- needed before hints available
+ test -f /libs/version.library
+ test -f /system/gnu_library/bin/ar.pm
+ test -n ''
+ test -d c:/. -o -n ''
+ : OS/2 or cygwin
+ _exe=.exe
+ i_whoami=
+ ccname=
+ ccversion=
+ perllibs=
+ : set useposix=false in your hint file to disable the POSIX extension.
+ useposix=true
+ : set useopcode=false in your hint file to disable the Opcode extension.
+ useopcode=true
+ : Trailing extension. Override this in a hint file, if needed.
+ : Extra object files, if any, needed on this platform.
+ archobjs=
+ archname=
+ : Possible local include directories to search.
+ : Set locincpth to '' in a hint file to defeat local include searches.
+ locincpth='/usr/local/include /opt/local/include /usr/gnu/include'
+ locincpth='/usr/local/include /opt/local/include /usr/gnu/include /opt/gnu/include /usr/GNU/include /opt/GNU/include'
+ :
+ : no include file wanted by default
+ inclwanted=
+ groupstype=
+ libnames=
+ : change the next line if compiling for Xenix/286 on Xenix/386
+ xlibpth='/usr/lib/386 /lib/386'
+ : Possible local library directories to search.
+ loclibpth='/usr/local/lib /opt/local/lib /usr/gnu/lib'
+ loclibpth='/usr/local/lib /opt/local/lib /usr/gnu/lib /opt/gnu/lib /usr/GNU/lib /opt/GNU/lib'
+ : general looking path for locating libraries
+ glibpth='/lib /usr/lib /usr/lib/386 /lib/386'
+ glibpth='/lib /usr/lib /usr/lib/386 /lib/386 /usr/ccs/lib /usr/ucblib /usr/local/lib'
+ test -f /usr/shlib/libc.so
+ test -f /shlib/libc.so
+ : Private path used by Configure to find libraries. Its value
+ : is prepended to libpth. This variable takes care of special
+ : machines, like the mips. Usually, it should be empty.
+ plibpth=
+ : default library list
+ libswanted=
+ : some systems want to use only the non-versioned libso:s
+ ignore_versioned_solibs=
+ siteman1dir=
+ siteman3dir=
+ sitescript=
+ archname64=
+ ccflags_uselargefiles=
+ ldflags_uselargefiles=
+ libswanted_uselargefiles=
+ : set usemultiplicity on the Configure command line to enable multiplicity.
+ : set usesocks on the Configure command line to enable socks.
+ : set usethreads on the Configure command line to enable threads.
+ usereentrant=undef
+ : full support for void wanted by default
+ defvoidused=15
+ : List of libraries we want.
+ : If anyone needs extra -lxxx, put those in a hint file.
+ libswanted='sfio socket bind inet nsl nm ndbm gdbm dbm db malloc dl dld ld sun'
+ libswanted='sfio socket bind inet nsl nm ndbm gdbm dbm db malloc dl dld ld sun m crypt sec util c cposix posix ucb bsd BSD'
+ : We probably want to search /usr/shlib before most other libraries.
+ : This is only used by the lib/ExtUtils/MakeMaker.pm routine extliblist.
++ echo ' /lib /usr/lib /usr/lib/386 /lib/386 /usr/ccs/lib /usr/ucblib /usr/local/lib '
++ sed -e 's! /usr/shlib ! !'
+ glibpth=' /lib /usr/lib /usr/lib/386 /lib/386 /usr/ccs/lib /usr/ucblib /usr/local/lib '
+ glibpth='/usr/shlib  /lib /usr/lib /usr/lib/386 /lib/386 /usr/ccs/lib /usr/ucblib /usr/local/lib '
+ : Do not use vfork unless overridden by a hint file.
+ usevfork=false
+ : Find the basic shell for Bourne shell scripts
+ case "$sh" in
+ case "$SYSTYPE" in
+ xxx=/bin/sh
+ test -f /bin/sh
+ sh=/bin/sh
+ case "$sh" in
+ : see if sh knows
++ /bin/sh -c '#'
+ shsharp=true
+ spitshell=cat
+ xcat=/bin/cat
+ test -f /bin/cat.exe
+ test '!' -f /bin/cat.exe
+ echo '#!/bin/cat'
+ : sharp
+ chmod +x sharp
+ ./sharp
+ test -s today
+ sharpbang='#!'
+ rm -f sharp today
+ : figure out how to guarantee sh startup
+ case "$startsh" in
+ startsh='#!/bin/sh'
+ cat
+ chmod +x sharp
+ : sharp
+ ./sharp
+ : echo 'Yup, it does.'
+ rm -f sharp
+ : Save command line options in file UU/cmdline.opt for later use in
+ : generating config.sh.
+ cat
+ argn=1
+ args_exp=
+ args_sep=
+ for arg in '"$@"'
+ cat
+ cat
+ sed -e 's/'\''/'\''"'\''"'\''/g'
++ cat cmdl.opt
+ arg_exp=-de
+ args_exp=''\''-de'\'''
++ expr 1 + 1
+ argn=2
+ args_sep=' '
+ for arg in '"$@"'
+ cat
+ cat
+ sed -e 's/'\''/'\''"'\''"'\''/g'
++ cat cmdl.opt
+ arg_exp=-Duse64bitint
+ args_exp=''\''-de'\'' '\''-Duse64bitint'\'''
++ expr 2 + 1
+ argn=3
+ args_sep=' '
+ for arg in '"$@"'
+ cat
+ cat
+ sed -e 's/'\''/'\''"'\''"'\''/g'
++ cat cmdl.opt
+ arg_exp=-Dusesitecustomize
+ args_exp=''\''-de'\'' '\''-Duse64bitint'\'' '\''-Dusesitecustomize'\'''
++ expr 3 + 1
+ argn=4
+ args_sep=' '
+ rm -f cmdl.opt
+ : produce awk script to parse command line options
+ cat
+ : process the command line options
++ for arg in '"$@"'
++ echo X-de
++ for arg in '"$@"'
++ echo X-Duse64bitint
++ for arg in '"$@"'
++ echo X-Dusesitecustomize
++ sed -e s/X//
++ awk -f options.awk
+ set X -d -e -D ''\''use64bitint'\''' -D ''\''usesitecustomize'\'''
+ eval 'set X -d -e -D '\''use64bitint'\'' -D '\''usesitecustomize'\'''
++ set X -d -e -D use64bitint -D usesitecustomize
+ shift
+ rm -f options.awk
+ : set up default values
+ fastread=
+ reuseval=false
+ config_sh=
+ alldone=
+ error=
+ silent=
+ extractsh=
+ override=
+ knowitall=
+ rm -f optdef.sh posthint.sh
+ cat
+ : option parsing
+ test 6 -gt 0
+ case "$1" in
+ shift
+ fastread=yes
+ test 5 -gt 0
+ case "$1" in
+ shift
+ alldone=cont
+ test 4 -gt 0
+ case "$1" in
+ shift
+ case "$1" in
+ echo 'use64bitint='\''define'\'''
+ shift
+ test 2 -gt 0
+ case "$1" in
+ shift
+ case "$1" in
+ echo 'usesitecustomize='\''define'\'''
+ shift
+ test 0 -gt 0
+ case "$error" in
+ : Sanity checks
+ case "$fastread$alldone" in
+ exec
+ case "$silent" in
+ : run the defines and the undefines, if any, but leave the file out there...
+ touch optdef.sh
+ . ./optdef.sh
++ use64bitint=define
++ usesitecustomize=define
+ : create the posthint manipulation script and leave the file out there...
+ touch posthint.sh
+ : set package name
+ package=perl5
++ echo perl5
++ sed -e 's/^\(.\).*/\1/'
+ first=p
++ echo perl5
++ sed -e 's/^.\(.*\)/\1/'
+ last=erl5
+ case "`echo AbyZ | tr '[:lower:]' '[:upper:]' 2>/dev/null`" in
++ echo AbyZ
++ tr '[:lower:]' '[:upper:]'
++ echo p
++ tr '[:lower:]' '[:upper:]'
+ spackage=Perl5
+ : Some greps do not return status, grrr.
+ echo grimblepritz
+ grep blurfldyick grimble
+ grep grimblepritz grimble
+ contains=grep
+ rm -f grimble
+ : the following should work in any shell
+ case "$contains" in
+ : Find the path to the source tree
+ case "$src" in
+ case "$0" in
++ echo ./Configure
++ sed -e 's%/[^/][^/]*$%%'
+ src=.
+ case "$src" in
+ case "$src" in
+ rsrc=../.
+ test -f .././Configure
+ grep '^package=perl5$' .././Configure
+ : found it, so we are ok.
+ case "$rsrc" in
+ rsrc=..
+ : script used to extract .SH files with variable substitutions
+ cat
+ : extract files and exit if asked to do so
+ case "$extractsh" in
+ : Eunice requires ' ' instead of , can you believe it
+ echo ' '
 
+ : Here we go...
+ echo 'Beginning of configuration questions for perl5.'
Beginning of configuration questions for perl5.
+ trap 'echo " "; test -d ../UU && rm -rf X $rmlist; exit 1' 1 2 3 15
+ : first determine how to suppress newline on echo command
+ echo ' '
 
+ echo 'Checking echo to see how to suppress newlines...'
Checking echo to see how to suppress newlines...
+ echo 'hi there\c'
+ echo ' '
+ grep c .echotmp
+ echo '...using -n.'
...using -n.
+ n=-n
+ c=
+ echo -n 'The star should be here-->'
The star should be here-->+ echo '*'
*
+ rm -f .echotmp
+ : Now test for existence of everything in MANIFEST
+ echo ' '
 
+ test -f ../MANIFEST
+ echo 'First let'\''s make sure your kit is complete.  Checking...'
First let's make sure your kit is complete.  Checking...
+ awk '$1 !~ /PACK[A-Z]+/ {print $1}' ../MANIFEST
+ split -l 50
+ rm -f missing
++ pwd
+ tmppwd=/usr/src/perl/perl-5.8.8/UU
+ for filelist in 'x??'
+ cd ..
++ cat /usr/src/perl/perl-5.8.8/UU/xaa
+ ls apollo/netinet/in.h Artistic AUTHORS autodoc.pl av.c av.h beos/beos.c beos/beosish.h beos/nm.c bytecode.pl cc_runtime.h cflags.SH Changes Changes5.000 Changes5.001 Changes5.002 Changes5.003 Changes5.004 Changes5.005 Changes5.6 Changes5.8 Changes5.8.1 Changes5.8.2 Changes5.8.3 Changes5.8.4 Changes5.8.5 Changes5.8.6 Changes5.8.7 config_h.SH configpm Configure configure.com configure.gnu cop.h Copying Cross/config Cross/config.sh-arm-linux Cross/generate_config_sh Cross/installperl.patch Cross/Makefile Cross/Makefile.SH.patch Cross/README Cross/TODO Cross/warp cv.h cygwin/cygwin.c cygwin/ld2.in cygwin/Makefile.SHs cygwin/perlld.in deb.c
+ for filelist in 'x??'
+ cd ..
++ cat /usr/src/perl/perl-5.8.8/UU/xab
+ ls djgpp/config.over djgpp/configure.bat djgpp/djgpp.c djgpp/djgpp.h djgpp/djgppsed.sh djgpp/fixpmain doio.c doop.c dosish.h dump.c emacs/cperl-mode.el emacs/e2ctags.pl emacs/ptags embed.fnc embed.h embed.pl embedvar.h epoc/config.sh epoc/createpkg.pl epoc/epoc.c epoc/epocish.c epoc/epocish.h epoc/epoc_stubs.c epoc/link.pl ext/attrs/attrs.pm ext/attrs/attrs.xs ext/attrs/Makefile.PL ext/attrs/t/attrs.t ext/B/B/Asmdata.pm ext/B/B/assemble ext/B/B/Assembler.pm ext/B/B/Bblock.pm ext/B/B/Bytecode.pm ext/B/B/cc_harness ext/B/B/CC.pm ext/B/B/Concise.pm ext/B/B/C.pm ext/B/B/Debug.pm ext/B/B/Deparse.pm ext/B/B/disassemble ext/B/B/Disassembler.pm ext/B/B/Lint.pm ext/B/B/makeliblinks ext/B/B.pm ext/B/B/Showlex.pm ext/B/B/Stackobj.pm ext/B/B/Stash.pm ext/B/B/Terse.pm ext/B/B/Xref.pm ext/B/B.xs
+ for filelist in 'x??'
+ cd ..
++ cat /usr/src/perl/perl-5.8.8/UU/xac
+ ls ext/B/C/C.xs ext/B/C/Makefile.PL ext/B/defsubs_h.PL ext/B/hints/darwin.pl ext/B/hints/openbsd.pl ext/B/Makefile.PL ext/B/NOTES ext/B/O.pm ext/B/ramblings/cc.notes ext/B/ramblings/curcop.runtime ext/B/ramblings/flip-flop ext/B/ramblings/magic ext/B/ramblings/reg.alloc ext/B/ramblings/runtime.porting ext/B/README ext/B/t/asmdata.t ext/B/t/assembler.t ext/B/t/bblock.t ext/B/t/b.t ext/B/t/bytecode.t ext/B/t/concise.t ext/B/t/concise-xs.t ext/B/t/debug.t ext/B/t/deparse.t ext/B/TESTS ext/B/t/f_map ext/B/t/f_map.t ext/B/t/f_sort ext/B/t/f_sort.t ext/B/t/lint.t ext/B/Todo ext/B/t/OptreeCheck.pm ext/B/t/optree_check.t ext/B/t/optree_concise.t ext/B/t/optree_samples.t ext/B/t/optree_sort.t ext/B/t/optree_specials.t ext/B/t/optree_varinit.t ext/B/t/o.t ext/B/t/showlex.t ext/B/t/stash.t ext/B/t/terse.t ext/B/t/xref.t ext/B/typemap ext/ByteLoader/bytecode.h ext/ByteLoader/ByteLoader.pm ext/ByteLoader/ByteLoader.xs ext/ByteLoader/byterun.c ext/ByteLoader/byterun.h ext/ByteLoader/hints/sunos.pl
+ for filelist in 'x??'
+ cd ..
++ cat /usr/src/perl/perl-5.8.8/UU/xad
+ ls ext/ByteLoader/Makefile.PL ext/Cwd/Changes ext/Cwd/Cwd.xs ext/Cwd/Makefile.PL ext/Cwd/ppport.h ext/Cwd/t/cwd.t ext/Cwd/t/taint.t ext/Cwd/t/win32.t ext/Data/Dumper/Changes ext/Data/Dumper/Dumper.pm ext/Data/Dumper/Dumper.xs ext/Data/Dumper/Makefile.PL ext/Data/Dumper/t/bugs.t ext/Data/Dumper/t/dumper.t ext/Data/Dumper/t/freezer.t ext/Data/Dumper/Todo ext/Data/Dumper/t/overload.t ext/Data/Dumper/t/pair.t ext/DB_File/Changes ext/DB_File/DB_File_BS ext/DB_File/DB_File.pm ext/DB_File/DB_File.xs ext/DB_File/dbinfo ext/DB_File/hints/dynixptx.pl ext/DB_File/hints/sco.pl ext/DB_File/Makefile.PL ext/DB_File/t/db-btree.t ext/DB_File/t/db-hash.t ext/DB_File/t/db-recno.t ext/DB_File/typemap ext/DB_File/version.c ext/Devel/DProf/Changes ext/Devel/DProf/DProf.pm ext/Devel/DProf/DProf.xs ext/Devel/DProf/Makefile.PL ext/Devel/DProf/t/DProf.t ext/Devel/DProf/Todo ext/Devel/Peek/Changes ext/Devel/Peek/Makefile.PL ext/Devel/Peek/Peek.pm ext/Devel/Peek/Peek.xs ext/Devel/Peek/t/Peek.t ext/Devel/PPPort/apicheck_c.PL ext/Devel/PPPort/Changes ext/Devel/PPPort/devel/buildperl.pl ext/Devel/PPPort/devel/mkapidoc.sh ext/Devel/PPPort/devel/mktodo ext/Devel/PPPort/devel/mktodo.pl ext/Devel/PPPort/devel/scanprov ext/Devel/PPPort/HACKERS
+ for filelist in 'x??'
+ cd ..
++ cat /usr/src/perl/perl-5.8.8/UU/xae
+ ls ext/Devel/PPPort/Makefile.PL ext/Devel/PPPort/MANIFEST ext/Devel/PPPort/MANIFEST.SKIP ext/Devel/PPPort/META.yml ext/Devel/PPPort/mktests.PL ext/Devel/PPPort/module2.c ext/Devel/PPPort/module3.c ext/Devel/PPPort/parts/apicheck.pl ext/Devel/PPPort/parts/apidoc.fnc ext/Devel/PPPort/parts/base/5004000 ext/Devel/PPPort/parts/base/5004010 ext/Devel/PPPort/parts/base/5004020 ext/Devel/PPPort/parts/base/5004030 ext/Devel/PPPort/parts/base/5004040 ext/Devel/PPPort/parts/base/5004050 ext/Devel/PPPort/parts/base/5005000 ext/Devel/PPPort/parts/base/5005010 ext/Devel/PPPort/parts/base/5005020 ext/Devel/PPPort/parts/base/5005030 ext/Devel/PPPort/parts/base/5005040 ext/Devel/PPPort/parts/base/5006000 ext/Devel/PPPort/parts/base/5006001 ext/Devel/PPPort/parts/base/5006002 ext/Devel/PPPort/parts/base/5007000 ext/Devel/PPPort/parts/base/5007001 ext/Devel/PPPort/parts/base/5007002 ext/Devel/PPPort/parts/base/5007003 ext/Devel/PPPort/parts/base/5008000 ext/Devel/PPPort/parts/base/5008001 ext/Devel/PPPort/parts/base/5008002 ext/Devel/PPPort/parts/base/5008003 ext/Devel/PPPort/parts/base/5008004 ext/Devel/PPPort/parts/base/5008005 ext/Devel/PPPort/parts/base/5008006 ext/Devel/PPPort/parts/base/5009000 ext/Devel/PPPort/parts/base/5009001 ext/Devel/PPPort/parts/base/5009002 ext/Devel/PPPort/parts/embed.fnc ext/Devel/PPPort/parts/inc/call ext/Devel/PPPort/parts/inc/cop ext/Devel/PPPort/parts/inc/exception ext/Devel/PPPort/parts/inc/format ext/Devel/PPPort/parts/inc/grok ext/Devel/PPPort/parts/inc/limits ext/Devel/PPPort/parts/inc/magic ext/Devel/PPPort/parts/inc/misc ext/Devel/PPPort/parts/inc/mPUSH ext/Devel/PPPort/parts/inc/MY_CXT ext/Devel/PPPort/parts/inc/newCONSTSUB ext/Devel/PPPort/parts/inc/newRV
+ for filelist in 'x??'
+ cd ..
++ cat /usr/src/perl/perl-5.8.8/UU/xaf
+ ls ext/Devel/PPPort/parts/inc/ppphbin ext/Devel/PPPort/parts/inc/ppphdoc ext/Devel/PPPort/parts/inc/ppphtest ext/Devel/PPPort/parts/inc/SvPV ext/Devel/PPPort/parts/inc/sv_xpvf ext/Devel/PPPort/parts/inc/threads ext/Devel/PPPort/parts/inc/uv ext/Devel/PPPort/parts/inc/version ext/Devel/PPPort/parts/ppptools.pl ext/Devel/PPPort/parts/todo/5004000 ext/Devel/PPPort/parts/todo/5004010 ext/Devel/PPPort/parts/todo/5004020 ext/Devel/PPPort/parts/todo/5004030 ext/Devel/PPPort/parts/todo/5004040 ext/Devel/PPPort/parts/todo/5004050 ext/Devel/PPPort/parts/todo/5005000 ext/Devel/PPPort/parts/todo/5005010 ext/Devel/PPPort/parts/todo/5005020 ext/Devel/PPPort/parts/todo/5005030 ext/Devel/PPPort/parts/todo/5005040 ext/Devel/PPPort/parts/todo/5006000 ext/Devel/PPPort/parts/todo/5006001 ext/Devel/PPPort/parts/todo/5006002 ext/Devel/PPPort/parts/todo/5007000 ext/Devel/PPPort/parts/todo/5007001 ext/Devel/PPPort/parts/todo/5007002 ext/Devel/PPPort/parts/todo/5007003 ext/Devel/PPPort/parts/todo/5008000 ext/Devel/PPPort/parts/todo/5008001 ext/Devel/PPPort/parts/todo/5008002 ext/Devel/PPPort/parts/todo/5008003 ext/Devel/PPPort/parts/todo/5008004 ext/Devel/PPPort/parts/todo/5008005 ext/Devel/PPPort/parts/todo/5008006 ext/Devel/PPPort/parts/todo/5009000 ext/Devel/PPPort/parts/todo/5009001 ext/Devel/PPPort/parts/todo/5009002 ext/Devel/PPPort/ppport_h.PL ext/Devel/PPPort/PPPort.pm ext/Devel/PPPort/PPPort_pm.PL ext/Devel/PPPort/PPPort.xs ext/Devel/PPPort/PPPort_xs.PL ext/Devel/PPPort/README ext/Devel/PPPort/soak ext/Devel/PPPort/t/call.t ext/Devel/PPPort/t/cop.t ext/Devel/PPPort/t/exception.t ext/Devel/PPPort/t/grok.t ext/Devel/PPPort/t/limits.t ext/Devel/PPPort/t/magic.t
+ for filelist in 'x??'
+ cd ..
++ cat /usr/src/perl/perl-5.8.8/UU/xag
+ ls ext/Devel/PPPort/t/misc.t ext/Devel/PPPort/t/mPUSH.t ext/Devel/PPPort/t/MY_CXT.t ext/Devel/PPPort/t/newCONSTSUB.t ext/Devel/PPPort/t/newRV.t ext/Devel/PPPort/TODO ext/Devel/PPPort/t/ppphtest.t ext/Devel/PPPort/t/SvPV.t ext/Devel/PPPort/t/sv_xpvf.t ext/Devel/PPPort/t/testutil.pl ext/Devel/PPPort/t/threads.t ext/Devel/PPPort/t/uv.t ext/Devel/PPPort/typemap ext/Digest/MD5/Changes ext/Digest/MD5/hints/dec_osf.pl ext/Digest/MD5/hints/irix_6.pl ext/Digest/MD5/hints/MacOS.pl ext/Digest/MD5/Makefile.PL ext/Digest/MD5/MD5.pm ext/Digest/MD5/MD5.xs ext/Digest/MD5/README ext/Digest/MD5/t/align.t ext/Digest/MD5/t/badfile.t ext/Digest/MD5/t/bits.t ext/Digest/MD5/t/clone.t ext/Digest/MD5/t/files.t ext/Digest/MD5/t/md5-aaa.t ext/Digest/MD5/t/utf8.t ext/Digest/MD5/typemap ext/DynaLoader/dl_aix.xs ext/DynaLoader/dl_beos.xs ext/DynaLoader/dl_dld.xs ext/DynaLoader/dl_dllload.xs ext/DynaLoader/dl_dlopen.xs ext/DynaLoader/dl_dyld.xs ext/DynaLoader/dl_hpux.xs ext/DynaLoader/dl_mac.xs ext/DynaLoader/dl_mpeix.xs ext/DynaLoader/dl_next.xs ext/DynaLoader/dl_none.xs ext/DynaLoader/dlutils.c ext/DynaLoader/dl_vmesa.xs ext/DynaLoader/dl_vms.xs ext/DynaLoader/DynaLoader_pm.PL ext/DynaLoader/hints/aix.pl ext/DynaLoader/hints/gnukfreebsd.pl ext/DynaLoader/hints/gnuknetbsd.pl ext/DynaLoader/hints/linux.pl ext/DynaLoader/hints/netbsd.pl ext/DynaLoader/hints/openbsd.pl
+ for filelist in 'x??'
+ cd ..
++ cat /usr/src/perl/perl-5.8.8/UU/xah
+ ls ext/DynaLoader/Makefile.PL ext/DynaLoader/README ext/DynaLoader/t/XSLoader.t ext/DynaLoader/XSLoader_pm.PL ext/Encode/AUTHORS ext/Encode/bin/enc2xs ext/Encode/bin/piconv ext/Encode/bin/ucm2table ext/Encode/bin/ucmlint ext/Encode/bin/ucmsort ext/Encode/bin/unidump ext/Encode/Byte/Byte.pm ext/Encode/Byte/Makefile.PL ext/Encode/Changes ext/Encode/CN/CN.pm ext/Encode/CN/Makefile.PL ext/Encode/EBCDIC/EBCDIC.pm ext/Encode/EBCDIC/Makefile.PL ext/Encode/encengine.c ext/Encode/Encode/Changes.e2x ext/Encode/Encode/ConfigLocal_PM.e2x ext/Encode/Encode/encode.h ext/Encode/Encode/Makefile_PL.e2x ext/Encode/Encode.pm ext/Encode/Encode/_PM.e2x ext/Encode/Encode/README.e2x ext/Encode/Encode/_T.e2x ext/Encode/Encode.xs ext/Encode/encoding.pm ext/Encode/JP/JP.pm ext/Encode/JP/Makefile.PL ext/Encode/KR/KR.pm ext/Encode/KR/Makefile.PL ext/Encode/lib/Encode/Alias.pm ext/Encode/lib/Encode/CJKConstants.pm ext/Encode/lib/Encode/CN/HZ.pm ext/Encode/lib/Encode/Config.pm ext/Encode/lib/Encode/Encoder.pm ext/Encode/lib/Encode/Encoding.pm ext/Encode/lib/Encode/Guess.pm ext/Encode/lib/Encode/JP/H2Z.pm ext/Encode/lib/Encode/JP/JIS7.pm ext/Encode/lib/Encode/KR/2022_KR.pm ext/Encode/lib/Encode/MIME/Header/ISO_2022_JP.pm ext/Encode/lib/Encode/MIME/Header.pm ext/Encode/lib/Encode/PerlIO.pod ext/Encode/lib/Encode/Supported.pod ext/Encode/lib/Encode/Unicode/UTF7.pm ext/Encode/Makefile.PL ext/Encode/MANIFEST
+ for filelist in 'x??'
+ cd ..
++ cat /usr/src/perl/perl-5.8.8/UU/xai
+ ls ext/Encode/META.yml ext/Encode/README ext/Encode/Symbol/Makefile.PL ext/Encode/Symbol/Symbol.pm ext/Encode/t/Aliases.t ext/Encode/t/at-cn.t ext/Encode/t/at-tw.t ext/Encode/t/big5-eten.enc ext/Encode/t/big5-eten.utf ext/Encode/t/big5-hkscs.enc ext/Encode/t/big5-hkscs.utf ext/Encode/t/CJKT.t ext/Encode/t/enc_data.t ext/Encode/t/enc_eucjp.t ext/Encode/t/enc_module.enc ext/Encode/t/enc_module.t ext/Encode/t/Encoder.t ext/Encode/t/Encode.t ext/Encode/t/encoding.t ext/Encode/t/enc_utf8.t ext/Encode/t/fallback.t ext/Encode/t/gb2312.enc ext/Encode/t/gb2312.utf ext/Encode/t/grow.t ext/Encode/t/gsm0338.t ext/Encode/t/guess.t ext/Encode/t/jisx0201.enc ext/Encode/t/jisx0201.utf ext/Encode/t/jisx0208.enc ext/Encode/t/jisx0208.utf ext/Encode/t/jisx0212.enc ext/Encode/t/jisx0212.utf ext/Encode/t/jperl.t ext/Encode/t/ksc5601.enc ext/Encode/t/ksc5601.utf ext/Encode/t/mime_header_iso2022jp.t ext/Encode/t/mime-header.t ext/Encode/t/Mod_EUCJP.pm ext/Encode/t/perlio.t ext/Encode/t/rt.pl ext/Encode/t/unibench.pl ext/Encode/t/Unicode.t ext/Encode/t/utf8strict.t ext/Encode/TW/Makefile.PL ext/Encode/TW/TW.pm ext/Encode/ucm/8859-10.ucm ext/Encode/ucm/8859-11.ucm ext/Encode/ucm/8859-13.ucm ext/Encode/ucm/8859-14.ucm ext/Encode/ucm/8859-15.ucm
+ for filelist in 'x??'
+ cd ..
++ cat /usr/src/perl/perl-5.8.8/UU/xaj
+ ls ext/Encode/ucm/8859-16.ucm ext/Encode/ucm/8859-1.ucm ext/Encode/ucm/8859-2.ucm ext/Encode/ucm/8859-3.ucm ext/Encode/ucm/8859-4.ucm ext/Encode/ucm/8859-5.ucm ext/Encode/ucm/8859-6.ucm ext/Encode/ucm/8859-7.ucm ext/Encode/ucm/8859-8.ucm ext/Encode/ucm/8859-9.ucm ext/Encode/ucm/adobeStdenc.ucm ext/Encode/ucm/adobeSymbol.ucm ext/Encode/ucm/adobeZdingbat.ucm ext/Encode/ucm/ascii.ucm ext/Encode/ucm/big5-eten.ucm ext/Encode/ucm/big5-hkscs.ucm ext/Encode/ucm/cp037.ucm ext/Encode/ucm/cp1006.ucm ext/Encode/ucm/cp1026.ucm ext/Encode/ucm/cp1047.ucm ext/Encode/ucm/cp1250.ucm ext/Encode/ucm/cp1251.ucm ext/Encode/ucm/cp1252.ucm ext/Encode/ucm/cp1253.ucm ext/Encode/ucm/cp1254.ucm ext/Encode/ucm/cp1255.ucm ext/Encode/ucm/cp1256.ucm ext/Encode/ucm/cp1257.ucm ext/Encode/ucm/cp1258.ucm ext/Encode/ucm/cp424.ucm ext/Encode/ucm/cp437.ucm ext/Encode/ucm/cp500.ucm ext/Encode/ucm/cp737.ucm ext/Encode/ucm/cp775.ucm ext/Encode/ucm/cp850.ucm ext/Encode/ucm/cp852.ucm ext/Encode/ucm/cp855.ucm ext/Encode/ucm/cp856.ucm ext/Encode/ucm/cp857.ucm ext/Encode/ucm/cp860.ucm ext/Encode/ucm/cp861.ucm ext/Encode/ucm/cp862.ucm ext/Encode/ucm/cp863.ucm ext/Encode/ucm/cp864.ucm ext/Encode/ucm/cp865.ucm ext/Encode/ucm/cp866.ucm ext/Encode/ucm/cp869.ucm ext/Encode/ucm/cp874.ucm ext/Encode/ucm/cp875.ucm ext/Encode/ucm/cp932.ucm
+ for filelist in 'x??'
+ cd ..
++ cat /usr/src/perl/perl-5.8.8/UU/xak
+ ls ext/Encode/ucm/cp936.ucm ext/Encode/ucm/cp949.ucm ext/Encode/ucm/cp950.ucm ext/Encode/ucm/ctrl.ucm ext/Encode/ucm/dingbats.ucm ext/Encode/ucm/euc-cn.ucm ext/Encode/ucm/euc-jp.ucm ext/Encode/ucm/euc-kr.ucm ext/Encode/ucm/gb12345.ucm ext/Encode/ucm/gb2312.ucm ext/Encode/ucm/gsm0338.ucm ext/Encode/ucm/hp-roman8.ucm ext/Encode/ucm/ir-165.ucm ext/Encode/ucm/jis0201.ucm ext/Encode/ucm/jis0208.ucm ext/Encode/ucm/jis0212.ucm ext/Encode/ucm/johab.ucm ext/Encode/ucm/koi8-f.ucm ext/Encode/ucm/koi8-r.ucm ext/Encode/ucm/koi8-u.ucm ext/Encode/ucm/ksc5601.ucm ext/Encode/ucm/macArabic.ucm ext/Encode/ucm/macCentEuro.ucm ext/Encode/ucm/macChinsimp.ucm ext/Encode/ucm/macChintrad.ucm ext/Encode/ucm/macCroatian.ucm ext/Encode/ucm/macCyrillic.ucm ext/Encode/ucm/macDingbats.ucm ext/Encode/ucm/macFarsi.ucm ext/Encode/ucm/macGreek.ucm ext/Encode/ucm/macHebrew.ucm ext/Encode/ucm/macIceland.ucm ext/Encode/ucm/macJapanese.ucm ext/Encode/ucm/macKorean.ucm ext/Encode/ucm/macRoman.ucm ext/Encode/ucm/macROMnn.ucm ext/Encode/ucm/macRUMnn.ucm ext/Encode/ucm/macSami.ucm ext/Encode/ucm/macSymbol.ucm ext/Encode/ucm/macThai.ucm ext/Encode/ucm/macTurkish.ucm ext/Encode/ucm/macUkraine.ucm ext/Encode/ucm/nextstep.ucm ext/Encode/ucm/null.ucm ext/Encode/ucm/posix-bc.ucm ext/Encode/ucm/shiftjis.ucm ext/Encode/ucm/symbol.ucm ext/Encode/ucm/viscii.ucm ext/Encode/Unicode/Makefile.PL ext/Encode/Unicode/Unicode.pm
+ for filelist in 'x??'
+ cd ..
++ cat /usr/src/perl/perl-5.8.8/UU/xal
+ ls ext/Encode/Unicode/Unicode.xs EXTERN.h ext/Errno/ChangeLog ext/Errno/Errno_pm.PL ext/Errno/Makefile.PL ext/Errno/t/Errno.t ext/Fcntl/Fcntl.pm ext/Fcntl/Fcntl.xs ext/Fcntl/Makefile.PL ext/Fcntl/t/fcntl.t ext/Fcntl/t/syslfs.t ext/File/Glob/bsd_glob.c ext/File/Glob/bsd_glob.h ext/File/Glob/Changes ext/File/Glob/Glob.pm ext/File/Glob/Glob.xs ext/File/Glob/Makefile.PL ext/File/Glob/t/basic.t ext/File/Glob/t/case.t ext/File/Glob/t/global.t ext/File/Glob/TODO ext/File/Glob/t/taint.t ext/Filter/t/call.t ext/Filter/Util/Call/Call.pm ext/Filter/Util/Call/Call.xs ext/Filter/Util/Call/Makefile.PL ext/GDBM_File/GDBM_File.pm ext/GDBM_File/GDBM_File.xs ext/GDBM_File/hints/sco.pl ext/GDBM_File/Makefile.PL ext/GDBM_File/t/gdbm.t ext/GDBM_File/typemap ext/I18N/Langinfo/fallback/const-c.inc ext/I18N/Langinfo/fallback/const-xs.inc ext/I18N/Langinfo/Langinfo.pm ext/I18N/Langinfo/Langinfo.xs ext/I18N/Langinfo/Makefile.PL ext/I18N/Langinfo/t/Langinfo.t ext/IO/ChangeLog ext/IO/hints/sco.pl ext/IO/IO.pm ext/IO/IO.xs ext/IO/lib/IO/Dir.pm ext/IO/lib/IO/File.pm ext/IO/lib/IO/Handle.pm ext/IO/lib/IO/Pipe.pm ext/IO/lib/IO/Poll.pm ext/IO/lib/IO/Seekable.pm ext/IO/lib/IO/Select.pm ext/IO/lib/IO/Socket/INET.pm
+ for filelist in 'x??'
+ cd ..
++ cat /usr/src/perl/perl-5.8.8/UU/xam
+ ls ext/IO/lib/IO/Socket.pm ext/IO/lib/IO/Socket/UNIX.pm ext/IO/Makefile.PL ext/IO/poll.c ext/IO/poll.h ext/IO/README ext/IO/t/io_const.t ext/IO/t/io_dir.t ext/IO/t/io_dup.t ext/IO/t/io_file.t ext/IO/t/io_linenum.t ext/IO/t/io_multihomed.t ext/IO/t/io_pipe.t ext/IO/t/io_poll.t ext/IO/t/io_sel.t ext/IO/t/io_sock.t ext/IO/t/IO.t ext/IO/t/io_taint.t ext/IO/t/io_tell.t ext/IO/t/io_udp.t ext/IO/t/io_unix.t ext/IO/t/io_utf8.t ext/IO/t/io_xs.t ext/IPC/SysV/ChangeLog ext/IPC/SysV/hints/cygwin.pl ext/IPC/SysV/hints/next_3.pl ext/IPC/SysV/Makefile.PL ext/IPC/SysV/MANIFEST ext/IPC/SysV/Msg.pm ext/IPC/SysV/README ext/IPC/SysV/Semaphore.pm ext/IPC/SysV/SysV.pm ext/IPC/SysV/SysV.xs ext/IPC/SysV/t/ipcsysv.t ext/IPC/SysV/t/msg.t ext/IPC/SysV/t/sem.t ext/List/Util/Changes ext/List/Util/lib/List/Util.pm ext/List/Util/lib/Scalar/Util.pm ext/List/Util/Makefile.PL ext/List/Util/multicall.h ext/List/Util/README ext/List/Util/t/00version.t ext/List/Util/t/blessed.t ext/List/Util/t/dualvar.t ext/List/Util/t/first.t ext/List/Util/t/isvstring.t ext/List/Util/t/lln.t ext/List/Util/t/maxstr.t ext/List/Util/t/max.t
+ for filelist in 'x??'
+ cd ..
++ cat /usr/src/perl/perl-5.8.8/UU/xan
+ ls ext/List/Util/t/minstr.t ext/List/Util/t/min.t ext/List/Util/t/openhan.t ext/List/Util/t/p_blessed.t ext/List/Util/t/p_first.t ext/List/Util/t/p_lln.t ext/List/Util/t/p_maxstr.t ext/List/Util/t/p_max.t ext/List/Util/t/p_minstr.t ext/List/Util/t/p_min.t ext/List/Util/t/p_openhan.t ext/List/Util/t/p_readonly.t ext/List/Util/t/p_reduce.t ext/List/Util/t/p_refaddr.t ext/List/Util/t/p_reftype.t ext/List/Util/t/proto.t ext/List/Util/t/p_shuffle.t ext/List/Util/t/p_sum.t ext/List/Util/t/p_tainted.t ext/List/Util/t/readonly.t ext/List/Util/t/reduce.t ext/List/Util/t/refaddr.t ext/List/Util/t/reftype.t ext/List/Util/t/shuffle.t ext/List/Util/t/sum.t ext/List/Util/t/tainted.t ext/List/Util/t/weak.t ext/List/Util/Util.xs ext/MIME/Base64/Base64.pm ext/MIME/Base64/Base64.xs ext/MIME/Base64/Changes ext/MIME/Base64/Makefile.PL ext/MIME/Base64/QuotedPrint.pm ext/MIME/Base64/README ext/MIME/Base64/t/base64.t ext/MIME/Base64/t/quoted-print.t ext/MIME/Base64/t/unicode.t ext/MIME/Base64/t/warn.t ext/NDBM_File/hints/cygwin.pl ext/NDBM_File/hints/dec_osf.pl ext/NDBM_File/hints/dynixptx.pl ext/NDBM_File/hints/gnukfreebsd.pl ext/NDBM_File/hints/gnuknetbsd.pl ext/NDBM_File/hints/linux.pl ext/NDBM_File/hints/sco.pl ext/NDBM_File/hints/solaris.pl ext/NDBM_File/hints/svr4.pl ext/NDBM_File/Makefile.PL ext/NDBM_File/NDBM_File.pm ext/NDBM_File/NDBM_File.xs
+ for filelist in 'x??'
+ cd ..
++ cat /usr/src/perl/perl-5.8.8/UU/xao
+ ls ext/NDBM_File/t/ndbm.t ext/NDBM_File/typemap ext/ODBM_File/hints/cygwin.pl ext/ODBM_File/hints/dec_osf.pl ext/ODBM_File/hints/gnukfreebsd.pl ext/ODBM_File/hints/gnuknetbsd.pl ext/ODBM_File/hints/hpux.pl ext/ODBM_File/hints/linux.pl ext/ODBM_File/hints/sco.pl ext/ODBM_File/hints/solaris.pl ext/ODBM_File/hints/svr4.pl ext/ODBM_File/hints/ultrix.pl ext/ODBM_File/Makefile.PL ext/ODBM_File/ODBM_File.pm ext/ODBM_File/ODBM_File.xs ext/ODBM_File/t/odbm.t ext/ODBM_File/typemap ext/Opcode/Makefile.PL ext/Opcode/Opcode.pm ext/Opcode/Opcode.xs ext/Opcode/ops.pm ext/Opcode/Safe.pm ext/Opcode/t/Opcode.t ext/Opcode/t/ops.t ext/PerlIO/encoding/encoding.pm ext/PerlIO/encoding/encoding.xs ext/PerlIO/encoding/Makefile.PL ext/PerlIO/encoding/MANIFEST ext/PerlIO/scalar/Makefile.PL ext/PerlIO/scalar/scalar.pm ext/PerlIO/scalar/scalar.xs ext/PerlIO/t/encoding.t ext/PerlIO/t/fail.t ext/PerlIO/t/fallback.t ext/PerlIO/t/open.t ext/PerlIO/t/PerlIO.t ext/PerlIO/t/scalar.t ext/PerlIO/t/via.t ext/PerlIO/via/hints/aix.pl ext/PerlIO/via/Makefile.PL ext/PerlIO/via/via.pm ext/PerlIO/via/via.xs ext/POSIX/hints/bsdos.pl ext/POSIX/hints/dynixptx.pl ext/POSIX/hints/freebsd.pl ext/POSIX/hints/gnukfreebsd.pl ext/POSIX/hints/gnuknetbsd.pl ext/POSIX/hints/linux.pl ext/POSIX/hints/mint.pl ext/POSIX/hints/netbsd.pl
+ for filelist in 'x??'
+ cd ..
++ cat /usr/src/perl/perl-5.8.8/UU/xap
+ ls ext/POSIX/hints/next_3.pl ext/POSIX/hints/openbsd.pl ext/POSIX/hints/sunos_4.pl ext/POSIX/hints/svr4.pl ext/POSIX/hints/uts.pl ext/POSIX/Makefile.PL ext/POSIX/POSIX.pm ext/POSIX/POSIX.pod ext/POSIX/POSIX.xs ext/POSIX/t/is.t ext/POSIX/t/posix.t ext/POSIX/t/sigaction.t ext/POSIX/t/taint.t ext/POSIX/t/waitpid.t ext/POSIX/typemap ext/re/hints/mpeix.pl ext/re/Makefile.PL ext/re/re.pm ext/re/re.xs ext/re/t/re.t ext/Safe/t/safe1.t ext/Safe/t/safe2.t ext/Safe/t/safe3.t ext/SDBM_File/Makefile.PL ext/SDBM_File/sdbm/biblio ext/SDBM_File/sdbm/CHANGES ext/SDBM_File/sdbm/COMPARE ext/SDBM_File/sdbm/dba.c ext/SDBM_File/sdbm/dbd.c ext/SDBM_File/sdbm/dbe.1 ext/SDBM_File/sdbm/dbe.c ext/SDBM_File/sdbm/dbu.c ext/SDBM_File/SDBM_File.pm ext/SDBM_File/SDBM_File.xs ext/SDBM_File/sdbm/grind ext/SDBM_File/sdbm/hash.c ext/SDBM_File/sdbm/linux.patches ext/SDBM_File/sdbm/Makefile.PL ext/SDBM_File/sdbm/makefile.sdbm ext/SDBM_File/sdbm/pair.c ext/SDBM_File/sdbm/pair.h ext/SDBM_File/sdbm/README ext/SDBM_File/sdbm/readme.ms ext/SDBM_File/sdbm/README.too ext/SDBM_File/sdbm/sdbm.3 ext/SDBM_File/sdbm/sdbm.c ext/SDBM_File/sdbm/sdbm.h ext/SDBM_File/sdbm/tune.h ext/SDBM_File/sdbm/util.c ext/SDBM_File/t/sdbm.t
+ for filelist in 'x??'
+ cd ..
++ cat /usr/src/perl/perl-5.8.8/UU/xaq
+ ls ext/SDBM_File/typemap ext/Socket/Makefile.PL ext/Socket/Socket.pm ext/Socket/Socket.xs ext/Socket/t/socketpair.t ext/Socket/t/Socket.t ext/Storable/ChangeLog ext/Storable/hints/gnukfreebsd.pl ext/Storable/hints/gnuknetbsd.pl ext/Storable/hints/linux.pl ext/Storable/Makefile.PL ext/Storable/MANIFEST ext/Storable/README ext/Storable/Storable.pm ext/Storable/Storable.xs ext/Storable/t/attach_errors.t ext/Storable/t/attach_singleton.t ext/Storable/t/blessed.t ext/Storable/t/canonical.t ext/Storable/t/circular_hook.t ext/Storable/t/code.t ext/Storable/t/compat06.t ext/Storable/t/croak.t ext/Storable/t/dclone.t ext/Storable/t/downgrade.t ext/Storable/t/forgive.t ext/Storable/t/freeze.t ext/Storable/t/HAS_ATTACH.pm ext/Storable/t/HAS_HOOK.pm ext/Storable/t/HAS_OVERLOAD.pm ext/Storable/t/integer.t ext/Storable/t/interwork56.t ext/Storable/t/just_plain_nasty.t ext/Storable/t/lock.t ext/Storable/t/make_56_interwork.pl ext/Storable/t/make_downgrade.pl ext/Storable/t/make_overload.pl ext/Storable/t/malice.t ext/Storable/t/overload.t ext/Storable/t/recurse.t ext/Storable/t/restrict.t ext/Storable/t/retrieve.t ext/Storable/t/sig_die.t ext/Storable/t/st-dump.pl ext/Storable/t/store.t ext/Storable/t/testlib.pl ext/Storable/t/threads.t ext/Storable/t/tied_hook.t ext/Storable/t/tied_items.t ext/Storable/t/tied.t
+ for filelist in 'x??'
+ cd ..
++ cat /usr/src/perl/perl-5.8.8/UU/xar
+ ls ext/Storable/t/utf8hash.t ext/Storable/t/utf8.t ext/Storable/t/weak.t ext/Sys/Hostname/Hostname.pm ext/Sys/Hostname/Hostname.xs ext/Sys/Hostname/Makefile.PL ext/Sys/Hostname/t/Hostname.t ext/Sys/Syslog/Changes ext/Sys/Syslog/fallback/const-c.inc ext/Sys/Syslog/fallback/const-xs.inc ext/Sys/Syslog/Makefile.PL ext/Sys/Syslog/README ext/Sys/Syslog/Syslog.pm ext/Sys/Syslog/Syslog.xs ext/Sys/Syslog/t/00-load.t ext/Sys/Syslog/t/constants.t ext/Sys/Syslog/t/syslog.t ext/Thread/create.tx ext/Thread/die2.tx ext/Thread/die.tx ext/Thread/io.tx ext/Thread/join2.tx ext/Thread/join.tx ext/Thread/list.tx ext/Thread/lock.tx ext/Thread/Makefile.PL ext/Thread/Notes ext/Thread/Queue.pmx ext/Thread/queue.tx ext/Thread/README ext/Thread/README.threads ext/threads/Changes ext/Thread/Semaphore.pmx ext/threads/hints/linux.pl ext/threads/Makefile.PL ext/Thread/specific.tx ext/threads/README ext/threads/shared/hints/linux.pl ext/threads/shared/Makefile.PL ext/threads/shared/README ext/threads/shared/shared.pm ext/threads/shared/shared.xs ext/threads/shared/t/0nothread.t ext/threads/shared/t/av_refs.t ext/threads/shared/t/av_simple.t ext/threads/shared/t/blessed.t ext/threads/shared/t/cond.t ext/threads/shared/t/disabled.t ext/threads/shared/t/hv_refs.t ext/threads/shared/t/hv_simple.t
+ for filelist in 'x??'
+ cd ..
++ cat /usr/src/perl/perl-5.8.8/UU/xas
+ ls ext/threads/shared/t/no_share.t ext/threads/shared/t/shared_attr.t ext/threads/shared/t/sv_refs.t ext/threads/shared/t/sv_simple.t ext/threads/shared/t/wait.t ext/threads/shared/typemap ext/threads/t/basic.t ext/threads/t/end.t ext/threads/threads.pm ext/threads/threads.xs ext/threads/t/join.t ext/threads/t/libc.t ext/threads/t/list.t ext/threads/t/problems.t ext/threads/t/stress_cv.t ext/threads/t/stress_re.t ext/threads/t/stress_string.t ext/threads/t/thread.t ext/threads/typemap ext/Thread/sync2.tx ext/Thread/sync.tx ext/Thread/thr5005.t ext/Thread/Thread/Signal.pm ext/Thread/Thread/Specific.pm ext/Thread/Thread.xs ext/Thread/typemap ext/Thread/unsync2.tx ext/Thread/unsync3.tx ext/Thread/unsync4.tx ext/Thread/unsync.tx ext/Time/HiRes/Changes ext/Time/HiRes/fallback/const-c.inc ext/Time/HiRes/fallback/const-xs.inc ext/Time/HiRes/hints/dec_osf.pl ext/Time/HiRes/hints/dynixptx.pl ext/Time/HiRes/hints/irix.pl ext/Time/HiRes/hints/sco.pl ext/Time/HiRes/hints/solaris.pl ext/Time/HiRes/hints/svr4.pl ext/Time/HiRes/HiRes.pm ext/Time/HiRes/HiRes.xs ext/Time/HiRes/Makefile.PL ext/Time/HiRes/ppport.h ext/Time/HiRes/t/HiRes.t ext/Time/HiRes/typemap ext/Unicode/Normalize/Changes ext/Unicode/Normalize/Makefile.PL ext/Unicode/Normalize/mkheader ext/Unicode/Normalize/Normalize.pm ext/Unicode/Normalize/Normalize.xs
+ for filelist in 'x??'
+ cd ..
++ cat /usr/src/perl/perl-5.8.8/UU/xat
+ ls ext/Unicode/Normalize/README ext/Unicode/Normalize/t/fcdc.t ext/Unicode/Normalize/t/form.t ext/Unicode/Normalize/t/func.t ext/Unicode/Normalize/t/illegal.t ext/Unicode/Normalize/t/norm.t ext/Unicode/Normalize/t/null.t ext/Unicode/Normalize/t/proto.t ext/Unicode/Normalize/t/short.t ext/Unicode/Normalize/t/split.t ext/Unicode/Normalize/t/test.t ext/util/make_ext ext/Win32CORE/hints/cygwin.pl ext/Win32CORE/Makefile.PL ext/Win32CORE/ppport.h ext/Win32CORE/t/win32core.t ext/Win32CORE/Win32CORE.c ext/Win32CORE/Win32CORE.pm ext/Win32CORE/Makefile.PL ext/XS/APItest/APItest.pm ext/XS/APItest/APItest.xs ext/XS/APItest/Makefile.PL ext/XS/APItest/MANIFEST ext/XS/APItest/README ext/XS/APItest/t/call.t ext/XS/APItest/t/hash.t ext/XS/APItest/t/printf.t ext/XS/APItest/t/push.t ext/XS/Typemap/Makefile.PL ext/XS/Typemap/README ext/XS/Typemap/stdio.c ext/XS/Typemap/t/Typemap.t ext/XS/Typemap/typemap ext/XS/Typemap/Typemap.pm ext/XS/Typemap/Typemap.xs fakesdio.h fakethr.h form.h genpacksizetables.pl globals.c global.sym globvar.sym gv.c gv.h h2pl/cbreak2.pl h2pl/cbreak.pl h2pl/eg/sizeof.ph h2pl/eg/sys/errno.pl h2pl/eg/sysexits.pl h2pl/eg/sys/ioctl.pl
+ for filelist in 'x??'
+ cd ..
++ cat /usr/src/perl/perl-5.8.8/UU/xau
+ ls h2pl/getioctlsizes h2pl/mksizes h2pl/mkvars h2pl/README h2pl/tcbreak h2pl/tcbreak2 handy.h hints/3b1cc hints/3b1.sh hints/aix_3.sh hints/aix_4.sh hints/aix.sh hints/altos486.sh hints/amigaos.sh hints/apollo.sh hints/atheos.sh hints/aux_3.sh hints/beos.sh hints/broken-db.msg hints/bsdos.sh hints/convexos.sh hints/cxux.sh hints/cygwin.sh hints/darwin.sh hints/dcosx.sh hints/dec_osf.sh hints/dgux.sh hints/dos_djgpp.sh hints/dynixptx.sh hints/dynix.sh hints/epix.sh hints/esix4.sh hints/fps.sh hints/freebsd.sh hints/genix.sh hints/gnukfreebsd.sh hints/gnuknetbsd.sh hints/gnu.sh hints/greenhills.sh hints/hpux.sh hints/i386.sh hints/interix.sh hints/irix_4.sh hints/irix_5.sh hints/irix_6_0.sh hints/irix_6_1.sh hints/irix_6.sh hints/isc_2.sh hints/isc.sh hints/linux.sh
+ for filelist in 'x??'
+ cd ..
++ cat /usr/src/perl/perl-5.8.8/UU/xav
+ ls hints/lynxos.sh hints/machten_2.sh hints/machten.sh hints/mint.sh hints/mips.sh hints/mpc.sh hints/mpeix.sh hints/ncr_tower.sh hints/netbsd.sh hints/newsos4.sh hints/next_3_0.sh hints/next_3.sh hints/next_4.sh hints/nonstopux.sh hints/openbsd.sh hints/opus.sh hints/os2.sh hints/os390.sh hints/os400.sh hints/posix-bc.sh hints/powerux.sh hints/qnx.sh hints/README.hints hints/rhapsody.sh hints/sco_2_3_0.sh hints/sco_2_3_1.sh hints/sco_2_3_2.sh hints/sco_2_3_3.sh hints/sco_2_3_4.sh hints/sco.sh hints/solaris_2.sh hints/stellar.sh hints/sunos_4_0.sh hints/sunos_4_1.sh hints/super-ux.sh hints/svr4.sh hints/svr5.sh hints/t001.c hints/ti1500.sh hints/titanos.sh hints/ultrix_4.sh hints/umips.sh hints/unicosmk.sh hints/unicos.sh hints/unisysdynix.sh hints/utekv.sh hints/uts.sh hints/uwin.sh hints/vmesa.sh hints/vos.sh
+ for filelist in 'x??'
+ cd ..
++ cat /usr/src/perl/perl-5.8.8/UU/xaw
+ ls hv.c hv.h INSTALL installhtml installman installperl INTERN.h intrpvar.h iperlsys.h jpl/bin/jpl jpl/ChangeLog jpl/docs/Tutorial.pod jpl/get_jdk/get_jdk.pl jpl/get_jdk/jdk_hosts jpl/get_jdk/README jpl/install-jpl jpl/JNI/Changes jpl/JNI/Closer.java jpl/JNI/JNIConfig jpl/JNI/JNIConfig.kaffe jpl/JNI/JNIConfig.noembed jpl/JNI/JNIConfig.standard jpl/JNI/JNIConfig.Win32 jpl/JNI/JNI.pm jpl/JNI/JNI.xs jpl/JNI/Makefile.PL jpl/JNI/test.pl jpl/JNI/typemap jpl/JNI/typemap.gcc jpl/JNI/typemap.win32 jpl/JPL/AutoLoader.pm jpl/JPL/Class.pm jpl/JPL/Compile.pm jpl/JPL/Makefile.PL jpl/JPL_Rolo/cardfile jpl/JPL_Rolo/JPL_Rolo.jpl jpl/JPL_Rolo/Makefile.PL jpl/JPL_Rolo/README jpl/PerlInterpreter/Makefile.PL jpl/PerlInterpreter/PerlInterpreter.c jpl/PerlInterpreter/PerlInterpreter.h jpl/PerlInterpreter/PerlInterpreter.java jpl/README jpl/README.JUST-JNI jpl/Sample/Makefile.PL jpl/Sample/Sample.jpl jpl/SETVARS.PL jpl/Test/Makefile.PL jpl/Test/Test.jpl keywords.h
+ for filelist in 'x??'
+ cd ..
++ cat /usr/src/perl/perl-5.8.8/UU/xax
+ ls keywords.pl lib/abbrev.pl lib/AnyDBM_File.pm lib/AnyDBM_File.t lib/assert.pl lib/Attribute/Handlers/Changes lib/Attribute/Handlers/demo/demo2.pl lib/Attribute/Handlers/demo/demo3.pl lib/Attribute/Handlers/demo/demo4.pl lib/Attribute/Handlers/demo/demo_call.pl lib/Attribute/Handlers/demo/demo_chain.pl lib/Attribute/Handlers/demo/demo_cycle.pl lib/Attribute/Handlers/demo/demo_hashdir.pl lib/Attribute/Handlers/demo/demo_phases.pl lib/Attribute/Handlers/demo/demo.pl lib/Attribute/Handlers/demo/Demo.pm lib/Attribute/Handlers/demo/demo_range.pl lib/Attribute/Handlers/demo/demo_rawdata.pl lib/Attribute/Handlers/demo/Descriptions.pm lib/Attribute/Handlers/demo/MyClass.pm lib/Attribute/Handlers.pm lib/Attribute/Handlers/README lib/Attribute/Handlers/t/multi.t lib/attributes.pm lib/AutoLoader.pm lib/AutoLoader.t lib/AutoSplit.pm lib/AutoSplit.t lib/autouse.pm lib/autouse.t lib/base.pm lib/base/t/base.t lib/base/t/fields-base.t lib/base/t/fields.t lib/Benchmark.pm lib/Benchmark.t lib/bigfloat.pl lib/bigfloatpl.t lib/bigint.pl lib/bigintpl.t lib/bigint.pm lib/bignum.pm lib/bignum/t/bigint.t lib/bignum/t/bignum.t lib/bignum/t/bigrat.t lib/bignum/t/biinfnan.t lib/bignum/t/bninfnan.t lib/bignum/t/bn_lite.t lib/bignum/t/brinfnan.t lib/bignum/t/br_lite.t
+ for filelist in 'x??'
+ cd ..
++ cat /usr/src/perl/perl-5.8.8/UU/xay
+ ls lib/bignum/t/infnan.inc lib/bignum/t/option_a.t lib/bignum/t/option_l.t lib/bignum/t/option_p.t lib/bignum/t/ratopt_a.t lib/bigrat.pl lib/bigrat.pm lib/blib.pm lib/blib.t lib/bytes_heavy.pl lib/bytes.pm lib/bytes.t lib/cacheout.pl lib/Carp/Heavy.pm lib/Carp.pm lib/Carp.t lib/CGI/Apache.pm lib/CGI/Carp.pm lib/CGI/Changes lib/CGI/Cookie.pm lib/CGI/eg/caution.xbm lib/CGI/eg/clickable_image.cgi lib/CGI/eg/cookie.cgi lib/CGI/eg/crash.cgi lib/CGI/eg/customize.cgi lib/CGI/eg/diff_upload.cgi lib/CGI/eg/dna_small_gif.uu lib/CGI/eg/file_upload.cgi lib/CGI/eg/frameset.cgi lib/CGI/eg/index.html lib/CGI/eg/internal_links.cgi lib/CGI/eg/javascript.cgi lib/CGI/eg/make_links.pl lib/CGI/eg/monty.cgi lib/CGI/eg/multiple_forms.cgi lib/CGI/eg/nph-clock.cgi lib/CGI/eg/nph-multipart.cgi lib/CGI/eg/popup.cgi lib/CGI/eg/RunMeFirst lib/CGI/eg/save_state.cgi lib/CGI/eg/tryit.cgi lib/CGI/eg/wilogo_gif.uu lib/CGI/Fast.pm lib/CGI.pm lib/CGI/Pretty.pm lib/CGI/Push.pm lib/CGI/Switch.pm lib/CGI/t/apache.t lib/CGI/t/can.t lib/CGI/t/carp.t
+ for filelist in 'x??'
+ cd ..
++ cat /usr/src/perl/perl-5.8.8/UU/xaz
+ ls lib/CGI/t/cookie.t lib/CGI/t/fast.t lib/CGI/t/form.t lib/CGI/t/function.t lib/CGI/t/html.t lib/CGI/t/no_tabindex.t lib/CGI/t/pretty.t lib/CGI/t/push.t lib/CGI/t/request.t lib/CGI/t/switch.t lib/CGI/t/util-58.t lib/CGI/t/util.t lib/CGI/Util.pm lib/charnames.pm lib/charnames.t lib/Class/ISA/ChangeLog lib/Class/ISA.pm lib/Class/ISA/t/00_about_verbose.t lib/Class/ISA/t/01_old_junk.t lib/Class/Struct.pm lib/Class/Struct.t lib/complete.pl lib/Config.t lib/constant.pm lib/constant.t lib/CPAN/bin/cpan lib/CPAN/FirstTime.pm lib/CPAN/Nox.pm lib/CPAN/PAUSE2003.pub lib/CPAN.pm lib/CPAN/SIGNATURE lib/CPAN/t/loadme.t lib/CPAN/t/mirroredby.t lib/CPAN/t/Nox.t lib/CPAN/t/vcmp.t lib/ctime.pl lib/Cwd.pm lib/DBM_Filter/Changes lib/DBM_Filter/compress.pm lib/DBM_Filter/encode.pm lib/DBM_Filter/int32.pm lib/DBM_Filter/null.pm lib/DBM_Filter.pm lib/DBM_Filter/t/01error.t lib/DBM_Filter/t/02core.t lib/DBM_Filter/t/compress.t lib/DBM_Filter/t/encode.t lib/DBM_Filter/t/int32.t lib/DBM_Filter/t/null.t lib/DBM_Filter/t/utf8.t
+ for filelist in 'x??'
+ cd ..
++ cat /usr/src/perl/perl-5.8.8/UU/xba
+ ls lib/DBM_Filter/utf8.pm lib/dbm_filter_util.pl lib/DB.pm lib/DB.t lib/Devel/SelfStubber.pm lib/Devel/SelfStubber.t lib/diagnostics.pm lib/diagnostics.t lib/Digest/base.pm lib/Digest/Changes lib/Digest/file.pm lib/Digest.pm lib/Digest/t/base.t lib/Digest/t/digest.t lib/Digest/t/file.t lib/DirHandle.pm lib/DirHandle.t lib/dotsh.pl lib/Dumpvalue.pm lib/Dumpvalue.t lib/dumpvar.pl lib/dumpvar.t lib/English.pm lib/English.t lib/Env.pm lib/Env/t/array.t lib/Env/t/env.t lib/exceptions.pl lib/Exporter/Heavy.pm lib/Exporter.pm lib/Exporter.t lib/ExtUtils/Changes lib/ExtUtils/Command/MM.pm lib/ExtUtils/Command.pm lib/ExtUtils/Constant/Base.pm lib/ExtUtils/Constant.pm lib/ExtUtils/Constant/Utils.pm lib/ExtUtils/Constant/XS.pm lib/ExtUtils/Embed.pm lib/ExtUtils/Installed.pm lib/ExtUtils/Install.pm lib/ExtUtils/instmodsh lib/ExtUtils/Liblist/Kid.pm lib/ExtUtils/Liblist.pm lib/ExtUtils/MakeMaker/bytes.pm lib/ExtUtils/MakeMaker/Config.pm lib/ExtUtils/MakeMaker/FAQ.pod lib/ExtUtils/MakeMaker.pm lib/ExtUtils/MakeMaker/Tutorial.pod lib/ExtUtils/MakeMaker/vmsish.pm
+ for filelist in 'x??'
+ cd ..
++ cat /usr/src/perl/perl-5.8.8/UU/xbb
+ ls lib/ExtUtils/Manifest.pm lib/ExtUtils/MANIFEST.SKIP lib/ExtUtils/META.yml lib/ExtUtils/Mkbootstrap.pm lib/ExtUtils/Mksymlists.pm lib/ExtUtils/MM_AIX.pm lib/ExtUtils/MM_Any.pm lib/ExtUtils/MM_BeOS.pm lib/ExtUtils/MM_Cygwin.pm lib/ExtUtils/MM_DOS.pm lib/ExtUtils/MM_MacOS.pm lib/ExtUtils/MM_NW5.pm lib/ExtUtils/MM_OS2.pm lib/ExtUtils/MM.pm lib/ExtUtils/MM_QNX.pm lib/ExtUtils/MM_Unix.pm lib/ExtUtils/MM_UWIN.pm lib/ExtUtils/MM_VMS.pm lib/ExtUtils/MM_VOS.pm lib/ExtUtils/MM_Win32.pm lib/ExtUtils/MM_Win95.pm lib/ExtUtils/MY.pm lib/ExtUtils/NOTES lib/ExtUtils/Packlist.pm lib/ExtUtils/PATCHING lib/ExtUtils/README lib/ExtUtils/t/00compile.t lib/ExtUtils/t/backwards.t lib/ExtUtils/t/basic.t lib/ExtUtils/t/bytes.t lib/ExtUtils/t/Command.t lib/ExtUtils/t/config.t lib/ExtUtils/t/Constant.t lib/ExtUtils/t/dir_target.t lib/ExtUtils/t/Embed.t lib/ExtUtils/testlib.pm lib/ExtUtils/t/FIRST_MAKEFILE.t lib/ExtUtils/t/hints.t lib/ExtUtils/t/installbase.t lib/ExtUtils/t/Installed.t lib/ExtUtils/t/Install.t lib/ExtUtils/t/INST_PREFIX.t lib/ExtUtils/t/INST.t lib/ExtUtils/t/Liblist.t lib/ExtUtils/t/Manifest.t lib/ExtUtils/t/Mkbootstrap.t lib/ExtUtils/t/MM_Any.t lib/ExtUtils/t/MM_BeOS.t lib/ExtUtils/t/MM_Cygwin.t lib/ExtUtils/t/MM_NW5.t
+ for filelist in 'x??'
+ cd ..
++ cat /usr/src/perl/perl-5.8.8/UU/xbc
+ ls lib/ExtUtils/t/MM_OS2.t lib/ExtUtils/t/MM_Unix.t lib/ExtUtils/t/MM_VMS.t lib/ExtUtils/t/MM_Win32.t lib/ExtUtils/TODO lib/ExtUtils/t/oneliner.t lib/ExtUtils/t/Packlist.t lib/ExtUtils/t/parse_version.t lib/ExtUtils/t/PL_FILES.t lib/ExtUtils/t/postamble.t lib/ExtUtils/t/prefixify.t lib/ExtUtils/t/prereq_print.t lib/ExtUtils/t/problems.t lib/ExtUtils/t/prompt.t lib/ExtUtils/t/recurs.t lib/ExtUtils/t/split_command.t lib/ExtUtils/t/testlib.t lib/ExtUtils/t/VERSION_FROM.t lib/ExtUtils/t/vmsish.t lib/ExtUtils/t/writemakefile_args.t lib/ExtUtils/t/xs.t lib/ExtUtils/typemap lib/ExtUtils/xsubpp lib/fastcwd.pl lib/Fatal.pm lib/Fatal.t lib/fields.pm lib/File/Basename.pm lib/File/Basename.t lib/FileCache.pm lib/FileCache/t/01open.t lib/FileCache/t/02maxopen.t lib/FileCache/t/03append.t lib/FileCache/t/04twoarg.t lib/FileCache/t/05override.t lib/FileCache/t/06export.t lib/FileCache/t/07noimport.t lib/File/CheckTree.pm lib/File/CheckTree.t lib/File/Compare.pm lib/File/Compare.t lib/File/Copy.pm lib/File/Copy.t lib/File/DosGlob.pm lib/File/DosGlob.t lib/File/Find.pm lib/File/Find/t/find.t lib/File/Find/t/taint.t lib/FileHandle.pm lib/FileHandle.t
+ for filelist in 'x??'
+ cd ..
++ cat /usr/src/perl/perl-5.8.8/UU/xbd
+ ls lib/File/Path.pm lib/File/Path.t lib/File/Spec/Cygwin.pm lib/File/Spec/Epoc.pm lib/File/Spec/Functions.pm lib/File/Spec/Mac.pm lib/File/Spec/OS2.pm lib/File/Spec.pm lib/File/Spec/t/crossplatform.t lib/File/Spec/t/Functions.t lib/File/Spec/t/rel2abs2rel.t lib/File/Spec/t/Spec.t lib/File/Spec/Unix.pm lib/File/Spec/VMS.pm lib/File/Spec/Win32.pm lib/File/stat.pm lib/File/stat.t lib/File/Temp.pm lib/File/Temp/t/mktemp.t lib/File/Temp/t/object.t lib/File/Temp/t/posix.t lib/File/Temp/t/security.t lib/File/Temp/t/tempfile.t lib/filetest.pm lib/filetest.t lib/Filter/Simple/Changes lib/Filter/Simple.pm lib/Filter/Simple/README lib/Filter/Simple/t/data.t lib/Filter/Simple/t/export.t lib/Filter/Simple/t/filter_only.t lib/Filter/Simple/t/filter.t lib/Filter/Simple/t/import.t lib/FindBin.pm lib/FindBin.t lib/finddepth.pl lib/find.pl lib/flush.pl lib/getcwd.pl lib/Getopt/Long/CHANGES lib/Getopt/Long.pm lib/Getopt/Long/README lib/Getopt/Long/t/gol-basic.t lib/Getopt/Long/t/gol-compat.t lib/Getopt/Long/t/gol-linkage.t lib/Getopt/Long/t/gol-oo.t lib/getopt.pl lib/getopts.pl lib/Getopt/Std.pm lib/Getopt/Std.t
+ for filelist in 'x??'
+ cd ..
++ cat /usr/src/perl/perl-5.8.8/UU/xbe
+ ls lib/h2ph.t lib/h2xs.t lib/Hash/Util.pm lib/Hash/Util.t lib/hostname.pl lib/I18N/Collate.pm lib/I18N/Collate.t lib/I18N/LangTags/ChangeLog lib/I18N/LangTags/Detect.pm lib/I18N/LangTags/List.pm lib/I18N/LangTags.pm lib/I18N/LangTags/README lib/I18N/LangTags/t/01_about_verbose.t lib/I18N/LangTags/t/05_main.t lib/I18N/LangTags/t/07_listy.t lib/I18N/LangTags/t/10_http.t lib/I18N/LangTags/t/20_locales.t lib/I18N/LangTags/t/50_super.t lib/I18N/LangTags/t/55_supers_strict.t lib/I18N/LangTags/t/80_all_env.t lib/if.pm lib/if.t lib/importenv.pl lib/integer.pm lib/integer.t lib/Internals.t lib/IPC/Open2.pm lib/IPC/Open2.t lib/IPC/Open3.pm lib/IPC/Open3.t lib/less.pm lib/less.t lib/lib_pm.PL lib/lib.t lib/Locale/Codes/ChangeLog lib/Locale/Codes/README lib/Locale/Codes/t/all.t lib/Locale/Codes/t/constants.t lib/Locale/Codes/t/country.t lib/Locale/Codes/t/currency.t lib/Locale/Codes/t/languages.t lib/Locale/Codes/t/rename.t lib/Locale/Codes/t/script.t lib/Locale/Codes/t/uk.t lib/Locale/Constants.pm lib/Locale/Constants.pod lib/Locale/Country.pm lib/Locale/Country.pod lib/Locale/Currency.pm lib/Locale/Currency.pod
+ for filelist in 'x??'
+ cd ..
++ cat /usr/src/perl/perl-5.8.8/UU/xbf
+ ls lib/Locale/Language.pm lib/Locale/Language.pod lib/Locale/Maketext/ChangeLog lib/Locale/Maketext/GutsLoader.pm lib/Locale/Maketext/Guts.pm lib/Locale/Maketext.pm lib/Locale/Maketext.pod lib/Locale/Maketext/README lib/Locale/Maketext/t/01_about_verbose.t lib/Locale/Maketext/t/10_make.t lib/Locale/Maketext/t/20_get.t lib/Locale/Maketext/t/40_super.t lib/Locale/Maketext/t/50_super.t lib/Locale/Maketext/t/60_super.t lib/Locale/Maketext/t/90_utf8.t lib/Locale/Maketext/TPJ13.pod lib/locale.pm lib/Locale/Script.pm lib/Locale/Script.pod lib/locale.t lib/look.pl lib/Math/BigFloat.pm lib/Math/BigFloat/Trace.pm lib/Math/BigInt/CalcEmu.pm lib/Math/BigInt/Calc.pm lib/Math/BigInt.pm lib/Math/BigInt/t/alias.inc lib/Math/BigInt/t/bare_mbf.t lib/Math/BigInt/t/bare_mbi.t lib/Math/BigInt/t/bare_mif.t lib/Math/BigInt/t/bigfltpm.inc lib/Math/BigInt/t/bigfltpm.t lib/Math/BigInt/t/bigintc.t lib/Math/BigInt/t/bigintpm.inc lib/Math/BigInt/t/bigintpm.t lib/Math/BigInt/t/bigints.t lib/Math/BigInt/t/biglog.t lib/Math/BigInt/t/bigroot.t lib/Math/BigInt/t/calling.t lib/Math/BigInt/t/config.t lib/Math/BigInt/t/constant.t lib/Math/BigInt/t/const_mbf.t lib/Math/BigInt/t/downgrade.t lib/Math/BigInt/t/_e_math.t lib/Math/BigInt/t/fallback.t lib/Math/BigInt/t/inf_nan.t lib/Math/BigInt/t/isa.t lib/Math/BigInt/t/lib_load.t lib/Math/BigInt/t/mbf_ali.t lib/Math/BigInt/t/mbi_ali.t
+ for filelist in 'x??'
+ cd ..
++ cat /usr/src/perl/perl-5.8.8/UU/xbg
+ ls lib/Math/BigInt/t/mbimbf.inc lib/Math/BigInt/t/mbimbf.t lib/Math/BigInt/t/mbi_rand.t lib/Math/BigInt/Trace.pm lib/Math/BigInt/t/req_mbf0.t lib/Math/BigInt/t/req_mbf1.t lib/Math/BigInt/t/req_mbfa.t lib/Math/BigInt/t/req_mbfi.t lib/Math/BigInt/t/req_mbfn.t lib/Math/BigInt/t/req_mbfw.t lib/Math/BigInt/t/require.t lib/Math/BigInt/t/sub_ali.t lib/Math/BigInt/t/sub_mbf.t lib/Math/BigInt/t/sub_mbi.t lib/Math/BigInt/t/sub_mif.t lib/Math/BigInt/t/trap.t lib/Math/BigInt/t/upgradef.t lib/Math/BigInt/t/upgrade.inc lib/Math/BigInt/t/upgrade.t lib/Math/BigInt/t/use_lib1.t lib/Math/BigInt/t/use_lib2.t lib/Math/BigInt/t/use_lib3.t lib/Math/BigInt/t/use_lib4.t lib/Math/BigInt/t/use_mbfw.t lib/Math/BigInt/t/use.t lib/Math/BigInt/t/with_sub.t lib/Math/BigRat.pm lib/Math/BigRat/t/big_ap.t lib/Math/BigRat/t/bigfltpm.inc lib/Math/BigRat/t/bigfltrt.t lib/Math/BigRat/t/bigratpm.inc lib/Math/BigRat/t/bigratpm.t lib/Math/BigRat/t/bigrat.t lib/Math/BigRat/t/bigratup.t lib/Math/BigRat/t/requirer.t lib/Math/BigRat/t/trap.t lib/Math/Complex.pm lib/Math/Complex.t lib/Math/Trig.pm lib/Math/Trig.t lib/Memoize/AnyDBM_File.pm lib/Memoize/ExpireFile.pm lib/Memoize/Expire.pm lib/Memoize/ExpireTest.pm lib/Memoize/NDBM_File.pm lib/Memoize.pm lib/Memoize/README lib/Memoize/SDBM_File.pm lib/Memoize/Storable.pm lib/Memoize/t/array_confusion.t
+ for filelist in 'x??'
+ cd ..
++ cat /usr/src/perl/perl-5.8.8/UU/xbh
+ ls lib/Memoize/t/array.t lib/Memoize/t/correctness.t lib/Memoize/t/errors.t lib/Memoize/t/expfile.t lib/Memoize/t/expire.t lib/Memoize/t/expmod_n.t lib/Memoize/t/expmod_t.t lib/Memoize/t/flush.t lib/Memoize/t/normalize.t lib/Memoize/TODO lib/Memoize/t/prototype.t lib/Memoize/t/speed.t lib/Memoize/t/tiefeatures.t lib/Memoize/t/tie_gdbm.t lib/Memoize/t/tie_ndbm.t lib/Memoize/t/tie_sdbm.t lib/Memoize/t/tie_storable.t lib/Memoize/t/tie.t lib/Memoize/t/unmemoize.t lib/Net/Changes.libnet lib/Net/Cmd.pm lib/Net/Config.eg lib/Net/Config.pm lib/Net/demos/ftp lib/Net/demos/inetd lib/Net/demos/nntp lib/Net/demos/nntp.mirror lib/Net/demos/pop3 lib/Net/demos/smtp.self lib/Net/demos/time lib/Net/Domain.pm lib/Net/FTP/A.pm lib/Net/FTP/dataconn.pm lib/Net/FTP/E.pm lib/Net/FTP/I.pm lib/Net/FTP/L.pm lib/Net/FTP.pm lib/Net/hostent.pm lib/Net/hostent.t lib/Net/Hostname.eg lib/Net/libnetFAQ.pod lib/Net/netent.pm lib/Net/netent.t lib/Net/Netrc.pm lib/Net/NNTP.pm lib/Net/Ping/Changes lib/Net/Ping.pm lib/Net/Ping/t/100_load.t lib/Net/Ping/t/110_icmp_inst.t lib/Net/Ping/t/120_udp_inst.t
+ for filelist in 'x??'
+ cd ..
++ cat /usr/src/perl/perl-5.8.8/UU/xbi
+ ls lib/Net/Ping/t/130_tcp_inst.t lib/Net/Ping/t/140_stream_inst.t lib/Net/Ping/t/150_syn_inst.t lib/Net/Ping/t/190_alarm.t lib/Net/Ping/t/200_ping_tcp.t lib/Net/Ping/t/250_ping_hires.t lib/Net/Ping/t/300_ping_stream.t lib/Net/Ping/t/400_ping_syn.t lib/Net/Ping/t/410_syn_host.t lib/Net/Ping/t/450_service.t lib/Net/Ping/t/500_ping_icmp.t lib/Net/Ping/t/510_ping_udp.t lib/Net/POP3.pm lib/Net/protoent.pm lib/Net/protoent.t lib/Net/README.libnet lib/Net/servent.pm lib/Net/servent.t lib/Net/SMTP.pm lib/Net/t/config.t lib/Net/t/datasend.t lib/Net/t/ftp.t lib/Net/t/hostname.t lib/Net/Time.pm lib/Net/t/libnet_t.pl lib/Net/t/netrc.t lib/Net/t/nntp.t lib/Net/t/require.t lib/Net/t/smtp.t lib/Net/t/time.t lib/newgetopt.pl lib/NEXT/Changes lib/NEXT.pm lib/NEXT/README lib/NEXT/t/actual.t lib/NEXT/t/actuns.t lib/NEXT/t/next.t lib/NEXT/t/unseen.t lib/open2.pl lib/open3.pl lib/open.pm lib/open.t lib/overload.pm lib/overload.t lib/perl5db.pl lib/PerlIO.pm lib/PerlIO/via/QuotedPrint.pm lib/PerlIO/via/t/QuotedPrint.t lib/ph.t lib/Pod/Checker.pm
+ for filelist in 'x??'
+ cd ..
++ cat /usr/src/perl/perl-5.8.8/UU/xbj
+ ls lib/Pod/Find.pm lib/Pod/Functions.pm lib/Pod/Html.pm lib/Pod/InputObjects.pm lib/Pod/LaTeX.pm lib/Pod/Man.pm lib/Pod/ParseLink.pm lib/Pod/Parser.pm lib/Pod/ParseUtils.pm lib/Pod/Perldoc/BaseTo.pm lib/Pod/Perldoc/GetOptsOO.pm lib/Pod/Perldoc.pm lib/Pod/Perldoc/t/01_about_verbose.t lib/Pod/Perldoc/t/checkerbasic.t lib/Pod/Perldoc/ToChecker.pm lib/Pod/Perldoc/ToMan.pm lib/Pod/Perldoc/ToNroff.pm lib/Pod/Perldoc/ToPod.pm lib/Pod/Perldoc/ToRtf.pm lib/Pod/Perldoc/ToText.pm lib/Pod/Perldoc/ToTk.pm lib/Pod/Perldoc/ToXml.pm lib/Pod/Perldoc/t/perldocbasic.t lib/Pod/Perldoc/t/textbasic.t lib/Pod/Plainer.pm lib/Pod/PlainText.pm lib/Pod/Select.pm lib/Pod/t/basic.cap lib/Pod/t/basic.clr lib/Pod/t/basic.man lib/Pod/t/basic.ovr lib/Pod/t/basic.pod lib/Pod/t/basic.t lib/Pod/t/basic.txt lib/Pod/t/contains_pod.t lib/Pod/t/eol.t lib/Pod/Text/Color.pm lib/Pod/Text/Overstrike.pm lib/Pod/Text.pm lib/Pod/Text/Termcap.pm lib/Pod/t/Functions.t lib/Pod/t/htmlescp.pod lib/Pod/t/htmlescp.t lib/Pod/t/htmllink.pod lib/Pod/t/htmllink.t lib/Pod/t/htmlview.pod lib/Pod/t/htmlview.t lib/Pod/t/InputObjects.t lib/Pod/t/man.t lib/Pod/t/parselink.t
+ for filelist in 'x??'
+ cd ..
++ cat /usr/src/perl/perl-5.8.8/UU/xbk
+ ls lib/Pod/t/pod2html-lib.pl lib/Pod/t/pod2latex.t lib/Pod/t/Select.t lib/Pod/t/text-errors.t lib/Pod/t/text-options.t lib/Pod/t/text.t lib/Pod/t/Usage.t lib/Pod/t/user.t lib/Pod/t/utils.t lib/Pod/Usage.pm lib/pwd.pl lib/Search/Dict.pm lib/Search/Dict.t lib/SelectSaver.pm lib/SelectSaver.t lib/SelfLoader.pm lib/SelfLoader.t lib/Shell.pm lib/Shell.t lib/shellwords.pl lib/sigtrap.pm lib/sigtrap.t lib/sort.pm lib/sort.t lib/stat.pl lib/strict.pm lib/strict.t lib/subs.pm lib/subs.t lib/Switch/Changes lib/Switch.pm lib/Switch/README lib/Switch/t/given.t lib/Switch/t/nested.t lib/Switch/t/switch.t lib/Symbol.pm lib/Symbol.t lib/syslog.pl lib/tainted.pl lib/Term/ANSIColor/ChangeLog lib/Term/ANSIColor.pm lib/Term/ANSIColor/README lib/Term/ANSIColor/test.pl lib/termcap.pl lib/Term/Cap.pm lib/Term/Cap.t lib/Term/Complete.pm lib/Term/Complete.t lib/Term/ReadLine.pm lib/Term/ReadLine.t
+ for filelist in 'x??'
+ cd ..
++ cat /usr/src/perl/perl-5.8.8/UU/xbl
+ ls lib/Test/Builder/Module.pm lib/Test/Builder.pm lib/Test/Builder/Tester/Color.pm lib/Test/Builder/Tester.pm lib/Test/Harness/Assert.pm lib/Test/Harness/bin/prove lib/Test/Harness/Changes lib/Test/Harness/Iterator.pm lib/Test/Harness.pm lib/Test/Harness/Point.pm lib/Test/Harness/Straps.pm lib/Test/Harness/t/00compile.t lib/Test/Harness/TAP.pod lib/Test/Harness/t/assert.t lib/Test/Harness/t/base.t lib/Test/Harness/t/callback.t lib/Test/Harness/t/from_line.t lib/Test/Harness/t/harness.t lib/Test/Harness/t/inc_taint.t lib/Test/Harness/t/nonumbers.t lib/Test/Harness/t/ok.t lib/Test/Harness/t/pod.t lib/Test/Harness/t/point-parse.t lib/Test/Harness/t/point.t lib/Test/Harness/t/prove-globbing.t lib/Test/Harness/t/prove-switches.t lib/Test/Harness/t/strap-analyze.t lib/Test/Harness/t/strap.t lib/Test/Harness/t/test-harness.t lib/Test/Harness/t/version.t lib/Test/More.pm lib/Test.pm lib/Test/Simple/Changes lib/Test/Simple.pm lib/Test/Simple/README lib/Test/Simple/t/00test_harness_check.t lib/Test/Simple/t/bad_plan.t lib/Test/Simple/t/bail_out.t lib/Test/Simple/t/buffer.t lib/Test/Simple/t/Builder.t lib/Test/Simple/t/circular_data.t lib/Test/Simple/t/create.t lib/Test/Simple/t/curr_test.t lib/Test/Simple/t/details.t lib/Test/Simple/t/diag.t lib/Test/Simple/t/eq_set.t lib/Test/Simple/t/exit.t lib/Test/Simple/t/extra_one.t lib/Test/Simple/t/extra.t lib/Test/Simple/t/fail-like.t
+ for filelist in 'x??'
+ cd ..
++ cat /usr/src/perl/perl-5.8.8/UU/xbm
+ ls lib/Test/Simple/t/fail-more.t lib/Test/Simple/t/fail_one.t lib/Test/Simple/t/fail.t lib/Test/Simple/t/filehandles.t lib/Test/Simple/t/fork.t lib/Test/Simple/t/harness_active.t lib/Test/Simple/t/has_plan2.t lib/Test/Simple/t/has_plan.t lib/Test/Simple/t/import.t lib/Test/Simple/t/is_deeply_fail.t lib/Test/Simple/t/is_fh.t lib/Test/Simple/t/maybe_regex.t lib/Test/Simple/t/missing.t lib/Test/Simple/t/More.t lib/Test/Simple/t/no_diag.t lib/Test/Simple/t/no_ending.t lib/Test/Simple/t/no_header.t lib/Test/Simple/t/no_plan.t lib/Test/Simple/TODO lib/Test/Simple/t/ok_obj.t lib/Test/Simple/t/output.t lib/Test/Simple/t/overload.t lib/Test/Simple/t/overload_threads.t lib/Test/Simple/t/plan_bad.t lib/Test/Simple/t/plan_is_noplan.t lib/Test/Simple/t/plan_no_plan.t lib/Test/Simple/t/plan_shouldnt_import.t lib/Test/Simple/t/plan_skip_all.t lib/Test/Simple/t/plan.t lib/Test/Simple/t/require_ok.t lib/Test/Simple/t/reset.t lib/Test/Simple/t/simple.t lib/Test/Simple/t/skipall.t lib/Test/Simple/t/skip.t lib/Test/Simple/t/sort_bug.t lib/Test/Simple/t/strays.t lib/Test/Simple/t/tbt_01basic.t lib/Test/Simple/t/tbt_02fhrestore.t lib/Test/Simple/t/tbt_03die.t lib/Test/Simple/t/tbt_04line_num.t lib/Test/Simple/t/tbt_05faildiag.t lib/Test/Simple/t/tbt_06errormess.t lib/Test/Simple/t/tbt_07args.t lib/Test/Simple/t/threads.t lib/Test/Simple/t/thread_taint.t lib/Test/Simple/t/todo.t lib/Test/Simple/t/undef.t lib/Test/Simple/t/useing.t lib/Test/Simple/t/use_ok.t lib/Test/t/05_about_verbose.t
+ for filelist in 'x??'
+ cd ..
++ cat /usr/src/perl/perl-5.8.8/UU/xbn
+ ls lib/Test/t/fail.t lib/Test/t/mix.t lib/Test/t/multiline.t lib/Test/t/onfail.t lib/Test/t/qr.t lib/Test/t/skip.t lib/Test/t/success.t lib/Test/t/todo.t lib/Test/Tutorial.pod lib/Text/Abbrev.pm lib/Text/Abbrev.t lib/Text/Balanced/Changes lib/Text/Balanced.pm lib/Text/Balanced/README lib/Text/Balanced/t/extbrk.t lib/Text/Balanced/t/extcbk.t lib/Text/Balanced/t/extdel.t lib/Text/Balanced/t/extmul.t lib/Text/Balanced/t/extqlk.t lib/Text/Balanced/t/exttag.t lib/Text/Balanced/t/extvar.t lib/Text/Balanced/t/gentag.t lib/Text/ParseWords.pm lib/Text/ParseWords.t lib/Text/ParseWords/taint.t lib/Text/Soundex.pm lib/Text/Soundex.t lib/Text/Tabs.pm lib/Text/TabsWrap/CHANGELOG lib/Text/TabsWrap/t/fill.t lib/Text/TabsWrap/t/tabs.t lib/Text/TabsWrap/t/wrap.t lib/Text/Wrap.pm lib/Thread.pm lib/Thread/Queue.pm lib/Thread/Queue.t lib/Thread/Semaphore.pm lib/Thread/Semaphore.t lib/Tie/Array.pm lib/Tie/Array/push.t lib/Tie/Array/splice.t lib/Tie/Array/stdpush.t lib/Tie/Array/std.t lib/Tie/File.pm lib/Tie/File/t/00_version.t lib/Tie/File/t/01_gen.t lib/Tie/File/t/02_fetchsize.t lib/Tie/File/t/03_longfetch.t lib/Tie/File/t/04_splice.t lib/Tie/File/t/05_size.t
+ for filelist in 'x??'
+ cd ..
++ cat /usr/src/perl/perl-5.8.8/UU/xbo
+ ls lib/Tie/File/t/06_fixrec.t lib/Tie/File/t/07_rv_splice.t lib/Tie/File/t/08_ro.t lib/Tie/File/t/09_gen_rs.t lib/Tie/File/t/10_splice_rs.t lib/Tie/File/t/11_rv_splice_rs.t lib/Tie/File/t/12_longfetch_rs.t lib/Tie/File/t/13_size_rs.t lib/Tie/File/t/14_lock.t lib/Tie/File/t/15_pushpop.t lib/Tie/File/t/16_handle.t lib/Tie/File/t/17_misc_meth.t lib/Tie/File/t/18_rs_fixrec.t lib/Tie/File/t/19_cache.t lib/Tie/File/t/20_cache_full.t lib/Tie/File/t/21_win32.t lib/Tie/File/t/22_autochomp.t lib/Tie/File/t/23_rv_ac_splice.t lib/Tie/File/t/24_cache_loop.t lib/Tie/File/t/25_gen_nocache.t lib/Tie/File/t/26_twrite.t lib/Tie/File/t/27_iwrite.t lib/Tie/File/t/28_mtwrite.t lib/Tie/File/t/29a_upcopy.t lib/Tie/File/t/29_downcopy.t lib/Tie/File/t/30_defer.t lib/Tie/File/t/31_autodefer.t lib/Tie/File/t/32_defer_misc.t lib/Tie/File/t/33_defer_vs.t lib/Tie/File/t/40_abs_cache.t lib/Tie/File/t/41_heap.t lib/Tie/File/t/42_offset.t lib/Tie/Handle.pm lib/Tie/Handle/stdhandle.t lib/Tie/Hash.pm lib/Tie/Memoize.pm lib/Tie/Memoize.t lib/Tie/RefHash.pm lib/Tie/RefHash.t lib/Tie/Scalar.pm lib/Tie/Scalar.t lib/Tie/SubstrHash.pm lib/Tie/SubstrHash.t lib/Time/gmtime.pm lib/Time/gmtime.t lib/timelocal.pl lib/Time/Local.pm lib/Time/Local.t lib/Time/localtime.pm lib/Time/localtime.t
+ for filelist in 'x??'
+ cd ..
++ cat /usr/src/perl/perl-5.8.8/UU/xbp
+ ls lib/Time/tm.pm lib/Unicode/Collate/Changes lib/Unicode/Collate/keys.txt lib/Unicode/Collate.pm lib/Unicode/Collate/README lib/Unicode/Collate/t/altern.t lib/Unicode/Collate/t/cjkrange.t lib/Unicode/Collate/t/contract.t lib/Unicode/Collate/t/hangtype.t lib/Unicode/Collate/t/hangul.t lib/Unicode/Collate/t/ignor.t lib/Unicode/Collate/t/illegalp.t lib/Unicode/Collate/t/illegal.t lib/Unicode/Collate/t/index.t lib/Unicode/Collate/t/normal.t lib/Unicode/Collate/t/override.t lib/Unicode/Collate/t/rearrang.t lib/Unicode/Collate/t/test.t lib/Unicode/Collate/t/trailwt.t lib/Unicode/Collate/t/variable.t lib/Unicode/Collate/t/version.t lib/Unicode/Collate/t/view.t lib/Unicode/README lib/Unicode/UCD.pm lib/Unicode/UCD.t lib/unicore/ArabicShaping.txt lib/unicore/BidiMirroring.txt lib/unicore/Blocks.txt lib/unicore/CaseFolding.txt lib/unicore/CompositionExclusions.txt lib/unicore/EastAsianWidth.txt lib/unicore/HangulSyllableType.txt lib/unicore/Index.txt lib/unicore/Jamo.txt lib/unicore/LineBreak.txt lib/unicore/Makefile lib/unicore/mktables lib/unicore/mktables.lst lib/unicore/NamedSequences.txt lib/unicore/NamesList.txt lib/unicore/NormalizationCorrections.txt lib/unicore/PropertyAliases.txt lib/unicore/PropList.txt lib/unicore/PropValueAliases.txt lib/unicore/README.perl lib/unicore/ReadMe.txt lib/unicore/Scripts.txt lib/unicore/SpecialCasing.txt lib/unicore/StandardizedVariants.txt lib/unicore/UnicodeData.txt
+ for filelist in 'x??'
+ cd ..
++ cat /usr/src/perl/perl-5.8.8/UU/xbq
+ ls lib/unicore/version lib/UNIVERSAL.pm lib/User/grent.pm lib/User/grent.t lib/User/pwent.pm lib/User/pwent.t lib/utf8_heavy.pl lib/utf8.pm lib/utf8.t lib/validate.pl lib/vars.pm lib/vars.t lib/vmsish.pm lib/vmsish.t lib/warnings.pm lib/warnings/register.pm lib/warnings.t locale.c makeaperl.SH makedef.pl makedepend.SH makedir.SH Makefile.micro Makefile.SH malloc.c malloc_ctl.h MANIFEST META.yml mg.c mg.h minimod.pl miniperlmain.c mint/errno.h mint/Makefile mint/pwd.c mint/README mint/stdio.h mint/sys/time.h mint/time.h mpeix/mpeix.c mpeix/mpeixish.h mpeix/mpeix_setjmp.c mpeix/nm mpeix/relink myconfig.SH NetWare/bat/Buildtype.bat NetWare/bat/SetCodeWar.bat NetWare/bat/Setnlmsdk.bat NetWare/bat/SetNWBld.bat NetWare/bat/ToggleD2.bat
+ for filelist in 'x??'
+ cd ..
++ cat /usr/src/perl/perl-5.8.8/UU/xbr
+ ls NetWare/CLIBsdio.h NetWare/CLIBstr.h NetWare/CLIBstuf.c NetWare/CLIBstuf.h NetWare/config_h.PL NetWare/config_H.wc NetWare/config_sh.PL NetWare/config.wc NetWare/deb.h NetWare/dl_netware.xs NetWare/intdef.h NetWare/interface.c NetWare/interface.cpp NetWare/interface.h NetWare/iperlhost.h NetWare/Main.c NetWare/Makefile NetWare/MP.imp NetWare/netware.h NetWare/nw5.c NetWare/nw5iop.h NetWare/nw5sck.c NetWare/nw5sck.h NetWare/nw5thread.c NetWare/nw5thread.h NetWare/nwhashcls.cpp NetWare/nwhashcls.h NetWare/Nwmain.c NetWare/nwperlhost.h NetWare/nwperlsys.c NetWare/nwperlsys.h NetWare/Nwpipe.c NetWare/nwpipe.h NetWare/nwplglob.c NetWare/nwplglob.h NetWare/nwstdio.h NetWare/NWTInfo.c NetWare/nwtinfo.h NetWare/NWUtil.c NetWare/nwutil.h NetWare/nwvmem.h NetWare/perllib.cpp NetWare/splittree.pl NetWare/sv_nw.c NetWare/testnlm/echo/echo.c NetWare/testnlm/type/type.c NetWare/t/NWModify.pl NetWare/t/NWScripts.pl NetWare/t/Readme.txt NetWare/win32ish.h
+ for filelist in 'x??'
+ cd ..
++ cat /usr/src/perl/perl-5.8.8/UU/xbs
+ ls nostdio.h numeric.c op.c opcode.h opcode.pl op.h opnames.h os2/Changes os2/diff.configure os2/dlfcn.h os2/dl_os2.c os2/Makefile.SHs os2/os2add.sym os2/os2_base.t os2/os2.c os2/OS2/ExtAttr/Changes os2/OS2/ExtAttr/ExtAttr.pm os2/OS2/ExtAttr/ExtAttr.xs os2/OS2/ExtAttr/Makefile.PL os2/OS2/ExtAttr/MANIFEST os2/OS2/ExtAttr/myea.h os2/OS2/ExtAttr/t/os2_ea.t os2/OS2/ExtAttr/typemap os2/os2ish.h os2/OS2/PrfDB/Changes os2/OS2/PrfDB/Makefile.PL os2/OS2/PrfDB/MANIFEST os2/OS2/PrfDB/PrfDB.pm os2/OS2/PrfDB/PrfDB.xs os2/OS2/PrfDB/t/os2_prfdb.t os2/OS2/Process/Makefile.PL os2/OS2/Process/MANIFEST os2/OS2/Process/Process.pm os2/OS2/Process/Process.xs os2/OS2/Process/t/os2_process_kid.t os2/OS2/Process/t/os2_process.t os2/OS2/Process/t/os2_process_text.t os2/OS2/REXX/Changes os2/OS2/REXX/DLL/Changes os2/OS2/REXX/DLL/DLL.pm os2/OS2/REXX/DLL/DLL.xs os2/OS2/REXX/DLL/Makefile.PL os2/OS2/REXX/DLL/MANIFEST os2/OS2/REXX/Makefile.PL os2/OS2/REXX/MANIFEST os2/OS2/REXX/REXX.pm os2/OS2/REXX/REXX.xs os2/OS2/REXX/t/rx_cmprt.t os2/OS2/REXX/t/rx_dllld.t os2/OS2/REXX/t/rx_emxrv.t
+ for filelist in 'x??'
+ cd ..
++ cat /usr/src/perl/perl-5.8.8/UU/xbt
+ ls os2/OS2/REXX/t/rx_objcall.t os2/OS2/REXX/t/rx_sql.test os2/OS2/REXX/t/rx_tiesql.test os2/OS2/REXX/t/rx_tievar.t os2/OS2/REXX/t/rx_tieydb.t os2/OS2/REXX/t/rx_varset.t os2/OS2/REXX/t/rx_vrexx.t os2/os2.sym os2/os2thread.h os2/OS2/typemap os2/perl2cmd.pl os2/perlrexx.c os2/perlrexx.cmd pad.c pad.h patchlevel.h perlapi.c perlapi.h perl.c perl.h perlio.c perlio.h perliol.h perlio.sym perl_keyword.pl perlsdio.h perlsfio.h perlsh perlvars.h perly.c perly_c.diff perly.fixer perly.h perlyline.pl perly.y plan9/aperl plan9/arpa/inet.h plan9/buildinfo plan9/config_h.sample plan9/config.plan9 plan9/config_sh.sample plan9/exclude plan9/fndvers plan9/genconfig.pl plan9/mkfile plan9/myconfig.plan9 plan9/plan9.c plan9/plan9ish.h plan9/setup.rc plan9/versnum
+ for filelist in 'x??'
+ cd ..
++ cat /usr/src/perl/perl-5.8.8/UU/xbu
+ ls pod/buildtoc pod/checkpods.PL pod.lst pod/Makefile.SH pod/perl5004delta.pod pod/perl5005delta.pod pod/perl561delta.pod pod/perl56delta.pod pod/perl570delta.pod pod/perl571delta.pod pod/perl572delta.pod pod/perl573delta.pod pod/perl581delta.pod pod/perl582delta.pod pod/perl583delta.pod pod/perl584delta.pod pod/perl585delta.pod pod/perl586delta.pod pod/perl587delta.pod pod/perl588delta.pod pod/perl58delta.pod pod/perlapio.pod pod/perlapi.pod pod/perlartistic.pod pod/perlbook.pod pod/perlboot.pod pod/perlbot.pod pod/perlcall.pod pod/perlcheat.pod pod/perlclib.pod pod/perlcompile.pod pod/perldata.pod pod/perldbmfilter.pod pod/perldebguts.pod pod/perldebtut.pod pod/perldebug.pod pod/perldiag.pod pod/perldoc.pod pod/perldsc.pod pod/perlebcdic.pod pod/perlembed.pod pod/perlfaq1.pod pod/perlfaq2.pod pod/perlfaq3.pod pod/perlfaq4.pod pod/perlfaq5.pod pod/perlfaq6.pod pod/perlfaq7.pod pod/perlfaq8.pod pod/perlfaq9.pod
+ for filelist in 'x??'
+ cd ..
++ cat /usr/src/perl/perl-5.8.8/UU/xbv
+ ls pod/perlfaq.pod pod/perlfilter.pod pod/perlfork.pod pod/perlform.pod pod/perlfunc.pod pod/perlglossary.pod pod/perlgpl.pod pod/perlguts.pod pod/perlhack.pod pod/perlhist.pod pod/perlintern.pod pod/perlintro.pod pod/perliol.pod pod/perlipc.pod pod/perllexwarn.pod pod/perllocale.pod pod/perllol.pod pod/perlmodinstall.pod pod/perlmodlib.PL pod/perlmodlib.pod pod/perlmod.pod pod/perlmodstyle.pod pod/perlnewmod.pod pod/perlnumber.pod pod/perlobj.pod pod/perlopentut.pod pod/perlop.pod pod/perlothrtut.pod pod/perlpacktut.pod pod/perl.pod pod/perlpod.pod pod/perlpodspec.pod pod/perlport.pod pod/perlref.pod pod/perlreftut.pod pod/perlre.pod pod/perlrequick.pod pod/perlreref.pod pod/perlretut.pod pod/perlrun.pod pod/perlsec.pod pod/perlstyle.pod pod/perlsub.pod pod/perlsyn.pod pod/perlthrtut.pod pod/perltie.pod pod/perltoc.pod pod/perltodo.pod pod/perltooc.pod pod/perltoot.pod
+ for filelist in 'x??'
+ cd ..
++ cat /usr/src/perl/perl-5.8.8/UU/xbw
+ ls pod/perltrap.pod pod/perlunicode.pod pod/perluniintro.pod pod/perlutil.pod pod/perlvar.pod pod/perlxs.pod pod/perlxstut.pod pod/pod2html.PL pod/pod2latex.PL pod/pod2man.PL pod/pod2text.PL pod/pod2usage.PL pod/podchecker.PL pod/podselect.PL pod/roffitall pod/rofftoc pod/splitman pod/splitpod Policy_sh.SH Porting/apply Porting/check83.pl Porting/checkAUTHORS.pl Porting/checkcase.pl Porting/checkcfgvar.pl Porting/checkURL.pl Porting/checkVERSION.pl Porting/cmpVERSION.pl Porting/config_H Porting/config_h.pl Porting/config.sh Porting/Contract Porting/corecpan.pl Porting/curliff.pl Porting/findrfuncs Porting/findvars Porting/fixCORE Porting/fixvars Porting/genlog Porting/Glossary Porting/Maintainers Porting/Maintainers.pl Porting/Maintainers.pm Porting/makemeta Porting/makerel Porting/manicheck Porting/p4d2p Porting/p4genpatch Porting/patching.pod Porting/patchls Porting/pumpkin.pod
+ for filelist in 'x??'
+ cd ..
++ cat /usr/src/perl/perl-5.8.8/UU/xbx
+ ls Porting/repository.pod Porting/sort_perldiag.pl Porting/testall.atom Porting/thirdclean Porting/valgrindpp.pl pp.c pp_ctl.c pp.h pp_hot.c pp_pack.c pp_proto.h pp_sort.c pp.sym pp_sys.c proto.h qnx/ar qnx/cpp README README.aix README.amiga README.apollo README.beos README.bs2000 README.ce README.cn README.cygwin README.dgux README.dos README.epoc README.freebsd README.hpux README.hurd README.irix README.jp README.ko README.linux README.machten README.macos README.macosx README.micro README.mint README.mpeix README.netware README.openbsd README.os2 README.os390 README.os400 README.plan9 README.qnx README.solaris
+ for filelist in 'x??'
+ cd ..
++ cat /usr/src/perl/perl-5.8.8/UU/xby
+ ls README.tru64 README.tw README.uts README.vmesa README.vms README.vos README.win32 README.Y2K reentr.c reentr.h reentr.inc reentr.pl regcomp.c regcomp.h regcomp.pl regcomp.sym regen_lib.pl regen.pl regexec.c regexp.h regnodes.h run.c scope.c scope.h sv.c sv.h taint.c t/base/cond.t t/base/if.t t/base/lex.t t/base/num.t t/base/pat.t t/base/rs.t t/base/term.t t/cmd/elsif.t t/cmd/for.t t/cmd/mod.t t/cmd/subval.t t/cmd/switch.t t/cmd/while.t t/comp/bproto.t t/comp/cmdopt.t t/comp/colon.t t/comp/cpp.aux t/comp/cpp.t t/comp/decl.t t/comp/hints.t t/comp/multiline.t t/comp/opsubs.t t/comp/our.t
+ for filelist in 'x??'
+ cd ..
++ cat /usr/src/perl/perl-5.8.8/UU/xbz
+ ls t/comp/package.t t/comp/parser.t t/comp/proto.t t/comp/redef.t t/comp/require.t t/comp/script.t t/comp/term.t t/comp/use.t t/comp/utf.t t/harness thrdvar.h thread.h t/io/argv.t t/io/binmode.t t/io/crlf.t t/io/crlf_through.t t/io/dup.t t/io/fflush.t t/io/fs.t t/io/inplace.t t/io/iprefix.t t/io/layers.t t/io/nargv.t t/io/openpid.t t/io/open.t t/io/pipe.t t/io/print.t t/io/read.t t/io/tell.t t/io/through.t t/io/utf8.t t/japh/abigail.t t/lib/1_compile.t t/lib/commonsense.t t/lib/compmod.pl t/lib/contains_pod.xr t/lib/cygwin.t t/lib/Devel/switchd.pm t/lib/Dev/Null.pm t/lib/dprof/test1_t t/lib/dprof/test1_v t/lib/dprof/test2_t t/lib/dprof/test2_v t/lib/dprof/test3_t t/lib/dprof/test3_v t/lib/dprof/test4_t t/lib/dprof/test4_v t/lib/dprof/test5_t t/lib/dprof/test5_v t/lib/dprof/test6_t
+ for filelist in 'x??'
+ cd ..
++ cat /usr/src/perl/perl-5.8.8/UU/xca
+ ls t/lib/dprof/test6_v t/lib/dprof/test7_t t/lib/dprof/test7_v t/lib/dprof/test8_t t/lib/dprof/test8_v t/lib/dprof/V.pm t/lib/Filter/Simple/ExportTest.pm t/lib/Filter/Simple/FilterOnlyTest.pm t/lib/Filter/Simple/FilterTest.pm t/lib/Filter/Simple/ImportTest.pm t/lib/filter-util.pl t/lib/h2ph.h t/lib/h2ph.pht t/lib/locale/latin1 t/lib/locale/utf8 t/lib/MakeMaker/Test/Setup/BFD.pm t/lib/MakeMaker/Test/Setup/PL_FILES.pm t/lib/MakeMaker/Test/Setup/Problem.pm t/lib/MakeMaker/Test/Setup/Recurs.pm t/lib/MakeMaker/Test/Utils.pm t/lib/Math/BigFloat/Subclass.pm t/lib/Math/BigInt/BareCalc.pm t/lib/Math/BigInt/Scalar.pm t/lib/Math/BigInt/Subclass.pm t/lib/Math/BigRat/Test.pm t/lib/NoExporter.pm t/lib/sample-tests/bailout t/lib/sample-tests/bignum t/lib/sample-tests/bignum_many t/lib/sample-tests/combined t/lib/sample-tests/descriptive t/lib/sample-tests/die t/lib/sample-tests/die_head_end t/lib/sample-tests/die_last_minute t/lib/sample-tests/duplicates t/lib/sample-tests/head_end t/lib/sample-tests/head_fail t/lib/sample-tests/inc_taint t/lib/sample-tests/lone_not_bug t/lib/sample-tests/no_nums t/lib/sample-tests/no_output t/lib/sample-tests/out_of_order t/lib/sample-tests/segfault t/lib/sample-tests/shbang_misparse t/lib/sample-tests/simple t/lib/sample-tests/simple_fail t/lib/sample-tests/skip t/lib/sample-tests/skipall t/lib/sample-tests/skipall_nomsg t/lib/sample-tests/skip_nomsg
+ for filelist in 'x??'
+ cd ..
++ cat /usr/src/perl/perl-5.8.8/UU/xcb
+ ls t/lib/sample-tests/switches t/lib/sample-tests/taint t/lib/sample-tests/taint_warn t/lib/sample-tests/todo t/lib/sample-tests/todo_inline t/lib/sample-tests/too_many t/lib/sample-tests/vms_nit t/lib/sample-tests/with_comments t/lib/strict/refs t/lib/strict/subs t/lib/strict/vars t/lib/Test/Simple/Catch.pm t/lib/Test/Simple/sample_tests/death_in_eval.plx t/lib/Test/Simple/sample_tests/death.plx t/lib/Test/Simple/sample_tests/exit.plx t/lib/Test/Simple/sample_tests/extras.plx t/lib/Test/Simple/sample_tests/five_fail.plx t/lib/Test/Simple/sample_tests/last_minute_death.plx t/lib/Test/Simple/sample_tests/one_fail.plx t/lib/Test/Simple/sample_tests/pre_plan_death.plx t/lib/Test/Simple/sample_tests/require.plx t/lib/Test/Simple/sample_tests/success.plx t/lib/Test/Simple/sample_tests/too_few_fail.plx t/lib/Test/Simple/sample_tests/too_few.plx t/lib/Test/Simple/sample_tests/two_fail.plx t/lib/TieIn.pm t/lib/TieOut.pm t/lib/warnings/1global t/lib/warnings/2use t/lib/warnings/3both t/lib/warnings/4lint t/lib/warnings/5nolint t/lib/warnings/6default t/lib/warnings/7fatal t/lib/warnings/8signal t/lib/warnings/9enabled t/lib/warnings/av t/lib/warnings/doio t/lib/warnings/doop t/lib/warnings/gv t/lib/warnings/hv t/lib/warnings/malloc t/lib/warnings/mg t/lib/warnings/op t/lib/warnings/pad t/lib/warnings/perl t/lib/warnings/perlio t/lib/warnings/perly t/lib/warnings/pp t/lib/warnings/pp_ctl
+ for filelist in 'x??'
+ cd ..
++ cat /usr/src/perl/perl-5.8.8/UU/xcc
+ ls t/lib/warnings/pp_hot t/lib/warnings/pp_pack t/lib/warnings/pp_sys t/lib/warnings/regcomp t/lib/warnings/regexec t/lib/warnings/run t/lib/warnings/sv t/lib/warnings/taint t/lib/warnings/toke t/lib/warnings/universal t/lib/warnings/utf8 t/lib/warnings/util Todo.micro toke.c t/op/64bitint.t t/op/alarm.t t/op/anonsub.t t/op/append.t t/op/args.t t/op/arith.t t/op/array.t t/op/assignwarn.t t/op/attrs.t t/op/auto.t t/op/avhv.t t/op/bless.t t/op/bop.t t/op/caller.t t/op/chars.t t/op/chdir.t t/op/chop.t t/op/chr.t t/op/closure.t t/op/cmp.t t/op/concat.t t/op/cond.t t/op/context.t t/op/cproto.t t/op/crypt.t t/op/defins.t t/op/delete.t t/op/die_exit.t t/op/die.t t/op/do.t t/op/each.t t/op/eval.t t/op/exec.t t/op/exists_sub.t t/op/exp.t t/op/fh.t
+ for filelist in 'x??'
+ cd ..
++ cat /usr/src/perl/perl-5.8.8/UU/xcd
+ ls t/op/filetest.t t/op/flip.t t/op/fork.t t/op/getpid.t t/op/getppid.t t/op/glob.t t/op/gmagic.t t/op/goto.t t/op/goto_xs.t t/op/grent.t t/op/grep.t t/op/groups.t t/op/gv.t t/op/hashassign.t t/op/hash.t t/op/hashwarn.t t/op/inccode.t t/op/inc.t t/op/index.t t/op/int.t t/op/join.t t/op/lc.t t/op/lc_user.t t/op/length.t t/op/lex_assign.t t/op/lfs.t t/op/list.t t/op/localref.t t/op/local.t t/op/loopctl.t t/op/lop.t t/op/magic.t t/op/method.t t/op/mkdir.t t/op/my_stash.t t/op/my.t t/op/negate.t t/op/nothr5005.t t/op/not.t t/op/numconvert.t t/op/oct.t t/op/ord.t t/op/or.t t/op/override.t t/op/pack.t t/op/pat.t t/op/pos.t t/op/pow.t t/op/push.t t/op/pwent.t
+ for filelist in 'x??'
+ cd ..
++ cat /usr/src/perl/perl-5.8.8/UU/xce
+ ls t/op/qq.t t/op/quotemeta.t t/op/rand.t t/op/range.t t/op/readdir.t t/op/readline.t t/op/read.t t/op/recurse.t t/op/ref.t t/op/regexp_noamp.t t/op/regexp.t t/op/regmesg.t t/op/repeat.t t/op/re_tests t/op/reverse.t t/op/runlevel.t t/op/sleep.t t/op/sort.t t/op/splice.t t/op/split.t t/op/sprintf2.t t/op/sprintf.t t/op/srand.t t/op/sselect.t t/op/stash.t t/op/stat.t t/op/study.t t/op/sub_lval.t t/op/subst_amp.t t/op/substr.t t/op/subst.t t/op/subst_wamp.t t/op/sub.t t/op/sysio.t t/op/taint.t t/op/threads.t t/op/tiearray.t t/op/tiehandle.t t/op/tie.t t/op/time.t t/op/tr.t t/op/undef.t t/op/universal.t t/op/unshift.t t/op/utf8decode.t t/op/utfhash.t t/op/utftaint.t t/op/vec.t t/op/ver.t t/op/wantarray.t
+ for filelist in 'x??'
+ cd ..
++ cat /usr/src/perl/perl-5.8.8/UU/xcf
+ ls t/op/write.t t/perl.supp t/pod/emptycmd.t t/pod/emptycmd.xr t/pod/find.t t/pod/for.t t/pod/for.xr t/pod/headings.t t/pod/headings.xr t/pod/included.t t/pod/included.xr t/pod/include.t t/pod/include.xr t/pod/lref.t t/pod/lref.xr t/pod/multiline_items.t t/pod/multiline_items.xr t/pod/nested_items.t t/pod/nested_items.xr t/pod/nested_seqs.t t/pod/nested_seqs.xr t/pod/oneline_cmds.t t/pod/oneline_cmds.xr t/pod/plainer.t t/pod/pod2usage2.t t/pod/pod2usage.t t/pod/pod2usage.xr t/pod/poderrs.t t/pod/poderrs.xr t/pod/podselect.t t/pod/podselect.xr t/pod/special_seqs.t t/pod/special_seqs.xr t/pod/testcmp.pl t/pod/testp2pt.pl t/pod/testpchk.pl t/pod/testpods/lib/Pod/Stuff.pm t/README t/run/exit.t t/run/fresh_perl.t t/run/noswitch.t t/run/runenv.t t/run/switch0.t t/run/switcha.t t/run/switchC.t t/run/switchd.t t/run/switches.t t/run/switchF1.t t/run/switchF.t t/run/switchI.t
+ for filelist in 'x??'
+ cd ..
++ cat /usr/src/perl/perl-5.8.8/UU/xcg
+ ls t/run/switchn.t t/run/switchp.t t/run/switchPx.aux t/run/switchPx.t t/run/switcht.t t/run/switchx.aux t/run/switchx.t t/TEST t/TestInit.pm t/test.pl t/uni/case.pl t/uni/chomp.t t/uni/class.t t/uni/fold.t t/uni/lower.t t/uni/sprintf.t t/uni/title.t t/uni/tr_7jis.t t/uni/tr_eucjp.t t/uni/tr_sjis.t t/uni/tr_utf8.t t/uni/upper.t t/uni/write.t t/win32/getosversion.t t/win32/longpath.t t/win32/system.t t/win32/system_tests t/x2p/s2p.t uconfig.h uconfig.sh universal.c unixish.h utf8.c utf8.h utfebcdic.h util.c util.h utils/c2ph.PL utils/cpan.PL utils/dprofpp.PL utils/enc2xs.PL utils/h2ph.PL utils/h2xs.PL utils/instmodsh.PL utils/libnetcfg.PL utils.lst utils/Makefile utils/perlbug.PL utils/perlcc.PL utils/perldoc.PL
+ for filelist in 'x??'
+ cd ..
++ cat /usr/src/perl/perl-5.8.8/UU/xch
+ ls utils/perlivp.PL utils/piconv.PL utils/pl2pm.PL utils/prove.PL utils/splain.PL utils/xsubpp.PL uts/sprintf_wrap.c uts/strtol_wrap.c vmesa/Makefile vmesa/vmesa.c vmesa/vmesaish.h vms/descrip_mms.template vms/ext/DCLsym/0README.txt vms/ext/DCLsym/DCLsym.pm vms/ext/DCLsym/DCLsym.xs vms/ext/DCLsym/Makefile.PL vms/ext/DCLsym/test.pl vms/ext/Filespec.pm vms/ext/filespec.t vms/ext/Stdio/0README.txt vms/ext/Stdio/Makefile.PL vms/ext/Stdio/Stdio.pm vms/ext/Stdio/Stdio.xs vms/ext/Stdio/test.pl vms/ext/XSSymSet.pm vms/genconfig.pl vms/genopt.com vms/gen_shrfls.pl vms/make_command.com vms/mms2make.pl vms/munchconfig.c vms/myconfig.com vms/perlvms.pod vms/perly_c.vms vms/perly_h.vms vms/sockadapt.c vms/sockadapt.h vms/test.com vms/vms.c vms/vmsish.h vms/vmspipe.com vms/vms_yfix.pl vms/writemain.pl vos/build.cm vos/Changes vos/compile_full_perl.cm vos/compile_perl.cm vos/config.alpha.def vos/config.alpha.h vos/config.ga.def
+ for filelist in 'x??'
+ cd ..
++ cat /usr/src/perl/perl-5.8.8/UU/xci
+ ls vos/config.ga.h vos/config.pl vos/configure_full_perl.sh vos/configure_perl.cm vos/install_perl.cm vos/Makefile vos/mv-if-diff vos/make_full_perl.sh vos/perl.bind vos/test_vos_dummies.c vos/vos.c vos/vos_dummies.c vos/vosish.h warnings.h warnings.pl win32/bin/exetype.pl win32/bin/perlglob.pl win32/bin/pl2bat.pl win32/bin/runperl.pl win32/bin/search.pl win32/buildext.pl win32/config.bc win32/config.gc win32/config_H.bc win32/config_H.gc win32/config_h.PL win32/config_H.vc win32/config_H.vc64 win32/config_sh.PL win32/config.vc win32/config.vc64 win32/distclean.bat win32/dl_win32.xs win32/ext/Win32/Makefile.PL win32/ext/Win32/Win32.pm win32/ext/Win32/Win32.xs win32/fcrypt.c win32/FindExt.pm win32/genmk95.pl win32/include/arpa/inet.h win32/include/dirent.h win32/include/netdb.h win32/include/sys/socket.h win32/Makefile win32/makefile.mk win32/makeico.pl win32/mdelete.bat win32/perlexe.rc win32/perlglob.c win32/perlhost.h
+ for filelist in 'x??'
+ cd ..
++ cat /usr/src/perl/perl-5.8.8/UU/xcj
+ ls win32/perllib.c win32/pod.mak win32/runperl.c win32/splittree.pl win32/sync_ext.pl win32/vdir.h win32/vmem.h win32/win32.c win32/win32.h win32/win32io.c win32/win32iop.h win32/win32sck.c win32/win32thread.c win32/win32thread.h wince/bin/exetype.pl wince/bin/perlglob.pl wince/bin/pl2bat.pl wince/bin/runperl.pl wince/bin/search.pl wince/cecopy-lib.pl wince/compile-all.bat wince/compile.bat wince/comp.pl wince/config.ce wince/config_H.ce wince/config_h.PL wince/config_sh.PL wince/dl_win32.xs wince/include/arpa/inet.h wince/include/sys/socket.h wince/makedist.pl wince/Makefile.ce wince/makeico.pl wince/perlhost.h wince/perllib.c wince/perlmain.c wince/perl.rc wince/README.perlce wince/registry.bat wince/runperl.c wince/splittree.pl wince/vdir.h wince/vmem.h wince/win32.h wince/win32io.c wince/win32iop.h wince/win32thread.c wince/win32thread.h wince/wince.c wince/wince.h
+ for filelist in 'x??'
+ cd ..
++ cat /usr/src/perl/perl-5.8.8/UU/xck
+ ls wince/wincesck.c writemain.SH x2p/a2p.c x2p/a2p.h x2p/a2p.pod x2p/a2p.y x2p/a2py.c x2p/cflags.SH x2p/EXTERN.h x2p/find2perl.PL x2p/hash.c x2p/hash.h x2p/INTERN.h x2p/Makefile.SH x2p/s2p.PL x2p/str.c x2p/str.h x2p/util.c x2p/util.h x2p/walk.c XSUB.h xsutils.c
+ test -s missing
+ echo 'Looks good...'
Looks good...
+ rm -f missing xaa xab xac xad xae xaf xag xah xai xaj xak xal xam xan xao xap xaq xar xas xat xau xav xaw xax xay xaz xba xbb xbc xbd xbe xbf xbg xbh xbi xbj xbk xbl xbm xbn xbo xbp xbq xbr xbs xbt xbu xbv xbw xbx xby xbz xca xcb xcc xcd xce xcf xcg xch xci xcj xck
+ echo ' '
 
+ : Find the appropriate value for a newline for tr
+ test -n ''
+ test X = X
+ case "`echo foo|tr '\n' x 2>/dev/null`" in
++ echo foo
++ tr '\n' x
+ trnl='\n'
+ test 'X\n' = X
+ test 'X\n' = X
+ test 'X\n' = X
+ : compute the number of columns on the terminal for proper question formatting
+ case "$COLUMNS" in
+ COLUMNS=80
+ : set up the echo used in my read
+ myecho='case "$xxxm" in
'\'''\'') echo -n "$rp " >&4;;
*) case "$rp" in
	'\'''\'') echo -n "[$xxxm] ";;
	*)
		if test `echo "$rp [$xxxm]  " | wc -c` -ge 80; then
			echo "$rp" >&4
			echo -n "[$xxxm] " >&4
		else
			echo -n "$rp [$xxxm] " >&4
		fi
		;;
	esac;;
esac'
+ : now set up to do reads with possible shell escape and default assignment
+ cat
+ : create .config dir to save info across Configure sessions
+ test -d ../.config
+ mkdir ../.config
+ cat
++ awk '/define[ 	]+PERL_VERSION/ {print $3}' ../patchlevel.h
+ xversion=8
+ case "$usedevel" in
+ case "$xversion" in
+ case "$usedevel" in
+ : general instructions
+ needman=true
+ firsttime=true
+ user=cwilson
+ case "$user" in
+ grep '^cwilson$' ../.config/instruct
+ true
+ cat

This installation shell script will examine your system and ask you questions
to determine how the perl5 package should be installed. If you get
stuck on a question, you may use a ! shell escape to start a subshell or
execute a command.  Many of the questions will have default answers in square
brackets; typing carriage return will give you the default.

On some of the questions which ask for file or directory names you are allowed
to use the ~name construct to specify the login directory belonging to "name",
even if you don't have a shell which knows about that.  Questions where this is
allowed will be marked "(~name ok)".

+ rp=
+ dflt='Type carriage return to continue'
+ . ./myread
++ xxxm='Type carriage return to continue'
++ case "$xxxm" in
++ case "$rp" in
++ echo -n '[Type carriage return to continue] '
[Type carriage return to continue] ++ ans='!'
++ case "$fastread" in
++ case "$dflt" in
++ ans=
++ case "$silent-$rp" in
++ echo ' '
 
++ expr X : 'X!'
++ case "$ans" in
++ ans='Type carriage return to continue'
+ cat

The prompter used in this script allows you to use shell variables and
backticks in your answers.  You may use $1, $2, etc...  to refer to the words
in the default answer, as if the default line was a set of arguments given to a
script shell.  This means you may also use $* to repeat the whole default line,
so you do not have to re-type everything to add something to the default.

Everytime there is a substitution, you will have to confirm.  If there is an
error (e.g. an unmatched backtick), the default answer will remain unchanged
and you will be prompted again.

If you are in a hurry, you may run 'Configure -d'.  This will bypass nearly all
the questions and use the computed defaults (or the previous answers if there
was already a config.sh file). Type 'Configure -h' for a list of options.
You may also start interactively and then answer '& -d' at any prompt to turn
on the non-interactive behaviour for the remainder of the execution.

+ . ./myread
++ xxxm='Type carriage return to continue'
++ case "$xxxm" in
++ case "$rp" in
++ echo -n '[Type carriage return to continue] '
[Type carriage return to continue] ++ ans='!'
++ case "$fastread" in
++ case "$dflt" in
++ ans=
++ case "$silent-$rp" in
++ echo ' '
 
++ expr X : 'X!'
++ case "$ans" in
++ ans='Type carriage return to continue'
+ cat

Much effort has been expended to ensure that this shell script will run on any
Unix system.  If despite that it blows up on yours, your best bet is to edit
Configure and run it again.  If you can't run Configure for some reason,
you'll have to generate a config.sh file by hand.  Whatever problems you
have, let me (perlbug@perl.org) know how I blew it.

This installation script affects things in two ways:

1) it may do direct variable substitutions on some of the files included
   in this kit.
2) it builds a config.h file for inclusion in C programs.  You may edit
   any of these files as the need arises after running this script.

If you make a mistake on a question, there is no easy way to back up to it
currently.  The easiest thing to do is to edit config.sh and rerun all the SH
files.  Configure will offer to let you do this before it runs the SH files.

+ dflt='Type carriage return to continue'
+ . ./myread
++ xxxm='Type carriage return to continue'
++ case "$xxxm" in
++ case "$rp" in
++ echo -n '[Type carriage return to continue] '
[Type carriage return to continue] ++ ans='!'
++ case "$fastread" in
++ case "$dflt" in
++ ans=
++ case "$silent-$rp" in
++ echo ' '
 
++ expr X : 'X!'
++ case "$ans" in
++ ans='Type carriage return to continue'
+ case "$firsttime" in
+ echo cwilson
+ : find out where common programs are
+ echo ' '
 
+ echo 'Locating common programs...'
Locating common programs...
+ cat
+ chmod +x loc
+ : loc
+ loclist='
awk
cat
chmod
comm
cp
echo
expr
grep
ls
mkdir
rm
sed
sort
touch
tr
uniq
'
+ trylist='
Mcc
ar
bison
byacc
cpp
csh
date
egrep
gmake
gzip
less
ln
make
more
nm
nroff
pg
test
uname
zip
'
++ echo .:/usr/src/perl:/bin:/mingw/bin:/C/Windows/system32:/C/Windows:/usr/bin:/etc:/usr/lib:/lib:/sbin:/usr/sbin
++ sed -e 's/:/ /g'
+ pth='. /usr/src/perl /bin /mingw/bin /C/Windows/system32 /C/Windows /usr/bin /etc /usr/lib /lib /sbin /usr/sbin'
+ pth='. /usr/src/perl /bin /mingw/bin /C/Windows/system32 /C/Windows /usr/bin /etc /usr/lib /lib /sbin /usr/sbin /lib /usr/lib'
+ for file in '$loclist'
+ eval 'xxx=$awk'
++ xxx=
+ case "$xxx" in
++ ./loc awk awk . /usr/src/perl /bin /mingw/bin /C/Windows/system32 /C/Windows /usr/bin /etc /usr/lib /lib /sbin /usr/sbin /lib /usr/lib
+ xxx=/bin/awk
+ eval awk=/bin/awk.exe
++ awk=/bin/awk.exe
+ eval _awk=/bin/awk
++ _awk=/bin/awk
+ case "$xxx" in
+ echo awk is in /bin/awk.
awk is in /bin/awk.
+ for file in '$loclist'
+ eval 'xxx=$cat'
++ xxx=
+ case "$xxx" in
++ ./loc cat cat . /usr/src/perl /bin /mingw/bin /C/Windows/system32 /C/Windows /usr/bin /etc /usr/lib /lib /sbin /usr/sbin /lib /usr/lib
+ xxx=/bin/cat
+ eval cat=/bin/cat.exe
++ cat=/bin/cat.exe
+ eval _cat=/bin/cat
++ _cat=/bin/cat
+ case "$xxx" in
+ echo cat is in /bin/cat.
cat is in /bin/cat.
+ for file in '$loclist'
+ eval 'xxx=$chmod'
++ xxx=
+ case "$xxx" in
++ ./loc chmod chmod . /usr/src/perl /bin /mingw/bin /C/Windows/system32 /C/Windows /usr/bin /etc /usr/lib /lib /sbin /usr/sbin /lib /usr/lib
+ xxx=/bin/chmod
+ eval chmod=/bin/chmod.exe
++ chmod=/bin/chmod.exe
+ eval _chmod=/bin/chmod
++ _chmod=/bin/chmod
+ case "$xxx" in
+ echo chmod is in /bin/chmod.
chmod is in /bin/chmod.
+ for file in '$loclist'
+ eval 'xxx=$comm'
++ xxx=
+ case "$xxx" in
++ ./loc comm comm . /usr/src/perl /bin /mingw/bin /C/Windows/system32 /C/Windows /usr/bin /etc /usr/lib /lib /sbin /usr/sbin /lib /usr/lib
+ xxx=/bin/comm
+ eval comm=/bin/comm.exe
++ comm=/bin/comm.exe
+ eval _comm=/bin/comm
++ _comm=/bin/comm
+ case "$xxx" in
+ echo comm is in /bin/comm.
comm is in /bin/comm.
+ for file in '$loclist'
+ eval 'xxx=$cp'
++ xxx=
+ case "$xxx" in
++ ./loc cp cp . /usr/src/perl /bin /mingw/bin /C/Windows/system32 /C/Windows /usr/bin /etc /usr/lib /lib /sbin /usr/sbin /lib /usr/lib
+ xxx=/bin/cp
+ eval cp=/bin/cp.exe
++ cp=/bin/cp.exe
+ eval _cp=/bin/cp
++ _cp=/bin/cp
+ case "$xxx" in
+ echo cp is in /bin/cp.
cp is in /bin/cp.
+ for file in '$loclist'
+ eval 'xxx=$echo'
++ xxx=
+ case "$xxx" in
++ ./loc echo echo . /usr/src/perl /bin /mingw/bin /C/Windows/system32 /C/Windows /usr/bin /etc /usr/lib /lib /sbin /usr/sbin /lib /usr/lib
+ xxx=/bin/echo
+ eval echo=/bin/echo.exe
++ echo=/bin/echo.exe
+ eval _echo=/bin/echo
++ _echo=/bin/echo
+ case "$xxx" in
+ echo echo is in /bin/echo.
echo is in /bin/echo.
+ for file in '$loclist'
+ eval 'xxx=$expr'
++ xxx=
+ case "$xxx" in
++ ./loc expr expr . /usr/src/perl /bin /mingw/bin /C/Windows/system32 /C/Windows /usr/bin /etc /usr/lib /lib /sbin /usr/sbin /lib /usr/lib
+ xxx=/bin/expr
+ eval expr=/bin/expr.exe
++ expr=/bin/expr.exe
+ eval _expr=/bin/expr
++ _expr=/bin/expr
+ case "$xxx" in
+ echo expr is in /bin/expr.
expr is in /bin/expr.
+ for file in '$loclist'
+ eval 'xxx=$grep'
++ xxx=
+ case "$xxx" in
++ ./loc grep grep . /usr/src/perl /bin /mingw/bin /C/Windows/system32 /C/Windows /usr/bin /etc /usr/lib /lib /sbin /usr/sbin /lib /usr/lib
+ xxx=/bin/grep
+ eval grep=/bin/grep.exe
++ grep=/bin/grep.exe
+ eval _grep=/bin/grep
++ _grep=/bin/grep
+ case "$xxx" in
+ echo grep is in /bin/grep.
grep is in /bin/grep.
+ for file in '$loclist'
+ eval 'xxx=$ls'
++ xxx=
+ case "$xxx" in
++ ./loc ls ls . /usr/src/perl /bin /mingw/bin /C/Windows/system32 /C/Windows /usr/bin /etc /usr/lib /lib /sbin /usr/sbin /lib /usr/lib
+ xxx=/bin/ls
+ eval ls=/bin/ls.exe
++ ls=/bin/ls.exe
+ eval _ls=/bin/ls
++ _ls=/bin/ls
+ case "$xxx" in
+ echo ls is in /bin/ls.
ls is in /bin/ls.
+ for file in '$loclist'
+ eval 'xxx=$mkdir'
++ xxx=
+ case "$xxx" in
++ ./loc mkdir mkdir . /usr/src/perl /bin /mingw/bin /C/Windows/system32 /C/Windows /usr/bin /etc /usr/lib /lib /sbin /usr/sbin /lib /usr/lib
+ xxx=/bin/mkdir
+ eval mkdir=/bin/mkdir.exe
++ mkdir=/bin/mkdir.exe
+ eval _mkdir=/bin/mkdir
++ _mkdir=/bin/mkdir
+ case "$xxx" in
+ echo mkdir is in /bin/mkdir.
mkdir is in /bin/mkdir.
+ for file in '$loclist'
+ eval 'xxx=$rm'
++ xxx=
+ case "$xxx" in
++ ./loc rm rm . /usr/src/perl /bin /mingw/bin /C/Windows/system32 /C/Windows /usr/bin /etc /usr/lib /lib /sbin /usr/sbin /lib /usr/lib
+ xxx=/bin/rm
+ eval rm=/bin/rm.exe
++ rm=/bin/rm.exe
+ eval _rm=/bin/rm
++ _rm=/bin/rm
+ case "$xxx" in
+ echo rm is in /bin/rm.
rm is in /bin/rm.
+ for file in '$loclist'
+ eval 'xxx=$sed'
++ xxx=
+ case "$xxx" in
++ ./loc sed sed . /usr/src/perl /bin /mingw/bin /C/Windows/system32 /C/Windows /usr/bin /etc /usr/lib /lib /sbin /usr/sbin /lib /usr/lib
+ xxx=/bin/sed
+ eval sed=/bin/sed.exe
++ sed=/bin/sed.exe
+ eval _sed=/bin/sed
++ _sed=/bin/sed
+ case "$xxx" in
+ echo sed is in /bin/sed.
sed is in /bin/sed.
+ for file in '$loclist'
+ eval 'xxx=$sort'
++ xxx=
+ case "$xxx" in
++ ./loc sort sort . /usr/src/perl /bin /mingw/bin /C/Windows/system32 /C/Windows /usr/bin /etc /usr/lib /lib /sbin /usr/sbin /lib /usr/lib
+ xxx=/bin/sort
+ eval sort=/bin/sort.exe
++ sort=/bin/sort.exe
+ eval _sort=/bin/sort
++ _sort=/bin/sort
+ case "$xxx" in
+ echo sort is in /bin/sort.
sort is in /bin/sort.
+ for file in '$loclist'
+ eval 'xxx=$touch'
++ xxx=
+ case "$xxx" in
++ ./loc touch touch . /usr/src/perl /bin /mingw/bin /C/Windows/system32 /C/Windows /usr/bin /etc /usr/lib /lib /sbin /usr/sbin /lib /usr/lib
+ xxx=/bin/touch
+ eval touch=/bin/touch.exe
++ touch=/bin/touch.exe
+ eval _touch=/bin/touch
++ _touch=/bin/touch
+ case "$xxx" in
+ echo touch is in /bin/touch.
touch is in /bin/touch.
+ for file in '$loclist'
+ eval 'xxx=$tr'
++ xxx=
+ case "$xxx" in
++ ./loc tr tr . /usr/src/perl /bin /mingw/bin /C/Windows/system32 /C/Windows /usr/bin /etc /usr/lib /lib /sbin /usr/sbin /lib /usr/lib
+ xxx=/bin/tr
+ eval tr=/bin/tr.exe
++ tr=/bin/tr.exe
+ eval _tr=/bin/tr
++ _tr=/bin/tr
+ case "$xxx" in
+ echo tr is in /bin/tr.
tr is in /bin/tr.
+ for file in '$loclist'
+ eval 'xxx=$uniq'
++ xxx=
+ case "$xxx" in
++ ./loc uniq uniq . /usr/src/perl /bin /mingw/bin /C/Windows/system32 /C/Windows /usr/bin /etc /usr/lib /lib /sbin /usr/sbin /lib /usr/lib
+ xxx=/bin/uniq
+ eval uniq=/bin/uniq.exe
++ uniq=/bin/uniq.exe
+ eval _uniq=/bin/uniq
++ _uniq=/bin/uniq
+ case "$xxx" in
+ echo uniq is in /bin/uniq.
uniq is in /bin/uniq.
+ echo ' '
 
+ echo 'Don'\''t worry if any of the following aren'\''t found...'
Don't worry if any of the following aren't found...
+ say=offhand
+ for file in '$trylist'
+ eval 'xxx=$Mcc'
++ xxx=
+ case "$xxx" in
++ ./loc Mcc Mcc . /usr/src/perl /bin /mingw/bin /C/Windows/system32 /C/Windows /usr/bin /etc /usr/lib /lib /sbin /usr/sbin /lib /usr/lib
+ xxx=Mcc
+ eval Mcc=Mcc.exe
++ Mcc=Mcc.exe
+ eval _Mcc=Mcc
++ _Mcc=Mcc
+ case "$xxx" in
+ echo 'I don'\''t see Mcc out there, offhand.'
I don't see Mcc out there, offhand.
+ say=either
+ for file in '$trylist'
+ eval 'xxx=$ar'
++ xxx=
+ case "$xxx" in
++ ./loc ar ar . /usr/src/perl /bin /mingw/bin /C/Windows/system32 /C/Windows /usr/bin /etc /usr/lib /lib /sbin /usr/sbin /lib /usr/lib
+ xxx=/bin/ar
+ eval ar=/bin/ar.exe
++ ar=/bin/ar.exe
+ eval _ar=/bin/ar
++ _ar=/bin/ar
+ case "$xxx" in
+ echo ar is in /bin/ar.
ar is in /bin/ar.
+ for file in '$trylist'
+ eval 'xxx=$bison'
++ xxx=
+ case "$xxx" in
++ ./loc bison bison . /usr/src/perl /bin /mingw/bin /C/Windows/system32 /C/Windows /usr/bin /etc /usr/lib /lib /sbin /usr/sbin /lib /usr/lib
+ xxx=/bin/bison
+ eval bison=/bin/bison.exe
++ bison=/bin/bison.exe
+ eval _bison=/bin/bison
++ _bison=/bin/bison
+ case "$xxx" in
+ echo bison is in /bin/bison.
bison is in /bin/bison.
+ for file in '$trylist'
+ eval 'xxx=$byacc'
++ xxx=
+ case "$xxx" in
++ ./loc byacc byacc . /usr/src/perl /bin /mingw/bin /C/Windows/system32 /C/Windows /usr/bin /etc /usr/lib /lib /sbin /usr/sbin /lib /usr/lib
+ xxx=byacc
+ eval byacc=byacc.exe
++ byacc=byacc.exe
+ eval _byacc=byacc
++ _byacc=byacc
+ case "$xxx" in
+ echo 'I don'\''t see byacc out there, either.'
I don't see byacc out there, either.
+ say=either
+ for file in '$trylist'
+ eval 'xxx=$cpp'
++ xxx=
+ case "$xxx" in
++ ./loc cpp cpp . /usr/src/perl /bin /mingw/bin /C/Windows/system32 /C/Windows /usr/bin /etc /usr/lib /lib /sbin /usr/sbin /lib /usr/lib
+ xxx=/bin/cpp
+ eval cpp=/bin/cpp.exe
++ cpp=/bin/cpp.exe
+ eval _cpp=/bin/cpp
++ _cpp=/bin/cpp
+ case "$xxx" in
+ echo cpp is in /bin/cpp.
cpp is in /bin/cpp.
+ for file in '$trylist'
+ eval 'xxx=$csh'
++ xxx=
+ case "$xxx" in
++ ./loc csh csh . /usr/src/perl /bin /mingw/bin /C/Windows/system32 /C/Windows /usr/bin /etc /usr/lib /lib /sbin /usr/sbin /lib /usr/lib
+ xxx=csh
+ eval csh=csh.exe
++ csh=csh.exe
+ eval _csh=csh
++ _csh=csh
+ case "$xxx" in
+ echo 'I don'\''t see csh out there, either.'
I don't see csh out there, either.
+ say=either
+ for file in '$trylist'
+ eval 'xxx=$date'
++ xxx=
+ case "$xxx" in
++ ./loc date date . /usr/src/perl /bin /mingw/bin /C/Windows/system32 /C/Windows /usr/bin /etc /usr/lib /lib /sbin /usr/sbin /lib /usr/lib
+ xxx=/bin/date
+ eval date=/bin/date.exe
++ date=/bin/date.exe
+ eval _date=/bin/date
++ _date=/bin/date
+ case "$xxx" in
+ echo date is in /bin/date.
date is in /bin/date.
+ for file in '$trylist'
+ eval 'xxx=$egrep'
++ xxx=
+ case "$xxx" in
++ ./loc egrep egrep . /usr/src/perl /bin /mingw/bin /C/Windows/system32 /C/Windows /usr/bin /etc /usr/lib /lib /sbin /usr/sbin /lib /usr/lib
+ xxx=/bin/egrep
+ eval egrep=/bin/egrep.exe
++ egrep=/bin/egrep.exe
+ eval _egrep=/bin/egrep
++ _egrep=/bin/egrep
+ case "$xxx" in
+ echo egrep is in /bin/egrep.
egrep is in /bin/egrep.
+ for file in '$trylist'
+ eval 'xxx=$gmake'
++ xxx=
+ case "$xxx" in
++ ./loc gmake gmake . /usr/src/perl /bin /mingw/bin /C/Windows/system32 /C/Windows /usr/bin /etc /usr/lib /lib /sbin /usr/sbin /lib /usr/lib
+ xxx=gmake
+ eval gmake=gmake.exe
++ gmake=gmake.exe
+ eval _gmake=gmake
++ _gmake=gmake
+ case "$xxx" in
+ echo 'I don'\''t see gmake out there, either.'
I don't see gmake out there, either.
+ say=either
+ for file in '$trylist'
+ eval 'xxx=$gzip'
++ xxx=
+ case "$xxx" in
++ ./loc gzip gzip . /usr/src/perl /bin /mingw/bin /C/Windows/system32 /C/Windows /usr/bin /etc /usr/lib /lib /sbin /usr/sbin /lib /usr/lib
+ xxx=/bin/gzip
+ eval gzip=/bin/gzip.exe
++ gzip=/bin/gzip.exe
+ eval _gzip=/bin/gzip
++ _gzip=/bin/gzip
+ case "$xxx" in
+ echo gzip is in /bin/gzip.
gzip is in /bin/gzip.
+ for file in '$trylist'
+ eval 'xxx=$less'
++ xxx=
+ case "$xxx" in
++ ./loc less less . /usr/src/perl /bin /mingw/bin /C/Windows/system32 /C/Windows /usr/bin /etc /usr/lib /lib /sbin /usr/sbin /lib /usr/lib
+ xxx=/bin/less
+ eval less=/bin/less.exe
++ less=/bin/less.exe
+ eval _less=/bin/less
++ _less=/bin/less
+ case "$xxx" in
+ echo less is in /bin/less.
less is in /bin/less.
+ for file in '$trylist'
+ eval 'xxx=$ln'
++ xxx=
+ case "$xxx" in
++ ./loc ln ln . /usr/src/perl /bin /mingw/bin /C/Windows/system32 /C/Windows /usr/bin /etc /usr/lib /lib /sbin /usr/sbin /lib /usr/lib
+ xxx=/bin/ln
+ eval ln=/bin/ln.exe
++ ln=/bin/ln.exe
+ eval _ln=/bin/ln
++ _ln=/bin/ln
+ case "$xxx" in
+ echo ln is in /bin/ln.
ln is in /bin/ln.
+ for file in '$trylist'
+ eval 'xxx=$make'
++ xxx=
+ case "$xxx" in
++ ./loc make make . /usr/src/perl /bin /mingw/bin /C/Windows/system32 /C/Windows /usr/bin /etc /usr/lib /lib /sbin /usr/sbin /lib /usr/lib
+ xxx=/bin/make
+ eval make=/bin/make.exe
++ make=/bin/make.exe
+ eval _make=/bin/make
++ _make=/bin/make
+ case "$xxx" in
+ echo make is in /bin/make.
make is in /bin/make.
+ for file in '$trylist'
+ eval 'xxx=$more'
++ xxx=
+ case "$xxx" in
++ ./loc more more . /usr/src/perl /bin /mingw/bin /C/Windows/system32 /C/Windows /usr/bin /etc /usr/lib /lib /sbin /usr/sbin /lib /usr/lib
+ xxx=more
+ eval more=more.exe
++ more=more.exe
+ eval _more=more
++ _more=more
+ case "$xxx" in
+ echo 'I don'\''t see more out there, either.'
I don't see more out there, either.
+ say=either
+ for file in '$trylist'
+ eval 'xxx=$nm'
++ xxx=
+ case "$xxx" in
++ ./loc nm nm . /usr/src/perl /bin /mingw/bin /C/Windows/system32 /C/Windows /usr/bin /etc /usr/lib /lib /sbin /usr/sbin /lib /usr/lib
+ xxx=/bin/nm
+ eval nm=/bin/nm.exe
++ nm=/bin/nm.exe
+ eval _nm=/bin/nm
++ _nm=/bin/nm
+ case "$xxx" in
+ echo nm is in /bin/nm.
nm is in /bin/nm.
+ for file in '$trylist'
+ eval 'xxx=$nroff'
++ xxx=
+ case "$xxx" in
++ ./loc nroff nroff . /usr/src/perl /bin /mingw/bin /C/Windows/system32 /C/Windows /usr/bin /etc /usr/lib /lib /sbin /usr/sbin /lib /usr/lib
+ xxx=/bin/nroff
+ eval nroff=/bin/nroff.exe
++ nroff=/bin/nroff.exe
+ eval _nroff=/bin/nroff
++ _nroff=/bin/nroff
+ case "$xxx" in
+ echo nroff is in /bin/nroff.
nroff is in /bin/nroff.
+ for file in '$trylist'
+ eval 'xxx=$pg'
++ xxx=
+ case "$xxx" in
++ ./loc pg pg . /usr/src/perl /bin /mingw/bin /C/Windows/system32 /C/Windows /usr/bin /etc /usr/lib /lib /sbin /usr/sbin /lib /usr/lib
+ xxx=pg
+ eval pg=pg.exe
++ pg=pg.exe
+ eval _pg=pg
++ _pg=pg
+ case "$xxx" in
+ echo 'I don'\''t see pg out there, either.'
I don't see pg out there, either.
+ say=either
+ for file in '$trylist'
+ eval 'xxx=$test'
++ xxx=
+ case "$xxx" in
++ ./loc test test . /usr/src/perl /bin /mingw/bin /C/Windows/system32 /C/Windows /usr/bin /etc /usr/lib /lib /sbin /usr/sbin /lib /usr/lib
+ xxx=/bin/test
+ eval test=/bin/test.exe
++ test=/bin/test.exe
+ eval _test=/bin/test
++ _test=/bin/test
+ case "$xxx" in
+ echo test is in /bin/test.
test is in /bin/test.
+ for file in '$trylist'
+ eval 'xxx=$uname'
++ xxx=
+ case "$xxx" in
++ ./loc uname uname . /usr/src/perl /bin /mingw/bin /C/Windows/system32 /C/Windows /usr/bin /etc /usr/lib /lib /sbin /usr/sbin /lib /usr/lib
+ xxx=/bin/uname
+ eval uname=/bin/uname.exe
++ uname=/bin/uname.exe
+ eval _uname=/bin/uname
++ _uname=/bin/uname
+ case "$xxx" in
+ echo uname is in /bin/uname.
uname is in /bin/uname.
+ for file in '$trylist'
+ eval 'xxx=$zip'
++ xxx=
+ case "$xxx" in
++ ./loc zip zip . /usr/src/perl /bin /mingw/bin /C/Windows/system32 /C/Windows /usr/bin /etc /usr/lib /lib /sbin /usr/sbin /lib /usr/lib
+ xxx=/bin/zip
+ eval zip=/bin/zip.exe
++ zip=/bin/zip.exe
+ eval _zip=/bin/zip
++ _zip=/bin/zip
+ case "$xxx" in
+ echo zip is in /bin/zip.
zip is in /bin/zip.
+ case "$egrep" in
+ case "$ln" in
+ case "$make" in
+ case "$gmake" in
+ test -f /system/gnu_library/bin/ar.pm
+ case "$test" in
++ sh -c 'PATH= test true'
+ echo 'Using the test built into your sh.'
Using the test built into your sh.
+ test=test
+ _test=test
+ case "$echo" in
+ echo ' '
 
+ echo 'Checking compatibility between /bin/echo.exe and builtin echo (if any)...'
Checking compatibility between /bin/echo.exe and builtin echo (if any)...
+ /bin/echo.exe -n 'hi there'
+ echo -n 'hi there'
+ cmp foo1 foo2
+ echo 'They are compatible.  In fact, they may be identical.'
They are compatible.  In fact, they may be identical.
+ /bin/rm.exe -f foo1 foo2
+ cat
+ cat
+ cat
+ cat
+ : determine whether symbolic links are supported
+ echo ' '
 
+ /bin/touch.exe blurfl
+ /bin/ln.exe -s blurfl sym
+ echo 'Symbolic links are supported.'
Symbolic links are supported.
+ lns='/bin/ln.exe -s'
+ /bin/rm.exe -f blurfl sym
+ : determine whether symbolic links are supported
+ echo ' '
 
+ case "$lns" in
+ echo 'Checking how to test for symbolic links...'
Checking how to test for symbolic links...
+ /bin/ln.exe -s blurfl sym
/bin/ln.exe: creating symbolic link `sym' to `blurfl': No such file or directory
+ test X = X
+ case "$newsh" in
+ /bin/ksh -c 'PATH= test -h sym'
+ test 127 = 0
+ echo 'Your builtin '\''test -h'\'' may be broken.'
Your builtin 'test -h' may be broken.
+ case "$test" in
++ echo .:/usr/src/perl:/bin:/mingw/bin:/C/Windows/system32:/C/Windows:/usr/bin:/etc:/usr/lib:/lib:/sbin:/usr/sbin
++ sed -e 's/:/ /g'
+ pth='. /usr/src/perl /bin /mingw/bin /C/Windows/system32 /C/Windows /usr/bin /etc /usr/lib /lib /sbin /usr/sbin'
+ for p in '$pth'
+ test -f ./test
+ for p in '$pth'
+ test -f /usr/src/perl/test
+ for p in '$pth'
+ test -f /bin/test
+ test=/bin/test
+ break
+ case "$test" in
+ echo 'Trying external '\''/bin/test -h'\''.'
Trying external '/bin/test -h'.
+ issymlink='/bin/test -h'
+ /bin/test '!' -h sym
+ echo 'External '\''/bin/test -h'\'' is broken, too.'
External '/bin/test -h' is broken, too.
+ issymlink=
+ /bin/test X = X
+ /bin/test -L sym
+ /bin/test X '!=' X
+ echo 'I do not know how you can test for symbolic links.'
I do not know how you can test for symbolic links.
+ /bin/rm.exe -f blurfl sym
+ echo ' '
 
+ case "$mksymlinks" in
+ case "$usecrosscompile" in
+ run=
+ to=:
+ from=:
+ usecrosscompile=undef
+ targetarch=
+ : see whether '[:lower:]' and '[:upper:]' are supported character classes
+ echo ' '
 
+ case "`echo AbyZ | $tr '[:lower:]' '[:upper:]' 2>/dev/null`" in
++ echo AbyZ
++ /bin/tr.exe '[:lower:]' '[:upper:]'
+ echo 'Good, your tr supports [:lower:] and [:upper:] to convert case.'
Good, your tr supports [:lower:] and [:upper:] to convert case.
+ up='[:upper:]'
+ low='[:lower:]'
+ case "`echo RS | $tr \"$up\" \"$low\" 2>/dev/null`" in
++ echo RS
++ /bin/tr.exe '[:upper:]' '[:lower:]'
+ echo 'Using [:upper:] and [:lower:] to convert case.'
Using [:upper:] and [:lower:] to convert case.
+ : set up the translation script tr, must be called with ./tr of course
+ cat
+ chmod +x tr
+ : tr
+ : Try to determine whether config.sh was made on this system
+ case "$config_sh" in
++ /bin/uname.exe -a
+ myuname='MSYS_NT-6.0 KHELDAR 1.0.17(0.48/3/2) 2011-04-24 23:39 i686 Msys'
+ /bin/test -z 'MSYS_NT-6.0 KHELDAR 1.0.17(0.48/3/2) 2011-04-24 23:39 i686 Msys'
++ echo MSYS_NT-6.0 KHELDAR '1.0.17(0.48/3/2)' 2011-04-24 23:39 i686 Msys
++ /bin/sed.exe -e 's/^[^=]*=//' -e 's/\///g'
++ ./tr '[A-Z]' '[a-z]'
++ /bin/tr.exe '\n' ' '
+ myuname='msys_nt-6.0 kheldar 1.0.17(0.4832) 2011-04-24 23:39 i686 msys '
+ newmyuname='msys_nt-6.0 kheldar 1.0.17(0.4832) 2011-04-24 23:39 i686 msys '
+ dflt=n
+ case "$knowitall" in
+ test -f ../config.sh
+ : Get old answers from old config file if Configure was run on the
+ : same system, otherwise use the hints.
+ hint=default
+ cd ..
+ test -f config.sh
+ . ./UU/checkcc
++ case "$cc" in
+ test '!' -f config.sh
+ /bin/cat.exe

First time through, eh?  I have some defaults handy for some systems
that need some extra help getting the Configure answers right:

+ cd ./hints
+ ls -C 3b1.sh aix.sh aix_3.sh aix_4.sh altos486.sh amigaos.sh apollo.sh atheos.sh aux_3.sh beos.sh bsdos.sh convexos.sh cxux.sh cygwin.sh darwin.sh dcosx.sh dec_osf.sh dgux.sh dos_djgpp.sh dynix.sh dynixptx.sh epix.sh esix4.sh fps.sh freebsd.sh genix.sh gnu.sh gnukfreebsd.sh gnuknetbsd.sh greenhills.sh hpux.sh i386.sh interix.sh irix_4.sh irix_5.sh irix_6.sh irix_6_0.sh irix_6_1.sh isc.sh isc_2.sh linux.sh lynxos.sh machten.sh machten_2.sh mint.sh mips.sh mpc.sh mpeix.sh msys.sh ncr_tower.sh netbsd.sh newsos4.sh next_3.sh next_3_0.sh next_4.sh nonstopux.sh openbsd.sh opus.sh os2.sh os390.sh os400.sh posix-bc.sh powerux.sh qnx.sh rhapsody.sh sco.sh sco_2_3_0.sh sco_2_3_1.sh sco_2_3_2.sh sco_2_3_3.sh sco_2_3_4.sh solaris_2.sh stellar.sh sunos_4_0.sh sunos_4_1.sh super-ux.sh svr4.sh svr5.sh ti1500.sh titanos.sh ultrix_4.sh umips.sh unicos.sh unicosmk.sh unisysdynix.sh utekv.sh uts.sh uwin.sh vmesa.sh vos.sh
+ /bin/sed.exe 's/\.sh/   /g'
3b1   	     dos_djgpp       irix_6_0      next_4   	 stellar   
aix   	     dynix   	     irix_6_1      nonstopux     sunos_4_0   
aix_3        dynixptx        isc   	   openbsd   	 sunos_4_1   
aix_4        epix   	     isc_2   	   opus   	 super-ux   
altos486     esix4   	     linux   	   os2   	 svr4   
amigaos      fps   	     lynxos   	   os390   	 svr5   
apollo       freebsd         machten       os400   	 ti1500   
atheos       genix   	     machten_2     posix-bc   	 titanos   
aux_3        gnu   	     mint   	   powerux   	 ultrix_4   
beos         gnukfreebsd     mips   	   qnx   	 umips   
bsdos        gnuknetbsd      mpc   	   rhapsody   	 unicos   
convexos     greenhills      mpeix   	   sco   	 unicosmk   
cxux         hpux   	     msys   	   sco_2_3_0     unisysdynix   
cygwin       i386   	     ncr_tower     sco_2_3_1     utekv   
darwin       interix         netbsd   	   sco_2_3_2     uts   
dcosx        irix_4   	     newsos4       sco_2_3_3     uwin   
dec_osf      irix_5   	     next_3   	   sco_2_3_4     vmesa   
dgux         irix_6   	     next_3_0      solaris_2     vos   
+ dflt=
+ : Half the following guesses are probably wrong... If you have better
+ : tests or hints, please send them to perlbug@perl.org
+ : The metaconfig authors would also appreciate a copy...
+ /bin/test -f /irix
+ /bin/test -f /xenix
+ /bin/test -f /dynix
+ /bin/test -f /dnix
+ /bin/test -f /lynx.os
+ /bin/test -f /unicos
+ /bin/test -f /unicosmk
+ /bin/test -f /unicosmk.ar
+ /bin/test -f /bin/mips
+ /bin/test -d /NextApps
+ /bin/test -d /usr/apollo/bin
+ /bin/test -f /etc/saf/_sactab
+ /bin/test -d /usr/include/minix
+ /bin/test -f /system/gnu_library/bin/ar.pm
+ /bin/test -d /MachTen -o -d /MachTen_Folder
+ /bin/test -f /sys/posix.dll
+ /bin/test -f /bin/uname.exe
+ set X msys_nt-6.0 kheldar '1.0.17(0.4832)' 2011-04-24 23:39 i686 msys
+ shift
+ case "$5" in
+ case "$1" in
+ osname=msys
+ osvers='1.0.17(0.4832)'
+ case "$targetarch" in
+ : Now look for a hint file osname_osvers, unless one has been
+ : specified already.
+ case "$hintfile" in
++ echo 'msys_1.0.17(0.4832)'
++ /bin/sed.exe -e 's%\.%_%g' -e 's%_$%%'
+ file='msys_1_0_17(0_4832)'
+ : Also try without trailing minor version numbers.
++ echo 'msys_1_0_17(0_4832)'
++ /bin/sed.exe -e 's%_[^_]*$%%'
+ xfile='msys_1_0_17(0'
++ echo 'msys_1_0_17(0'
++ /bin/sed.exe -e 's%_[^_]*$%%'
+ xxfile=msys_1_0
++ echo msys_1_0
++ /bin/sed.exe -e 's%_[^_]*$%%'
+ xxxfile=msys_1
++ echo msys_1
++ /bin/sed.exe -e 's%_[^_]*$%%'
+ xxxxfile=msys
+ case "$file" in
+ case "$osvers" in
+ /bin/test -f './hints/msys_1_0_17(0_4832).sh'
+ /bin/test -f './hints/msys_1_0_17(0.sh'
+ /bin/test -f ./hints/msys_1_0.sh
+ /bin/test -f ./hints/msys_1.sh
+ /bin/test -f ./hints/msys.sh
+ dflt=msys
+ /bin/test -f Policy.sh
+ case "$dflt" in
+ dflt='Policy msys'
+ /bin/test -f Policy.sh
+ /bin/cat.exe

There's also a Policy hint file available, which should make the
site-specific (policy) questions easier to answer.
+ /bin/cat.exe

You may give one or more space-separated answers, or "none" if appropriate.
A well-behaved OS will have no hints, so answering "none" or just "Policy"
is a good thing.  DO NOT give a wrong version or a wrong OS.

+ rp='Which of these apply, if any?'
+ . UU/myread
++ xxxm='Policy msys'
++ case "$xxxm" in
++ case "$rp" in
+++ echo 'Which of these apply, if any? [Policy msys]  '
+++ wc -c
++ test 46 -ge 80
++ echo -n 'Which of these apply, if any? [Policy msys] '
Which of these apply, if any? [Policy msys] ++ ans='!'
++ case "$fastread" in
++ case "$dflt" in
++ ans=
++ case "$silent-$rp" in
++ echo ' '
 
++ expr X : 'X!'
++ case "$ans" in
++ ans='Policy msys'
+ tans='Policy msys'
+ for file in '$tans'
+ /bin/test XPolicy = XPolicy -a -f Policy.sh
+ . Policy.sh
++ case "$perladmin" in
++ perladmin=mingw-dvlpr@lists.sourceforge.net
++ case "$prefix" in
++ prefix=/usr
++ case "$siteprefix" in
++ test /usr = /usr
++ siteprefix=/usr
++ case "$vendorprefix" in
++ test /usr = /usr
++ vendorprefix=/usr
++ case "$installprefix" in
++ test /usr = /usr
++ installprefix=/usr
++ privlib=/usr/lib/perl5/5.8
++ archlib=/usr/lib/perl5/5.8/msys
++ man1dir=/usr/share/man/man1
++ man3dir=/usr/share/man/man3
++ sitelib=/usr/lib/perl5/site_perl/5.8
++ sitearch=/usr/lib/perl5/site_perl/5.8/msys
++ siteman1dir=/usr/share/man/man1
++ siteman3dir=/usr/share/man/man3
++ vendorlib=/usr/lib/perl5/vendor_perl/5.8
++ vendorarch=/usr/lib/perl5/vendor_perl/5.8/msys
++ vendorman1dir=/usr/share/man/man1
++ vendorman3dir=/usr/share/man/man3
+ /bin/cat.exe Policy.sh
+ for file in '$tans'
+ /bin/test Xmsys = XPolicy -a -f Policy.sh
+ /bin/test -f ./hints/msys.sh
+ . ./hints/msys.sh
++ exe_ext=.exe
++ firstmakefile=GNUmakefile
++ case "$ldlibpthname" in
++ ldlibpthname=PATH
++ archobjs=msys.o
++ test -z ''
++ cc=gcc
++ test -z ''
+++ gcc -print-file-name=libc.a
++ plibpth=/usr/lib/gcc/i686-pc-msys/3.4.4/../../../libc.a
+++ dirname /usr/lib/gcc/i686-pc-msys/3.4.4/../../../libc.a
++ plibpth=/usr/lib/gcc/i686-pc-msys/3.4.4/../../..
+++ cd /usr/lib/gcc/i686-pc-msys/3.4.4/../../..
+++ pwd
++ plibpth=/usr/lib
++ so=dll
+++ echo ' sfio socket bind inet nsl nm ndbm gdbm dbm db malloc dl dld ld sun m crypt sec util c cposix posix ucb bsd BSD '
+++ sed -e 's/ c / /g'
++ libswanted=' sfio socket bind inet nsl nm ndbm gdbm dbm db malloc dl dld ld sun m crypt sec util cposix posix ucb bsd BSD '
+++ echo '  sfio socket bind inet nsl nm ndbm gdbm dbm db malloc dl dld ld sun m crypt sec util cposix posix ucb bsd BSD  '
+++ sed -e 's/ m / /g'
++ libswanted='  sfio socket bind inet nsl nm ndbm gdbm dbm db malloc dl dld ld sun crypt sec util cposix posix ucb bsd BSD  '
++ libswanted='  sfio socket bind inet nsl nm ndbm gdbm dbm db malloc dl dld ld sun crypt sec util cposix posix ucb bsd BSD   gdbm_compat'
++ test -z ''
++ optimize='-O3 -fno-unit-at-a-time -s -mtune=pentium'
++ ccflags=' -DPERL_USE_SAFE_PUTENV -DDEBUGGING'
++ archname=msys
++ cccdlflags=' '
++ ld=ld2
++ bincompat5005=undef
++ d_eofnblk=define
++ ldflags=' -s '
++ ccdlflags=' -s '
++ lddlflags=' -s '
++ static_ext=' Win32CORE'
++ locincpth=
++ libc=/usr/lib/libmsys-1.0.dll.a
++ libpth='/usr/lib /lib'
++ libspath=' /usr/lib /lib'
++ useshrplib=yes
++ man3ext=3pm
+ /bin/cat.exe ./hints/msys.sh
+ hint=recommended
+ : Remember our hint file for later.
+ /bin/test -f ./hints/msys.sh
+ hintfile=msys
+ cd UU
+ test ''
+ : Restore computed paths
+ for file in '$loclist' '$trylist'
+ eval 'awk=$_awk'
++ awk=/bin/awk
+ for file in '$loclist' '$trylist'
+ eval 'cat=$_cat'
++ cat=/bin/cat
+ for file in '$loclist' '$trylist'
+ eval 'chmod=$_chmod'
++ chmod=/bin/chmod
+ for file in '$loclist' '$trylist'
+ eval 'comm=$_comm'
++ comm=/bin/comm
+ for file in '$loclist' '$trylist'
+ eval 'cp=$_cp'
++ cp=/bin/cp
+ for file in '$loclist' '$trylist'
+ eval 'echo=$_echo'
++ echo=/bin/echo
+ for file in '$loclist' '$trylist'
+ eval 'expr=$_expr'
++ expr=/bin/expr
+ for file in '$loclist' '$trylist'
+ eval 'grep=$_grep'
++ grep=/bin/grep
+ for file in '$loclist' '$trylist'
+ eval 'ls=$_ls'
++ ls=/bin/ls
+ for file in '$loclist' '$trylist'
+ eval 'mkdir=$_mkdir'
++ mkdir=/bin/mkdir
+ for file in '$loclist' '$trylist'
+ eval 'rm=$_rm'
++ rm=/bin/rm
+ for file in '$loclist' '$trylist'
+ eval 'sed=$_sed'
++ sed=/bin/sed
+ for file in '$loclist' '$trylist'
+ eval 'sort=$_sort'
++ sort=/bin/sort
+ for file in '$loclist' '$trylist'
+ eval 'touch=$_touch'
++ touch=/bin/touch
+ for file in '$loclist' '$trylist'
+ eval 'tr=$_tr'
++ tr=/bin/tr
+ for file in '$loclist' '$trylist'
+ eval 'uniq=$_uniq'
++ uniq=/bin/uniq
+ for file in '$loclist' '$trylist'
+ eval 'Mcc=$_Mcc'
++ Mcc=Mcc
+ for file in '$loclist' '$trylist'
+ eval 'ar=$_ar'
++ ar=/bin/ar
+ for file in '$loclist' '$trylist'
+ eval 'bison=$_bison'
++ bison=/bin/bison
+ for file in '$loclist' '$trylist'
+ eval 'byacc=$_byacc'
++ byacc=byacc
+ for file in '$loclist' '$trylist'
+ eval 'cpp=$_cpp'
++ cpp=/bin/cpp
+ for file in '$loclist' '$trylist'
+ eval 'csh=$_csh'
++ csh=csh
+ for file in '$loclist' '$trylist'
+ eval 'date=$_date'
++ date=/bin/date
+ for file in '$loclist' '$trylist'
+ eval 'egrep=$_egrep'
++ egrep=/bin/egrep
+ for file in '$loclist' '$trylist'
+ eval 'gmake=$_gmake'
++ gmake=gmake
+ for file in '$loclist' '$trylist'
+ eval 'gzip=$_gzip'
++ gzip=/bin/gzip
+ for file in '$loclist' '$trylist'
+ eval 'less=$_less'
++ less=/bin/less
+ for file in '$loclist' '$trylist'
+ eval 'ln=$_ln'
++ ln=/bin/ln
+ for file in '$loclist' '$trylist'
+ eval 'make=$_make'
++ make=/bin/make
+ for file in '$loclist' '$trylist'
+ eval 'more=$_more'
++ more=more
+ for file in '$loclist' '$trylist'
+ eval 'nm=$_nm'
++ nm=/bin/nm
+ for file in '$loclist' '$trylist'
+ eval 'nroff=$_nroff'
++ nroff=/bin/nroff
+ for file in '$loclist' '$trylist'
+ eval 'pg=$_pg'
++ pg=pg
+ for file in '$loclist' '$trylist'
+ eval 'test=$_test'
++ test=test
+ for file in '$loclist' '$trylist'
+ eval 'uname=$_uname'
++ uname=/bin/uname
+ for file in '$loclist' '$trylist'
+ eval 'zip=$_zip'
++ zip=/bin/zip
+ cat

Configure uses the operating system name and version to set some defaults.
The default value is probably right if the name rings a bell. Otherwise,
since spelling matters for me, either accept the default or answer "none"
to leave it blank.

+ case "$osname" in
+ dflt=msys
+ rp='Operating system name?'
+ . ./myread
++ xxxm=msys
++ case "$xxxm" in
++ case "$rp" in
+++ echo 'Operating system name? [msys]  '
+++ wc -c
++ test 32 -ge 80
++ echo -n 'Operating system name? [msys] '
Operating system name? [msys] ++ ans='!'
++ case "$fastread" in
++ case "$dflt" in
++ ans=
++ case "$silent-$rp" in
++ echo ' '
 
++ expr X : 'X!'
++ case "$ans" in
++ ans=msys
+ case "$ans" in
++ echo msys
++ /bin/sed -e 's/[ 	][	]*/_/g'
++ ./tr '[A-Z]' '[a-z]'
+ osname=msys
+ echo ' '
 
+ case "$osvers" in
+ dflt='1.0.17(0.4832)'
+ rp='Operating system version?'
+ . ./myread
++ xxxm='1.0.17(0.4832)'
++ case "$xxxm" in
++ case "$rp" in
+++ echo 'Operating system version? [1.0.17(0.4832)]  '
+++ wc -c
++ test 45 -ge 80
++ echo -n 'Operating system version? [1.0.17(0.4832)] '
Operating system version? [1.0.17(0.4832)] ++ ans='!'
++ case "$fastread" in
++ case "$dflt" in
++ ans=
++ case "$silent-$rp" in
++ echo ' '
 
++ expr X : 'X!'
++ case "$ans" in
++ ans='1.0.17(0.4832)'
+ case "$ans" in
+ osvers='1.0.17(0.4832)'
+ . ./posthint.sh
+ : who configured the system
++ LC_ALL=C
++ LANGUAGE=C
++ export LC_ALL
++ export LANGUAGE
++ /bin/date
+ cf_time='Tue Apr 26 22:16:11 EDT 2011'
+ case "$cf_by" in
+ cf_by=cwilson
+ case "$cf_by" in
+ : set up the script used to warn in case of inconsistency
+ cat
+ cat
+ : function used to set msys_nt-6.0 to
+ setvar='var=$1; eval "was=\$$1"; td=$define; tu=$undef;
case "$val$was" in
$define$undef) . ./whoa; eval "$var=\$td";;
$undef$define) . ./whoa; eval "$var=\$tu";;
*) eval "$var=$val";;
esac'
+ case "$usesocks" in
+ dflt=n
+ cat

Perl can be built to use the SOCKS proxy protocol library.  To do so,
Configure must be run with -Dusesocks.  If you use SOCKS you also need
to use the PerlIO abstraction layer, this will be implicitly selected.

If this doesn't make any sense to you, just accept the default 'n'.
+ rp='Build Perl for SOCKS?'
+ . ./myread
++ xxxm=n
++ case "$xxxm" in
++ case "$rp" in
+++ echo 'Build Perl for SOCKS? [n]  '
+++ wc -c
++ test 28 -ge 80
++ echo -n 'Build Perl for SOCKS? [n] '
Build Perl for SOCKS? [n] ++ ans='!'
++ case "$fastread" in
++ case "$dflt" in
++ ans=
++ case "$silent-$rp" in
++ echo ' '
 
++ expr X : 'X!'
++ case "$ans" in
++ ans=n
+ case "$ans" in
+ val=undef
+ set usesocks
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=usesocks
++ eval 'was=$usesocks'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval usesocks=undef
+++ usesocks=undef
+ case "$usesocks" in
+ case "$useperlio" in
+ dflt=y
+ cat

Previous version of perl5 used the standard IO mechanisms as
defined in <stdio.h>.  Versions 5.003_02 and later of perl5 allow
alternate IO mechanisms via the PerlIO abstraction layer, but the
stdio mechanism is still available if needed.  The abstraction layer
can use AT&T's sfio (if you already have sfio installed) or regular stdio.
Using PerlIO with sfio may cause problems with some extension modules.

If this doesn't make any sense to you, just accept the default 'y'.
+ rp='Use the PerlIO abstraction layer?'
+ . ./myread
++ xxxm=y
++ case "$xxxm" in
++ case "$rp" in
+++ echo 'Use the PerlIO abstraction layer? [y]  '
+++ wc -c
++ test 40 -ge 80
++ echo -n 'Use the PerlIO abstraction layer? [y] '
Use the PerlIO abstraction layer? [y] ++ ans='!'
++ case "$fastread" in
++ case "$dflt" in
++ ans=
++ case "$silent-$rp" in
++ echo ' '
 
++ expr X : 'X!'
++ case "$ans" in
++ ans=y
+ case "$ans" in
+ val=define
+ set useperlio
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=useperlio
++ eval 'was=$useperlio'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval useperlio=define
+++ useperlio=define
+ case "$usesocks" in
+ case "$usethreads" in
+ case "$useithreads$use5005threads" in
+ dflt=n
+ cat

Perl can be built to take advantage of threads on some systems.
To do so, Configure can be run with -Dusethreads.

Note that Perl built with threading support runs slightly slower
and uses more memory than plain Perl. The current implementation
is believed to be stable, but it is fairly new, and so should be
treated with caution.

If this doesn't make any sense to you, just accept the default 'n'.
+ rp='Build a threading Perl?'
+ . ./myread
++ xxxm=n
++ case "$xxxm" in
++ case "$rp" in
+++ echo 'Build a threading Perl? [n]  '
+++ wc -c
++ test 30 -ge 80
++ echo -n 'Build a threading Perl? [n] '
Build a threading Perl? [n] ++ ans='!'
++ case "$fastread" in
++ case "$dflt" in
++ ans=
++ case "$silent-$rp" in
++ echo ' '
 
++ expr X : 'X!'
++ case "$ans" in
++ ans=n
+ case "$ans" in
+ val=undef
+ set usethreads
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=usethreads
++ eval 'was=$usethreads'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval usethreads=undef
+++ usethreads=undef
+ case "$usethreads" in
+ useithreads=undef
+ use5005threads=undef
+ case "$useithreads$use5005threads" in
+ test Xundef = Xdefine -a Xdefine = Xundef
+ case "$d_oldpthreads" in
+ : Configure tests would be welcome here. For now, assume undef.
+ val=undef
+ set d_oldpthreads
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=d_oldpthreads
++ eval 'was=$d_oldpthreads'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval d_oldpthreads=undef
+++ d_oldpthreads=undef
+ : Look for a hint-file generated call-back-unit. If the
+ : user has specified that a threading perl is to be built,
+ : we may need to set or change some other defaults.
+ test -f usethreads.cbu
+ case "$usethreads" in
+ cat

Perl can be built so that multiple Perl interpreters can coexist
within the same Perl executable.
+ case "$useithreads" in
+ case "$usemultiplicity" in
+ dflt=n
+ echo ' '
 
+ echo 'If this doesn'\''t make any sense to you, just accept the default '\''n'\''.'
If this doesn't make any sense to you, just accept the default 'n'.
+ rp='Build Perl for multiplicity?'
+ . ./myread
++ xxxm=n
++ case "$xxxm" in
++ case "$rp" in
+++ echo 'Build Perl for multiplicity? [n]  '
+++ wc -c
++ test 35 -ge 80
++ echo -n 'Build Perl for multiplicity? [n] '
Build Perl for multiplicity? [n] ++ ans='!'
++ case "$fastread" in
++ case "$dflt" in
++ ans=
++ case "$silent-$rp" in
++ echo ' '
 
++ expr X : 'X!'
++ case "$ans" in
++ ans=n
+ case "$ans" in
+ val=undef
+ set usemultiplicity
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=usemultiplicity
++ eval 'was=$usemultiplicity'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval usemultiplicity=undef
+++ usemultiplicity=undef
+ case "$usemorebits" in
+ usemorebits=undef
+ : make some quick guesses about what we are up against
+ echo ' '
 
+ /bin/echo -n 'Hmm...  '
Hmm...  + echo exit 1
+ echo exit 1
+ echo exit 1
+ echo exit 1
+ echo exit 1
+ echo exit 1
+ echo exit 1
+ echo exit 1
+ d_bsd=undef
+ /bin/cat /usr/include/signal.h /usr/include/sys/signal.h
+ test -f /osf_boot
+ grep OSF/1 /usr/include/ctype.h
++ echo abc
++ /bin/tr a-z A-Z
+ test ABC = Abc
+ grep SIGTSTP foo
+ echo 'Looks kind of like a BSD system, but we'\''ll see...'
Looks kind of like a BSD system, but we'll see...
+ d_bsd=define
+ echo exit 0
+ case "$eunicefix" in
+ echo ' '
 
+ echo 'Congratulations.  You aren'\''t running Eunice.'
Congratulations.  You aren't running Eunice.
+ d_eunice=undef
+ : Detect OS2. The p_ variable is set above in the Head.U unit.
+ : Note that this also -- wrongly -- detects e.g. dos-djgpp, which also uses
+ : semicolon as a patch separator
+ case "$p_" in
+ test -f /xenix
+ echo ' '
 
+ echo 'It'\''s not Xenix...'
It's not Xenix...
+ d_xenix=undef
+ chmod +x xenix
+ : xenix
+ test -f /venix
+ echo ' '
 
+ ./xenix
+ echo 'Nor is it Venix...'
Nor is it Venix...
+ chmod +x bsd usg v7 osf1 eunice xenix venix os2
+ : bsd usg v7 osf1 eunice xenix venix os2
+ /bin/rm -f foo
+ case "$cc" in
+ dflt=gcc
+ rp='Use which C compiler?'
+ . ./myread
++ xxxm=gcc
++ case "$xxxm" in
++ case "$rp" in
+++ echo 'Use which C compiler? [gcc]  '
+++ wc -c
++ test 30 -ge 80
++ echo -n 'Use which C compiler? [gcc] '
Use which C compiler? [gcc] ++ ans='!'
++ case "$fastread" in
++ case "$dflt" in
++ ans=
++ case "$silent-$rp" in
++ echo ' '
 
++ expr X : 'X!'
++ case "$ans" in
++ ans=gcc
+ cc=gcc
+ : See if they have not cc but they do have gcc
+ . ./trygcc
++ case "$cc" in
++ /bin/rm -f try 'try.*'
++ /bin/cat
++ gcc -o try -DPERL_USE_SAFE_PUTENV -DDEBUGGING -s try.c
++ :
++ /bin/rm -f try try.c try.exe
+ : Look for a hint-file generated call-back-unit. Now that the
+ : user has specified the compiler, we may need to set or change some
+ : other defaults.
+ test -f cc.cbu
+ . ./checkcc
++ case "$cc" in
++ /bin/rm -f try 'try.*'
++ /bin/cat
++ gcc -o try -DPERL_USE_SAFE_PUTENV -DDEBUGGING -s try.c
++ :
++ /bin/rm -f try try.c try.exe
+ echo ' '
 
+ echo 'Checking for GNU cc in disguise and/or its version number...'
Checking for GNU cc in disguise and/or its version number...
+ /bin/cat
+ gcc -o try -DPERL_USE_SAFE_PUTENV -DDEBUGGING -s try.c
++ ./try
+ gccversion='3.4.4 (msys special)'
+ case "$gccversion" in
+ echo 'You are using GNU cc 3.4.4 (msys special).'
You are using GNU cc 3.4.4 (msys special).
+ ccname=gcc
+ /bin/rm -f try try.c try.exe
+ case "$gccversion" in
+ case "$gccversion" in
++ echo '3.4.4 (msys special)'
++ sed 's/ .*//'
+ gccshortvers=3.4.4
++ gcc -v
++ grep '/specs$'
++ sed 's!.*/[^-/]*-[^-/]*-\([^-/]*\)/3.4.4/specs!\1!'
+ gccosandvers=msys
+ gccshortvers=
+ case "$gccosandvers" in
+ gccosandvers=
+ case "$ccname" in
+ case "$gccversion" in
+ echo 'main(){}'
+ /bin/rm -f try try.c
+ : decide how portable to be. Allow command line overrides.
+ case "$d_portable" in
+ d_portable=define
+ : set up shell script to do /c/Users/cwilson expansion
+ cat
+ chmod +x filexp
+ : filexp
+ : now set up to get a file name
+ cat
+ cat
+ : What should the include directory be '?'
+ echo ' '
 
+ /bin/echo -n 'Hmm...  '
Hmm...  + dflt=/usr/include
+ incpath=
+ mips_type=
+ test -f /bin/mips
+ echo 'Doesn'\''t look like a MIPS system.'
Doesn't look like a MIPS system.
+ xxx_prompt=n
+ echo 'exit 1'
+ chmod +x mips
+ : mips
+ case "$usrinc" in
+ case "$xxx_prompt" in
+ usrinc=/usr/include
+ : see how we invoke the C preprocessor
+ echo ' '
 
+ echo 'Now, how can we feed standard input to your C preprocessor...'
Now, how can we feed standard input to your C preprocessor...
+ cat
+ cd ..
+ test '!' -f cppstdin
+ test Xmsys = Xaix -a 'X3.4.4 (msys special)' = X
+ echo 'cat >.$$.c; gcc -E ${1+"$@"} .$$.c; rm .$$.c'
+ chmod 755 cppstdin
++ pwd
+ wrapper=/usr/src/perl/perl-5.8.8/cppstdin
+ ok=false
+ cd UU
+ test X '!=' X
+ case "$cppstdin" in
+ false
+ echo 'Maybe "gcc -E" will work...'
Maybe "gcc -E" will work...
+ gcc -E
+ grep 'abc.*xyz' testcpp.out
+ echo 'Nope...maybe "gcc -E -" will work...'
Nope...maybe "gcc -E -" will work...
+ gcc -E -
+ grep 'abc.*xyz' testcpp.out
+ echo 'Yup, it does.'
Yup, it does.
+ x_cpp='gcc -E'
+ x_minus=-
+ case "$ok" in
+ cppstdin='gcc -E'
+ cppminus=-
+ cpprun='gcc -E'
+ cpplast=-
+ set X gcc -E
+ shift
+ case "$1" in
+ case "$cpprun" in
+ case "$cppstdin" in
+ /bin/rm -f /usr/src/perl/perl-5.8.8/cppstdin
+ /bin/rm -f testcpp.c testcpp.out
+ : Set private lib path
+ case "$plibpth" in
+ case "$libpth" in
+ dlist='/usr/lib /lib'
+ : Now check and see which directories actually exist, avoiding duplicates
+ libpth=
+ for xxx in '$dlist'
+ test -d /usr/lib
+ case " $libpth " in
+ libpth=' /usr/lib'
+ for xxx in '$dlist'
+ test -d /lib
+ case " $libpth " in
+ libpth=' /usr/lib /lib'
+ /bin/cat

Some systems have incompatible or broken versions of libraries.  Among
the directories listed in the question below, please remove any you
know not to be holding relevant libraries, and add any that are needed.
Say "none" for none.

+ case "$libpth" in
+ set X /usr/lib /lib
+ shift
+ dflt='/usr/lib /lib'
+ rp='Directories to use for library searches?'
+ . ./myread
++ xxxm='/usr/lib /lib'
++ case "$xxxm" in
++ case "$rp" in
+++ echo 'Directories to use for library searches? [/usr/lib /lib]  '
+++ wc -c
++ test 59 -ge 80
++ echo -n 'Directories to use for library searches? [/usr/lib /lib] '
Directories to use for library searches? [/usr/lib /lib] ++ ans='!'
++ case "$fastread" in
++ case "$dflt" in
++ ans=
++ case "$silent-$rp" in
++ echo ' '
 
++ expr X : 'X!'
++ case "$ans" in
++ ans='/usr/lib /lib'
+ case "$ans" in
+ libpth='/usr/lib /lib'
+ : compute shared library extension
+ case "$so" in
+ dflt=dll
+ /bin/cat

On some systems, shared libraries may be available.  Answer 'none' if
you want to suppress searching of shared libraries for the remainder
of this configuration.

+ rp='What is the file extension used for shared libraries?'
+ . ./myread
++ xxxm=dll
++ case "$xxxm" in
++ case "$rp" in
+++ echo 'What is the file extension used for shared libraries? [dll]  '
+++ wc -c
++ test 62 -ge 80
++ echo -n 'What is the file extension used for shared libraries? [dll] '
What is the file extension used for shared libraries? [dll] ++ ans='!'
++ case "$fastread" in
++ case "$dflt" in
++ ans=
++ case "$silent-$rp" in
++ echo ' '
 
++ expr X : 'X!'
++ case "$ans" in
++ ans=dll
+ so=dll
+ : Define several unixisms.
+ : Hints files or command line option can be used to override them.
+ : The convoluted testing is in case hints files set either the old
+ : or the new name.
+ case "$_exe" in
+ case "$_a" in
+ case "$lib_ext" in
+ _a=.a
+ case "$_o" in
+ case "$obj_ext" in
+ _o=.o
+ case "$p_" in
+ exe_ext=.exe
+ lib_ext=.a
+ obj_ext=.o
+ path_sep=:
+ : Which makefile gets called first. This is used by make depend.
+ case "$firstmakefile" in
+ case "$ccflags" in
+ case "$uselongdouble" in
+ dflt=n
+ cat

Perl can be built to take advantage of long doubles which
(if available) may give more accuracy and range for floating point numbers.

If this doesn't make any sense to you, just accept the default 'n'.
+ rp='Try to use long doubles if available?'
+ . ./myread
++ xxxm=n
++ case "$xxxm" in
++ case "$rp" in
+++ echo 'Try to use long doubles if available? [n]  '
+++ wc -c
++ test 44 -ge 80
++ echo -n 'Try to use long doubles if available? [n] '
Try to use long doubles if available? [n] ++ ans='!'
++ case "$fastread" in
++ case "$dflt" in
++ ans=
++ case "$silent-$rp" in
++ echo ' '
 
++ expr X : 'X!'
++ case "$ans" in
++ ans=n
+ case "$ans" in
+ val=undef
+ set uselongdouble
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=uselongdouble
++ eval 'was=$uselongdouble'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval uselongdouble=undef
+++ uselongdouble=undef
+ case "$uselongdouble" in
+ : Look for a hint-file generated call-back-unit. If the
+ : user has specified that long doubles should be used,
+ : we may need to set or change some other defaults.
+ test -f uselongdouble.cbu
+ case "$uselongdouble" in
+ : Looking for optional libraries
+ echo ' '
 
+ echo 'Checking for optional libraries...'
Checking for optional libraries...
+ case "$libs" in
+ dflt=
+ case "$libswanted" in
+ case "$usesocks" in
+ libsfound=
+ libsfiles=
+ libsdirs=
+ libspath=
+ for thisdir in '$libpth' '$xlibpth'
+ test -d /usr/lib
+ libspath=' /usr/lib'
+ for thisdir in '$libpth' '$xlibpth'
+ test -d /lib
+ libspath=' /usr/lib /lib'
+ for thisdir in '$libpth' '$xlibpth'
+ test -d /usr/lib/386
+ for thisdir in '$libpth' '$xlibpth'
+ test -d /lib/386
+ for thislib in '$libswanted'
+ for thisdir in '$libspath'
+ xxx=
+ test '!' -f '' -a X = X
++ ls '/usr/lib/libsfio.dll.[0-9]'
++ sed -n '$p'
+ xxx=
+ test -f ''
+ test -f ''
+ test '!' -f ''
+ xxx=/usr/lib/libsfio.dll
+ test -f /usr/lib/libsfio.dll
+ test -f /usr/lib/libsfio.dll
+ test '!' -f /usr/lib/libsfio.dll
+ xxx=/usr/lib/libsfio.a
+ test -f /usr/lib/libsfio.a
+ test -f /usr/lib/libsfio.a
+ test '!' -f /usr/lib/libsfio.a
+ xxx=/usr/lib/sfio.a
+ test -f /usr/lib/sfio.a
+ test -f /usr/lib/sfio.a
+ test '!' -f /usr/lib/sfio.a
+ xxx=/usr/lib/libsfio_s.a
+ test -f /usr/lib/libsfio_s.a
+ test -f /usr/lib/libsfio_s.a
+ test -f /usr/lib/libsfio_s.a
+ test '!' -f /usr/lib/libsfio_s.a
+ xxx=/usr/lib/Slibsfio.a
+ test -f /usr/lib/Slibsfio.a
+ test -f /usr/lib/Slibsfio.a
+ test -f /usr/lib/Slibsfio.a
+ for thisdir in '$libspath'
+ xxx=
+ test '!' -f '' -a X = X
++ ls '/lib/libsfio.dll.[0-9]'
++ sed -n '$p'
+ xxx=
+ test -f ''
+ test -f ''
+ test '!' -f ''
+ xxx=/lib/libsfio.dll
+ test -f /lib/libsfio.dll
+ test -f /lib/libsfio.dll
+ test '!' -f /lib/libsfio.dll
+ xxx=/lib/libsfio.a
+ test -f /lib/libsfio.a
+ test -f /lib/libsfio.a
+ test '!' -f /lib/libsfio.a
+ xxx=/lib/sfio.a
+ test -f /lib/sfio.a
+ test -f /lib/sfio.a
+ test '!' -f /lib/sfio.a
+ xxx=/lib/libsfio_s.a
+ test -f /lib/libsfio_s.a
+ test -f /lib/libsfio_s.a
+ test -f /lib/libsfio_s.a
+ test '!' -f /lib/libsfio_s.a
+ xxx=/lib/Slibsfio.a
+ test -f /lib/Slibsfio.a
+ test -f /lib/Slibsfio.a
+ test -f /lib/Slibsfio.a
+ test '!' -f /lib/Slibsfio.a
+ echo 'No -lsfio.'
No -lsfio.
+ for thislib in '$libswanted'
+ for thisdir in '$libspath'
+ xxx=
+ test '!' -f '' -a X = X
++ ls '/usr/lib/libsocket.dll.[0-9]'
++ sed -n '$p'
+ xxx=
+ test -f ''
+ test -f ''
+ test '!' -f ''
+ xxx=/usr/lib/libsocket.dll
+ test -f /usr/lib/libsocket.dll
+ test -f /usr/lib/libsocket.dll
+ test '!' -f /usr/lib/libsocket.dll
+ xxx=/usr/lib/libsocket.a
+ test -f /usr/lib/libsocket.a
+ test -f /usr/lib/libsocket.a
+ test '!' -f /usr/lib/libsocket.a
+ xxx=/usr/lib/socket.a
+ test -f /usr/lib/socket.a
+ test -f /usr/lib/socket.a
+ test '!' -f /usr/lib/socket.a
+ xxx=/usr/lib/libsocket_s.a
+ test -f /usr/lib/libsocket_s.a
+ test -f /usr/lib/libsocket_s.a
+ test -f /usr/lib/libsocket_s.a
+ test '!' -f /usr/lib/libsocket_s.a
+ xxx=/usr/lib/Slibsocket.a
+ test -f /usr/lib/Slibsocket.a
+ test -f /usr/lib/Slibsocket.a
+ test -f /usr/lib/Slibsocket.a
+ for thisdir in '$libspath'
+ xxx=
+ test '!' -f '' -a X = X
++ ls '/lib/libsocket.dll.[0-9]'
++ sed -n '$p'
+ xxx=
+ test -f ''
+ test -f ''
+ test '!' -f ''
+ xxx=/lib/libsocket.dll
+ test -f /lib/libsocket.dll
+ test -f /lib/libsocket.dll
+ test '!' -f /lib/libsocket.dll
+ xxx=/lib/libsocket.a
+ test -f /lib/libsocket.a
+ test -f /lib/libsocket.a
+ test '!' -f /lib/libsocket.a
+ xxx=/lib/socket.a
+ test -f /lib/socket.a
+ test -f /lib/socket.a
+ test '!' -f /lib/socket.a
+ xxx=/lib/libsocket_s.a
+ test -f /lib/libsocket_s.a
+ test -f /lib/libsocket_s.a
+ test -f /lib/libsocket_s.a
+ test '!' -f /lib/libsocket_s.a
+ xxx=/lib/Slibsocket.a
+ test -f /lib/Slibsocket.a
+ test -f /lib/Slibsocket.a
+ test -f /lib/Slibsocket.a
+ test '!' -f /lib/Slibsocket.a
+ echo 'No -lsocket.'
No -lsocket.
+ for thislib in '$libswanted'
+ for thisdir in '$libspath'
+ xxx=
+ test '!' -f '' -a X = X
++ ls '/usr/lib/libbind.dll.[0-9]'
++ sed -n '$p'
+ xxx=
+ test -f ''
+ test -f ''
+ test '!' -f ''
+ xxx=/usr/lib/libbind.dll
+ test -f /usr/lib/libbind.dll
+ test -f /usr/lib/libbind.dll
+ test '!' -f /usr/lib/libbind.dll
+ xxx=/usr/lib/libbind.a
+ test -f /usr/lib/libbind.a
+ test -f /usr/lib/libbind.a
+ test '!' -f /usr/lib/libbind.a
+ xxx=/usr/lib/bind.a
+ test -f /usr/lib/bind.a
+ test -f /usr/lib/bind.a
+ test '!' -f /usr/lib/bind.a
+ xxx=/usr/lib/libbind_s.a
+ test -f /usr/lib/libbind_s.a
+ test -f /usr/lib/libbind_s.a
+ test -f /usr/lib/libbind_s.a
+ test '!' -f /usr/lib/libbind_s.a
+ xxx=/usr/lib/Slibbind.a
+ test -f /usr/lib/Slibbind.a
+ test -f /usr/lib/Slibbind.a
+ test -f /usr/lib/Slibbind.a
+ for thisdir in '$libspath'
+ xxx=
+ test '!' -f '' -a X = X
++ ls '/lib/libbind.dll.[0-9]'
++ sed -n '$p'
+ xxx=
+ test -f ''
+ test -f ''
+ test '!' -f ''
+ xxx=/lib/libbind.dll
+ test -f /lib/libbind.dll
+ test -f /lib/libbind.dll
+ test '!' -f /lib/libbind.dll
+ xxx=/lib/libbind.a
+ test -f /lib/libbind.a
+ test -f /lib/libbind.a
+ test '!' -f /lib/libbind.a
+ xxx=/lib/bind.a
+ test -f /lib/bind.a
+ test -f /lib/bind.a
+ test '!' -f /lib/bind.a
+ xxx=/lib/libbind_s.a
+ test -f /lib/libbind_s.a
+ test -f /lib/libbind_s.a
+ test -f /lib/libbind_s.a
+ test '!' -f /lib/libbind_s.a
+ xxx=/lib/Slibbind.a
+ test -f /lib/Slibbind.a
+ test -f /lib/Slibbind.a
+ test -f /lib/Slibbind.a
+ test '!' -f /lib/Slibbind.a
+ echo 'No -lbind.'
No -lbind.
+ for thislib in '$libswanted'
+ for thisdir in '$libspath'
+ xxx=
+ test '!' -f '' -a X = X
++ ls '/usr/lib/libinet.dll.[0-9]'
++ sed -n '$p'
+ xxx=
+ test -f ''
+ test -f ''
+ test '!' -f ''
+ xxx=/usr/lib/libinet.dll
+ test -f /usr/lib/libinet.dll
+ test -f /usr/lib/libinet.dll
+ test '!' -f /usr/lib/libinet.dll
+ xxx=/usr/lib/libinet.a
+ test -f /usr/lib/libinet.a
+ test -f /usr/lib/libinet.a
+ test '!' -f /usr/lib/libinet.a
+ xxx=/usr/lib/inet.a
+ test -f /usr/lib/inet.a
+ test -f /usr/lib/inet.a
+ test '!' -f /usr/lib/inet.a
+ xxx=/usr/lib/libinet_s.a
+ test -f /usr/lib/libinet_s.a
+ test -f /usr/lib/libinet_s.a
+ test -f /usr/lib/libinet_s.a
+ test '!' -f /usr/lib/libinet_s.a
+ xxx=/usr/lib/Slibinet.a
+ test -f /usr/lib/Slibinet.a
+ test -f /usr/lib/Slibinet.a
+ test -f /usr/lib/Slibinet.a
+ for thisdir in '$libspath'
+ xxx=
+ test '!' -f '' -a X = X
++ ls '/lib/libinet.dll.[0-9]'
++ sed -n '$p'
+ xxx=
+ test -f ''
+ test -f ''
+ test '!' -f ''
+ xxx=/lib/libinet.dll
+ test -f /lib/libinet.dll
+ test -f /lib/libinet.dll
+ test '!' -f /lib/libinet.dll
+ xxx=/lib/libinet.a
+ test -f /lib/libinet.a
+ test -f /lib/libinet.a
+ test '!' -f /lib/libinet.a
+ xxx=/lib/inet.a
+ test -f /lib/inet.a
+ test -f /lib/inet.a
+ test '!' -f /lib/inet.a
+ xxx=/lib/libinet_s.a
+ test -f /lib/libinet_s.a
+ test -f /lib/libinet_s.a
+ test -f /lib/libinet_s.a
+ test '!' -f /lib/libinet_s.a
+ xxx=/lib/Slibinet.a
+ test -f /lib/Slibinet.a
+ test -f /lib/Slibinet.a
+ test -f /lib/Slibinet.a
+ test '!' -f /lib/Slibinet.a
+ echo 'No -linet.'
No -linet.
+ for thislib in '$libswanted'
+ for thisdir in '$libspath'
+ xxx=
+ test '!' -f '' -a X = X
++ ls '/usr/lib/libnsl.dll.[0-9]'
++ sed -n '$p'
+ xxx=
+ test -f ''
+ test -f ''
+ test '!' -f ''
+ xxx=/usr/lib/libnsl.dll
+ test -f /usr/lib/libnsl.dll
+ test -f /usr/lib/libnsl.dll
+ test '!' -f /usr/lib/libnsl.dll
+ xxx=/usr/lib/libnsl.a
+ test -f /usr/lib/libnsl.a
+ test -f /usr/lib/libnsl.a
+ test '!' -f /usr/lib/libnsl.a
+ xxx=/usr/lib/nsl.a
+ test -f /usr/lib/nsl.a
+ test -f /usr/lib/nsl.a
+ test '!' -f /usr/lib/nsl.a
+ xxx=/usr/lib/libnsl_s.a
+ test -f /usr/lib/libnsl_s.a
+ test -f /usr/lib/libnsl_s.a
+ test -f /usr/lib/libnsl_s.a
+ test '!' -f /usr/lib/libnsl_s.a
+ xxx=/usr/lib/Slibnsl.a
+ test -f /usr/lib/Slibnsl.a
+ test -f /usr/lib/Slibnsl.a
+ test -f /usr/lib/Slibnsl.a
+ for thisdir in '$libspath'
+ xxx=
+ test '!' -f '' -a X = X
++ ls '/lib/libnsl.dll.[0-9]'
++ sed -n '$p'
+ xxx=
+ test -f ''
+ test -f ''
+ test '!' -f ''
+ xxx=/lib/libnsl.dll
+ test -f /lib/libnsl.dll
+ test -f /lib/libnsl.dll
+ test '!' -f /lib/libnsl.dll
+ xxx=/lib/libnsl.a
+ test -f /lib/libnsl.a
+ test -f /lib/libnsl.a
+ test '!' -f /lib/libnsl.a
+ xxx=/lib/nsl.a
+ test -f /lib/nsl.a
+ test -f /lib/nsl.a
+ test '!' -f /lib/nsl.a
+ xxx=/lib/libnsl_s.a
+ test -f /lib/libnsl_s.a
+ test -f /lib/libnsl_s.a
+ test -f /lib/libnsl_s.a
+ test '!' -f /lib/libnsl_s.a
+ xxx=/lib/Slibnsl.a
+ test -f /lib/Slibnsl.a
+ test -f /lib/Slibnsl.a
+ test -f /lib/Slibnsl.a
+ test '!' -f /lib/Slibnsl.a
+ echo 'No -lnsl.'
No -lnsl.
+ for thislib in '$libswanted'
+ for thisdir in '$libspath'
+ xxx=
+ test '!' -f '' -a X = X
++ ls '/usr/lib/libnm.dll.[0-9]'
++ sed -n '$p'
+ xxx=
+ test -f ''
+ test -f ''
+ test '!' -f ''
+ xxx=/usr/lib/libnm.dll
+ test -f /usr/lib/libnm.dll
+ test -f /usr/lib/libnm.dll
+ test '!' -f /usr/lib/libnm.dll
+ xxx=/usr/lib/libnm.a
+ test -f /usr/lib/libnm.a
+ test -f /usr/lib/libnm.a
+ test '!' -f /usr/lib/libnm.a
+ xxx=/usr/lib/nm.a
+ test -f /usr/lib/nm.a
+ test -f /usr/lib/nm.a
+ test '!' -f /usr/lib/nm.a
+ xxx=/usr/lib/libnm_s.a
+ test -f /usr/lib/libnm_s.a
+ test -f /usr/lib/libnm_s.a
+ test -f /usr/lib/libnm_s.a
+ test '!' -f /usr/lib/libnm_s.a
+ xxx=/usr/lib/Slibnm.a
+ test -f /usr/lib/Slibnm.a
+ test -f /usr/lib/Slibnm.a
+ test -f /usr/lib/Slibnm.a
+ for thisdir in '$libspath'
+ xxx=
+ test '!' -f '' -a X = X
++ ls '/lib/libnm.dll.[0-9]'
++ sed -n '$p'
+ xxx=
+ test -f ''
+ test -f ''
+ test '!' -f ''
+ xxx=/lib/libnm.dll
+ test -f /lib/libnm.dll
+ test -f /lib/libnm.dll
+ test '!' -f /lib/libnm.dll
+ xxx=/lib/libnm.a
+ test -f /lib/libnm.a
+ test -f /lib/libnm.a
+ test '!' -f /lib/libnm.a
+ xxx=/lib/nm.a
+ test -f /lib/nm.a
+ test -f /lib/nm.a
+ test '!' -f /lib/nm.a
+ xxx=/lib/libnm_s.a
+ test -f /lib/libnm_s.a
+ test -f /lib/libnm_s.a
+ test -f /lib/libnm_s.a
+ test '!' -f /lib/libnm_s.a
+ xxx=/lib/Slibnm.a
+ test -f /lib/Slibnm.a
+ test -f /lib/Slibnm.a
+ test -f /lib/Slibnm.a
+ test '!' -f /lib/Slibnm.a
+ echo 'No -lnm.'
No -lnm.
+ for thislib in '$libswanted'
+ for thisdir in '$libspath'
+ xxx=
+ test '!' -f '' -a X = X
++ ls '/usr/lib/libndbm.dll.[0-9]'
++ sed -n '$p'
+ xxx=
+ test -f ''
+ test -f ''
+ test '!' -f ''
+ xxx=/usr/lib/libndbm.dll
+ test -f /usr/lib/libndbm.dll
+ test -f /usr/lib/libndbm.dll
+ test '!' -f /usr/lib/libndbm.dll
+ xxx=/usr/lib/libndbm.a
+ test -f /usr/lib/libndbm.a
+ test -f /usr/lib/libndbm.a
+ test '!' -f /usr/lib/libndbm.a
+ xxx=/usr/lib/ndbm.a
+ test -f /usr/lib/ndbm.a
+ test -f /usr/lib/ndbm.a
+ test '!' -f /usr/lib/ndbm.a
+ xxx=/usr/lib/libndbm_s.a
+ test -f /usr/lib/libndbm_s.a
+ test -f /usr/lib/libndbm_s.a
+ test -f /usr/lib/libndbm_s.a
+ test '!' -f /usr/lib/libndbm_s.a
+ xxx=/usr/lib/Slibndbm.a
+ test -f /usr/lib/Slibndbm.a
+ test -f /usr/lib/Slibndbm.a
+ test -f /usr/lib/Slibndbm.a
+ for thisdir in '$libspath'
+ xxx=
+ test '!' -f '' -a X = X
++ ls '/lib/libndbm.dll.[0-9]'
++ sed -n '$p'
+ xxx=
+ test -f ''
+ test -f ''
+ test '!' -f ''
+ xxx=/lib/libndbm.dll
+ test -f /lib/libndbm.dll
+ test -f /lib/libndbm.dll
+ test '!' -f /lib/libndbm.dll
+ xxx=/lib/libndbm.a
+ test -f /lib/libndbm.a
+ test -f /lib/libndbm.a
+ test '!' -f /lib/libndbm.a
+ xxx=/lib/ndbm.a
+ test -f /lib/ndbm.a
+ test -f /lib/ndbm.a
+ test '!' -f /lib/ndbm.a
+ xxx=/lib/libndbm_s.a
+ test -f /lib/libndbm_s.a
+ test -f /lib/libndbm_s.a
+ test -f /lib/libndbm_s.a
+ test '!' -f /lib/libndbm_s.a
+ xxx=/lib/Slibndbm.a
+ test -f /lib/Slibndbm.a
+ test -f /lib/Slibndbm.a
+ test -f /lib/Slibndbm.a
+ test '!' -f /lib/Slibndbm.a
+ echo 'No -lndbm.'
No -lndbm.
+ for thislib in '$libswanted'
+ for thisdir in '$libspath'
+ xxx=
+ test '!' -f '' -a X = X
++ ls '/usr/lib/libgdbm.dll.[0-9]'
++ sed -n '$p'
+ xxx=
+ test -f ''
+ test -f ''
+ test '!' -f ''
+ xxx=/usr/lib/libgdbm.dll
+ test -f /usr/lib/libgdbm.dll
+ test -f /usr/lib/libgdbm.dll
+ test '!' -f /usr/lib/libgdbm.dll
+ xxx=/usr/lib/libgdbm.a
+ test -f /usr/lib/libgdbm.a
+ eval
+ test -f /usr/lib/libgdbm.a
+ libstyle=static
+ test '!' -f /usr/lib/libgdbm.a
+ test '!' -f /usr/lib/libgdbm.a
+ test '!' -f /usr/lib/libgdbm.a
+ test -f /usr/lib/libgdbm.a
+ case "$libstyle" in
+ echo 'Found -lgdbm.'
Found -lgdbm.
+ case " $dflt " in
+ dflt=' -lgdbm'
+ libsfound=' /usr/lib/libgdbm.a'
++ basename /usr/lib/libgdbm.a
+ yyy=libgdbm.a
+ libsfiles=' libgdbm.a'
++ echo /usr/lib/libgdbm.a
++ /bin/sed -e 's%/libgdbm.a$%%'
+ yyy=/usr/lib
+ case " $libsdirs " in
+ libsdirs=' /usr/lib'
+ break
+ test '!' -f /usr/lib/libgdbm.a
+ for thislib in '$libswanted'
+ for thisdir in '$libspath'
+ xxx=
+ test '!' -f '' -a X = X
++ ls '/usr/lib/libdbm.dll.[0-9]'
++ sed -n '$p'
+ xxx=
+ test -f ''
+ test -f ''
+ test '!' -f ''
+ xxx=/usr/lib/libdbm.dll
+ test -f /usr/lib/libdbm.dll
+ test -f /usr/lib/libdbm.dll
+ test '!' -f /usr/lib/libdbm.dll
+ xxx=/usr/lib/libdbm.a
+ test -f /usr/lib/libdbm.a
+ test -f /usr/lib/libdbm.a
+ test '!' -f /usr/lib/libdbm.a
+ xxx=/usr/lib/dbm.a
+ test -f /usr/lib/dbm.a
+ test -f /usr/lib/dbm.a
+ test '!' -f /usr/lib/dbm.a
+ xxx=/usr/lib/libdbm_s.a
+ test -f /usr/lib/libdbm_s.a
+ test -f /usr/lib/libdbm_s.a
+ test -f /usr/lib/libdbm_s.a
+ test '!' -f /usr/lib/libdbm_s.a
+ xxx=/usr/lib/Slibdbm.a
+ test -f /usr/lib/Slibdbm.a
+ test -f /usr/lib/Slibdbm.a
+ test -f /usr/lib/Slibdbm.a
+ for thisdir in '$libspath'
+ xxx=
+ test '!' -f '' -a X = X
++ ls '/lib/libdbm.dll.[0-9]'
++ sed -n '$p'
+ xxx=
+ test -f ''
+ test -f ''
+ test '!' -f ''
+ xxx=/lib/libdbm.dll
+ test -f /lib/libdbm.dll
+ test -f /lib/libdbm.dll
+ test '!' -f /lib/libdbm.dll
+ xxx=/lib/libdbm.a
+ test -f /lib/libdbm.a
+ test -f /lib/libdbm.a
+ test '!' -f /lib/libdbm.a
+ xxx=/lib/dbm.a
+ test -f /lib/dbm.a
+ test -f /lib/dbm.a
+ test '!' -f /lib/dbm.a
+ xxx=/lib/libdbm_s.a
+ test -f /lib/libdbm_s.a
+ test -f /lib/libdbm_s.a
+ test -f /lib/libdbm_s.a
+ test '!' -f /lib/libdbm_s.a
+ xxx=/lib/Slibdbm.a
+ test -f /lib/Slibdbm.a
+ test -f /lib/Slibdbm.a
+ test -f /lib/Slibdbm.a
+ test '!' -f /lib/Slibdbm.a
+ echo 'No -ldbm.'
No -ldbm.
+ for thislib in '$libswanted'
+ for thisdir in '$libspath'
+ xxx=
+ test '!' -f '' -a X = X
++ ls '/usr/lib/libdb.dll.[0-9]'
++ sed -n '$p'
+ xxx=
+ test -f ''
+ test -f ''
+ test '!' -f ''
+ xxx=/usr/lib/libdb.dll
+ test -f /usr/lib/libdb.dll
+ test -f /usr/lib/libdb.dll
+ test '!' -f /usr/lib/libdb.dll
+ xxx=/usr/lib/libdb.a
+ test -f /usr/lib/libdb.a
+ test -f /usr/lib/libdb.a
+ test '!' -f /usr/lib/libdb.a
+ xxx=/usr/lib/db.a
+ test -f /usr/lib/db.a
+ test -f /usr/lib/db.a
+ test '!' -f /usr/lib/db.a
+ xxx=/usr/lib/libdb_s.a
+ test -f /usr/lib/libdb_s.a
+ test -f /usr/lib/libdb_s.a
+ test -f /usr/lib/libdb_s.a
+ test '!' -f /usr/lib/libdb_s.a
+ xxx=/usr/lib/Slibdb.a
+ test -f /usr/lib/Slibdb.a
+ test -f /usr/lib/Slibdb.a
+ test -f /usr/lib/Slibdb.a
+ for thisdir in '$libspath'
+ xxx=
+ test '!' -f '' -a X = X
++ ls '/lib/libdb.dll.[0-9]'
++ sed -n '$p'
+ xxx=
+ test -f ''
+ test -f ''
+ test '!' -f ''
+ xxx=/lib/libdb.dll
+ test -f /lib/libdb.dll
+ test -f /lib/libdb.dll
+ test '!' -f /lib/libdb.dll
+ xxx=/lib/libdb.a
+ test -f /lib/libdb.a
+ test -f /lib/libdb.a
+ test '!' -f /lib/libdb.a
+ xxx=/lib/db.a
+ test -f /lib/db.a
+ test -f /lib/db.a
+ test '!' -f /lib/db.a
+ xxx=/lib/libdb_s.a
+ test -f /lib/libdb_s.a
+ test -f /lib/libdb_s.a
+ test -f /lib/libdb_s.a
+ test '!' -f /lib/libdb_s.a
+ xxx=/lib/Slibdb.a
+ test -f /lib/Slibdb.a
+ test -f /lib/Slibdb.a
+ test -f /lib/Slibdb.a
+ test '!' -f /lib/Slibdb.a
+ echo 'No -ldb.'
No -ldb.
+ for thislib in '$libswanted'
+ for thisdir in '$libspath'
+ xxx=
+ test '!' -f '' -a X = X
++ ls '/usr/lib/libmalloc.dll.[0-9]'
++ sed -n '$p'
+ xxx=
+ test -f ''
+ test -f ''
+ test '!' -f ''
+ xxx=/usr/lib/libmalloc.dll
+ test -f /usr/lib/libmalloc.dll
+ test -f /usr/lib/libmalloc.dll
+ test '!' -f /usr/lib/libmalloc.dll
+ xxx=/usr/lib/libmalloc.a
+ test -f /usr/lib/libmalloc.a
+ test -f /usr/lib/libmalloc.a
+ test '!' -f /usr/lib/libmalloc.a
+ xxx=/usr/lib/malloc.a
+ test -f /usr/lib/malloc.a
+ test -f /usr/lib/malloc.a
+ test '!' -f /usr/lib/malloc.a
+ xxx=/usr/lib/libmalloc_s.a
+ test -f /usr/lib/libmalloc_s.a
+ test -f /usr/lib/libmalloc_s.a
+ test -f /usr/lib/libmalloc_s.a
+ test '!' -f /usr/lib/libmalloc_s.a
+ xxx=/usr/lib/Slibmalloc.a
+ test -f /usr/lib/Slibmalloc.a
+ test -f /usr/lib/Slibmalloc.a
+ test -f /usr/lib/Slibmalloc.a
+ for thisdir in '$libspath'
+ xxx=
+ test '!' -f '' -a X = X
++ ls '/lib/libmalloc.dll.[0-9]'
++ sed -n '$p'
+ xxx=
+ test -f ''
+ test -f ''
+ test '!' -f ''
+ xxx=/lib/libmalloc.dll
+ test -f /lib/libmalloc.dll
+ test -f /lib/libmalloc.dll
+ test '!' -f /lib/libmalloc.dll
+ xxx=/lib/libmalloc.a
+ test -f /lib/libmalloc.a
+ test -f /lib/libmalloc.a
+ test '!' -f /lib/libmalloc.a
+ xxx=/lib/malloc.a
+ test -f /lib/malloc.a
+ test -f /lib/malloc.a
+ test '!' -f /lib/malloc.a
+ xxx=/lib/libmalloc_s.a
+ test -f /lib/libmalloc_s.a
+ test -f /lib/libmalloc_s.a
+ test -f /lib/libmalloc_s.a
+ test '!' -f /lib/libmalloc_s.a
+ xxx=/lib/Slibmalloc.a
+ test -f /lib/Slibmalloc.a
+ test -f /lib/Slibmalloc.a
+ test -f /lib/Slibmalloc.a
+ test '!' -f /lib/Slibmalloc.a
+ echo 'No -lmalloc.'
No -lmalloc.
+ for thislib in '$libswanted'
+ for thisdir in '$libspath'
+ xxx=
+ test '!' -f '' -a X = X
++ ls '/usr/lib/libdl.dll.[0-9]'
++ sed -n '$p'
+ xxx=
+ test -f ''
+ test -f ''
+ test '!' -f ''
+ xxx=/usr/lib/libdl.dll
+ test -f /usr/lib/libdl.dll
+ test -f /usr/lib/libdl.dll
+ test '!' -f /usr/lib/libdl.dll
+ xxx=/usr/lib/libdl.a
+ test -f /usr/lib/libdl.a
+ test -f /usr/lib/libdl.a
+ test '!' -f /usr/lib/libdl.a
+ xxx=/usr/lib/dl.a
+ test -f /usr/lib/dl.a
+ test -f /usr/lib/dl.a
+ test '!' -f /usr/lib/dl.a
+ xxx=/usr/lib/libdl_s.a
+ test -f /usr/lib/libdl_s.a
+ test -f /usr/lib/libdl_s.a
+ test -f /usr/lib/libdl_s.a
+ test '!' -f /usr/lib/libdl_s.a
+ xxx=/usr/lib/Slibdl.a
+ test -f /usr/lib/Slibdl.a
+ test -f /usr/lib/Slibdl.a
+ test -f /usr/lib/Slibdl.a
+ for thisdir in '$libspath'
+ xxx=
+ test '!' -f '' -a X = X
++ ls '/lib/libdl.dll.[0-9]'
++ sed -n '$p'
+ xxx=
+ test -f ''
+ test -f ''
+ test '!' -f ''
+ xxx=/lib/libdl.dll
+ test -f /lib/libdl.dll
+ test -f /lib/libdl.dll
+ test '!' -f /lib/libdl.dll
+ xxx=/lib/libdl.a
+ test -f /lib/libdl.a
+ test -f /lib/libdl.a
+ test '!' -f /lib/libdl.a
+ xxx=/lib/dl.a
+ test -f /lib/dl.a
+ test -f /lib/dl.a
+ test '!' -f /lib/dl.a
+ xxx=/lib/libdl_s.a
+ test -f /lib/libdl_s.a
+ test -f /lib/libdl_s.a
+ test -f /lib/libdl_s.a
+ test '!' -f /lib/libdl_s.a
+ xxx=/lib/Slibdl.a
+ test -f /lib/Slibdl.a
+ test -f /lib/Slibdl.a
+ test -f /lib/Slibdl.a
+ test '!' -f /lib/Slibdl.a
+ echo 'No -ldl.'
No -ldl.
+ for thislib in '$libswanted'
+ for thisdir in '$libspath'
+ xxx=
+ test '!' -f '' -a X = X
++ ls '/usr/lib/libdld.dll.[0-9]'
++ sed -n '$p'
+ xxx=
+ test -f ''
+ test -f ''
+ test '!' -f ''
+ xxx=/usr/lib/libdld.dll
+ test -f /usr/lib/libdld.dll
+ test -f /usr/lib/libdld.dll
+ test '!' -f /usr/lib/libdld.dll
+ xxx=/usr/lib/libdld.a
+ test -f /usr/lib/libdld.a
+ test -f /usr/lib/libdld.a
+ test '!' -f /usr/lib/libdld.a
+ xxx=/usr/lib/dld.a
+ test -f /usr/lib/dld.a
+ test -f /usr/lib/dld.a
+ test '!' -f /usr/lib/dld.a
+ xxx=/usr/lib/libdld_s.a
+ test -f /usr/lib/libdld_s.a
+ test -f /usr/lib/libdld_s.a
+ test -f /usr/lib/libdld_s.a
+ test '!' -f /usr/lib/libdld_s.a
+ xxx=/usr/lib/Slibdld.a
+ test -f /usr/lib/Slibdld.a
+ test -f /usr/lib/Slibdld.a
+ test -f /usr/lib/Slibdld.a
+ for thisdir in '$libspath'
+ xxx=
+ test '!' -f '' -a X = X
++ ls '/lib/libdld.dll.[0-9]'
++ sed -n '$p'
+ xxx=
+ test -f ''
+ test -f ''
+ test '!' -f ''
+ xxx=/lib/libdld.dll
+ test -f /lib/libdld.dll
+ test -f /lib/libdld.dll
+ test '!' -f /lib/libdld.dll
+ xxx=/lib/libdld.a
+ test -f /lib/libdld.a
+ test -f /lib/libdld.a
+ test '!' -f /lib/libdld.a
+ xxx=/lib/dld.a
+ test -f /lib/dld.a
+ test -f /lib/dld.a
+ test '!' -f /lib/dld.a
+ xxx=/lib/libdld_s.a
+ test -f /lib/libdld_s.a
+ test -f /lib/libdld_s.a
+ test -f /lib/libdld_s.a
+ test '!' -f /lib/libdld_s.a
+ xxx=/lib/Slibdld.a
+ test -f /lib/Slibdld.a
+ test -f /lib/Slibdld.a
+ test -f /lib/Slibdld.a
+ test '!' -f /lib/Slibdld.a
+ echo 'No -ldld.'
No -ldld.
+ for thislib in '$libswanted'
+ for thisdir in '$libspath'
+ xxx=
+ test '!' -f '' -a X = X
++ ls '/usr/lib/libld.dll.[0-9]'
++ sed -n '$p'
+ xxx=
+ test -f ''
+ test -f ''
+ test '!' -f ''
+ xxx=/usr/lib/libld.dll
+ test -f /usr/lib/libld.dll
+ test -f /usr/lib/libld.dll
+ test '!' -f /usr/lib/libld.dll
+ xxx=/usr/lib/libld.a
+ test -f /usr/lib/libld.a
+ test -f /usr/lib/libld.a
+ test '!' -f /usr/lib/libld.a
+ xxx=/usr/lib/ld.a
+ test -f /usr/lib/ld.a
+ test -f /usr/lib/ld.a
+ test '!' -f /usr/lib/ld.a
+ xxx=/usr/lib/libld_s.a
+ test -f /usr/lib/libld_s.a
+ test -f /usr/lib/libld_s.a
+ test -f /usr/lib/libld_s.a
+ test '!' -f /usr/lib/libld_s.a
+ xxx=/usr/lib/Slibld.a
+ test -f /usr/lib/Slibld.a
+ test -f /usr/lib/Slibld.a
+ test -f /usr/lib/Slibld.a
+ for thisdir in '$libspath'
+ xxx=
+ test '!' -f '' -a X = X
++ ls '/lib/libld.dll.[0-9]'
++ sed -n '$p'
+ xxx=
+ test -f ''
+ test -f ''
+ test '!' -f ''
+ xxx=/lib/libld.dll
+ test -f /lib/libld.dll
+ test -f /lib/libld.dll
+ test '!' -f /lib/libld.dll
+ xxx=/lib/libld.a
+ test -f /lib/libld.a
+ test -f /lib/libld.a
+ test '!' -f /lib/libld.a
+ xxx=/lib/ld.a
+ test -f /lib/ld.a
+ test -f /lib/ld.a
+ test '!' -f /lib/ld.a
+ xxx=/lib/libld_s.a
+ test -f /lib/libld_s.a
+ test -f /lib/libld_s.a
+ test -f /lib/libld_s.a
+ test '!' -f /lib/libld_s.a
+ xxx=/lib/Slibld.a
+ test -f /lib/Slibld.a
+ test -f /lib/Slibld.a
+ test -f /lib/Slibld.a
+ test '!' -f /lib/Slibld.a
+ echo 'No -lld.'
No -lld.
+ for thislib in '$libswanted'
+ for thisdir in '$libspath'
+ xxx=
+ test '!' -f '' -a X = X
++ ls '/usr/lib/libsun.dll.[0-9]'
++ sed -n '$p'
+ xxx=
+ test -f ''
+ test -f ''
+ test '!' -f ''
+ xxx=/usr/lib/libsun.dll
+ test -f /usr/lib/libsun.dll
+ test -f /usr/lib/libsun.dll
+ test '!' -f /usr/lib/libsun.dll
+ xxx=/usr/lib/libsun.a
+ test -f /usr/lib/libsun.a
+ test -f /usr/lib/libsun.a
+ test '!' -f /usr/lib/libsun.a
+ xxx=/usr/lib/sun.a
+ test -f /usr/lib/sun.a
+ test -f /usr/lib/sun.a
+ test '!' -f /usr/lib/sun.a
+ xxx=/usr/lib/libsun_s.a
+ test -f /usr/lib/libsun_s.a
+ test -f /usr/lib/libsun_s.a
+ test -f /usr/lib/libsun_s.a
+ test '!' -f /usr/lib/libsun_s.a
+ xxx=/usr/lib/Slibsun.a
+ test -f /usr/lib/Slibsun.a
+ test -f /usr/lib/Slibsun.a
+ test -f /usr/lib/Slibsun.a
+ for thisdir in '$libspath'
+ xxx=
+ test '!' -f '' -a X = X
++ ls '/lib/libsun.dll.[0-9]'
++ sed -n '$p'
+ xxx=
+ test -f ''
+ test -f ''
+ test '!' -f ''
+ xxx=/lib/libsun.dll
+ test -f /lib/libsun.dll
+ test -f /lib/libsun.dll
+ test '!' -f /lib/libsun.dll
+ xxx=/lib/libsun.a
+ test -f /lib/libsun.a
+ test -f /lib/libsun.a
+ test '!' -f /lib/libsun.a
+ xxx=/lib/sun.a
+ test -f /lib/sun.a
+ test -f /lib/sun.a
+ test '!' -f /lib/sun.a
+ xxx=/lib/libsun_s.a
+ test -f /lib/libsun_s.a
+ test -f /lib/libsun_s.a
+ test -f /lib/libsun_s.a
+ test '!' -f /lib/libsun_s.a
+ xxx=/lib/Slibsun.a
+ test -f /lib/Slibsun.a
+ test -f /lib/Slibsun.a
+ test -f /lib/Slibsun.a
+ test '!' -f /lib/Slibsun.a
+ echo 'No -lsun.'
No -lsun.
+ for thislib in '$libswanted'
+ for thisdir in '$libspath'
+ xxx=
+ test '!' -f '' -a X = X
++ ls '/usr/lib/libcrypt.dll.[0-9]'
++ sed -n '$p'
+ xxx=
+ test -f ''
+ test -f ''
+ test '!' -f ''
+ xxx=/usr/lib/libcrypt.dll
+ test -f /usr/lib/libcrypt.dll
+ test -f /usr/lib/libcrypt.dll
+ test '!' -f /usr/lib/libcrypt.dll
+ xxx=/usr/lib/libcrypt.a
+ test -f /usr/lib/libcrypt.a
+ eval
+ test -f /usr/lib/libcrypt.a
+ libstyle=static
+ test '!' -f /usr/lib/libcrypt.a
+ test '!' -f /usr/lib/libcrypt.a
+ test '!' -f /usr/lib/libcrypt.a
+ test -f /usr/lib/libcrypt.a
+ case "$libstyle" in
+ echo 'Found -lcrypt.'
Found -lcrypt.
+ case " $dflt " in
+ dflt=' -lgdbm -lcrypt'
+ libsfound=' /usr/lib/libgdbm.a /usr/lib/libcrypt.a'
++ basename /usr/lib/libcrypt.a
+ yyy=libcrypt.a
+ libsfiles=' libgdbm.a libcrypt.a'
++ echo /usr/lib/libcrypt.a
++ /bin/sed -e 's%/libcrypt.a$%%'
+ yyy=/usr/lib
+ case " $libsdirs " in
+ break
+ test '!' -f /usr/lib/libcrypt.a
+ for thislib in '$libswanted'
+ for thisdir in '$libspath'
+ xxx=
+ test '!' -f '' -a X = X
++ ls '/usr/lib/libsec.dll.[0-9]'
++ sed -n '$p'
+ xxx=
+ test -f ''
+ test -f ''
+ test '!' -f ''
+ xxx=/usr/lib/libsec.dll
+ test -f /usr/lib/libsec.dll
+ test -f /usr/lib/libsec.dll
+ test '!' -f /usr/lib/libsec.dll
+ xxx=/usr/lib/libsec.a
+ test -f /usr/lib/libsec.a
+ test -f /usr/lib/libsec.a
+ test '!' -f /usr/lib/libsec.a
+ xxx=/usr/lib/sec.a
+ test -f /usr/lib/sec.a
+ test -f /usr/lib/sec.a
+ test '!' -f /usr/lib/sec.a
+ xxx=/usr/lib/libsec_s.a
+ test -f /usr/lib/libsec_s.a
+ test -f /usr/lib/libsec_s.a
+ test -f /usr/lib/libsec_s.a
+ test '!' -f /usr/lib/libsec_s.a
+ xxx=/usr/lib/Slibsec.a
+ test -f /usr/lib/Slibsec.a
+ test -f /usr/lib/Slibsec.a
+ test -f /usr/lib/Slibsec.a
+ for thisdir in '$libspath'
+ xxx=
+ test '!' -f '' -a X = X
++ ls '/lib/libsec.dll.[0-9]'
++ sed -n '$p'
+ xxx=
+ test -f ''
+ test -f ''
+ test '!' -f ''
+ xxx=/lib/libsec.dll
+ test -f /lib/libsec.dll
+ test -f /lib/libsec.dll
+ test '!' -f /lib/libsec.dll
+ xxx=/lib/libsec.a
+ test -f /lib/libsec.a
+ test -f /lib/libsec.a
+ test '!' -f /lib/libsec.a
+ xxx=/lib/sec.a
+ test -f /lib/sec.a
+ test -f /lib/sec.a
+ test '!' -f /lib/sec.a
+ xxx=/lib/libsec_s.a
+ test -f /lib/libsec_s.a
+ test -f /lib/libsec_s.a
+ test -f /lib/libsec_s.a
+ test '!' -f /lib/libsec_s.a
+ xxx=/lib/Slibsec.a
+ test -f /lib/Slibsec.a
+ test -f /lib/Slibsec.a
+ test -f /lib/Slibsec.a
+ test '!' -f /lib/Slibsec.a
+ echo 'No -lsec.'
No -lsec.
+ for thislib in '$libswanted'
+ for thisdir in '$libspath'
+ xxx=
+ test '!' -f '' -a X = X
++ ls '/usr/lib/libutil.dll.[0-9]'
++ sed -n '$p'
+ xxx=
+ test -f ''
+ test -f ''
+ test '!' -f ''
+ xxx=/usr/lib/libutil.dll
+ test -f /usr/lib/libutil.dll
+ test -f /usr/lib/libutil.dll
+ test '!' -f /usr/lib/libutil.dll
+ xxx=/usr/lib/libutil.a
+ test -f /usr/lib/libutil.a
+ test -f /usr/lib/libutil.a
+ test '!' -f /usr/lib/libutil.a
+ xxx=/usr/lib/util.a
+ test -f /usr/lib/util.a
+ test -f /usr/lib/util.a
+ test '!' -f /usr/lib/util.a
+ xxx=/usr/lib/libutil_s.a
+ test -f /usr/lib/libutil_s.a
+ test -f /usr/lib/libutil_s.a
+ test -f /usr/lib/libutil_s.a
+ test '!' -f /usr/lib/libutil_s.a
+ xxx=/usr/lib/Slibutil.a
+ test -f /usr/lib/Slibutil.a
+ test -f /usr/lib/Slibutil.a
+ test -f /usr/lib/Slibutil.a
+ for thisdir in '$libspath'
+ xxx=
+ test '!' -f '' -a X = X
++ ls '/lib/libutil.dll.[0-9]'
++ sed -n '$p'
+ xxx=
+ test -f ''
+ test -f ''
+ test '!' -f ''
+ xxx=/lib/libutil.dll
+ test -f /lib/libutil.dll
+ test -f /lib/libutil.dll
+ test '!' -f /lib/libutil.dll
+ xxx=/lib/libutil.a
+ test -f /lib/libutil.a
+ test -f /lib/libutil.a
+ test '!' -f /lib/libutil.a
+ xxx=/lib/util.a
+ test -f /lib/util.a
+ test -f /lib/util.a
+ test '!' -f /lib/util.a
+ xxx=/lib/libutil_s.a
+ test -f /lib/libutil_s.a
+ test -f /lib/libutil_s.a
+ test -f /lib/libutil_s.a
+ test '!' -f /lib/libutil_s.a
+ xxx=/lib/Slibutil.a
+ test -f /lib/Slibutil.a
+ test -f /lib/Slibutil.a
+ test -f /lib/Slibutil.a
+ test '!' -f /lib/Slibutil.a
+ echo 'No -lutil.'
No -lutil.
+ for thislib in '$libswanted'
+ for thisdir in '$libspath'
+ xxx=
+ test '!' -f '' -a X = X
++ ls '/usr/lib/libcposix.dll.[0-9]'
++ sed -n '$p'
+ xxx=
+ test -f ''
+ test -f ''
+ test '!' -f ''
+ xxx=/usr/lib/libcposix.dll
+ test -f /usr/lib/libcposix.dll
+ test -f /usr/lib/libcposix.dll
+ test '!' -f /usr/lib/libcposix.dll
+ xxx=/usr/lib/libcposix.a
+ test -f /usr/lib/libcposix.a
+ test -f /usr/lib/libcposix.a
+ test '!' -f /usr/lib/libcposix.a
+ xxx=/usr/lib/cposix.a
+ test -f /usr/lib/cposix.a
+ test -f /usr/lib/cposix.a
+ test '!' -f /usr/lib/cposix.a
+ xxx=/usr/lib/libcposix_s.a
+ test -f /usr/lib/libcposix_s.a
+ test -f /usr/lib/libcposix_s.a
+ test -f /usr/lib/libcposix_s.a
+ test '!' -f /usr/lib/libcposix_s.a
+ xxx=/usr/lib/Slibcposix.a
+ test -f /usr/lib/Slibcposix.a
+ test -f /usr/lib/Slibcposix.a
+ test -f /usr/lib/Slibcposix.a
+ for thisdir in '$libspath'
+ xxx=
+ test '!' -f '' -a X = X
++ ls '/lib/libcposix.dll.[0-9]'
++ sed -n '$p'
+ xxx=
+ test -f ''
+ test -f ''
+ test '!' -f ''
+ xxx=/lib/libcposix.dll
+ test -f /lib/libcposix.dll
+ test -f /lib/libcposix.dll
+ test '!' -f /lib/libcposix.dll
+ xxx=/lib/libcposix.a
+ test -f /lib/libcposix.a
+ test -f /lib/libcposix.a
+ test '!' -f /lib/libcposix.a
+ xxx=/lib/cposix.a
+ test -f /lib/cposix.a
+ test -f /lib/cposix.a
+ test '!' -f /lib/cposix.a
+ xxx=/lib/libcposix_s.a
+ test -f /lib/libcposix_s.a
+ test -f /lib/libcposix_s.a
+ test -f /lib/libcposix_s.a
+ test '!' -f /lib/libcposix_s.a
+ xxx=/lib/Slibcposix.a
+ test -f /lib/Slibcposix.a
+ test -f /lib/Slibcposix.a
+ test -f /lib/Slibcposix.a
+ test '!' -f /lib/Slibcposix.a
+ echo 'No -lcposix.'
No -lcposix.
+ for thislib in '$libswanted'
+ for thisdir in '$libspath'
+ xxx=
+ test '!' -f '' -a X = X
++ ls '/usr/lib/libposix.dll.[0-9]'
++ sed -n '$p'
+ xxx=
+ test -f ''
+ test -f ''
+ test '!' -f ''
+ xxx=/usr/lib/libposix.dll
+ test -f /usr/lib/libposix.dll
+ test -f /usr/lib/libposix.dll
+ test '!' -f /usr/lib/libposix.dll
+ xxx=/usr/lib/libposix.a
+ test -f /usr/lib/libposix.a
+ test -f /usr/lib/libposix.a
+ test '!' -f /usr/lib/libposix.a
+ xxx=/usr/lib/posix.a
+ test -f /usr/lib/posix.a
+ test -f /usr/lib/posix.a
+ test '!' -f /usr/lib/posix.a
+ xxx=/usr/lib/libposix_s.a
+ test -f /usr/lib/libposix_s.a
+ test -f /usr/lib/libposix_s.a
+ test -f /usr/lib/libposix_s.a
+ test '!' -f /usr/lib/libposix_s.a
+ xxx=/usr/lib/Slibposix.a
+ test -f /usr/lib/Slibposix.a
+ test -f /usr/lib/Slibposix.a
+ test -f /usr/lib/Slibposix.a
+ for thisdir in '$libspath'
+ xxx=
+ test '!' -f '' -a X = X
++ ls '/lib/libposix.dll.[0-9]'
++ sed -n '$p'
+ xxx=
+ test -f ''
+ test -f ''
+ test '!' -f ''
+ xxx=/lib/libposix.dll
+ test -f /lib/libposix.dll
+ test -f /lib/libposix.dll
+ test '!' -f /lib/libposix.dll
+ xxx=/lib/libposix.a
+ test -f /lib/libposix.a
+ test -f /lib/libposix.a
+ test '!' -f /lib/libposix.a
+ xxx=/lib/posix.a
+ test -f /lib/posix.a
+ test -f /lib/posix.a
+ test '!' -f /lib/posix.a
+ xxx=/lib/libposix_s.a
+ test -f /lib/libposix_s.a
+ test -f /lib/libposix_s.a
+ test -f /lib/libposix_s.a
+ test '!' -f /lib/libposix_s.a
+ xxx=/lib/Slibposix.a
+ test -f /lib/Slibposix.a
+ test -f /lib/Slibposix.a
+ test -f /lib/Slibposix.a
+ test '!' -f /lib/Slibposix.a
+ echo 'No -lposix.'
No -lposix.
+ for thislib in '$libswanted'
+ for thisdir in '$libspath'
+ xxx=
+ test '!' -f '' -a X = X
++ ls '/usr/lib/libucb.dll.[0-9]'
++ sed -n '$p'
+ xxx=
+ test -f ''
+ test -f ''
+ test '!' -f ''
+ xxx=/usr/lib/libucb.dll
+ test -f /usr/lib/libucb.dll
+ test -f /usr/lib/libucb.dll
+ test '!' -f /usr/lib/libucb.dll
+ xxx=/usr/lib/libucb.a
+ test -f /usr/lib/libucb.a
+ test -f /usr/lib/libucb.a
+ test '!' -f /usr/lib/libucb.a
+ xxx=/usr/lib/ucb.a
+ test -f /usr/lib/ucb.a
+ test -f /usr/lib/ucb.a
+ test '!' -f /usr/lib/ucb.a
+ xxx=/usr/lib/libucb_s.a
+ test -f /usr/lib/libucb_s.a
+ test -f /usr/lib/libucb_s.a
+ test -f /usr/lib/libucb_s.a
+ test '!' -f /usr/lib/libucb_s.a
+ xxx=/usr/lib/Slibucb.a
+ test -f /usr/lib/Slibucb.a
+ test -f /usr/lib/Slibucb.a
+ test -f /usr/lib/Slibucb.a
+ for thisdir in '$libspath'
+ xxx=
+ test '!' -f '' -a X = X
++ ls '/lib/libucb.dll.[0-9]'
++ sed -n '$p'
+ xxx=
+ test -f ''
+ test -f ''
+ test '!' -f ''
+ xxx=/lib/libucb.dll
+ test -f /lib/libucb.dll
+ test -f /lib/libucb.dll
+ test '!' -f /lib/libucb.dll
+ xxx=/lib/libucb.a
+ test -f /lib/libucb.a
+ test -f /lib/libucb.a
+ test '!' -f /lib/libucb.a
+ xxx=/lib/ucb.a
+ test -f /lib/ucb.a
+ test -f /lib/ucb.a
+ test '!' -f /lib/ucb.a
+ xxx=/lib/libucb_s.a
+ test -f /lib/libucb_s.a
+ test -f /lib/libucb_s.a
+ test -f /lib/libucb_s.a
+ test '!' -f /lib/libucb_s.a
+ xxx=/lib/Slibucb.a
+ test -f /lib/Slibucb.a
+ test -f /lib/Slibucb.a
+ test -f /lib/Slibucb.a
+ test '!' -f /lib/Slibucb.a
+ echo 'No -lucb.'
No -lucb.
+ for thislib in '$libswanted'
+ for thisdir in '$libspath'
+ xxx=
+ test '!' -f '' -a X = X
++ ls '/usr/lib/libbsd.dll.[0-9]'
++ sed -n '$p'
+ xxx=
+ test -f ''
+ test -f ''
+ test '!' -f ''
+ xxx=/usr/lib/libbsd.dll
+ test -f /usr/lib/libbsd.dll
+ test -f /usr/lib/libbsd.dll
+ test '!' -f /usr/lib/libbsd.dll
+ xxx=/usr/lib/libbsd.a
+ test -f /usr/lib/libbsd.a
+ test -f /usr/lib/libbsd.a
+ test '!' -f /usr/lib/libbsd.a
+ xxx=/usr/lib/bsd.a
+ test -f /usr/lib/bsd.a
+ test -f /usr/lib/bsd.a
+ test '!' -f /usr/lib/bsd.a
+ xxx=/usr/lib/libbsd_s.a
+ test -f /usr/lib/libbsd_s.a
+ test -f /usr/lib/libbsd_s.a
+ test -f /usr/lib/libbsd_s.a
+ test '!' -f /usr/lib/libbsd_s.a
+ xxx=/usr/lib/Slibbsd.a
+ test -f /usr/lib/Slibbsd.a
+ test -f /usr/lib/Slibbsd.a
+ test -f /usr/lib/Slibbsd.a
+ for thisdir in '$libspath'
+ xxx=
+ test '!' -f '' -a X = X
++ ls '/lib/libbsd.dll.[0-9]'
++ sed -n '$p'
+ xxx=
+ test -f ''
+ test -f ''
+ test '!' -f ''
+ xxx=/lib/libbsd.dll
+ test -f /lib/libbsd.dll
+ test -f /lib/libbsd.dll
+ test '!' -f /lib/libbsd.dll
+ xxx=/lib/libbsd.a
+ test -f /lib/libbsd.a
+ test -f /lib/libbsd.a
+ test '!' -f /lib/libbsd.a
+ xxx=/lib/bsd.a
+ test -f /lib/bsd.a
+ test -f /lib/bsd.a
+ test '!' -f /lib/bsd.a
+ xxx=/lib/libbsd_s.a
+ test -f /lib/libbsd_s.a
+ test -f /lib/libbsd_s.a
+ test -f /lib/libbsd_s.a
+ test '!' -f /lib/libbsd_s.a
+ xxx=/lib/Slibbsd.a
+ test -f /lib/Slibbsd.a
+ test -f /lib/Slibbsd.a
+ test -f /lib/Slibbsd.a
+ test '!' -f /lib/Slibbsd.a
+ echo 'No -lbsd.'
No -lbsd.
+ for thislib in '$libswanted'
+ for thisdir in '$libspath'
+ xxx=
+ test '!' -f '' -a X = X
++ ls '/usr/lib/libBSD.dll.[0-9]'
++ sed -n '$p'
+ xxx=
+ test -f ''
+ test -f ''
+ test '!' -f ''
+ xxx=/usr/lib/libBSD.dll
+ test -f /usr/lib/libBSD.dll
+ test -f /usr/lib/libBSD.dll
+ test '!' -f /usr/lib/libBSD.dll
+ xxx=/usr/lib/libBSD.a
+ test -f /usr/lib/libBSD.a
+ test -f /usr/lib/libBSD.a
+ test '!' -f /usr/lib/libBSD.a
+ xxx=/usr/lib/BSD.a
+ test -f /usr/lib/BSD.a
+ test -f /usr/lib/BSD.a
+ test '!' -f /usr/lib/BSD.a
+ xxx=/usr/lib/libBSD_s.a
+ test -f /usr/lib/libBSD_s.a
+ test -f /usr/lib/libBSD_s.a
+ test -f /usr/lib/libBSD_s.a
+ test '!' -f /usr/lib/libBSD_s.a
+ xxx=/usr/lib/SlibBSD.a
+ test -f /usr/lib/SlibBSD.a
+ test -f /usr/lib/SlibBSD.a
+ test -f /usr/lib/SlibBSD.a
+ for thisdir in '$libspath'
+ xxx=
+ test '!' -f '' -a X = X
++ ls '/lib/libBSD.dll.[0-9]'
++ sed -n '$p'
+ xxx=
+ test -f ''
+ test -f ''
+ test '!' -f ''
+ xxx=/lib/libBSD.dll
+ test -f /lib/libBSD.dll
+ test -f /lib/libBSD.dll
+ test '!' -f /lib/libBSD.dll
+ xxx=/lib/libBSD.a
+ test -f /lib/libBSD.a
+ test -f /lib/libBSD.a
+ test '!' -f /lib/libBSD.a
+ xxx=/lib/BSD.a
+ test -f /lib/BSD.a
+ test -f /lib/BSD.a
+ test '!' -f /lib/BSD.a
+ xxx=/lib/libBSD_s.a
+ test -f /lib/libBSD_s.a
+ test -f /lib/libBSD_s.a
+ test -f /lib/libBSD_s.a
+ test '!' -f /lib/libBSD_s.a
+ xxx=/lib/SlibBSD.a
+ test -f /lib/SlibBSD.a
+ test -f /lib/SlibBSD.a
+ test -f /lib/SlibBSD.a
+ test '!' -f /lib/SlibBSD.a
+ echo 'No -lBSD.'
No -lBSD.
+ for thislib in '$libswanted'
+ for thisdir in '$libspath'
+ xxx=
+ test '!' -f '' -a X = X
++ ls '/usr/lib/libgdbm_compat.dll.[0-9]'
++ sed -n '$p'
+ xxx=
+ test -f ''
+ test -f ''
+ test '!' -f ''
+ xxx=/usr/lib/libgdbm_compat.dll
+ test -f /usr/lib/libgdbm_compat.dll
+ test -f /usr/lib/libgdbm_compat.dll
+ test '!' -f /usr/lib/libgdbm_compat.dll
+ xxx=/usr/lib/libgdbm_compat.a
+ test -f /usr/lib/libgdbm_compat.a
+ eval
+ test -f /usr/lib/libgdbm_compat.a
+ libstyle=static
+ test '!' -f /usr/lib/libgdbm_compat.a
+ test '!' -f /usr/lib/libgdbm_compat.a
+ test '!' -f /usr/lib/libgdbm_compat.a
+ test -f /usr/lib/libgdbm_compat.a
+ case "$libstyle" in
+ echo 'Found -lgdbm_compat.'
Found -lgdbm_compat.
+ case " $dflt " in
+ dflt=' -lgdbm -lcrypt -lgdbm_compat'
+ libsfound=' /usr/lib/libgdbm.a /usr/lib/libcrypt.a /usr/lib/libgdbm_compat.a'
++ basename /usr/lib/libgdbm_compat.a
+ yyy=libgdbm_compat.a
+ libsfiles=' libgdbm.a libcrypt.a libgdbm_compat.a'
++ echo /usr/lib/libgdbm_compat.a
++ /bin/sed -e 's%/libgdbm_compat.a$%%'
+ yyy=/usr/lib
+ case " $libsdirs " in
+ break
+ test '!' -f /usr/lib/libgdbm_compat.a
+ set X -lgdbm -lcrypt -lgdbm_compat
+ shift
+ dflt='-lgdbm -lcrypt -lgdbm_compat'
+ case "$libs" in
+ dflt='-lgdbm -lcrypt -lgdbm_compat'
+ case "$dflt" in
+ /bin/cat

In order to compile perl5 on your machine, a number of libraries
are usually needed.  Include any other special libraries here as well.
Say "none" for none.  The default list is almost always right.
+ echo ' '
 
+ rp='What libraries to use?'
+ . ./myread
++ xxxm='-lgdbm -lcrypt -lgdbm_compat'
++ case "$xxxm" in
++ case "$rp" in
+++ echo 'What libraries to use? [-lgdbm -lcrypt -lgdbm_compat]  '
+++ wc -c
++ test 56 -ge 80
++ echo -n 'What libraries to use? [-lgdbm -lcrypt -lgdbm_compat] '
What libraries to use? [-lgdbm -lcrypt -lgdbm_compat] ++ ans='!'
++ case "$fastread" in
++ case "$dflt" in
++ ans=
++ case "$silent-$rp" in
++ echo ' '
 
++ expr X : 'X!'
++ case "$ans" in
++ ans='-lgdbm -lcrypt -lgdbm_compat'
+ case "$ans" in
+ libs='-lgdbm -lcrypt -lgdbm_compat'
+ : determine optimization, if desired, or use for debug flag also
+ case "$optimize" in
+ dflt='-O3 -fno-unit-at-a-time -s -mtune=pentium'
+ /bin/cat

By default, perl5 compiles with the -O flag to use the optimizer.
Alternately, you might want to use the symbolic debugger, which uses
the -g flag (on traditional Unix systems).  Either flag can be
specified here.  To use neither flag, specify the word "none".

+ rp='What optimizer/debugger flag should be used?'
+ . ./myread
++ xxxm='-O3 -fno-unit-at-a-time -s -mtune=pentium'
++ case "$xxxm" in
++ case "$rp" in
+++ echo 'What optimizer/debugger flag should be used? [-O3 -fno-unit-at-a-time -s -mtune=pentium]  '
+++ wc -c
++ test 91 -ge 80
++ echo 'What optimizer/debugger flag should be used?'
What optimizer/debugger flag should be used?
++ echo -n '[-O3 -fno-unit-at-a-time -s -mtune=pentium] '
[-O3 -fno-unit-at-a-time -s -mtune=pentium] ++ ans='!'
++ case "$fastread" in
++ case "$dflt" in
++ ans=
++ case "$silent-$rp" in
++ echo ' '
 
++ expr X : 'X!'
++ case "$ans" in
++ ans='-O3 -fno-unit-at-a-time -s -mtune=pentium'
+ optimize='-O3 -fno-unit-at-a-time -s -mtune=pentium'
+ case "$optimize" in
+ dflt=
+ : We will not override a previous value, but we might want to
+ : augment a hint file
+ case "$hint" in
+ case "$gccversion" in
+ case "$optimize" in
+ case "$gccversion" in
+ case "$gccversion" in
+ echo ' '
 
+ echo 'Checking if your compiler accepts -fno-strict-aliasing'
Checking if your compiler accepts -fno-strict-aliasing
+ echo 'int main(void) { return 0; }'
+ gcc -O2 -fno-strict-aliasing -o gcctest gcctest.c
+ echo 'Yes, it does.'
Yes, it does.
+ case "$ccflags" in
+ dflt=' -fno-strict-aliasing'
+ case "$gccversion" in
+ echo ' '
 
+ echo 'Checking if your compiler accepts -pipe'
Checking if your compiler accepts -pipe
+ echo 'int main(void) { return 0; }'
+ gcc -pipe -o gcctest gcctest.c
+ echo 'Yes, it does.'
Yes, it does.
+ case "$ccflags" in
+ dflt=' -fno-strict-aliasing -pipe'
+ echo 'Checking if your compiler accepts -Wdeclaration-after-statement'
Checking if your compiler accepts -Wdeclaration-after-statement
+ echo 'int main(void) { return 0; }'
+ gcc -Wdeclaration-after-statement -o gcctest gcctest.c
+ echo 'Yes, it does.'
Yes, it does.
+ case "$ccflags" in
+ dflt=' -fno-strict-aliasing -pipe -Wdeclaration-after-statement'
+ case "$mips_type" in
+ inclwanted=' /usr/include'
+ for thisincl in '$inclwanted'
+ test -d /usr/include
+ test x/usr/include '!=' x/usr/include
+ inctest='if $contains $2 $usrinc/$1 >/dev/null 2>&1; then
	xxx=true;
elif $contains $2 $usrinc/sys/$1 >/dev/null 2>&1; then
	xxx=true;
else
	xxx=false;
fi;
if $xxx; then
	case "$dflt" in
	*$2*);;
	*) dflt="$dflt -D$2";;
	esac;
fi'
+ set signal.h LANGUAGE_C
+ eval if '$contains' '$2' '$usrinc/$1' '>/dev/null' '2>&1;' then 'xxx=true;' elif '$contains' '$2' '$usrinc/sys/$1' '>/dev/null' '2>&1;' then 'xxx=true;' else 'xxx=false;' 'fi;' if '$xxx;' then case '"$dflt"' in '*$2*);;' '*)' 'dflt="$dflt' '-D$2";;' 'esac;' fi
++ grep LANGUAGE_C /usr/include/signal.h
++ grep LANGUAGE_C /usr/include/sys/signal.h
++ xxx=false
++ false
+ case "$usesocks" in
+ case "$hint" in
+ dflt=' -DPERL_USE_SAFE_PUTENV -DDEBUGGING  -fno-strict-aliasing -pipe -Wdeclaration-after-statement'
+ case "$dflt" in
+ /bin/cat

Your C compiler may want other flags.  For this question you should include
-I/whatever and -DWHATEVER flags and any other flags used by the C compiler,
but you should NOT include libraries or ld flags like -lwhatever.  If you
want perl5 to honor its debug switch, you should include -DDEBUGGING here.
Your C compiler might also need additional flags, such as -D_POSIX_SOURCE.

To use no flags, specify the word "none".

+ set X -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement
+ shift
+ dflt='-DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement'
+ rp='Any additional cc flags?'
+ . ./myread
++ xxxm='-DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement'
++ case "$xxxm" in
++ case "$rp" in
+++ echo 'Any additional cc flags? [-DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement]  '
+++ wc -c
++ test 121 -ge 80
++ echo 'Any additional cc flags?'
Any additional cc flags?
++ echo -n '[-DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement] '
[-DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement] ++ ans='!'
++ case "$fastread" in
++ case "$dflt" in
++ ans=
++ case "$silent-$rp" in
++ echo ' '
 
++ expr X : 'X!'
++ case "$ans" in
++ ans='-DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement'
+ case "$ans" in
+ ccflags='-DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement'
+ : the following weeds options from ccflags that are of no interest to cpp
+ case "$cppflags" in
+ cppflags='-DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement'
+ case "$gccversion" in
+ case "$mips_type" in
+ case "$cppflags" in
+ echo ' '
 
+ echo 'Let me guess what the preprocessor flags are...'
Let me guess what the preprocessor flags are...
+ set X -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement
+ shift
+ cppflags=
+ /bin/cat
+ previous=
+ for flag in '$*'
+ case "$flag" in
+ ftry=-DPERL_USE_SAFE_PUTENV
+ gcc -E -DLFRULB=bar -DPERL_USE_SAFE_PUTENV -
+ gcc -E -DLFRULB=bar -DPERL_USE_SAFE_PUTENV -
+ grep 'foo.*xx.*bar' cpp1.out
+ grep 'foo.*xx.*bar' cpp2.out
+ cppflags=' -DPERL_USE_SAFE_PUTENV'
+ previous=
+ for flag in '$*'
+ case "$flag" in
+ ftry=-DDEBUGGING
+ gcc -E -DLFRULB=bar -DPERL_USE_SAFE_PUTENV -DDEBUGGING -
+ gcc -E -DLFRULB=bar -DPERL_USE_SAFE_PUTENV -DDEBUGGING -
+ grep 'foo.*xx.*bar' cpp1.out
+ grep 'foo.*xx.*bar' cpp2.out
+ cppflags=' -DPERL_USE_SAFE_PUTENV -DDEBUGGING'
+ previous=
+ for flag in '$*'
+ case "$flag" in
+ ftry=-fno-strict-aliasing
+ gcc -E -DLFRULB=bar -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -
+ gcc -E -DLFRULB=bar -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -
+ grep 'foo.*xx.*bar' cpp1.out
+ grep 'foo.*xx.*bar' cpp2.out
+ cppflags=' -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing'
+ previous=
+ for flag in '$*'
+ case "$flag" in
+ ftry=-pipe
+ gcc -E -DLFRULB=bar -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -
+ gcc -E -DLFRULB=bar -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -
+ grep 'foo.*xx.*bar' cpp1.out
+ grep 'foo.*xx.*bar' cpp2.out
+ cppflags=' -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe'
+ previous=
+ for flag in '$*'
+ case "$flag" in
+ ftry=-Wdeclaration-after-statement
+ gcc -E -DLFRULB=bar -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -
+ gcc -E -DLFRULB=bar -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -
+ grep 'foo.*xx.*bar' cpp1.out
+ grep 'foo.*xx.*bar' cpp2.out
+ cppflags=' -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement'
+ previous=
+ set X -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement
+ shift
+ cppflags='-DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement'
+ case "$cppflags" in
+ echo 'They appear to be: -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement'
They appear to be: -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement
+ /bin/rm -f cpp.c cpp1.out cpp2.out
+ : flags used in final linking phase
+ case "$ldflags" in
+ dflt=' -s '
+ : Try to guess additional flags to pick up local libraries.
+ for thislibdir in '$libpth'
+ case " $loclibpth " in
+ for thislibdir in '$libpth'
+ case " $loclibpth " in
+ case "$dflt" in
+ /bin/cat

Your C linker may need flags.  For this question you should
include -L/whatever and any other flags used by the C linker, but you
should NOT include libraries like -lwhatever.

Make sure you include the appropriate -L/path flags if your C linker
does not normally search all of the directories you specified above,
namely
	/usr/lib /lib
To use no flags, specify the word "none".

+ rp='Any additional ld flags (NOT including libraries)?'
+ . ./myread
++ xxxm=' -s '
++ case "$xxxm" in
++ case "$rp" in
+++ echo 'Any additional ld flags (NOT including libraries)? [ -s ]  '
+++ wc -c
++ test 60 -ge 80
++ echo -n 'Any additional ld flags (NOT including libraries)? [ -s ] '
Any additional ld flags (NOT including libraries)? [ -s ] ++ ans='!'
++ case "$fastread" in
++ case "$dflt" in
++ ans=
++ case "$silent-$rp" in
++ echo ' '
 
++ expr X : 'X!'
++ case "$ans" in
++ ans=' -s '
+ case "$ans" in
+ ldflags=' -s '
+ rmlist=' pdp11'
+ : coherency check
+ echo ' '
 
+ echo 'Checking your choice of C compiler and flags for coherency...'
Checking your choice of C compiler and flags for coherency...
+ /bin/cat
+ set X gcc -o try -O3 -fno-unit-at-a-time -s -mtune=pentium -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s try.c -lgdbm -lcrypt -lgdbm_compat
+ shift
+ /bin/cat
+ /bin/cat try.c
+ /bin/cat
+ dflt=y
+ /bin/sh -c 'gcc -o try -O3 -fno-unit-at-a-time -s -mtune=pentium -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement  -s  try.c -lgdbm -lcrypt -lgdbm_compat'
+ /bin/sh -c ' ./try'
++ ./try
+ xxx=Ok
+ case "$xxx" in
+ dflt=n
+ case "$dflt" in
+ echo 'OK, that should do.'
OK, that should do.
+ /bin/rm -f try try.c try.exe try.msg core
+ : define a shorthand compile call
+ compile='
mc_file=$1;
shift;
$cc -o ${mc_file} $optimize $ccflags $ldflags $* ${mc_file}.c $libs > /dev/null 2>&1;'
+ : define a shorthand compile call for compilations that should be ok.
+ compile_ok='
mc_file=$1;
shift;
$cc -o ${mc_file} $optimize $ccflags $ldflags $* ${mc_file}.c $libs;'
+ : determine filename position in cpp output
+ echo ' '
 
+ echo 'Computing filename position in cpp output for #include directives...'
Computing filename position in cpp output for #include directives...
+ case "$osname" in
+ testaccess=-r
+ echo '#include <stdio.h>'
+ /bin/cat
+ chmod +x fieldn
++ ./fieldn
+ fieldn=3
+ /bin/rm -f foo.c fieldn
+ case $fieldn in
+ pos=third
+ echo 'Your cpp writes the filename in the third field of the line.'
Your cpp writes the filename in the third field of the line.
+ case "$osname" in
+ cppfilter=
+ : locate header file
+ /bin/cat
+ chmod +x findhdr
+ : define an alternate 'in-header-list?' function
+ inhdr='echo " "; td=$define; tu=$undef; yyy=$@;
cont=true; xxf="echo \"<\$1> found.\" >&4";
case $# in 2) xxnf="echo \"<\$1> NOT found.\" >&4";;
*) xxnf="echo \"<\$1> NOT found, ...\" >&4";;
esac;
case $# in 4) instead=instead;; *) instead="at last";; esac;
while $test "$cont"; do
	xxx=`./findhdr $1`
	var=$2; eval "was=\$$2";
	if $test "$xxx" && $test -r "$xxx";
	then eval $xxf;
	eval "case \"\$$var\" in $undef) . ./whoa; esac"; eval "$var=\$td";
		cont="";
	else eval $xxnf;
	eval "case \"\$$var\" in $define) . ./whoa; esac"; eval "$var=\$tu"; fi;
	set $yyy; shift; shift; yyy=$@;
	case $# in 0) cont="";;
	2) xxf="echo \"but I found <\$1> $instead.\" >&4";
		xxnf="echo \"and I did not find <\$1> either.\" >&4";;
	*) xxf="echo \"but I found <\$1\> instead.\" >&4";
		xxnf="echo \"there is no <\$1>, ...\" >&4";;
	esac;
done;
while $test "$yyy";
do set $yyy; var=$2; eval "was=\$$2";
	eval "case \"\$$var\" in $define) . ./whoa; esac"; eval "$var=\$tu";
	set $yyy; shift; shift; yyy=$@;
done'
+ : see if stdlib is available
+ set stdlib.h i_stdlib
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'yyy=$@;' 'cont=true;' 'xxf="echo' '\"<\$1>' 'found.\"' '>&4";' case '$#' in '2)' 'xxnf="echo' '\"<\$1>' NOT 'found.\"' '>&4";;' '*)' 'xxnf="echo' '\"<\$1>' NOT found, '...\"' '>&4";;' 'esac;' case '$#' in '4)' 'instead=instead;;' '*)' 'instead="at' 'last";;' 'esac;' while '$test' '"$cont";' do 'xxx=`./findhdr' '$1`' 'var=$2;' eval '"was=\$$2";' if '$test' '"$xxx"' '&&' '$test' -r '"$xxx";' then eval '$xxf;' eval '"case' '\"\$$var\"' in '$undef)' . './whoa;' 'esac";' eval '"$var=\$td";' 'cont="";' else eval '$xxnf;' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' 'fi;' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' case '$#' in '0)' 'cont="";;' '2)' 'xxf="echo' '\"but' I found '<\$1>' '$instead.\"' '>&4";' 'xxnf="echo' '\"and' I did not find '<\$1>' 'either.\"' '>&4";;' '*)' 'xxf="echo' '\"but' I found '<\$1\>' 'instead.\"' '>&4";' 'xxnf="echo' '\"there' is no '<\$1>,' '...\"' '>&4";;' 'esac;' 'done;' while '$test' '"$yyy";' do set '$yyy;' 'var=$2;' eval '"was=\$$2";' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' done
++ echo ' '
 
++ td=define
++ tu=undef
++ yyy='stdlib.h i_stdlib'
++ cont=true
++ xxf='echo "<$1> found." >&4'
++ case $# in
++ xxnf='echo "<$1> NOT found." >&4'
++ case $# in
++ instead='at last'
++ test true
+++ ./findhdr stdlib.h
++ xxx=/usr/include/stdlib.h
++ var=i_stdlib
++ eval 'was=$i_stdlib'
+++ was=
++ test /usr/include/stdlib.h
++ test -r /usr/include/stdlib.h
++ eval echo '"<$1>' 'found."' '>&4'
+++ echo '<stdlib.h> found.'
<stdlib.h> found.
++ eval 'case "$i_stdlib" in undef) . ./whoa; esac'
+++ case "$i_stdlib" in
++ eval 'i_stdlib=$td'
+++ i_stdlib=define
++ cont=
++ set stdlib.h i_stdlib
++ shift
++ shift
++ yyy=
++ case $# in
++ cont=
++ test ''
++ test ''
+ : check for lengths of integral types
+ echo ' '
 
+ case "$intsize" in
+ echo 'Checking to see how big your integers are...'
Checking to see how big your integers are...
+ /bin/cat
+ set try
+ eval 'mc_file=$1;' 'shift;' '$cc' -o '${mc_file}' '$optimize' '$ccflags' '$ldflags' '$*' '${mc_file}.c' '$libs;'
++ mc_file=try
++ shift
++ gcc -o try -O3 -fno-unit-at-a-time -s -mtune=pentium -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s try.c -lgdbm -lcrypt -lgdbm_compat
+ ./try
++ ./try
+ eval 'intsize=4;' 'longsize=4;' 'shortsize=2;'
++ intsize=4
++ longsize=4
++ shortsize=2
+ echo 'Your integers are 4 bytes long.'
Your integers are 4 bytes long.
+ echo 'Your long integers are 4 bytes long.'
Your long integers are 4 bytes long.
+ echo 'Your short integers are 2 bytes long.'
Your short integers are 2 bytes long.
+ /bin/rm -f try try.c try.exe
+ : check for long long
+ echo ' '
 
+ echo 'Checking to see if you have long long...'
Checking to see if you have long long...
+ echo 'int main() { long long x = 7; return 0; }'
+ set try
+ eval 'mc_file=$1;' 'shift;' '$cc' -o '${mc_file}' '$optimize' '$ccflags' '$ldflags' '$*' '${mc_file}.c' '$libs' '>' /dev/null '2>&1;'
++ mc_file=try
++ shift
++ gcc -o try -O3 -fno-unit-at-a-time -s -mtune=pentium -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s try.c -lgdbm -lcrypt -lgdbm_compat
+ val=define
+ echo 'You have long long.'
You have long long.
+ /bin/rm try.c try.exe
+ set d_longlong
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=d_longlong
++ eval 'was=$d_longlong'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval d_longlong=define
+++ d_longlong=define
+ : check for length of long long
+ case "${d_longlong}${longlongsize}" in
+ echo ' '
 
+ echo 'Checking to see how big your long longs are...'
Checking to see how big your long longs are...
+ /bin/cat
+ set try
+ eval 'mc_file=$1;' 'shift;' '$cc' -o '${mc_file}' '$optimize' '$ccflags' '$ldflags' '$*' '${mc_file}.c' '$libs;'
++ mc_file=try
++ shift
++ gcc -o try -O3 -fno-unit-at-a-time -s -mtune=pentium -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s try.c -lgdbm -lcrypt -lgdbm_compat
++ ./try
+ longlongsize=8
+ echo 'Your long longs are 8 bytes long.'
Your long longs are 8 bytes long.
+ test X4 = X8
+ /bin/rm -f try.c try.exe try
+ : see if inttypes.h is available
+ : we want a real compile instead of Inhdr because some systems
+ : have an inttypes.h which includes non-existent headers
+ echo ' '
 
+ /bin/cat
+ set try
+ eval 'mc_file=$1;' 'shift;' '$cc' -o '${mc_file}' '$optimize' '$ccflags' '$ldflags' '$*' '${mc_file}.c' '$libs' '>' /dev/null '2>&1;'
++ mc_file=try
++ shift
++ gcc -o try -O3 -fno-unit-at-a-time -s -mtune=pentium -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s try.c -lgdbm -lcrypt -lgdbm_compat
+ echo '<inttypes.h> NOT found.'
<inttypes.h> NOT found.
+ val=undef
+ /bin/rm -f try.c try
+ set i_inttypes
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=i_inttypes
++ eval 'was=$i_inttypes'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval i_inttypes=undef
+++ i_inttypes=undef
+ : check for int64_t
+ echo ' '
 
+ echo 'Checking to see if you have int64_t...'
Checking to see if you have int64_t...
+ /bin/cat
+ set try
+ eval 'mc_file=$1;' 'shift;' '$cc' -o '${mc_file}' '$optimize' '$ccflags' '$ldflags' '$*' '${mc_file}.c' '$libs' '>' /dev/null '2>&1;'
++ mc_file=try
++ shift
++ gcc -o try -O3 -fno-unit-at-a-time -s -mtune=pentium -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s try.c -lgdbm -lcrypt -lgdbm_compat
+ val=define
+ echo 'You have int64_t.'
You have int64_t.
+ /bin/rm -f try try.c try.exe
+ set d_int64_t
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=d_int64_t
++ eval 'was=$d_int64_t'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval d_int64_t=define
+++ d_int64_t=define
+ echo ' '
 
+ echo 'Checking which 64-bit integer type we could use...'
Checking which 64-bit integer type we could use...
+ case "$intsize" in
+ case "$longsize" in
+ case "$d_longlong:$longlongsize" in
+ val='"long long"'
+ set quadtype
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=quadtype
++ eval 'was=$quadtype'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval 'quadtype="long long"'
+++ quadtype='long long'
+ val='"unsigned long long"'
+ set uquadtype
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=uquadtype
++ eval 'was=$uquadtype'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval 'uquadtype="unsigned long long"'
+++ uquadtype='unsigned long long'
+ quadkind=3
+ case "$quadtype" in
+ echo 'We could use '\''long long'\'' for 64-bit integers.'
We could use 'long long' for 64-bit integers.
+ d_quad=define
+ case "$uselonglong" in
+ case "$use64bits" in
+ case "$use64bitints" in
+ case "$use64bitsint" in
+ case "$uselonglongs" in
+ case "$use64bitsall" in
+ case "$ccflags" in
+ case "$use64bitall" in
+ case "$longsize" in
+ case "$use64bitint" in
+ dflt=y
+ case "$d_quad" in
+ cat

Perl can be built to take advantage of 64-bit integer types
on some systems.  To do so, Configure can be run with -Duse64bitint.
Choosing this option will most probably introduce binary incompatibilities.

If this doesn't make any sense to you, just accept the default 'y'.
(The default has been chosen based on your configuration.)
+ rp='Try to use 64-bit integers, if available?'
+ . ./myread
++ xxxm=y
++ case "$xxxm" in
++ case "$rp" in
+++ echo 'Try to use 64-bit integers, if available? [y]  '
+++ wc -c
++ test 48 -ge 80
++ echo -n 'Try to use 64-bit integers, if available? [y] '
Try to use 64-bit integers, if available? [y] ++ ans='!'
++ case "$fastread" in
++ case "$dflt" in
++ ans=
++ case "$silent-$rp" in
++ echo ' '
 
++ expr X : 'X!'
++ case "$ans" in
++ ans=y
+ case "$ans" in
+ val=define
+ set use64bitint
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=use64bitint
++ eval 'was=$use64bitint'
+++ was=define
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval use64bitint=define
+++ use64bitint=define
+ case "$use64bitall" in
+ case "$longsize" in
+ dflt=n
+ cat

You may also choose to try maximal 64-bitness.  It means using as much
64-bitness as possible on the platform.  This in turn means even more
binary incompatibilities.  On the other hand, your platform may not
have any more 64-bitness available than what you already have chosen.

If this doesn't make any sense to you, just accept the default 'n'.
(The default has been chosen based on your configuration.)
+ rp='Try to use maximal 64-bit support, if available?'
+ . ./myread
++ xxxm=n
++ case "$xxxm" in
++ case "$rp" in
+++ echo 'Try to use maximal 64-bit support, if available? [n]  '
+++ wc -c
++ test 55 -ge 80
++ echo -n 'Try to use maximal 64-bit support, if available? [n] '
Try to use maximal 64-bit support, if available? [n] ++ ans='!'
++ case "$fastread" in
++ case "$dflt" in
++ ans=
++ case "$silent-$rp" in
++ echo ' '
 
++ expr X : 'X!'
++ case "$ans" in
++ ans=n
+ case "$ans" in
+ val=undef
+ set use64bitall
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=use64bitall
++ eval 'was=$use64bitall'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval use64bitall=undef
+++ use64bitall=undef
+ case "$use64bitall" in
+ : Look for a hint-file generated call-back-unit. If the
+ : user has specified that a 64-bit perl is to be built,
+ : we may need to set or change some other defaults.
+ test -f use64bitint.cbu
+ case "$use64bitint" in
+ case "$longsize" in
+ case "$archname64" in
+ archname64=64int
+ : Look for a hint-file generated call-back-unit. If the
+ : user has specified that a maximally 64-bit perl is to be built,
+ : we may need to set or change some other defaults.
+ test -f use64bitall.cbu
+ case "$use64bitall" in
+ case "$d_quad:$use64bitint" in
+ : check for length of double
+ echo ' '
 
+ case "$doublesize" in
+ echo 'Checking to see how big your double precision numbers are...'
Checking to see how big your double precision numbers are...
+ /bin/cat
+ set try
+ eval 'mc_file=$1;' 'shift;' '$cc' -o '${mc_file}' '$optimize' '$ccflags' '$ldflags' '$*' '${mc_file}.c' '$libs;'
++ mc_file=try
++ shift
++ gcc -o try -O3 -fno-unit-at-a-time -s -mtune=pentium -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s try.c -lgdbm -lcrypt -lgdbm_compat
++ ./try
+ doublesize=8
+ echo 'Your double is 8 bytes long.'
Your double is 8 bytes long.
+ /bin/rm -f try.c try
+ : check for long doubles
+ echo ' '
 
+ echo 'Checking to see if you have long double...'
Checking to see if you have long double...
+ echo 'int main() { long double x = 7.0; }'
+ set try
+ eval 'mc_file=$1;' 'shift;' '$cc' -o '${mc_file}' '$optimize' '$ccflags' '$ldflags' '$*' '${mc_file}.c' '$libs' '>' /dev/null '2>&1;'
++ mc_file=try
++ shift
++ gcc -o try -O3 -fno-unit-at-a-time -s -mtune=pentium -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s try.c -lgdbm -lcrypt -lgdbm_compat
+ val=define
+ echo 'You have long double.'
You have long double.
+ /bin/rm try.c try.exe
+ set d_longdbl
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=d_longdbl
++ eval 'was=$d_longdbl'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval d_longdbl=define
+++ d_longdbl=define
+ : check for length of long double
+ case "${d_longdbl}${longdblsize}" in
+ echo ' '
 
+ echo 'Checking to see how big your long doubles are...'
Checking to see how big your long doubles are...
+ /bin/cat
+ set try
+ set try
+ eval 'mc_file=$1;' 'shift;' '$cc' -o '${mc_file}' '$optimize' '$ccflags' '$ldflags' '$*' '${mc_file}.c' '$libs' '>' /dev/null '2>&1;'
++ mc_file=try
++ shift
++ gcc -o try -O3 -fno-unit-at-a-time -s -mtune=pentium -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s try.c -lgdbm -lcrypt -lgdbm_compat
++ ./try
+ longdblsize=12
+ echo 'Your long doubles are 12 bytes long.'
Your long doubles are 12 bytes long.
+ test X8 = X12
+ /bin/rm -f try.c try.exe try
+ : determine the architecture name
+ echo ' '
 
++ ./loc arch blurfl . /usr/src/perl /bin /mingw/bin /C/Windows/system32 /C/Windows /usr/bin /etc /usr/lib /lib /sbin /usr/sbin
+ xxx=blurfl
+ test -f blurfl
++ ./loc uname blurfl . /usr/src/perl /bin /mingw/bin /C/Windows/system32 /C/Windows /usr/bin /etc /usr/lib /lib /sbin /usr/sbin
+ xxx=/bin/uname
+ test -f /bin/uname
+ uname -m
++ /bin/sed -e 's/ *$//' -e 's/ /_/g' -e 's/$/-msys/' tmparch
+ tarch=i686-msys
+ /bin/rm -f tmparch
+ case "$myarchname" in
+ case "$targetarch" in
+ myarchname=i686-msys
+ case "$archname" in
+ dflt=msys
+ rp='What is your architecture name'
+ . ./myread
++ xxxm=msys
++ case "$xxxm" in
++ case "$rp" in
+++ echo 'What is your architecture name [msys]  '
+++ wc -c
++ test 40 -ge 80
++ echo -n 'What is your architecture name [msys] '
What is your architecture name [msys] ++ ans='!'
++ case "$fastread" in
++ case "$dflt" in
++ ans=
++ case "$silent-$rp" in
++ echo ' '
 
++ expr X : 'X!'
++ case "$ans" in
++ ans=msys
+ archname=msys
+ case "$usethreads" in
+ case "$usemultiplicity" in
+ case "$use64bitint$use64bitall" in
+ case "$archname64" in
+ case "$use64bitint" in
+ echo '64 bit integers selected.'
64 bit integers selected.
+ case "$use64bitall" in
+ case "$archname" in
+ archname=msys-64int
+ echo '...setting architecture name to msys-64int.'
...setting architecture name to msys-64int.
+ case "$uselongdouble" in
+ case "$useperlio" in
+ echo 'Perlio selected.'
Perlio selected.
+ test -f archname.cbu
+ : determine root of directory hierarchy where package will be installed.
+ case "$prefix" in
+ dflt=/usr
+ /bin/cat

By default, perl5 will be installed in /usr/bin, manual pages
under /usr/man, etc..., i.e. with /usr as prefix for all
installation directories. Typically this is something like /usr/local.
If you wish to have binaries under /usr/bin but other parts of the
installation under /usr/local, that's ok: you will be prompted
separately for each of the installation directories, the prefix being
only used to set the defaults.

+ fn=d~
+ rp='Installation prefix to use?'
+ . ./getfile
++ tilde=
++ fullpath=
++ already=
++ skip=
++ none_ok=
++ exp_file=
++ nopath_ok=
++ orig_rp='Installation prefix to use?'
++ orig_dflt=/usr
++ case "$gfpth" in
++ gfpth=.
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ tilde=true
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ type=Directory
++ what=Directory
++ case "$what" in
++ case "$exp_file" in
++ case "$d_portable" in
++ cd ..
++ test Directory
++ redo=
++ rp='Installation prefix to use?'
++ dflt=/usr
++ case "$tilde" in
++ rp='Installation prefix to use? (~name ok)'
++ . UU/myread
+++ xxxm=/usr
+++ case "$xxxm" in
+++ case "$rp" in
++++ echo 'Installation prefix to use? (~name ok) [/usr]  '
++++ wc -c
+++ test 48 -ge 80
+++ echo -n 'Installation prefix to use? (~name ok) [/usr] '
Installation prefix to use? (~name ok) [/usr] +++ ans='!'
+++ case "$fastread" in
+++ case "$dflt" in
+++ ans=
+++ case "$silent-$rp" in
+++ echo ' '
 
+++ expr X : 'X!'
+++ case "$ans" in
+++ ans=/usr
++ test -f UU/getfile.ok
++ case "$ans" in
++ case "$tilde" in
+++ UU/filexp /usr
++ value=/usr
++ case $? in
++ test /usr '!=' /usr
++ ansexp=/usr
++ case "$exp_file" in
++ value=/usr
++ case "$fullpath" in
++ case "$redo" in
++ case "$type" in
++ for fp in '$gfpth'
++ test X. = X.
++ dir=/usr
++ direxp=/usr
++ test -d /usr
++ type=
++ value=/usr
++ break
++ case "$skip" in
++ case "$type" in
++ test ''
++ cd UU
++ ans=/usr
++ rp='Installation prefix to use?'
++ dflt=/usr
++ rm -f getfile.ok
++ test X '!=' Xy
++ gfpth=
+ oldprefix=
+ case "$prefix" in
+ case "$ans" in
+ prefix=/usr
+ prefixexp=/usr
+ case "$afsroot" in
+ afsroot=/afs
+ : is AFS 'running?'
+ echo ' '
 
+ case "$afs" in
+ test -d /afs
+ afs=false
+ false
+ echo 'AFS does not seem to be running...'
AFS does not seem to be running...
+ : determine installation prefix for where package is to be installed.
+ false
+ /bin/cat

In some special cases, particularly when building perl5 for distribution,
it is convenient to distinguish the directory in which files should be
installed from the directory (/usr) in which they will
eventually reside.  For most users, these two directories are the same.

+ case "$installprefix" in
+ dflt=/usr
+ fn=d~
+ rp='What installation prefix should I use for installing files?'
+ . ./getfile
++ tilde=
++ fullpath=
++ already=
++ skip=
++ none_ok=
++ exp_file=
++ nopath_ok=
++ orig_rp='What installation prefix should I use for installing files?'
++ orig_dflt=/usr
++ case "$gfpth" in
++ gfpth=.
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ tilde=true
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ type=Directory
++ what=Directory
++ case "$what" in
++ case "$exp_file" in
++ case "$d_portable" in
++ cd ..
++ test Directory
++ redo=
++ rp='What installation prefix should I use for installing files?'
++ dflt=/usr
++ case "$tilde" in
++ rp='What installation prefix should I use for installing files? (~name ok)'
++ . UU/myread
+++ xxxm=/usr
+++ case "$xxxm" in
+++ case "$rp" in
++++ echo 'What installation prefix should I use for installing files? (~name ok) [/usr]  '
++++ wc -c
+++ test 80 -ge 80
+++ echo 'What installation prefix should I use for installing files? (~name ok)'
What installation prefix should I use for installing files? (~name ok)
+++ echo -n '[/usr] '
[/usr] +++ ans='!'
+++ case "$fastread" in
+++ case "$dflt" in
+++ ans=
+++ case "$silent-$rp" in
+++ echo ' '
 
+++ expr X : 'X!'
+++ case "$ans" in
+++ ans=/usr
++ test -f UU/getfile.ok
++ case "$ans" in
++ case "$tilde" in
+++ UU/filexp /usr
++ value=/usr
++ case $? in
++ test /usr '!=' /usr
++ ansexp=/usr
++ case "$exp_file" in
++ value=/usr
++ case "$fullpath" in
++ case "$redo" in
++ case "$type" in
++ for fp in '$gfpth'
++ test X. = X.
++ dir=/usr
++ direxp=/usr
++ test -d /usr
++ type=
++ value=/usr
++ break
++ case "$skip" in
++ case "$type" in
++ test ''
++ cd UU
++ ans=/usr
++ rp='What installation prefix should I use for installing files?'
++ dflt=/usr
++ rm -f getfile.ok
++ test X '!=' Xy
++ gfpth=
+ installprefix=/usr
+ installprefixexp=/usr
+ : set the prefixit variable, to compute a suitable default value
+ prefixit='case "$3" in
""|none)
	case "$oldprefix" in
	"") eval "$1=\"\$$2\"";;
	*)
		case "$3" in
		"") eval "$1=";;
		none)
			eval "tp=\"\$$2\"";
			case "$tp" in
			""|" ") eval "$1=\"\$$2\"";;
			*) eval "$1=";;
			esac;;
		esac;;
	esac;;
*)
	eval "tp=\"$oldprefix-\$$2-\""; eval "tp=\"$tp\"";
	case "$tp" in
	--|/*--|\~*--) eval "$1=\"$prefix/$3\"";;
	/*-$oldprefix/*|\~*-$oldprefix/*)
		eval "$1=\`echo \$$2 | sed \"s,^$oldprefix,$prefix,\"\`";;
	*) eval "$1=\"\$$2\"";;
	esac;;
esac'
+ : get the patchlevel
+ echo ' '
 
+ echo 'Getting the current patchlevel...'
Getting the current patchlevel...
+ test -r ../patchlevel.h
++ awk '/define[ 	]+PERL_REVISION/ {print $3}' ../patchlevel.h
+ revision=5
++ awk '/define[ 	]+PERL_VERSION/ {print $3}' ../patchlevel.h
+ patchlevel=8
++ awk '/define[ 	]+PERL_SUBVERSION/ {print $3}' ../patchlevel.h
+ subversion=8
++ awk '/define[ 	]+PERL_API_REVISION/ {print $3}' ../patchlevel.h
+ api_revision=5
++ awk '/define[ 	]+PERL_API_VERSION/ {print $3}' ../patchlevel.h
+ api_version=8
++ awk '/define[ 	]+PERL_API_SUBVERSION/ {print $3}' ../patchlevel.h
+ api_subversion=0
++ grep ',"DEVEL[0-9][0-9]*"' ../patchlevel.h
++ sed 's/[^0-9]//g'
+ perl_patchlevel=
+ test -r ../.patch
+ : Define a handy string here to avoid duplication in myconfig.SH and configpm.
+ version_patchlevel_string='version 8 subversion 8'
+ case "$perl_patchlevel" in
+ /bin/echo '(You have perl5 version 8 subversion 8.)'
(You have perl5 version 8 subversion 8.)
+ case "$osname" in
++ echo 5 8 8
++ /bin/awk '{ printf "%d.%d.%d\n", $1, $2, $3 }'
+ version=5.8.8
++ echo 5 8 0
++ /bin/awk '{ printf "%d.%d.%d\n", $1, $2, $3 }'
+ api_versionstring=5.8.0
+ : Special case the 5.005_xx maintenance series, which used 5.005
+ : without any subversion label as a subdirectory in /usr/lib/perl5/site_perl/5.8
+ test 580 = 550
+ : determine installation style
+ : For now, try to deduce it from prefix unless it is already set.
+ : Reproduce behavior of 5.005 and earlier, maybe drop that in 5.7.
+ case "$installstyle" in
+ case "$prefix" in
+ dflt=lib/perl5
+ : Probably not worth prompting for this since we prompt for all
+ : the directories individually, and the prompt would be too long and
+ : confusing anyway.
+ installstyle=lib/perl5
+ : determine where private library files go
+ : Usual default is /usr/local/lib/perl5/5.8.8.
+ : Also allow things like /opt/perl/lib/5.8.8, since
+ : /opt/perl/lib/perl5... would be redundant.
+ : The default style setting is made in installstyle.U
+ case "$installstyle" in
+ set dflt privlib lib/perl5/5.8.8
+ eval case '"$3"' in '""|none)' case '"$oldprefix"' in '"")' eval '"$1=\"\$$2\"";;' '*)' case '"$3"' in '"")' eval '"$1=";;' 'none)' eval '"tp=\"\$$2\"";' case '"$tp"' in '""|"' '")' eval '"$1=\"\$$2\"";;' '*)' eval '"$1=";;' 'esac;;' 'esac;;' 'esac;;' '*)' eval '"tp=\"$oldprefix-\$$2-\"";' eval '"tp=\"$tp\"";' case '"$tp"' in '--|/*--|\~*--)' eval '"$1=\"$prefix/$3\"";;' '/*-$oldprefix/*|\~*-$oldprefix/*)' eval '"$1=\`echo' '\$$2' '|' sed '\"s,^$oldprefix,$prefix,\"\`";;' '*)' eval '"$1=\"\$$2\"";;' 'esac;;' esac
++ case "$3" in
++ eval 'tp="-$privlib-"'
+++ tp=-/usr/lib/perl5/5.8-
++ eval 'tp="-/usr/lib/perl5/5.8-"'
+++ tp=-/usr/lib/perl5/5.8-
++ case "$tp" in
++ eval 'dflt="$privlib"'
+++ dflt=/usr/lib/perl5/5.8
+ /bin/cat

There are some auxiliary files for perl5 that need to be put into a
private library directory that is accessible by everyone.

+ fn=d~+
+ rp='Pathname where the private library files will reside?'
+ . ./getfile
++ tilde=
++ fullpath=
++ already=
++ skip=
++ none_ok=
++ exp_file=
++ nopath_ok=
++ orig_rp='Pathname where the private library files will reside?'
++ orig_dflt=/usr/lib/perl5/5.8
++ case "$gfpth" in
++ gfpth=.
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ tilde=true
++ case "$fn" in
++ case "$fn" in
++ skip=true
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ type=Directory
++ what=Directory
++ case "$what" in
++ case "$exp_file" in
++ case "$d_portable" in
++ cd ..
++ test Directory
++ redo=
++ rp='Pathname where the private library files will reside?'
++ dflt=/usr/lib/perl5/5.8
++ case "$tilde" in
++ rp='Pathname where the private library files will reside? (~name ok)'
++ . UU/myread
+++ xxxm=/usr/lib/perl5/5.8
+++ case "$xxxm" in
+++ case "$rp" in
++++ echo 'Pathname where the private library files will reside? (~name ok) [/usr/lib/perl5/5.8]  '
++++ wc -c
+++ test 88 -ge 80
+++ echo 'Pathname where the private library files will reside? (~name ok)'
Pathname where the private library files will reside? (~name ok)
+++ echo -n '[/usr/lib/perl5/5.8] '
[/usr/lib/perl5/5.8] +++ ans='!'
+++ case "$fastread" in
+++ case "$dflt" in
+++ ans=
+++ case "$silent-$rp" in
+++ echo ' '
 
+++ expr X : 'X!'
+++ case "$ans" in
+++ ans=/usr/lib/perl5/5.8
++ test -f UU/getfile.ok
++ case "$ans" in
++ case "$tilde" in
+++ UU/filexp /usr/lib/perl5/5.8
++ value=/usr/lib/perl5/5.8
++ case $? in
++ test /usr/lib/perl5/5.8 '!=' /usr/lib/perl5/5.8
++ ansexp=/usr/lib/perl5/5.8
++ case "$exp_file" in
++ value=/usr/lib/perl5/5.8
++ case "$fullpath" in
++ case "$redo" in
++ case "$type" in
++ for fp in '$gfpth'
++ test X. = X.
++ dir=/usr/lib/perl5/5.8
++ direxp=/usr/lib/perl5/5.8
++ test -d /usr/lib/perl5/5.8
++ type=
++ value=/usr/lib/perl5/5.8
++ break
++ case "$skip" in
++ type=
++ case "$type" in
++ test ''
++ cd UU
++ ans=/usr/lib/perl5/5.8
++ rp='Pathname where the private library files will reside?'
++ dflt=/usr/lib/perl5/5.8
++ rm -f getfile.ok
++ test X '!=' Xy
++ gfpth=
+ privlib=/usr/lib/perl5/5.8
+ privlibexp=/usr/lib/perl5/5.8
+ : Change installation prefix, if necessary.
+ test X/usr '!=' X/usr
+ installprivlib=/usr/lib/perl5/5.8
+ : set the prefixup variable, to restore leading tilda escape
+ prefixup='case "$prefixexp" in
"$prefix") ;;
*) eval "$1=\`echo \$$1 | sed \"s,^$prefixexp,$prefix,\"\`";;
esac'
+ : determine where public architecture dependent libraries go
+ set archlib archlib
+ eval case '"$3"' in '""|none)' case '"$oldprefix"' in '"")' eval '"$1=\"\$$2\"";;' '*)' case '"$3"' in '"")' eval '"$1=";;' 'none)' eval '"tp=\"\$$2\"";' case '"$tp"' in '""|"' '")' eval '"$1=\"\$$2\"";;' '*)' eval '"$1=";;' 'esac;;' 'esac;;' 'esac;;' '*)' eval '"tp=\"$oldprefix-\$$2-\"";' eval '"tp=\"$tp\"";' case '"$tp"' in '--|/*--|\~*--)' eval '"$1=\"$prefix/$3\"";;' '/*-$oldprefix/*|\~*-$oldprefix/*)' eval '"$1=\`echo' '\$$2' '|' sed '\"s,^$oldprefix,$prefix,\"\`";;' '*)' eval '"$1=\"\$$2\"";;' 'esac;;' esac
++ case "$3" in
++ case "$oldprefix" in
++ eval 'archlib="$archlib"'
+++ archlib=/usr/lib/perl5/5.8/msys
+ : privlib default is /usr/local/lib/perl5/5.8.8
+ : archlib default is /usr/local/lib/perl5/5.8.8/msys-64int
+ : privlib may have an optional trailing /share.
++ echo /usr/lib/perl5/5.8
++ /bin/sed 's,/share$,,'
+ tdflt=/usr/lib/perl5/5.8
+ tdflt=/usr/lib/perl5/5.8/msys-64int
+ case "$archlib" in
+ dflt=/usr/lib/perl5/5.8/msys
+ /bin/cat

Perl5 contains architecture-dependent library files.  If you are
sharing libraries in a heterogeneous environment, you might store
these files in a separate location.  Otherwise, you can just include
them with the rest of the public library files.

+ fn=d+~
+ rp='Where do you want to put the public architecture-dependent libraries?'
+ . ./getfile
++ tilde=
++ fullpath=
++ already=
++ skip=
++ none_ok=
++ exp_file=
++ nopath_ok=
++ orig_rp='Where do you want to put the public architecture-dependent libraries?'
++ orig_dflt=/usr/lib/perl5/5.8/msys
++ case "$gfpth" in
++ gfpth=.
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ tilde=true
++ case "$fn" in
++ case "$fn" in
++ skip=true
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ type=Directory
++ what=Directory
++ case "$what" in
++ case "$exp_file" in
++ case "$d_portable" in
++ cd ..
++ test Directory
++ redo=
++ rp='Where do you want to put the public architecture-dependent libraries?'
++ dflt=/usr/lib/perl5/5.8/msys
++ case "$tilde" in
++ rp='Where do you want to put the public architecture-dependent libraries? (~name ok)'
++ . UU/myread
+++ xxxm=/usr/lib/perl5/5.8/msys
+++ case "$xxxm" in
+++ case "$rp" in
++++ echo 'Where do you want to put the public architecture-dependent libraries? (~name ok) [/usr/lib/perl5/5.8/msys]  '
++++ wc -c
+++ test 109 -ge 80
+++ echo 'Where do you want to put the public architecture-dependent libraries? (~name ok)'
Where do you want to put the public architecture-dependent libraries? (~name ok)
+++ echo -n '[/usr/lib/perl5/5.8/msys] '
[/usr/lib/perl5/5.8/msys] +++ ans='!'
+++ case "$fastread" in
+++ case "$dflt" in
+++ ans=
+++ case "$silent-$rp" in
+++ echo ' '
 
+++ expr X : 'X!'
+++ case "$ans" in
+++ ans=/usr/lib/perl5/5.8/msys
++ test -f UU/getfile.ok
++ case "$ans" in
++ case "$tilde" in
+++ UU/filexp /usr/lib/perl5/5.8/msys
++ value=/usr/lib/perl5/5.8/msys
++ case $? in
++ test /usr/lib/perl5/5.8/msys '!=' /usr/lib/perl5/5.8/msys
++ ansexp=/usr/lib/perl5/5.8/msys
++ case "$exp_file" in
++ value=/usr/lib/perl5/5.8/msys
++ case "$fullpath" in
++ case "$redo" in
++ case "$type" in
++ for fp in '$gfpth'
++ test X. = X.
++ dir=/usr/lib/perl5/5.8/msys
++ direxp=/usr/lib/perl5/5.8/msys
++ test -d /usr/lib/perl5/5.8/msys
++ type=
++ value=/usr/lib/perl5/5.8/msys
++ break
++ case "$skip" in
++ type=
++ case "$type" in
++ test ''
++ cd UU
++ ans=/usr/lib/perl5/5.8/msys
++ rp='Where do you want to put the public architecture-dependent libraries?'
++ dflt=/usr/lib/perl5/5.8/msys
++ rm -f getfile.ok
++ test X '!=' Xy
++ gfpth=
+ archlib=/usr/lib/perl5/5.8/msys
+ archlibexp=/usr/lib/perl5/5.8/msys
+ test X/usr/lib/perl5/5.8/msys = X/usr/lib/perl5/5.8
+ d_archlib=define
+ : Change installation prefix, if necessary.
+ test X/usr '!=' X/usr
+ installarchlib=/usr/lib/perl5/5.8/msys
+ : see if setuid scripts can be secure
+ /bin/cat

Some kernels have a bug that prevents setuid #! scripts from being
secure.  Some sites have disabled setuid #! scripts because of this.

First let's decide if your kernel supports secure setuid #! scripts.
(If setuid #! scripts would be secure but have been disabled anyway,
don't say that they are secure if asked.)

+ val=undef
+ test -d /dev/fd
+ echo 'I don'\''t think setuid scripts are secure (no /dev/fd directory).'
I don't think setuid scripts are secure (no /dev/fd directory).
+ echo '(That'\''s for file descriptors, not floppy disks.)'
(That's for file descriptors, not floppy disks.)
+ val=undef
+ set d_suidsafe
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=d_suidsafe
++ eval 'was=$d_suidsafe'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval d_suidsafe=undef
+++ d_suidsafe=undef
+ /bin/rm -f reflect flect
+ : now see if they want to do setuid emulation
+ echo ' '
 
+ val=undef
+ case "$d_suidsafe" in
+ /bin/cat
Some systems have disabled setuid scripts, especially systems where
setuid scripts cannot be secure.  On systems where setuid scripts have
been disabled, the setuid/setgid bits on scripts are currently
useless.  It is possible for perl5 to detect those bits and emulate
setuid/setgid in a secure fashion.  This emulation will only work if
setuid scripts have been disabled in your kernel.

+ case "$d_dosuid" in
+ dflt=n
+ rp='Do you want to do setuid/setgid emulation?'
+ . ./myread
++ xxxm=n
++ case "$xxxm" in
++ case "$rp" in
+++ echo 'Do you want to do setuid/setgid emulation? [n]  '
+++ wc -c
++ test 49 -ge 80
++ echo -n 'Do you want to do setuid/setgid emulation? [n] '
Do you want to do setuid/setgid emulation? [n] ++ ans='!'
++ case "$fastread" in
++ case "$dflt" in
++ ans=
++ case "$silent-$rp" in
++ echo ' '
 
++ expr X : 'X!'
++ case "$ans" in
++ ans=n
+ case "$ans" in
+ val=undef
+ set d_dosuid
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=d_dosuid
++ eval 'was=$d_dosuid'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval d_dosuid=undef
+++ d_dosuid=undef
+ : see if this is a malloc.h system
+ : we want a real compile instead of Inhdr because some systems have a
+ : malloc.h that just gives a compile error saying to use stdlib.h instead
+ echo ' '
 
+ /bin/cat
+ set try
+ eval 'mc_file=$1;' 'shift;' '$cc' -o '${mc_file}' '$optimize' '$ccflags' '$ldflags' '$*' '${mc_file}.c' '$libs' '>' /dev/null '2>&1;'
++ mc_file=try
++ shift
++ gcc -o try -O3 -fno-unit-at-a-time -s -mtune=pentium -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s try.c -lgdbm -lcrypt -lgdbm_compat
+ echo '<malloc.h> found.'
<malloc.h> found.
+ val=define
+ /bin/rm -f try.c try
+ set i_malloc
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=i_malloc
++ eval 'was=$i_malloc'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval i_malloc=define
+++ i_malloc=define
+ : check for void type
+ echo ' '
 
+ echo 'Checking to see how well your C compiler groks the void type...'
Checking to see how well your C compiler groks the void type...
+ case "$voidflags" in
+ /bin/cat
+ gcc -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -c -DTRY=15 try.c
+ voidflags=15
+ echo 'Good.  It appears to support void to the level perl5 wants.'
Good.  It appears to support void to the level perl5 wants.
+ grep warning .out
+ case "$voidflags" in
+ /bin/rm -f try.c try.exe try.o .out
+ : check for length of pointer
+ echo ' '
 
+ case "$ptrsize" in
+ echo 'Checking to see how big your pointers are...'
Checking to see how big your pointers are...
+ test 15 -gt 7
+ echo '#define VOID_PTR char *'
+ /bin/cat
+ set try
+ eval 'mc_file=$1;' 'shift;' '$cc' -o '${mc_file}' '$optimize' '$ccflags' '$ldflags' '$*' '${mc_file}.c' '$libs;'
++ mc_file=try
++ shift
++ gcc -o try -O3 -fno-unit-at-a-time -s -mtune=pentium -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s try.c -lgdbm -lcrypt -lgdbm_compat
++ ./try
+ ptrsize=4
+ echo 'Your pointers are 4 bytes long.'
Your pointers are 4 bytes long.
+ /bin/rm -f try.c try
+ case "$use64bitall" in
+ : determine whether to use malloc wrapping
+ echo ' '
 
+ case "$usemallocwrap" in
+ case "$usedevel" in
+ dflt=n
+ rp='Do you wish to wrap malloc calls to protect against potential overflows?'
+ . ./myread
++ xxxm=n
++ case "$xxxm" in
++ case "$rp" in
+++ echo 'Do you wish to wrap malloc calls to protect against potential overflows? [n]  '
+++ wc -c
++ test 79 -ge 80
++ echo -n 'Do you wish to wrap malloc calls to protect against potential overflows? [n] '
Do you wish to wrap malloc calls to protect against potential overflows? [n] ++ ans='!'
++ case "$fastread" in
++ case "$dflt" in
++ ans=
++ case "$silent-$rp" in
++ echo ' '
 
++ expr X : 'X!'
++ case "$ans" in
++ ans=n
+ usemallocwrap=n
+ case "$ans" in
+ usemallocwrap=undef
+ : determine which malloc to compile in
+ echo ' '
 
+ case "$usemymalloc" in
+ case "$ptrsize" in
+ dflt=y
+ rp='Do you wish to attempt to use the malloc that comes with perl5?'
+ . ./myread
++ xxxm=y
++ case "$xxxm" in
++ case "$rp" in
+++ echo 'Do you wish to attempt to use the malloc that comes with perl5? [y]  '
+++ wc -c
++ test 70 -ge 80
++ echo -n 'Do you wish to attempt to use the malloc that comes with perl5? [y] '
Do you wish to attempt to use the malloc that comes with perl5? [y] ++ ans='!'
++ case "$fastread" in
++ case "$dflt" in
++ ans=
++ case "$silent-$rp" in
++ echo ' '
 
++ expr X : 'X!'
++ case "$ans" in
++ ans=y
+ usemymalloc=y
+ case "$ans" in
+ usemymalloc=y
+ mallocsrc=malloc.c
+ mallocobj=malloc.o
+ d_mymalloc=define
+ case "$libs" in
+ : compute the return types of malloc and free
+ echo ' '
 
+ /bin/cat
+ case "$malloctype" in
+ gcc -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -c -DTRY_MALLOC malloc.c
+ malloctype='void *'
+ echo 'Your system wants malloc to return '\''void *'\'', it would seem.'
Your system wants malloc to return 'void *', it would seem.
+ case "$freetype" in
+ gcc -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -c -DTRY_FREE malloc.c
+ freetype=void
+ echo 'Your system uses void free(), it would seem.'
Your system uses void free(), it would seem.
+ /bin/rm -f malloc.c malloc.o
+ /bin/cat

After perl5 is installed, you may wish to install various
add-on modules and utilities.  Typically, these add-ons will
be installed under /usr with the rest
of this package.  However, you may wish to install such add-ons
elsewhere under a different prefix.

If you do not wish to put everything under a single prefix, that's
ok.  You will be prompted for the individual locations; this siteprefix
is only used to suggest the defaults.

The default should be fine for most people.

+ fn=d~+
+ rp='Installation prefix to use for add-on modules and utilities?'
+ : XXX Here might be another good place for an installstyle setting.
+ case "$siteprefix" in
+ dflt=/usr
+ . ./getfile
++ tilde=
++ fullpath=
++ already=
++ skip=
++ none_ok=
++ exp_file=
++ nopath_ok=
++ orig_rp='Installation prefix to use for add-on modules and utilities?'
++ orig_dflt=/usr
++ case "$gfpth" in
++ gfpth=.
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ tilde=true
++ case "$fn" in
++ case "$fn" in
++ skip=true
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ type=Directory
++ what=Directory
++ case "$what" in
++ case "$exp_file" in
++ case "$d_portable" in
++ cd ..
++ test Directory
++ redo=
++ rp='Installation prefix to use for add-on modules and utilities?'
++ dflt=/usr
++ case "$tilde" in
++ rp='Installation prefix to use for add-on modules and utilities? (~name ok)'
++ . UU/myread
+++ xxxm=/usr
+++ case "$xxxm" in
+++ case "$rp" in
++++ echo 'Installation prefix to use for add-on modules and utilities? (~name ok) [/usr]  '
++++ wc -c
+++ test 81 -ge 80
+++ echo 'Installation prefix to use for add-on modules and utilities? (~name ok)'
Installation prefix to use for add-on modules and utilities? (~name ok)
+++ echo -n '[/usr] '
[/usr] +++ ans='!'
+++ case "$fastread" in
+++ case "$dflt" in
+++ ans=
+++ case "$silent-$rp" in
+++ echo ' '
 
+++ expr X : 'X!'
+++ case "$ans" in
+++ ans=/usr
++ test -f UU/getfile.ok
++ case "$ans" in
++ case "$tilde" in
+++ UU/filexp /usr
++ value=/usr
++ case $? in
++ test /usr '!=' /usr
++ ansexp=/usr
++ case "$exp_file" in
++ value=/usr
++ case "$fullpath" in
++ case "$redo" in
++ case "$type" in
++ for fp in '$gfpth'
++ test X. = X.
++ dir=/usr
++ direxp=/usr
++ test -d /usr
++ type=
++ value=/usr
++ break
++ case "$skip" in
++ type=
++ case "$type" in
++ test ''
++ cd UU
++ ans=/usr
++ rp='Installation prefix to use for add-on modules and utilities?'
++ dflt=/usr
++ rm -f getfile.ok
++ test X '!=' Xy
++ gfpth=
+ : XXX Prefixit unit does not yet support siteprefix and vendorprefix
+ oldsiteprefix=
+ case "$siteprefix" in
+ case "$ans" in
+ siteprefix=/usr
+ siteprefixexp=/usr
+ : determine where site specific libraries go.
+ : Usual default is /usr/local/lib/perl5/site_perl/5.8.8
+ : The default style setting is made in installstyle.U
+ : XXX No longer works with Prefixit stuff.
++ echo perl5
++ /bin/sed 's/-*[0-9.]*$//'
+ prog=perl
+ case "$sitelib" in
+ dflt=/usr/lib/perl5/site_perl/5.8
+ /bin/cat

The installation process will create a directory for
site-specific extensions and modules.  Most users find it convenient
to place all site-specific files in this directory rather than in the
main distribution directory.

+ fn=d~+
+ rp='Pathname for the site-specific library files?'
+ . ./getfile
++ tilde=
++ fullpath=
++ already=
++ skip=
++ none_ok=
++ exp_file=
++ nopath_ok=
++ orig_rp='Pathname for the site-specific library files?'
++ orig_dflt=/usr/lib/perl5/site_perl/5.8
++ case "$gfpth" in
++ gfpth=.
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ tilde=true
++ case "$fn" in
++ case "$fn" in
++ skip=true
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ type=Directory
++ what=Directory
++ case "$what" in
++ case "$exp_file" in
++ case "$d_portable" in
++ cd ..
++ test Directory
++ redo=
++ rp='Pathname for the site-specific library files?'
++ dflt=/usr/lib/perl5/site_perl/5.8
++ case "$tilde" in
++ rp='Pathname for the site-specific library files? (~name ok)'
++ . UU/myread
+++ xxxm=/usr/lib/perl5/site_perl/5.8
+++ case "$xxxm" in
+++ case "$rp" in
++++ echo 'Pathname for the site-specific library files? (~name ok) [/usr/lib/perl5/site_perl/5.8]  '
++++ wc -c
+++ test 90 -ge 80
+++ echo 'Pathname for the site-specific library files? (~name ok)'
Pathname for the site-specific library files? (~name ok)
+++ echo -n '[/usr/lib/perl5/site_perl/5.8] '
[/usr/lib/perl5/site_perl/5.8] +++ ans='!'
+++ case "$fastread" in
+++ case "$dflt" in
+++ ans=
+++ case "$silent-$rp" in
+++ echo ' '
 
+++ expr X : 'X!'
+++ case "$ans" in
+++ ans=/usr/lib/perl5/site_perl/5.8
++ test -f UU/getfile.ok
++ case "$ans" in
++ case "$tilde" in
+++ UU/filexp /usr/lib/perl5/site_perl/5.8
++ value=/usr/lib/perl5/site_perl/5.8
++ case $? in
++ test /usr/lib/perl5/site_perl/5.8 '!=' /usr/lib/perl5/site_perl/5.8
++ ansexp=/usr/lib/perl5/site_perl/5.8
++ case "$exp_file" in
++ value=/usr/lib/perl5/site_perl/5.8
++ case "$fullpath" in
++ case "$redo" in
++ case "$type" in
++ for fp in '$gfpth'
++ test X. = X.
++ dir=/usr/lib/perl5/site_perl/5.8
++ direxp=/usr/lib/perl5/site_perl/5.8
++ test -d /usr/lib/perl5/site_perl/5.8
++ type=
++ value=/usr/lib/perl5/site_perl/5.8
++ break
++ case "$skip" in
++ type=
++ case "$type" in
++ test ''
++ cd UU
++ ans=/usr/lib/perl5/site_perl/5.8
++ rp='Pathname for the site-specific library files?'
++ dflt=/usr/lib/perl5/site_perl/5.8
++ rm -f getfile.ok
++ test X '!=' Xy
++ gfpth=
+ sitelib=/usr/lib/perl5/site_perl/5.8
+ sitelibexp=/usr/lib/perl5/site_perl/5.8
++ echo /usr/lib/perl5/site_perl/5.8
++ sed 's,/5.8.8$,,'
+ sitelib_stem=/usr/lib/perl5/site_perl/5.8
+ : Change installation prefix, if necessary.
+ test X/usr '!=' X/usr
+ installsitelib=/usr/lib/perl5/site_perl/5.8
+ : determine where site specific architecture-dependent libraries go.
+ : sitelib default is /usr/local/lib/perl5/site_perl/5.8.8
+ : sitearch default is /usr/local/lib/perl5/site_perl/5.8.8/msys-64int
+ : sitelib may have an optional trailing /share.
+ case "$sitearch" in
+ dflt=/usr/lib/perl5/site_perl/5.8/msys
+ set sitearch sitearch none
+ eval case '"$3"' in '""|none)' case '"$oldprefix"' in '"")' eval '"$1=\"\$$2\"";;' '*)' case '"$3"' in '"")' eval '"$1=";;' 'none)' eval '"tp=\"\$$2\"";' case '"$tp"' in '""|"' '")' eval '"$1=\"\$$2\"";;' '*)' eval '"$1=";;' 'esac;;' 'esac;;' 'esac;;' '*)' eval '"tp=\"$oldprefix-\$$2-\"";' eval '"tp=\"$tp\"";' case '"$tp"' in '--|/*--|\~*--)' eval '"$1=\"$prefix/$3\"";;' '/*-$oldprefix/*|\~*-$oldprefix/*)' eval '"$1=\`echo' '\$$2' '|' sed '\"s,^$oldprefix,$prefix,\"\`";;' '*)' eval '"$1=\"\$$2\"";;' 'esac;;' esac
++ case "$3" in
++ case "$oldprefix" in
++ eval 'sitearch="$sitearch"'
+++ sitearch=/usr/lib/perl5/site_perl/5.8/msys
+ /bin/cat

The installation process will also create a directory for
architecture-dependent site-specific extensions and modules.

+ fn=d~+
+ rp='Pathname for the site-specific architecture-dependent library files?'
+ . ./getfile
++ tilde=
++ fullpath=
++ already=
++ skip=
++ none_ok=
++ exp_file=
++ nopath_ok=
++ orig_rp='Pathname for the site-specific architecture-dependent library files?'
++ orig_dflt=/usr/lib/perl5/site_perl/5.8/msys
++ case "$gfpth" in
++ gfpth=.
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ tilde=true
++ case "$fn" in
++ case "$fn" in
++ skip=true
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ type=Directory
++ what=Directory
++ case "$what" in
++ case "$exp_file" in
++ case "$d_portable" in
++ cd ..
++ test Directory
++ redo=
++ rp='Pathname for the site-specific architecture-dependent library files?'
++ dflt=/usr/lib/perl5/site_perl/5.8/msys
++ case "$tilde" in
++ rp='Pathname for the site-specific architecture-dependent library files? (~name ok)'
++ . UU/myread
+++ xxxm=/usr/lib/perl5/site_perl/5.8/msys
+++ case "$xxxm" in
+++ case "$rp" in
++++ echo 'Pathname for the site-specific architecture-dependent library files? (~name ok) [/usr/lib/perl5/site_perl/5.8/msys]  '
++++ wc -c
+++ test 118 -ge 80
+++ echo 'Pathname for the site-specific architecture-dependent library files? (~name ok)'
Pathname for the site-specific architecture-dependent library files? (~name ok)
+++ echo -n '[/usr/lib/perl5/site_perl/5.8/msys] '
[/usr/lib/perl5/site_perl/5.8/msys] +++ ans='!'
+++ case "$fastread" in
+++ case "$dflt" in
+++ ans=
+++ case "$silent-$rp" in
+++ echo ' '
 
+++ expr X : 'X!'
+++ case "$ans" in
+++ ans=/usr/lib/perl5/site_perl/5.8/msys
++ test -f UU/getfile.ok
++ case "$ans" in
++ case "$tilde" in
+++ UU/filexp /usr/lib/perl5/site_perl/5.8/msys
++ value=/usr/lib/perl5/site_perl/5.8/msys
++ case $? in
++ test /usr/lib/perl5/site_perl/5.8/msys '!=' /usr/lib/perl5/site_perl/5.8/msys
++ ansexp=/usr/lib/perl5/site_perl/5.8/msys
++ case "$exp_file" in
++ value=/usr/lib/perl5/site_perl/5.8/msys
++ case "$fullpath" in
++ case "$redo" in
++ case "$type" in
++ for fp in '$gfpth'
++ test X. = X.
++ dir=/usr/lib/perl5/site_perl/5.8/msys
++ direxp=/usr/lib/perl5/site_perl/5.8/msys
++ test -d /usr/lib/perl5/site_perl/5.8/msys
++ case "$skip" in
++ type=
++ case "$type" in
++ test ''
++ cd UU
++ ans=/usr/lib/perl5/site_perl/5.8/msys
++ rp='Pathname for the site-specific architecture-dependent library files?'
++ dflt=/usr/lib/perl5/site_perl/5.8/msys
++ rm -f getfile.ok
++ test X '!=' Xy
++ gfpth=
+ sitearch=/usr/lib/perl5/site_perl/5.8/msys
+ sitearchexp=/usr/lib/perl5/site_perl/5.8/msys
+ : Change installation prefix, if necessary.
+ test X/usr '!=' X/usr
+ installsitearch=/usr/lib/perl5/site_perl/5.8/msys
+ /bin/cat

The installation process will also create a directory for
vendor-supplied add-ons.  Vendors who supply perl with their system
may find it convenient to place all vendor-supplied files in this
directory rather than in the main distribution directory.  This will
ease upgrades between binary-compatible maintenance versions of perl.

Of course you may also use these directories in whatever way you see
fit.  For example, you might use them to access modules shared over a
company-wide network.

The default answer should be fine for most people.
This causes further questions about vendor add-ons to be skipped
and no vendor-specific directories will be configured for perl.

+ rp='Do you want to configure vendor-specific add-on directories?'
+ case "$usevendorprefix" in
+ : User may have set vendorprefix directly on Configure command line.
+ case "$vendorprefix" in
+ dflt=y
+ . ./myread
++ xxxm=y
++ case "$xxxm" in
++ case "$rp" in
+++ echo 'Do you want to configure vendor-specific add-on directories? [y]  '
+++ wc -c
++ test 67 -ge 80
++ echo -n 'Do you want to configure vendor-specific add-on directories? [y] '
Do you want to configure vendor-specific add-on directories? [y] ++ ans='!'
++ case "$fastread" in
++ case "$dflt" in
++ ans=
++ case "$silent-$rp" in
++ echo ' '
 
++ expr X : 'X!'
++ case "$ans" in
++ ans=y
+ case "$ans" in
+ fn=d~+
+ rp='Installation prefix to use for vendor-supplied add-ons?'
+ case "$vendorprefix" in
+ dflt=/usr
+ . ./getfile
++ tilde=
++ fullpath=
++ already=
++ skip=
++ none_ok=
++ exp_file=
++ nopath_ok=
++ orig_rp='Installation prefix to use for vendor-supplied add-ons?'
++ orig_dflt=/usr
++ case "$gfpth" in
++ gfpth=.
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ tilde=true
++ case "$fn" in
++ case "$fn" in
++ skip=true
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ type=Directory
++ what=Directory
++ case "$what" in
++ case "$exp_file" in
++ case "$d_portable" in
++ cd ..
++ test Directory
++ redo=
++ rp='Installation prefix to use for vendor-supplied add-ons?'
++ dflt=/usr
++ case "$tilde" in
++ rp='Installation prefix to use for vendor-supplied add-ons? (~name ok)'
++ . UU/myread
+++ xxxm=/usr
+++ case "$xxxm" in
+++ case "$rp" in
++++ echo 'Installation prefix to use for vendor-supplied add-ons? (~name ok) [/usr]  '
++++ wc -c
+++ test 76 -ge 80
+++ echo -n 'Installation prefix to use for vendor-supplied add-ons? (~name ok) [/usr] '
Installation prefix to use for vendor-supplied add-ons? (~name ok) [/usr] +++ ans='!'
+++ case "$fastread" in
+++ case "$dflt" in
+++ ans=
+++ case "$silent-$rp" in
+++ echo ' '
 
+++ expr X : 'X!'
+++ case "$ans" in
+++ ans=/usr
++ test -f UU/getfile.ok
++ case "$ans" in
++ case "$tilde" in
+++ UU/filexp /usr
++ value=/usr
++ case $? in
++ test /usr '!=' /usr
++ ansexp=/usr
++ case "$exp_file" in
++ value=/usr
++ case "$fullpath" in
++ case "$redo" in
++ case "$type" in
++ for fp in '$gfpth'
++ test X. = X.
++ dir=/usr
++ direxp=/usr
++ test -d /usr
++ type=
++ value=/usr
++ break
++ case "$skip" in
++ type=
++ case "$type" in
++ test ''
++ cd UU
++ ans=/usr
++ rp='Installation prefix to use for vendor-supplied add-ons?'
++ dflt=/usr
++ rm -f getfile.ok
++ test X '!=' Xy
++ gfpth=
+ : XXX Prefixit unit does not yet support siteprefix and vendorprefix
+ oldvendorprefix=
+ case "$vendorprefix" in
+ case "$ans" in
+ usevendorprefix=define
+ vendorprefix=/usr
+ vendorprefixexp=/usr
+ case "$vendorprefix" in
+ d_vendorlib=define
+ : determine where vendor-supplied modules go.
+ : Usual default is /usr/local/lib/perl5/vendor_perl/5.8.8
+ case "$vendorlib" in
+ dflt=/usr/lib/perl5/vendor_perl/5.8
+ fn=d~+
+ rp='Pathname for the vendor-supplied library files?'
+ . ./getfile
++ tilde=
++ fullpath=
++ already=
++ skip=
++ none_ok=
++ exp_file=
++ nopath_ok=
++ orig_rp='Pathname for the vendor-supplied library files?'
++ orig_dflt=/usr/lib/perl5/vendor_perl/5.8
++ case "$gfpth" in
++ gfpth=.
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ tilde=true
++ case "$fn" in
++ case "$fn" in
++ skip=true
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ type=Directory
++ what=Directory
++ case "$what" in
++ case "$exp_file" in
++ case "$d_portable" in
++ cd ..
++ test Directory
++ redo=
++ rp='Pathname for the vendor-supplied library files?'
++ dflt=/usr/lib/perl5/vendor_perl/5.8
++ case "$tilde" in
++ rp='Pathname for the vendor-supplied library files? (~name ok)'
++ . UU/myread
+++ xxxm=/usr/lib/perl5/vendor_perl/5.8
+++ case "$xxxm" in
+++ case "$rp" in
++++ echo 'Pathname for the vendor-supplied library files? (~name ok) [/usr/lib/perl5/vendor_perl/5.8]  '
++++ wc -c
+++ test 94 -ge 80
+++ echo 'Pathname for the vendor-supplied library files? (~name ok)'
Pathname for the vendor-supplied library files? (~name ok)
+++ echo -n '[/usr/lib/perl5/vendor_perl/5.8] '
[/usr/lib/perl5/vendor_perl/5.8] +++ ans='!'
+++ case "$fastread" in
+++ case "$dflt" in
+++ ans=
+++ case "$silent-$rp" in
+++ echo ' '
 
+++ expr X : 'X!'
+++ case "$ans" in
+++ ans=/usr/lib/perl5/vendor_perl/5.8
++ test -f UU/getfile.ok
++ case "$ans" in
++ case "$tilde" in
+++ UU/filexp /usr/lib/perl5/vendor_perl/5.8
++ value=/usr/lib/perl5/vendor_perl/5.8
++ case $? in
++ test /usr/lib/perl5/vendor_perl/5.8 '!=' /usr/lib/perl5/vendor_perl/5.8
++ ansexp=/usr/lib/perl5/vendor_perl/5.8
++ case "$exp_file" in
++ value=/usr/lib/perl5/vendor_perl/5.8
++ case "$fullpath" in
++ case "$redo" in
++ case "$type" in
++ for fp in '$gfpth'
++ test X. = X.
++ dir=/usr/lib/perl5/vendor_perl/5.8
++ direxp=/usr/lib/perl5/vendor_perl/5.8
++ test -d /usr/lib/perl5/vendor_perl/5.8
++ type=
++ value=/usr/lib/perl5/vendor_perl/5.8
++ break
++ case "$skip" in
++ type=
++ case "$type" in
++ test ''
++ cd UU
++ ans=/usr/lib/perl5/vendor_perl/5.8
++ rp='Pathname for the vendor-supplied library files?'
++ dflt=/usr/lib/perl5/vendor_perl/5.8
++ rm -f getfile.ok
++ test X '!=' Xy
++ gfpth=
+ vendorlib=/usr/lib/perl5/vendor_perl/5.8
+ vendorlibexp=/usr/lib/perl5/vendor_perl/5.8
++ echo /usr/lib/perl5/vendor_perl/5.8
++ sed 's,/5.8.8$,,'
+ vendorlib_stem=/usr/lib/perl5/vendor_perl/5.8
+ : Change installation prefix, if necessary.
+ test X/usr '!=' X/usr
+ installvendorlib=/usr/lib/perl5/vendor_perl/5.8
+ case "$vendorprefix" in
+ d_vendorarch=define
+ : determine where vendor-supplied architecture-dependent libraries go.
+ : vendorlib default is /usr/local/lib/perl5/vendor_perl/5.8.8
+ : vendorarch default is /usr/local/lib/perl5/vendor_perl/5.8.8/msys-64int
+ : vendorlib may have an optional trailing /share.
+ case "$vendorarch" in
+ dflt=/usr/lib/perl5/vendor_perl/5.8/msys
+ fn=d~+
+ rp='Pathname for vendor-supplied architecture-dependent files?'
+ . ./getfile
++ tilde=
++ fullpath=
++ already=
++ skip=
++ none_ok=
++ exp_file=
++ nopath_ok=
++ orig_rp='Pathname for vendor-supplied architecture-dependent files?'
++ orig_dflt=/usr/lib/perl5/vendor_perl/5.8/msys
++ case "$gfpth" in
++ gfpth=.
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ tilde=true
++ case "$fn" in
++ case "$fn" in
++ skip=true
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ type=Directory
++ what=Directory
++ case "$what" in
++ case "$exp_file" in
++ case "$d_portable" in
++ cd ..
++ test Directory
++ redo=
++ rp='Pathname for vendor-supplied architecture-dependent files?'
++ dflt=/usr/lib/perl5/vendor_perl/5.8/msys
++ case "$tilde" in
++ rp='Pathname for vendor-supplied architecture-dependent files? (~name ok)'
++ . UU/myread
+++ xxxm=/usr/lib/perl5/vendor_perl/5.8/msys
+++ case "$xxxm" in
+++ case "$rp" in
++++ echo 'Pathname for vendor-supplied architecture-dependent files? (~name ok) [/usr/lib/perl5/vendor_perl/5.8/msys]  '
++++ wc -c
+++ test 110 -ge 80
+++ echo 'Pathname for vendor-supplied architecture-dependent files? (~name ok)'
Pathname for vendor-supplied architecture-dependent files? (~name ok)
+++ echo -n '[/usr/lib/perl5/vendor_perl/5.8/msys] '
[/usr/lib/perl5/vendor_perl/5.8/msys] +++ ans='!'
+++ case "$fastread" in
+++ case "$dflt" in
+++ ans=
+++ case "$silent-$rp" in
+++ echo ' '
 
+++ expr X : 'X!'
+++ case "$ans" in
+++ ans=/usr/lib/perl5/vendor_perl/5.8/msys
++ test -f UU/getfile.ok
++ case "$ans" in
++ case "$tilde" in
+++ UU/filexp /usr/lib/perl5/vendor_perl/5.8/msys
++ value=/usr/lib/perl5/vendor_perl/5.8/msys
++ case $? in
++ test /usr/lib/perl5/vendor_perl/5.8/msys '!=' /usr/lib/perl5/vendor_perl/5.8/msys
++ ansexp=/usr/lib/perl5/vendor_perl/5.8/msys
++ case "$exp_file" in
++ value=/usr/lib/perl5/vendor_perl/5.8/msys
++ case "$fullpath" in
++ case "$redo" in
++ case "$type" in
++ for fp in '$gfpth'
++ test X. = X.
++ dir=/usr/lib/perl5/vendor_perl/5.8/msys
++ direxp=/usr/lib/perl5/vendor_perl/5.8/msys
++ test -d /usr/lib/perl5/vendor_perl/5.8/msys
++ type=
++ value=/usr/lib/perl5/vendor_perl/5.8/msys
++ break
++ case "$skip" in
++ type=
++ case "$type" in
++ test ''
++ cd UU
++ ans=/usr/lib/perl5/vendor_perl/5.8/msys
++ rp='Pathname for vendor-supplied architecture-dependent files?'
++ dflt=/usr/lib/perl5/vendor_perl/5.8/msys
++ rm -f getfile.ok
++ test X '!=' Xy
++ gfpth=
+ vendorarch=/usr/lib/perl5/vendor_perl/5.8/msys
+ vendorarchexp=/usr/lib/perl5/vendor_perl/5.8/msys
+ : Change installation prefix, if necessary.
+ test X/usr '!=' X/usr
+ installvendorarch=/usr/lib/perl5/vendor_perl/5.8/msys
+ : Final catch-all directories to search
+ /bin/cat

Lastly, you can have perl look in other directories for extensions and
modules in addition to those already specified.
These directories will be searched after 
	/usr/lib/perl5/site_perl/5.8/msys 
	/usr/lib/perl5/site_perl/5.8 
+ test X/usr/lib/perl5/vendor_perl/5.8 '!=' X
+ echo '	' /usr/lib/perl5/vendor_perl/5.8
	 /usr/lib/perl5/vendor_perl/5.8
+ test X/usr/lib/perl5/vendor_perl/5.8/msys '!=' X
+ echo '	' /usr/lib/perl5/vendor_perl/5.8/msys
	 /usr/lib/perl5/vendor_perl/5.8/msys
+ echo ' '
 
+ case "$otherlibdirs" in
+ dflt=none
+ /bin/cat
Enter a colon-separated set of extra paths to include in perl's @INC
search path, or enter 'none' for no extra paths.

+ rp='Colon-separated list of additional directories for perl to search?'
+ . ./myread
++ xxxm=none
++ case "$xxxm" in
++ case "$rp" in
+++ echo 'Colon-separated list of additional directories for perl to search? [none]  '
+++ wc -c
++ test 76 -ge 80
++ echo -n 'Colon-separated list of additional directories for perl to search? [none] '
Colon-separated list of additional directories for perl to search? [none] ++ ans='!'
++ case "$fastread" in
++ case "$dflt" in
++ ans=
++ case "$silent-$rp" in
++ echo ' '
 
++ expr X : 'X!'
++ case "$ans" in
++ ans=none
+ case "$ans" in
+ otherlibdirs=' '
+ case "$otherlibdirs" in
+ val=undef
+ set d_perl_otherlibdirs
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=d_perl_otherlibdirs
++ eval 'was=$d_perl_otherlibdirs'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval d_perl_otherlibdirs=undef
+++ d_perl_otherlibdirs=undef
+ : Cruising for prototypes
+ echo ' '
 
+ echo 'Checking out function prototypes...'
Checking out function prototypes...
+ /bin/cat
+ gcc -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -c prototype.c
+ echo 'Your C compiler appears to support function prototypes.'
Your C compiler appears to support function prototypes.
+ val=define
+ set prototype
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=prototype
++ eval 'was=$prototype'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval prototype=define
+++ prototype=define
+ /bin/rm -f prototype.c prototype.o prototype.out
+ case "$prototype" in
+ : determine where public executables go
+ echo ' '
 
+ set dflt bin bin
+ eval case '"$3"' in '""|none)' case '"$oldprefix"' in '"")' eval '"$1=\"\$$2\"";;' '*)' case '"$3"' in '"")' eval '"$1=";;' 'none)' eval '"tp=\"\$$2\"";' case '"$tp"' in '""|"' '")' eval '"$1=\"\$$2\"";;' '*)' eval '"$1=";;' 'esac;;' 'esac;;' 'esac;;' '*)' eval '"tp=\"$oldprefix-\$$2-\"";' eval '"tp=\"$tp\"";' case '"$tp"' in '--|/*--|\~*--)' eval '"$1=\"$prefix/$3\"";;' '/*-$oldprefix/*|\~*-$oldprefix/*)' eval '"$1=\`echo' '\$$2' '|' sed '\"s,^$oldprefix,$prefix,\"\`";;' '*)' eval '"$1=\"\$$2\"";;' 'esac;;' esac
++ case "$3" in
++ eval 'tp="-$bin-"'
+++ tp=--
++ eval 'tp="--"'
+++ tp=--
++ case "$tp" in
++ eval 'dflt="/usr/bin"'
+++ dflt=/usr/bin
+ fn=d~
+ rp='Pathname where the public executables will reside?'
+ . ./getfile
++ tilde=
++ fullpath=
++ already=
++ skip=
++ none_ok=
++ exp_file=
++ nopath_ok=
++ orig_rp='Pathname where the public executables will reside?'
++ orig_dflt=/usr/bin
++ case "$gfpth" in
++ gfpth=.
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ tilde=true
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ type=Directory
++ what=Directory
++ case "$what" in
++ case "$exp_file" in
++ case "$d_portable" in
++ cd ..
++ test Directory
++ redo=
++ rp='Pathname where the public executables will reside?'
++ dflt=/usr/bin
++ case "$tilde" in
++ rp='Pathname where the public executables will reside? (~name ok)'
++ . UU/myread
+++ xxxm=/usr/bin
+++ case "$xxxm" in
+++ case "$rp" in
++++ echo 'Pathname where the public executables will reside? (~name ok) [/usr/bin]  '
++++ wc -c
+++ test 75 -ge 80
+++ echo -n 'Pathname where the public executables will reside? (~name ok) [/usr/bin] '
Pathname where the public executables will reside? (~name ok) [/usr/bin] +++ ans='!'
+++ case "$fastread" in
+++ case "$dflt" in
+++ ans=
+++ case "$silent-$rp" in
+++ echo ' '
 
+++ expr X : 'X!'
+++ case "$ans" in
+++ ans=/usr/bin
++ test -f UU/getfile.ok
++ case "$ans" in
++ case "$tilde" in
+++ UU/filexp /usr/bin
++ value=/usr/bin
++ case $? in
++ test /usr/bin '!=' /usr/bin
++ ansexp=/usr/bin
++ case "$exp_file" in
++ value=/usr/bin
++ case "$fullpath" in
++ case "$redo" in
++ case "$type" in
++ for fp in '$gfpth'
++ test X. = X.
++ dir=/usr/bin
++ direxp=/usr/bin
++ test -d /usr/bin
++ type=
++ value=/usr/bin
++ break
++ case "$skip" in
++ case "$type" in
++ test ''
++ cd UU
++ ans=/usr/bin
++ rp='Pathname where the public executables will reside?'
++ dflt=/usr/bin
++ rm -f getfile.ok
++ test X '!=' Xy
++ gfpth=
+ test X/usr/bin '!=' X
+ installbin=
+ bin=/usr/bin
+ binexp=/usr/bin
+ : Change installation prefix, if necessary.
+ : XXX 'Bug?' -- ignores Configure -Dinstallprefix setting.
+ test X/usr '!=' X/usr
+ installbin=/usr/bin
+ echo ' '
 
+ case "$extras" in
+ dflt=n
+ cat
Perl can be built with extra modules or bundles of modules which
will be fetched from the CPAN and installed alongside Perl.

Notice that you will need access to the CPAN; either via the Internet,
or a local copy, for example a CD-ROM or a local CPAN mirror.  (You will
be asked later to configure the CPAN.pm module which will in turn do
the installation of the rest of the extra modules or bundles.)

Notice also that if the modules require any external software such as
libraries and headers (the libz library and the zlib.h header for the
Compress::Zlib module, for example) you MUST have any such software
already installed, this configuration process will NOT install such
things for you.

If this doesn't make any sense to you, just accept the default 'n'.
+ rp='Install any extra modules (y or n)?'
+ . ./myread
++ xxxm=n
++ case "$xxxm" in
++ case "$rp" in
+++ echo 'Install any extra modules (y or n)? [n]  '
+++ wc -c
++ test 42 -ge 80
++ echo -n 'Install any extra modules (y or n)? [n] '
Install any extra modules (y or n)? [n] ++ ans='!'
++ case "$fastread" in
++ case "$dflt" in
++ ans=
++ case "$silent-$rp" in
++ echo ' '
 
++ expr X : 'X!'
++ case "$ans" in
++ ans=n
+ case "$ans" in
+ case "$extras" in
+ val=
+ /bin/rm -f ../extras.lst
+ set extras
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=extras
++ eval 'was=$extras'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval extras=
+++ extras=
+ echo ' '
 
+ : determine where html pages for programs go
+ set html1dir html1dir none
+ eval case '"$3"' in '""|none)' case '"$oldprefix"' in '"")' eval '"$1=\"\$$2\"";;' '*)' case '"$3"' in '"")' eval '"$1=";;' 'none)' eval '"tp=\"\$$2\"";' case '"$tp"' in '""|"' '")' eval '"$1=\"\$$2\"";;' '*)' eval '"$1=";;' 'esac;;' 'esac;;' 'esac;;' '*)' eval '"tp=\"$oldprefix-\$$2-\"";' eval '"tp=\"$tp\"";' case '"$tp"' in '--|/*--|\~*--)' eval '"$1=\"$prefix/$3\"";;' '/*-$oldprefix/*|\~*-$oldprefix/*)' eval '"$1=\`echo' '\$$2' '|' sed '\"s,^$oldprefix,$prefix,\"\`";;' '*)' eval '"$1=\"\$$2\"";;' 'esac;;' esac
++ case "$3" in
++ case "$oldprefix" in
++ eval 'html1dir="$html1dir"'
+++ html1dir=
+ /bin/cat

If you wish to install html files for programs in Perl5, indicate 
the appropriate directory here.  To skip installing html files,
answer "none".
+ case "$html1dir" in
+ dflt=none
+ fn=dn+~
+ rp='Directory for the main Perl5 html pages?'
+ . ./getfile
++ tilde=
++ fullpath=
++ already=
++ skip=
++ none_ok=
++ exp_file=
++ nopath_ok=
++ orig_rp='Directory for the main Perl5 html pages?'
++ orig_dflt=none
++ case "$gfpth" in
++ gfpth=.
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ tilde=true
++ case "$fn" in
++ case "$fn" in
++ skip=true
++ case "$fn" in
++ none_ok=true
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ type=Directory
++ what=Directory
++ case "$what" in
++ case "$exp_file" in
++ case "$d_portable" in
++ cd ..
++ test Directory
++ redo=
++ rp='Directory for the main Perl5 html pages?'
++ dflt=none
++ case "$tilde" in
++ rp='Directory for the main Perl5 html pages? (~name ok)'
++ . UU/myread
+++ xxxm=none
+++ case "$xxxm" in
+++ case "$rp" in
++++ echo 'Directory for the main Perl5 html pages? (~name ok) [none]  '
++++ wc -c
+++ test 61 -ge 80
+++ echo -n 'Directory for the main Perl5 html pages? (~name ok) [none] '
Directory for the main Perl5 html pages? (~name ok) [none] +++ ans='!'
+++ case "$fastread" in
+++ case "$dflt" in
+++ ans=
+++ case "$silent-$rp" in
+++ echo ' '
 
+++ expr X : 'X!'
+++ case "$ans" in
+++ ans=none
++ test -f UU/getfile.ok
++ case "$ans" in
++ value=
++ ansexp=
++ case "$none_ok" in
++ type=
++ test ''
++ cd UU
++ ans=
++ rp='Directory for the main Perl5 html pages?'
++ dflt=none
++ rm -f getfile.ok
++ test X '!=' Xy
++ gfpth=
+ html1dir=
+ html1direxp=
+ : Use ' ' for none so value is preserved next time through Configure
+ test X = X
+ html1dir=' '
+ : Change installation prefix, if necessary.
+ test X/usr '!=' X/usr
+ installhtml1dir=
+ : determine where html pages for libraries and modules go
+ set html3dir html3dir none
+ eval case '"$3"' in '""|none)' case '"$oldprefix"' in '"")' eval '"$1=\"\$$2\"";;' '*)' case '"$3"' in '"")' eval '"$1=";;' 'none)' eval '"tp=\"\$$2\"";' case '"$tp"' in '""|"' '")' eval '"$1=\"\$$2\"";;' '*)' eval '"$1=";;' 'esac;;' 'esac;;' 'esac;;' '*)' eval '"tp=\"$oldprefix-\$$2-\"";' eval '"tp=\"$tp\"";' case '"$tp"' in '--|/*--|\~*--)' eval '"$1=\"$prefix/$3\"";;' '/*-$oldprefix/*|\~*-$oldprefix/*)' eval '"$1=\`echo' '\$$2' '|' sed '\"s,^$oldprefix,$prefix,\"\`";;' '*)' eval '"$1=\"\$$2\"";;' 'esac;;' esac
++ case "$3" in
++ case "$oldprefix" in
++ eval 'html3dir="$html3dir"'
+++ html3dir=
+ /bin/cat

If you wish to install html files for modules associated with Perl5,
indicate the appropriate directory here.  To skip installing html files,
answer "none".
+ : There is no obvious default. If they have specified html1dir, then
+ : try to key off that, possibly changing .../html1 into .../html3.
+ case "$html3dir" in
++ echo ' '
++ /bin/sed 's/1$/3$/'
+ html3dir=' '
+ fn=dn+~
+ rp='Directory for the Perl5 module html pages?'
+ . ./getfile
++ tilde=
++ fullpath=
++ already=
++ skip=
++ none_ok=
++ exp_file=
++ nopath_ok=
++ orig_rp='Directory for the Perl5 module html pages?'
++ orig_dflt=none
++ case "$gfpth" in
++ gfpth=.
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ tilde=true
++ case "$fn" in
++ case "$fn" in
++ skip=true
++ case "$fn" in
++ none_ok=true
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ type=Directory
++ what=Directory
++ case "$what" in
++ case "$exp_file" in
++ case "$d_portable" in
++ cd ..
++ test Directory
++ redo=
++ rp='Directory for the Perl5 module html pages?'
++ dflt=none
++ case "$tilde" in
++ rp='Directory for the Perl5 module html pages? (~name ok)'
++ . UU/myread
+++ xxxm=none
+++ case "$xxxm" in
+++ case "$rp" in
++++ echo 'Directory for the Perl5 module html pages? (~name ok) [none]  '
++++ wc -c
+++ test 63 -ge 80
+++ echo -n 'Directory for the Perl5 module html pages? (~name ok) [none] '
Directory for the Perl5 module html pages? (~name ok) [none] +++ ans='!'
+++ case "$fastread" in
+++ case "$dflt" in
+++ ans=
+++ case "$silent-$rp" in
+++ echo ' '
 
+++ expr X : 'X!'
+++ case "$ans" in
+++ ans=none
++ test -f UU/getfile.ok
++ case "$ans" in
++ value=
++ ansexp=
++ case "$none_ok" in
++ type=
++ test ''
++ cd UU
++ ans=
++ rp='Directory for the Perl5 module html pages?'
++ dflt=none
++ rm -f getfile.ok
++ test X '!=' Xy
++ gfpth=
+ html3dir=
+ html3direxp=
+ : Use ' ' for none so value is preserved next time through Configure
+ test X = X
+ html3dir=' '
+ : Change installation prefix, if necessary.
+ test X/usr '!=' X/usr
+ installhtml3dir=
+ : Find perl5.005 or later.
+ echo 'Looking for a previously installed perl5.005 or later... '
Looking for a previously installed perl5.005 or later... 
+ case "$perl5" in
++ echo /usr/bin:.:/usr/src/perl:/bin:/mingw/bin:/C/Windows/system32:/C/Windows:/usr/bin:/etc:/usr/lib:/lib:/sbin:/usr/sbin
++ /bin/sed 's/:/ /g'
+ for tdir in '`echo "$binexp$path_sep$PATH" | $sed "s/$path_sep/ /g"`'
+ : Check if this perl is recent and can load a simple module
+ test -x /usr/bin/perl.exe
+ /usr/bin/perl -Mless -e 'use 5.005;'
+ perl5=/usr/bin/perl
+ break
+ case "$perl5" in
+ echo 'Using /usr/bin/perl.'
Using /usr/bin/perl.
+ : Determine list of previous versions to include in @INC
+ /bin/cat
+ /bin/cat
+ chmod +x getverlist
+ case "$inc_version_list" in
+ test -x /usr/bin/perl.exe
++ /usr/bin/perl getverlist
+ dflt=' '
+ case "$dflt" in
+ dflt=none
+ case "$dflt" in
+ /bin/cat

In order to ease the process of upgrading, this version of perl 
can be configured to use modules built and installed with earlier 
versions of perl that were installed under /usr.  Specify here
the list of earlier versions that this version of perl should check.
If Configure detected no earlier versions of perl installed under
/usr, then the list will be empty.  Answer 'none' to tell perl
to not search earlier versions.

The default should almost always be sensible, so if you're not sure,
just accept the default.
+ rp='List of earlier versions to include in @INC?'
+ . ./myread
++ xxxm=none
++ case "$xxxm" in
++ case "$rp" in
+++ echo 'List of earlier versions to include in @INC? [none]  '
+++ wc -c
++ test 54 -ge 80
++ echo -n 'List of earlier versions to include in @INC? [none] '
List of earlier versions to include in @INC? [none] ++ ans='!'
++ case "$fastread" in
++ case "$dflt" in
++ ans=
++ case "$silent-$rp" in
++ echo ' '
 
++ expr X : 'X!'
++ case "$ans" in
++ ans=none
+ case "$ans" in
+ inc_version_list=' '
+ case "$inc_version_list" in
+ inc_version_list_init=0
+ /bin/rm -f getverlist
+ : determine whether to install perl also as /usr/bin/perl
+ echo ' '
 
+ test -d /usr/bin -a X/usr/bin '!=' X/usr/bin
+ val=undef
+ set installusrbinperl
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=installusrbinperl
++ eval 'was=$installusrbinperl'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval installusrbinperl=undef
+++ installusrbinperl=undef
+ echo ' '
 
+ echo 'Checking for GNU C Library...'
Checking for GNU C Library...
+ cat
+ set try
+ eval 'mc_file=$1;' 'shift;' '$cc' -o '${mc_file}' '$optimize' '$ccflags' '$ldflags' '$*' '${mc_file}.c' '$libs;'
++ mc_file=try
++ shift
++ gcc -o try -O3 -fno-unit-at-a-time -s -mtune=pentium -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s try.c -lgdbm -lcrypt -lgdbm_compat
+ ./try
+ val=undef
+ gnulibc_version=
+ echo 'You are not using the GNU C Library'
You are not using the GNU C Library
+ /bin/rm -f try try.c try.exe glibc.ver
+ set d_gnulibc
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=d_gnulibc
++ eval 'was=$d_gnulibc'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval d_gnulibc=undef
+++ d_gnulibc=undef
+ : see if nm is to be used to determine whether a symbol is defined or not
+ case "$usenm" in
+ dflt=
+ case "$d_gnulibc" in
+ case "$dflt" in
+ test msys = aix -a X '!=' Xdefine -a '!' -f /lib/syscalls.exp
+ case "$dflt" in
++ /bin/egrep 'inlibc|csym' ../Configure
++ wc -l
+ dflt=320
+ test 320 -gt 20
+ dflt=y
+ /bin/cat

I can use /bin/nm to extract the symbols from your C libraries. This
is a time consuming task which may generate huge output on the disk (up
to 3 megabytes) but that should make the symbols extraction faster. The
alternative is to skip the 'nm' extraction part and to compile a small
test program instead to determine whether each symbol is present. If
you have a fast C compiler and/or if your 'nm' output cannot be parsed,
this may be the best solution.

You probably shouldn't let me use 'nm' if you are using the GNU C Library.

+ rp='Shall I use /bin/nm to extract C symbols from the libraries?'
+ . ./myread
++ xxxm=y
++ case "$xxxm" in
++ case "$rp" in
+++ echo 'Shall I use /bin/nm to extract C symbols from the libraries? [y]  '
+++ wc -c
++ test 67 -ge 80
++ echo -n 'Shall I use /bin/nm to extract C symbols from the libraries? [y] '
Shall I use /bin/nm to extract C symbols from the libraries? [y] ++ ans='!'
++ case "$fastread" in
++ case "$dflt" in
++ ans=
++ case "$silent-$rp" in
++ echo ' '
 
++ expr X : 'X!'
++ case "$ans" in
++ ans=y
+ case "$ans" in
+ usenm=true
+ runnm=true
+ case "$reuseval" in
+ : nm options which may be necessary
+ case "$nm_opt" in
+ test -f /mach_boot
+ test -d /usr/ccs/lib
+ test -f /dgux
+ test -f /lib64/rld
+ nm_opt=
+ : nm options which may be necessary for shared libraries but illegal
+ : for archive libraries. Thank you, Linux.
+ case "$nm_so_opt" in
+ case "$myuname" in
+ case "$runnm" in
+ : get list of predefined functions in a handy place
+ echo ' '
 
+ case "$libc" in
+ case "$libs" in
+ for thislib in '$libs'
+ case "$thislib" in
++ echo -lgdbm
++ /bin/sed -e 's/^-l//'
+ thislib=gdbm
++ ./loc 'libgdbm.dll.*' X /usr/lib /lib
+ try=/usr/lib/libgdbm.dll.a
+ test -f /usr/lib/libgdbm.dll.a
+ :
+ libnames=' /usr/lib/libgdbm.dll.a'
+ for thislib in '$libs'
+ case "$thislib" in
++ echo -lcrypt
++ /bin/sed -e 's/^-l//'
+ thislib=crypt
++ ./loc 'libcrypt.dll.*' X /usr/lib /lib
+ try=/usr/lib/libcrypt.dll.a
+ test -f /usr/lib/libcrypt.dll.a
+ :
+ libnames=' /usr/lib/libgdbm.dll.a /usr/lib/libcrypt.dll.a'
+ for thislib in '$libs'
+ case "$thislib" in
++ echo -lgdbm_compat
++ /bin/sed -e 's/^-l//'
+ thislib=gdbm_compat
++ ./loc 'libgdbm_compat.dll.*' X /usr/lib /lib
+ try=/usr/lib/libgdbm_compat.dll.a
+ test -f /usr/lib/libgdbm_compat.dll.a
+ :
+ libnames=' /usr/lib/libgdbm.dll.a /usr/lib/libcrypt.dll.a /usr/lib/libgdbm_compat.dll.a'
+ xxx=normal
+ case "$libc" in
+ set blurfl
+ test -r blurfl
+ test -r /lib/libc
+ test -r /usr/lib/libmsys-1.0.dll.a
+ echo 'Your C library seems to be in /usr/lib/libmsys-1.0.dll.a, as you said before.'
Your C library seems to be in /usr/lib/libmsys-1.0.dll.a, as you said before.
+ test normal = apollo -o -r /usr/lib/libmsys-1.0.dll.a
+ dflt=/usr/lib/libmsys-1.0.dll.a
+ cat

If the guess above is wrong (which it might be if you're using a strange
compiler, or your machine supports multiple models), you can override it here.

+ fn=f
+ rp='Where is your C library?'
+ . ./getfile
++ tilde=
++ fullpath=
++ already=
++ skip=
++ none_ok=
++ exp_file=
++ nopath_ok=
++ orig_rp='Where is your C library?'
++ orig_dflt=/usr/lib/libmsys-1.0.dll.a
++ case "$gfpth" in
++ gfpth=.
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ type=File
++ what=File
++ case "$what" in
++ case "$exp_file" in
++ case "$d_portable" in
++ cd ..
++ test File
++ redo=
++ rp='Where is your C library?'
++ dflt=/usr/lib/libmsys-1.0.dll.a
++ case "$tilde" in
++ . UU/myread
+++ xxxm=/usr/lib/libmsys-1.0.dll.a
+++ case "$xxxm" in
+++ case "$rp" in
++++ echo 'Where is your C library? [/usr/lib/libmsys-1.0.dll.a]  '
++++ wc -c
+++ test 56 -ge 80
+++ echo -n 'Where is your C library? [/usr/lib/libmsys-1.0.dll.a] '
Where is your C library? [/usr/lib/libmsys-1.0.dll.a] +++ ans='!'
+++ case "$fastread" in
+++ case "$dflt" in
+++ ans=
+++ case "$silent-$rp" in
+++ echo ' '
 
+++ expr X : 'X!'
+++ case "$ans" in
+++ ans=/usr/lib/libmsys-1.0.dll.a
++ test -f UU/getfile.ok
++ case "$ans" in
++ case "$tilde" in
++ value=/usr/lib/libmsys-1.0.dll.a
++ ansexp=/usr/lib/libmsys-1.0.dll.a
++ case "$fullpath" in
++ case "$redo" in
++ case "$type" in
++ for fp in '$gfpth'
++ test X. = X.
++ pf=/usr/lib/libmsys-1.0.dll.a
++ test -f /usr/lib/libmsys-1.0.dll.a
++ type=
++ test X = X
++ value=/usr/lib/libmsys-1.0.dll.a
++ break
++ case "$skip" in
++ case "$type" in
++ test ''
++ cd UU
++ ans=/usr/lib/libmsys-1.0.dll.a
++ rp='Where is your C library?'
++ dflt=/usr/lib/libmsys-1.0.dll.a
++ rm -f getfile.ok
++ test X '!=' Xy
++ gfpth=
+ libc=/usr/lib/libmsys-1.0.dll.a
+ echo ' '
 
+ echo /usr/lib/libmsys-1.0.dll.a /usr/lib/libgdbm.dll.a /usr/lib/libcrypt.dll.a /usr/lib/libgdbm_compat.dll.a
+ /bin/tr ' ' '\n'
+ /bin/sort
+ /bin/uniq
++ cat libnames
+ set X /usr/lib/libcrypt.dll.a /usr/lib/libgdbm.dll.a /usr/lib/libgdbm_compat.dll.a /usr/lib/libmsys-1.0.dll.a
+ shift
+ xxx=files
+ case $# in
+ echo 'Extracting names from the following files for later perusal:'
Extracting names from the following files for later perusal:
+ echo ' '
 
+ /bin/sed 's/^/	/' libnames
	/usr/lib/libcrypt.dll.a
	/usr/lib/libgdbm.dll.a
	/usr/lib/libgdbm_compat.dll.a
	/usr/lib/libmsys-1.0.dll.a
+ echo ' '
 
+ /bin/echo -n 'This may take a while...'
This may take a while...+ for file in '$*'
+ case $file in
+ /bin/nm /usr/lib/libcrypt.dll.a
+ for file in '$*'
+ case $file in
+ /bin/nm /usr/lib/libgdbm.dll.a
+ for file in '$*'
+ case $file in
+ /bin/nm /usr/lib/libgdbm_compat.dll.a
+ for file in '$*'
+ case $file in
+ /bin/nm /usr/lib/libmsys-1.0.dll.a
+ /bin/echo -n .
.+ /bin/grep fprintf libc.tmp
+ xscan='eval "<libc.ptf $com >libc.list"; $echo $n ".$c" >&4'
+ xrun='eval "<libc.tmp $com >libc.list"; echo "done." >&4'
+ xxx='[ADTSIW]'
+ com='/bin/sed -n -e '\''s/__IO//'\'' -e '\''s/^.* [ADTSIW]  *//p'\'''
+ eval eval '"<libc.ptf' '$com' '>libc.list";' '$echo' '$n' '".$c"' '>&4'
++ eval '<libc.ptf /bin/sed -n -e '\''s/__IO//'\'' -e '\''s/^.* [ADTSIW]  *//p'\'' >libc.list'
+++ /bin/sed -n -e s/__IO// -e 's/^.* [ADTSIW]  *//p'
++ /bin/echo -n .
.+ grep '^fprintf$' libc.list
+ com='/bin/sed -n -e '\''s/^__*//'\'' -e '\''s/^\([a-zA-Z_0-9$]*\).*xtern.*/\1/p'\'''
+ eval eval '"<libc.ptf' '$com' '>libc.list";' '$echo' '$n' '".$c"' '>&4'
++ eval '<libc.ptf /bin/sed -n -e '\''s/^__*//'\'' -e '\''s/^\([a-zA-Z_0-9$]*\).*xtern.*/\1/p'\'' >libc.list'
+++ /bin/sed -n -e 's/^__*//' -e 's/^\([a-zA-Z_0-9$]*\).*xtern.*/\1/p'
++ /bin/echo -n .
.+ grep '^fprintf$' libc.list
+ com='/bin/sed -n -e '\''/|UNDEF/d'\'' -e '\''/FUNC..GL/s/^.*|__*//p'\'''
+ eval eval '"<libc.ptf' '$com' '>libc.list";' '$echo' '$n' '".$c"' '>&4'
++ eval '<libc.ptf /bin/sed -n -e '\''/|UNDEF/d'\'' -e '\''/FUNC..GL/s/^.*|__*//p'\'' >libc.list'
+++ /bin/sed -n -e '/|UNDEF/d' -e '/FUNC..GL/s/^.*|__*//p'
++ /bin/echo -n .
.+ grep '^fprintf$' libc.list
+ com='/bin/sed -n -e '\''s/^.* D __*//p'\'' -e '\''s/^.* D //p'\'''
+ eval eval '"<libc.ptf' '$com' '>libc.list";' '$echo' '$n' '".$c"' '>&4'
++ eval '<libc.ptf /bin/sed -n -e '\''s/^.* D __*//p'\'' -e '\''s/^.* D //p'\'' >libc.list'
+++ /bin/sed -n -e 's/^.* D __*//p' -e 's/^.* D //p'
++ /bin/echo -n .
.+ grep '^fprintf$' libc.list
+ com='/bin/sed -n -e '\''s/^_//'\'' -e '\''s/^\([a-zA-Z_0-9]*\).*xtern.*text.*/\1/p'\'''
+ eval eval '"<libc.ptf' '$com' '>libc.list";' '$echo' '$n' '".$c"' '>&4'
++ eval '<libc.ptf /bin/sed -n -e '\''s/^_//'\'' -e '\''s/^\([a-zA-Z_0-9]*\).*xtern.*text.*/\1/p'\'' >libc.list'
+++ /bin/sed -n -e 's/^_//' -e 's/^\([a-zA-Z_0-9]*\).*xtern.*text.*/\1/p'
++ /bin/echo -n .
.+ grep '^fprintf$' libc.list
+ com='/bin/sed -n -e '\''s/^.*|FUNC |GLOB .*|//p'\'''
+ eval eval '"<libc.ptf' '$com' '>libc.list";' '$echo' '$n' '".$c"' '>&4'
++ eval '<libc.ptf /bin/sed -n -e '\''s/^.*|FUNC |GLOB .*|//p'\'' >libc.list'
+++ /bin/sed -n -e 's/^.*|FUNC |GLOB .*|//p'
++ /bin/echo -n .
.+ grep '^fprintf$' libc.list
+ com='/bin/grep '\''|'\'' | /bin/sed -n -e '\''/|COMMON/d'\'' -e '\''/|DATA/d'\'' 				-e '\''/ file/d'\'' -e '\''s/^\([^ 	]*\).*/\1/p'\'''
+ eval eval '"<libc.ptf' '$com' '>libc.list";' '$echo' '$n' '".$c"' '>&4'
++ eval '<libc.ptf /bin/grep '\''|'\'' | /bin/sed -n -e '\''/|COMMON/d'\'' -e '\''/|DATA/d'\'' 				-e '\''/ file/d'\'' -e '\''s/^\([^ 	]*\).*/\1/p'\'' >libc.list'
+++ /bin/grep '|'
+++ /bin/sed -n -e '/|COMMON/d' -e '/|DATA/d' -e '/ file/d' -e 's/^\([^ 	]*\).*/\1/p'
++ /bin/echo -n .
.+ grep '^fprintf$' libc.list
+ com='/bin/sed -n -e '\''s/^.*|FUNC |GLOB .*|//p'\'' -e '\''s/^.*|FUNC |WEAK .*|//p'\'''
+ eval eval '"<libc.ptf' '$com' '>libc.list";' '$echo' '$n' '".$c"' '>&4'
++ eval '<libc.ptf /bin/sed -n -e '\''s/^.*|FUNC |GLOB .*|//p'\'' -e '\''s/^.*|FUNC |WEAK .*|//p'\'' >libc.list'
+++ /bin/sed -n -e 's/^.*|FUNC |GLOB .*|//p' -e 's/^.*|FUNC |WEAK .*|//p'
++ /bin/echo -n .
.+ grep '^fprintf$' libc.list
+ com='/bin/sed -n -e '\''s/^__//'\'' -e '\''/|Undef/d'\'' -e '\''/|Proc/s/ .*//p'\'''
+ eval eval '"<libc.ptf' '$com' '>libc.list";' '$echo' '$n' '".$c"' '>&4'
++ eval '<libc.ptf /bin/sed -n -e '\''s/^__//'\'' -e '\''/|Undef/d'\'' -e '\''/|Proc/s/ .*//p'\'' >libc.list'
+++ /bin/sed -n -e 's/^__//' -e '/|Undef/d' -e '/|Proc/s/ .*//p'
++ /bin/echo -n .
.+ grep '^fprintf$' libc.list
+ com='/bin/sed -n -e '\''s/^.*|Proc .*|Text *| *//p'\'''
+ eval eval '"<libc.ptf' '$com' '>libc.list";' '$echo' '$n' '".$c"' '>&4'
++ eval '<libc.ptf /bin/sed -n -e '\''s/^.*|Proc .*|Text *| *//p'\'' >libc.list'
+++ /bin/sed -n -e 's/^.*|Proc .*|Text *| *//p'
++ /bin/echo -n .
.+ grep '^fprintf$' libc.list
+ com='/bin/sed -n -e '\''/Def. Text/s/.* \([^ ]*\)$/\1/p'\'''
+ eval eval '"<libc.ptf' '$com' '>libc.list";' '$echo' '$n' '".$c"' '>&4'
++ eval '<libc.ptf /bin/sed -n -e '\''/Def. Text/s/.* \([^ ]*\)$/\1/p'\'' >libc.list'
+++ /bin/sed -n -e '/Def. Text/s/.* \([^ ]*\)$/\1/p'
++ /bin/echo -n .
.+ grep '^fprintf$' libc.list
+ com='/bin/sed -n -e '\''s/^[-0-9a-f ]*_\(.*\)=.*/\1/p'\'''
+ eval eval '"<libc.ptf' '$com' '>libc.list";' '$echo' '$n' '".$c"' '>&4'
++ eval '<libc.ptf /bin/sed -n -e '\''s/^[-0-9a-f ]*_\(.*\)=.*/\1/p'\'' >libc.list'
+++ /bin/sed -n -e 's/^[-0-9a-f ]*_\(.*\)=.*/\1/p'
++ /bin/echo -n .
.+ grep '^fprintf$' libc.list
+ com='/bin/sed -n -e '\''s/.*\.text n\ \ \ \.//p'\'''
+ eval eval '"<libc.ptf' '$com' '>libc.list";' '$echo' '$n' '".$c"' '>&4'
++ eval '<libc.ptf /bin/sed -n -e '\''s/.*\.text n\ \ \ \.//p'\'' >libc.list'
+++ /bin/sed -n -e 's/.*\.text n\ \ \ \.//p'
++ /bin/echo -n .
.+ grep '^fprintf$' libc.list
+ com='sed -n -e '\''s/^__.*//'\'' -e '\''s/[       ]*D[    ]*[0-9]*.*//p'\'''
+ eval eval '"<libc.ptf' '$com' '>libc.list";' '$echo' '$n' '".$c"' '>&4'
++ eval '<libc.ptf sed -n -e '\''s/^__.*//'\'' -e '\''s/[       ]*D[    ]*[0-9]*.*//p'\'' >libc.list'
+++ sed -n -e 's/^__.*//' -e 's/[       ]*D[    ]*[0-9]*.*//p'
++ /bin/echo -n .
.+ grep '^fprintf$' libc.list
+ /bin/nm -p /usr/lib/libcrypt.dll.a /usr/lib/libgdbm.dll.a /usr/lib/libgdbm_compat.dll.a /usr/lib/libmsys-1.0.dll.a
+ /bin/grep fprintf libc.tmp
+ com='/bin/sed -n -e '\''s/^.* [ADTSIW]  *_[_.]*//p'\'' -e '\''s/^.* [ADTSIW] //p'\'''
+ eval eval '"<libc.ptf' '$com' '>libc.list";' '$echo' '$n' '".$c"' '>&4'
++ eval '<libc.ptf /bin/sed -n -e '\''s/^.* [ADTSIW]  *_[_.]*//p'\'' -e '\''s/^.* [ADTSIW] //p'\'' >libc.list'
+++ /bin/sed -n -e 's/^.* [ADTSIW]  *_[_.]*//p' -e 's/^.* [ADTSIW] //p'
++ /bin/echo -n .
.+ grep '^fprintf$' libc.list
+ nm_opt=-p
+ eval eval '"<libc.tmp' '$com' '>libc.list";' echo '"done."' '>&4'
++ eval '<libc.tmp /bin/sed -n -e '\''s/^.* [ADTSIW]  *_[_.]*//p'\'' -e '\''s/^.* [ADTSIW] //p'\'' >libc.list'
+++ /bin/sed -n -e 's/^.* [ADTSIW]  *_[_.]*//p' -e 's/^.* [ADTSIW] //p'
++ echo done.
done.
+ nm_extract='/bin/sed -n -e '\''s/^.* [ADTSIW]  *_[_.]*//p'\'' -e '\''s/^.* [ADTSIW] //p'\'''
+ case "$PASE" in
+ test -f /lib/syscalls.exp
+ /bin/rm -f libnames libpath
+ : see if dld is available
+ set dld.h i_dld
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'yyy=$@;' 'cont=true;' 'xxf="echo' '\"<\$1>' 'found.\"' '>&4";' case '$#' in '2)' 'xxnf="echo' '\"<\$1>' NOT 'found.\"' '>&4";;' '*)' 'xxnf="echo' '\"<\$1>' NOT found, '...\"' '>&4";;' 'esac;' case '$#' in '4)' 'instead=instead;;' '*)' 'instead="at' 'last";;' 'esac;' while '$test' '"$cont";' do 'xxx=`./findhdr' '$1`' 'var=$2;' eval '"was=\$$2";' if '$test' '"$xxx"' '&&' '$test' -r '"$xxx";' then eval '$xxf;' eval '"case' '\"\$$var\"' in '$undef)' . './whoa;' 'esac";' eval '"$var=\$td";' 'cont="";' else eval '$xxnf;' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' 'fi;' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' case '$#' in '0)' 'cont="";;' '2)' 'xxf="echo' '\"but' I found '<\$1>' '$instead.\"' '>&4";' 'xxnf="echo' '\"and' I did not find '<\$1>' 'either.\"' '>&4";;' '*)' 'xxf="echo' '\"but' I found '<\$1\>' 'instead.\"' '>&4";' 'xxnf="echo' '\"there' is no '<\$1>,' '...\"' '>&4";;' 'esac;' 'done;' while '$test' '"$yyy";' do set '$yyy;' 'var=$2;' eval '"was=\$$2";' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' done
++ echo ' '
 
++ td=define
++ tu=undef
++ yyy='dld.h i_dld'
++ cont=true
++ xxf='echo "<$1> found." >&4'
++ case $# in
++ xxnf='echo "<$1> NOT found." >&4'
++ case $# in
++ instead='at last'
++ test true
+++ ./findhdr dld.h
++ xxx=
++ var=i_dld
++ eval 'was=$i_dld'
+++ was=
++ test ''
++ eval echo '"<$1>' NOT 'found."' '>&4'
+++ echo '<dld.h> NOT found.'
<dld.h> NOT found.
++ eval 'case "$i_dld" in define) . ./whoa; esac'
+++ case "$i_dld" in
++ eval 'i_dld=$tu'
+++ i_dld=undef
++ set dld.h i_dld
++ shift
++ shift
++ yyy=
++ case $# in
++ cont=
++ test ''
++ test ''
+ : is a C symbol 'defined?'
+ csym='tlook=$1;
case "$3" in
-v) tf=libc.tmp; tdc="";;
-a) tf=libc.tmp; tdc="[]";;
*) tlook="^$1\$"; tf=libc.list; tdc="()";;
esac;
tx=yes;
case "$reuseval-$4" in
true-) ;;
true-*) tx=no; eval "tval=\$$4"; case "$tval" in "") tx=yes;; esac;;
esac;
case "$tx" in
yes)
	tval=false;
	if $test "$runnm" = true; then
		if $contains $tlook $tf >/dev/null 2>&1; then
			tval=true;
		elif $test "$mistrustnm" = compile -o "$mistrustnm" = run; then
			echo "void *(*(p()))$tdc { extern void *$1$tdc; return &$1; } int main() { if(p()) return(0); else return(1); }"> try.c;
			$cc -o try $optimize $ccflags $ldflags try.c >/dev/null 2>&1 $libs && tval=true;
			$test "$mistrustnm" = run -a -x try && { $run ./try$_exe >/dev/null 2>&1 || tval=false; };
			$rm -f try$_exe try.c core core.* try.core;
		fi;
	else
		echo "void *(*(p()))$tdc { extern void *$1$tdc; return &$1; } int main() { if(p()) return(0); else return(1); }"> try.c;
		$cc -o try $optimize $ccflags $ldflags try.c $libs >/dev/null 2>&1 && tval=true;
		$rm -f try$_exe try.c;
	fi;
	;;
*)
	case "$tval" in
	$define) tval=true;;
	*) tval=false;;
	esac;
	;;
esac;
eval "$2=$tval"'
+ : define an 'is-in-libc?' function
+ inlibc='echo " "; td=$define; tu=$undef;
sym=$1; var=$2; eval "was=\$$2";
tx=yes;
case "$reuseval$was" in
true) ;;
true*) tx=no;;
esac;
case "$tx" in
yes)
	set $sym tres -f;
	eval $csym;
	case "$tres" in
	true)
		echo "$sym() found." >&4;
		case "$was" in $undef) . ./whoa; esac; eval "$var=\$td";;
	*)
		echo "$sym() NOT found." >&4;
		case "$was" in $define) . ./whoa; esac; eval "$var=\$tu";;
	esac;;
*)
	case "$was" in
	$define) echo "$sym() found." >&4;;
	*) echo "$sym() NOT found." >&4;;
	esac;;
esac'
+ : see if dlopen exists
+ xxx_runnm=true
+ runnm=false
+ set dlopen d_dlopen
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=dlopen
++ var=d_dlopen
++ eval 'was=$d_dlopen'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set dlopen tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=dlopen
+++ case "$3" in
+++ tlook='^dlopen$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test false = true
+++ echo 'void *(*(p()))() { extern void *dlopen(); return &dlopen; } int main() { if(p()) return(0); else return(1); }'
+++ gcc -o try -O3 -fno-unit-at-a-time -s -mtune=pentium -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s try.c -lgdbm -lcrypt -lgdbm_compat
+++ tval=true
+++ /bin/rm -f try.exe try.c
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'dlopen() found.'
dlopen() found.
++ case "$was" in
++ eval 'd_dlopen=$td'
+++ d_dlopen=define
+ runnm=true
+ : determine which dynamic loading, if any, to compile in
+ echo ' '
 
+ dldir=ext/DynaLoader
+ case "$usedl" in
+ dflt=n
+ case "$d_dlopen" in
+ dflt=y
+ case "$i_dld" in
+ : Does a dl_xxx.xs file exist for this operating system
+ test -f ../ext/DynaLoader/dl_msys.xs
+ rp='Do you wish to use dynamic loading?'
+ . ./myread
++ xxxm=y
++ case "$xxxm" in
++ case "$rp" in
+++ echo 'Do you wish to use dynamic loading? [y]  '
+++ wc -c
++ test 42 -ge 80
++ echo -n 'Do you wish to use dynamic loading? [y] '
Do you wish to use dynamic loading? [y] ++ ans='!'
++ case "$fastread" in
++ case "$dflt" in
++ ans=
++ case "$silent-$rp" in
++ echo ' '
 
++ expr X : 'X!'
++ case "$ans" in
++ ans=y
+ usedl=y
+ case "$ans" in
+ usedl=define
+ case "$dlsrc" in
+ test -f ../ext/DynaLoader/dl_msys.xs
+ test define = define
+ dflt=ext/DynaLoader/dl_dlopen.xs
+ echo 'The following dynamic loading files are available:'
The following dynamic loading files are available:
+ : Can not go over to ext/DynaLoader because getfile has path hard-coded in.
++ pwd
+ tdir=/usr/src/perl/perl-5.8.8/UU
+ cd ..
+ /bin/ls -C ext/DynaLoader/dl_aix.xs ext/DynaLoader/dl_beos.xs ext/DynaLoader/dl_dld.xs ext/DynaLoader/dl_dllload.xs ext/DynaLoader/dl_dlopen.xs ext/DynaLoader/dl_dyld.xs ext/DynaLoader/dl_hpux.xs ext/DynaLoader/dl_mac.xs ext/DynaLoader/dl_mpeix.xs ext/DynaLoader/dl_next.xs ext/DynaLoader/dl_none.xs ext/DynaLoader/dl_vmesa.xs ext/DynaLoader/dl_vms.xs
ext/DynaLoader/dl_aix.xs      ext/DynaLoader/dl_mac.xs
ext/DynaLoader/dl_beos.xs     ext/DynaLoader/dl_mpeix.xs
ext/DynaLoader/dl_dld.xs      ext/DynaLoader/dl_next.xs
ext/DynaLoader/dl_dllload.xs  ext/DynaLoader/dl_none.xs
ext/DynaLoader/dl_dlopen.xs   ext/DynaLoader/dl_vmesa.xs
ext/DynaLoader/dl_dyld.xs     ext/DynaLoader/dl_vms.xs
ext/DynaLoader/dl_hpux.xs
+ cd /usr/src/perl/perl-5.8.8/UU
+ rp='Source file to use for dynamic loading'
+ fn=fne
+ gfpth=.
+ . ./getfile
++ tilde=
++ fullpath=
++ already=
++ skip=
++ none_ok=
++ exp_file=
++ nopath_ok=
++ orig_rp='Source file to use for dynamic loading'
++ orig_dflt=ext/DynaLoader/dl_dlopen.xs
++ case "$gfpth" in
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ none_ok=true
++ case "$fn" in
++ exp_file=true
++ case "$fn" in
++ case "$fn" in
++ type=File
++ what=File
++ case "$what" in
++ case "$exp_file" in
++ cd ..
++ test File
++ redo=
++ rp='Source file to use for dynamic loading'
++ dflt=ext/DynaLoader/dl_dlopen.xs
++ case "$tilde" in
++ . UU/myread
+++ xxxm=ext/DynaLoader/dl_dlopen.xs
+++ case "$xxxm" in
+++ case "$rp" in
++++ echo 'Source file to use for dynamic loading [ext/DynaLoader/dl_dlopen.xs]  '
++++ wc -c
+++ test 71 -ge 80
+++ echo -n 'Source file to use for dynamic loading [ext/DynaLoader/dl_dlopen.xs] '
Source file to use for dynamic loading [ext/DynaLoader/dl_dlopen.xs] +++ ans='!'
+++ case "$fastread" in
+++ case "$dflt" in
+++ ans=
+++ case "$silent-$rp" in
+++ echo ' '
 
+++ expr X : 'X!'
+++ case "$ans" in
+++ ans=ext/DynaLoader/dl_dlopen.xs
++ test -f UU/getfile.ok
++ case "$ans" in
++ case "$tilde" in
++ value=ext/DynaLoader/dl_dlopen.xs
++ ansexp=ext/DynaLoader/dl_dlopen.xs
++ case "$fullpath" in
++ case "$redo" in
++ case "$type" in
++ for fp in '$gfpth'
++ test X. = X.
++ pf=ext/DynaLoader/dl_dlopen.xs
++ test -f ext/DynaLoader/dl_dlopen.xs
++ type=
++ test X = X
++ value=ext/DynaLoader/dl_dlopen.xs
++ break
++ case "$skip" in
++ case "$type" in
++ test ''
++ cd UU
++ ans=ext/DynaLoader/dl_dlopen.xs
++ rp='Source file to use for dynamic loading'
++ dflt=ext/DynaLoader/dl_dlopen.xs
++ rm -f getfile.ok
++ test X '!=' Xy
++ gfpth=
+ usedl=define
+ : emulate basename
++ echo ext/DynaLoader/dl_dlopen.xs
++ /bin/sed -e 's%.*/\([^/]*\)$%\1%'
+ dlsrc=dl_dlopen.xs
+ /bin/cat

Some systems may require passing special flags to gcc -c to
compile modules that will be used to create a shared library.
To use no flags, say "none".

+ case "$cccdlflags" in
+ dflt=none
+ rp='Any special flags to pass to gcc -c to compile shared library modules?'
+ . ./myread
++ xxxm=none
++ case "$xxxm" in
++ case "$rp" in
+++ echo 'Any special flags to pass to gcc -c to compile shared library modules? [none]  '
+++ wc -c
++ test 80 -ge 80
++ echo 'Any special flags to pass to gcc -c to compile shared library modules?'
Any special flags to pass to gcc -c to compile shared library modules?
++ echo -n '[none] '
[none] ++ ans='!'
++ case "$fastread" in
++ case "$dflt" in
++ ans=
++ case "$silent-$rp" in
++ echo ' '
 
++ expr X : 'X!'
++ case "$ans" in
++ ans=none
+ case "$ans" in
+ cccdlflags=' '
+ cat

Some systems use ld to create libraries that can be dynamically loaded,
while other systems (such as those using ELF) use gcc.

+ case "$ld" in
+ dflt=ld2
+ rp='What command should be used to create dynamic libraries?'
+ . ./myread
++ xxxm=ld2
++ case "$xxxm" in
++ case "$rp" in
+++ echo 'What command should be used to create dynamic libraries? [ld2]  '
+++ wc -c
++ test 65 -ge 80
++ echo -n 'What command should be used to create dynamic libraries? [ld2] '
What command should be used to create dynamic libraries? [ld2] ++ ans='!'
++ case "$fastread" in
++ case "$dflt" in
++ ans=
++ case "$silent-$rp" in
++ echo ' '
 
++ expr X : 'X!'
++ case "$ans" in
++ ans=ld2
+ ld=ld2
+ cat

Some systems may require passing special flags to ld2 to create a
library that can be dynamically loaded.  If your ld flags include
-L/other/path options to locate libraries outside your loader's normal
search path, you may need to specify those -L options here as well.  To
use no flags, say "none".

+ case "$lddlflags" in
+ dflt=' -s '
+ : Try to guess additional flags to pick up local libraries.
+ : Be careful not to append to a plain none
+ case "$dflt" in
+ for thisflag in '$ldflags'
+ case "$thisflag" in
+ case "$dflt" in
+ rp='Any special flags to pass to ld2 to create a dynamically loaded library?'
+ . ./myread
++ xxxm=' -s '
++ case "$xxxm" in
++ case "$rp" in
+++ echo 'Any special flags to pass to ld2 to create a dynamically loaded library? [ -s ]  '
+++ wc -c
++ test 82 -ge 80
++ echo 'Any special flags to pass to ld2 to create a dynamically loaded library?'
Any special flags to pass to ld2 to create a dynamically loaded library?
++ echo -n '[ -s ] '
[ -s ] ++ ans='!'
++ case "$fastread" in
++ case "$dflt" in
++ ans=
++ case "$silent-$rp" in
++ echo ' '
 
++ expr X : 'X!'
++ case "$ans" in
++ ans=' -s '
+ case "$ans" in
+ lddlflags=' -s '
+ cat

Some systems may require passing special flags to gcc to indicate that
the resulting executable will use dynamic linking.  To use no flags,
say "none".

+ case "$ccdlflags" in
+ dflt=' -s '
+ rp='Any special flags to pass to gcc to use dynamic linking?'
+ . ./myread
++ xxxm=' -s '
++ case "$xxxm" in
++ case "$rp" in
+++ echo 'Any special flags to pass to gcc to use dynamic linking? [ -s ]  '
+++ wc -c
++ test 66 -ge 80
++ echo -n 'Any special flags to pass to gcc to use dynamic linking? [ -s ] '
Any special flags to pass to gcc to use dynamic linking? [ -s ] ++ ans='!'
++ case "$fastread" in
++ case "$dflt" in
++ ans=
++ case "$silent-$rp" in
++ echo ' '
 
++ expr X : 'X!'
++ case "$ans" in
++ ans=' -s '
+ case "$ans" in
+ ccdlflags=' -s '
+ also=
+ case "$usedl" in
+ case "$useshrplib" in
+ dflt=y
+ /bin/cat

The perl executable is normally obtained by linking perlmain.c with
libperl.a, any static extensions (usually just DynaLoader), and
any other libraries needed on this system (such as -lm, etc.).  Since
your system supports dynamic loading, it is probably possible to build
a shared libperl.dll.  If you will have more than one executable linked
to libperl.dll, this will significantly reduce the size of each
executable, but it may have a noticeable effect on performance.  The
default is probably sensible for your system.


+ rp='Build a shared libperl.dll (y/n)'
+ . ./myread
++ xxxm=y
++ case "$xxxm" in
++ case "$rp" in
+++ echo 'Build a shared libperl.dll (y/n) [y]  '
+++ wc -c
++ test 39 -ge 80
++ echo -n 'Build a shared libperl.dll (y/n) [y] '
Build a shared libperl.dll (y/n) [y] ++ ans='!'
++ case "$fastread" in
++ case "$dflt" in
++ ans=
++ case "$silent-$rp" in
++ echo ' '
 
++ expr X : 'X!'
++ case "$ans" in
++ ans=y
+ case "$ans" in
+ useshrplib=true
+ case "$useshrplib" in
+ case "$libperl" in
+ majmin=libperl.dll.8.8
++ echo 8 8
++ /bin/awk '{printf "%d%02d", $1, $2}'
+ majonly=808
+ majonly=libperl.dll.808
+ case "${osname}${osvers}" in
+ dflt=libperl.a
+ cat

I need to select a good name for the shared libperl.  If your system uses
library names with major and minor numbers, then you might want something
like libperl.dll.8.8.  Alternatively, if your system uses a single version
number for shared libraries, then you might want to use libperl.dll.808.
Or, your system might be quite happy with a simple libperl.dll.

Since the shared libperl will get installed into a version-specific
architecture-dependent directory, the version number of the shared perl
library probably isn't important, so the default should be o.k.

+ rp='What name do you want to give to the shared libperl?'
+ . ./myread
++ xxxm=libperl.a
++ case "$xxxm" in
++ case "$rp" in
+++ echo 'What name do you want to give to the shared libperl? [libperl.a]  '
+++ wc -c
++ test 67 -ge 80
++ echo -n 'What name do you want to give to the shared libperl? [libperl.a] '
What name do you want to give to the shared libperl? [libperl.a] ++ ans='!'
++ case "$fastread" in
++ case "$dflt" in
++ ans=
++ case "$silent-$rp" in
++ echo ' '
 
++ expr X : 'X!'
++ case "$ans" in
++ ans=libperl.a
+ libperl=libperl.a
+ echo 'Ok, I'\''ll use libperl.a'
Ok, I'll use libperl.a
+ case "$shrpdir" in
+ shrpdir=/usr/lib/perl5/5.8/msys/CORE
+ xxx=
+ tmp_shrpenv=
+ true
+ case "$osname" in
+ tmp_shrpenv='env LD_RUN_PATH=/usr/lib/perl5/5.8/msys/CORE'
+ case "$xxx" in
+ case "$osname" in
+ case "$shrpenv" in
+ shrpenv='env LD_RUN_PATH=/usr/lib/perl5/5.8/msys/CORE'
+ case "$ldlibpthname" in
+ : determine where manual pages are on this system
+ echo ' '
 
+ case "$sysman" in
+ syspath='/usr/share/man/man1 /usr/man/man1'
+ syspath='/usr/share/man/man1 /usr/man/man1 /usr/man/mann /usr/man/manl /usr/man/local/man1'
+ syspath='/usr/share/man/man1 /usr/man/man1 /usr/man/mann /usr/man/manl /usr/man/local/man1 /usr/man/u_man/man1'
+ syspath='/usr/share/man/man1 /usr/man/man1 /usr/man/mann /usr/man/manl /usr/man/local/man1 /usr/man/u_man/man1 /usr/catman/u_man/man1 /usr/man/l_man/man1'
+ syspath='/usr/share/man/man1 /usr/man/man1 /usr/man/mann /usr/man/manl /usr/man/local/man1 /usr/man/u_man/man1 /usr/catman/u_man/man1 /usr/man/l_man/man1 /usr/local/man/u_man/man1 /usr/local/man/l_man/man1'
+ syspath='/usr/share/man/man1 /usr/man/man1 /usr/man/mann /usr/man/manl /usr/man/local/man1 /usr/man/u_man/man1 /usr/catman/u_man/man1 /usr/man/l_man/man1 /usr/local/man/u_man/man1 /usr/local/man/l_man/man1 /usr/man/man.L /local/man/man1 /usr/local/man/man1'
++ ./loc . /usr/man/man1 /usr/share/man/man1 /usr/man/man1 /usr/man/mann /usr/man/manl /usr/man/local/man1 /usr/man/u_man/man1 /usr/catman/u_man/man1 /usr/man/l_man/man1 /usr/local/man/u_man/man1 /usr/local/man/l_man/man1 /usr/man/man.L /local/man/man1 /usr/local/man/man1
+ sysman=/usr/share/man/man1
+ test -d /usr/share/man/man1
+ echo 'System manual is in /usr/share/man/man1.'
System manual is in /usr/share/man/man1.
+ : determine where manual pages go
+ set man1dir man1dir none
+ eval case '"$3"' in '""|none)' case '"$oldprefix"' in '"")' eval '"$1=\"\$$2\"";;' '*)' case '"$3"' in '"")' eval '"$1=";;' 'none)' eval '"tp=\"\$$2\"";' case '"$tp"' in '""|"' '")' eval '"$1=\"\$$2\"";;' '*)' eval '"$1=";;' 'esac;;' 'esac;;' 'esac;;' '*)' eval '"tp=\"$oldprefix-\$$2-\"";' eval '"tp=\"$tp\"";' case '"$tp"' in '--|/*--|\~*--)' eval '"$1=\"$prefix/$3\"";;' '/*-$oldprefix/*|\~*-$oldprefix/*)' eval '"$1=\`echo' '\$$2' '|' sed '\"s,^$oldprefix,$prefix,\"\`";;' '*)' eval '"$1=\"\$$2\"";;' 'esac;;' esac
++ case "$3" in
++ case "$oldprefix" in
++ eval 'man1dir="$man1dir"'
+++ man1dir=/usr/share/man/man1
+ /bin/cat

Perl5 has manual pages available in source form.
+ case "$nroff" in
+ echo 'If you don'\''t want the manual sources installed, answer '\''none'\''.'
If you don't want the manual sources installed, answer 'none'.
+ case "$man1dir" in
+ dflt=/usr/share/man/man1
+ echo ' '
 
+ fn=dn+~
+ rp='Where do the main Perl5 manual pages (source) go?'
+ . ./getfile
++ tilde=
++ fullpath=
++ already=
++ skip=
++ none_ok=
++ exp_file=
++ nopath_ok=
++ orig_rp='Where do the main Perl5 manual pages (source) go?'
++ orig_dflt=/usr/share/man/man1
++ case "$gfpth" in
++ gfpth=.
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ tilde=true
++ case "$fn" in
++ case "$fn" in
++ skip=true
++ case "$fn" in
++ none_ok=true
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ type=Directory
++ what=Directory
++ case "$what" in
++ case "$exp_file" in
++ case "$d_portable" in
++ cd ..
++ test Directory
++ redo=
++ rp='Where do the main Perl5 manual pages (source) go?'
++ dflt=/usr/share/man/man1
++ case "$tilde" in
++ rp='Where do the main Perl5 manual pages (source) go? (~name ok)'
++ . UU/myread
+++ xxxm=/usr/share/man/man1
+++ case "$xxxm" in
+++ case "$rp" in
++++ echo 'Where do the main Perl5 manual pages (source) go? (~name ok) [/usr/share/man/man1]  '
++++ wc -c
+++ test 85 -ge 80
+++ echo 'Where do the main Perl5 manual pages (source) go? (~name ok)'
Where do the main Perl5 manual pages (source) go? (~name ok)
+++ echo -n '[/usr/share/man/man1] '
[/usr/share/man/man1] +++ ans='!'
+++ case "$fastread" in
+++ case "$dflt" in
+++ ans=
+++ case "$silent-$rp" in
+++ echo ' '
 
+++ expr X : 'X!'
+++ case "$ans" in
+++ ans=/usr/share/man/man1
++ test -f UU/getfile.ok
++ case "$ans" in
++ case "$tilde" in
+++ UU/filexp /usr/share/man/man1
++ value=/usr/share/man/man1
++ case $? in
++ test /usr/share/man/man1 '!=' /usr/share/man/man1
++ ansexp=/usr/share/man/man1
++ case "$exp_file" in
++ value=/usr/share/man/man1
++ case "$fullpath" in
++ case "$redo" in
++ case "$type" in
++ for fp in '$gfpth'
++ test X. = X.
++ dir=/usr/share/man/man1
++ direxp=/usr/share/man/man1
++ test -d /usr/share/man/man1
++ type=
++ value=/usr/share/man/man1
++ break
++ case "$skip" in
++ type=
++ case "$type" in
++ test ''
++ cd UU
++ ans=/usr/share/man/man1
++ rp='Where do the main Perl5 manual pages (source) go?'
++ dflt=/usr/share/man/man1
++ rm -f getfile.ok
++ test X '!=' Xy
++ gfpth=
+ test X '!=' X/usr/share/man/man1
+ installman1dir=
+ man1dir=/usr/share/man/man1
+ man1direxp=/usr/share/man/man1
+ case "$man1dir" in
+ : Change installation prefix, if necessary.
+ test X/usr '!=' X/usr
+ installman1dir=/usr/share/man/man1
+ : What suffix to use on installed man pages
+ case "$man1dir" in
+ rp='What suffix should be used for the main Perl5 man pages?'
+ case "$man1ext" in
+ case "$man1dir" in
+ dflt=1
+ . ./myread
++ xxxm=1
++ case "$xxxm" in
++ case "$rp" in
+++ echo 'What suffix should be used for the main Perl5 man pages? [1]  '
+++ wc -c
++ test 63 -ge 80
++ echo -n 'What suffix should be used for the main Perl5 man pages? [1] '
What suffix should be used for the main Perl5 man pages? [1] ++ ans='!'
++ case "$fastread" in
++ case "$dflt" in
++ ans=
++ case "$silent-$rp" in
++ echo ' '
 
++ expr X : 'X!'
++ case "$ans" in
++ ans=1
+ man1ext=1
+ : see if we can have long filenames
+ echo ' '
 
+ first=123456789abcdef
+ /bin/rm -f 123456789abcdef
+ test -f 123456789abcde
+ echo 'You can have filenames longer than 14 characters.'
You can have filenames longer than 14 characters.
+ val=define
+ set d_flexfnam
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=d_flexfnam
++ eval 'was=$d_flexfnam'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval d_flexfnam=define
+++ d_flexfnam=define
+ /bin/rm -rf 123456789abcdef
+ : determine where library module manual pages go
+ set man3dir man3dir none
+ eval case '"$3"' in '""|none)' case '"$oldprefix"' in '"")' eval '"$1=\"\$$2\"";;' '*)' case '"$3"' in '"")' eval '"$1=";;' 'none)' eval '"tp=\"\$$2\"";' case '"$tp"' in '""|"' '")' eval '"$1=\"\$$2\"";;' '*)' eval '"$1=";;' 'esac;;' 'esac;;' 'esac;;' '*)' eval '"tp=\"$oldprefix-\$$2-\"";' eval '"tp=\"$tp\"";' case '"$tp"' in '--|/*--|\~*--)' eval '"$1=\"$prefix/$3\"";;' '/*-$oldprefix/*|\~*-$oldprefix/*)' eval '"$1=\`echo' '\$$2' '|' sed '\"s,^$oldprefix,$prefix,\"\`";;' '*)' eval '"$1=\"\$$2\"";;' 'esac;;' esac
++ case "$3" in
++ case "$oldprefix" in
++ eval 'man3dir="$man3dir"'
+++ man3dir=/usr/share/man/man3
+ /bin/cat

Perl5 has manual pages for many of the library modules.
+ case "$nroff" in
+ case "$d_flexfnam" in
+ echo 'If you don'\''t want the manual sources installed, answer '\''none'\''.'
If you don't want the manual sources installed, answer 'none'.
++ echo perl5
++ /bin/sed 's/-*[0-9.]*$//'
+ prog=perl
+ case "$man3dir" in
+ dflt=/usr/share/man/man3
+ case "$dflt" in
+ echo ' '
 
+ fn=dn+~
+ rp='Where do the perl5 library man pages (source) go?'
+ . ./getfile
++ tilde=
++ fullpath=
++ already=
++ skip=
++ none_ok=
++ exp_file=
++ nopath_ok=
++ orig_rp='Where do the perl5 library man pages (source) go?'
++ orig_dflt=/usr/share/man/man3
++ case "$gfpth" in
++ gfpth=.
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ tilde=true
++ case "$fn" in
++ case "$fn" in
++ skip=true
++ case "$fn" in
++ none_ok=true
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ type=Directory
++ what=Directory
++ case "$what" in
++ case "$exp_file" in
++ case "$d_portable" in
++ cd ..
++ test Directory
++ redo=
++ rp='Where do the perl5 library man pages (source) go?'
++ dflt=/usr/share/man/man3
++ case "$tilde" in
++ rp='Where do the perl5 library man pages (source) go? (~name ok)'
++ . UU/myread
+++ xxxm=/usr/share/man/man3
+++ case "$xxxm" in
+++ case "$rp" in
++++ echo 'Where do the perl5 library man pages (source) go? (~name ok) [/usr/share/man/man3]  '
++++ wc -c
+++ test 85 -ge 80
+++ echo 'Where do the perl5 library man pages (source) go? (~name ok)'
Where do the perl5 library man pages (source) go? (~name ok)
+++ echo -n '[/usr/share/man/man3] '
[/usr/share/man/man3] +++ ans='!'
+++ case "$fastread" in
+++ case "$dflt" in
+++ ans=
+++ case "$silent-$rp" in
+++ echo ' '
 
+++ expr X : 'X!'
+++ case "$ans" in
+++ ans=/usr/share/man/man3
++ test -f UU/getfile.ok
++ case "$ans" in
++ case "$tilde" in
+++ UU/filexp /usr/share/man/man3
++ value=/usr/share/man/man3
++ case $? in
++ test /usr/share/man/man3 '!=' /usr/share/man/man3
++ ansexp=/usr/share/man/man3
++ case "$exp_file" in
++ value=/usr/share/man/man3
++ case "$fullpath" in
++ case "$redo" in
++ case "$type" in
++ for fp in '$gfpth'
++ test X. = X.
++ dir=/usr/share/man/man3
++ direxp=/usr/share/man/man3
++ test -d /usr/share/man/man3
++ type=
++ value=/usr/share/man/man3
++ break
++ case "$skip" in
++ type=
++ case "$type" in
++ test ''
++ cd UU
++ ans=/usr/share/man/man3
++ rp='Where do the perl5 library man pages (source) go?'
++ dflt=/usr/share/man/man3
++ rm -f getfile.ok
++ test X '!=' Xy
++ gfpth=
+ man3dir=/usr/share/man/man3
+ man3direxp=/usr/share/man/man3
+ case "$man3dir" in
+ : Change installation prefix, if necessary.
+ test X/usr '!=' X/usr
+ installman3dir=/usr/share/man/man3
+ : What suffix to use on installed man pages
+ case "$man3dir" in
+ rp='What suffix should be used for the perl5 library man pages?'
+ case "$man3ext" in
+ dflt=3pm
+ . ./myread
++ xxxm=3pm
++ case "$xxxm" in
++ case "$rp" in
+++ echo 'What suffix should be used for the perl5 library man pages? [3pm]  '
+++ wc -c
++ test 68 -ge 80
++ echo -n 'What suffix should be used for the perl5 library man pages? [3pm] '
What suffix should be used for the perl5 library man pages? [3pm] ++ ans='!'
++ case "$fastread" in
++ case "$dflt" in
++ ans=
++ case "$silent-$rp" in
++ echo ' '
 
++ expr X : 'X!'
++ case "$ans" in
++ ans=3pm
+ man3ext=3pm
+ : see if we have to deal with yellow pages, now NIS.
+ test -d /usr/etc/yp
+ test -d /etc/yp
+ test -d /usr/lib/yp
+ case "$hostcat" in
+ test -f /etc/hosts
+ case "$groupcat" in
+ test -f /etc/group
+ case "$passcat" in
+ test -f /etc/passwd
+ : now get the host name
+ echo ' '
 
+ echo 'Figuring out host name...'
Figuring out host name...
+ case "$myhostname" in
+ cont=true
+ echo 'Maybe "hostname" will work...'
Maybe "hostname" will work...
++ sh -c hostname
+ tans=kheldar
+ myhostname=kheldar
+ phostname=hostname
+ cont=
+ test ''
+ test ''
+ case "$myhostname" in
+ : you do not want to know about this
+ set kheldar
+ myhostname=kheldar
+ : verify guess
+ test kheldar
+ dflt=y
+ rp='Your host name appears to be "kheldar". Right?'
+ . ./myread
++ xxxm=y
++ case "$xxxm" in
++ case "$rp" in
+++ echo 'Your host name appears to be "kheldar". Right? [y]  '
+++ wc -c
++ test 53 -ge 80
++ echo -n 'Your host name appears to be "kheldar". Right? [y] '
Your host name appears to be "kheldar". Right? [y] ++ ans='!'
++ case "$fastread" in
++ case "$dflt" in
++ ans=
++ case "$silent-$rp" in
++ echo ' '
 
++ expr X : 'X!'
++ case "$ans" in
++ ans=y
+ case "$ans" in
+ : bad guess or no guess
+ test Xkheldar = X
+ : translate upper to lower if necessary
+ case "$myhostname" in
+ case "$myhostname" in
+ case "$mydomain" in
+ test X = 'Xypcat hosts'
+ test X '!=' X
+ tmp_re='[	. ]'
+ test -f hosts
+ echo '(I cannot locate a hosts database anywhere)'
(I cannot locate a hosts database anywhere)
+ dflt=.
+ case "$dflt" in
++ ./loc resolv.conf X /etc /usr/etc
+ tans=X
+ test -f X
+ case "$dflt" in
+ echo '(No help from resolv.conf either -- attempting clever guess)'
(No help from resolv.conf either -- attempting clever guess)
++ sh -c domainname
+ dflt=.
+ case "$dflt" in
+ case "$dflt$osname" in
+ case "$dflt" in
+ echo '(Lost all hope -- silly guess then)'
(Lost all hope -- silly guess then)
+ dflt=.nonet
+ /bin/rm -f hosts
+ echo ' '
 
+ rp='What is your domain name?'
+ . ./myread
++ xxxm=.nonet
++ case "$xxxm" in
++ case "$rp" in
+++ echo 'What is your domain name? [.nonet]  '
+++ wc -c
++ test 37 -ge 80
++ echo -n 'What is your domain name? [.nonet] '
What is your domain name? [.nonet] ++ ans='!'
++ case "$fastread" in
++ case "$dflt" in
++ ans=
++ case "$silent-$rp" in
++ echo ' '
 
++ expr X : 'X!'
++ case "$ans" in
++ ans=.nonet
+ tans=.nonet
+ case "$ans" in
+ mydomain=.nonet
+ : translate upper to lower if necessary
+ case "$mydomain" in
+ : a little sanity check here
+ case "$phostname" in
+ case `$phostname | ./tr '[A-Z]' '[a-z]'` in
++ hostname
++ ./tr '[A-Z]' '[a-z]'
+ /bin/cat

I need to get your e-mail address in Internet format if possible, i.e.
something like user@host.domain. Please answer accurately since I have
no easy means to double check it. The default value provided below
is most probably close to reality but may not be valid from outside
your organization...

+ cont=x
+ test x
+ case "$cf_email" in
+ dflt=cwilson@kheldar.nonet
+ rp='What is your e-mail address?'
+ . ./myread
++ xxxm=cwilson@kheldar.nonet
++ case "$xxxm" in
++ case "$rp" in
+++ echo 'What is your e-mail address? [cwilson@kheldar.nonet]  '
+++ wc -c
++ test 55 -ge 80
++ echo -n 'What is your e-mail address? [cwilson@kheldar.nonet] '
What is your e-mail address? [cwilson@kheldar.nonet] ++ ans='!'
++ case "$fastread" in
++ case "$dflt" in
++ ans=
++ case "$silent-$rp" in
++ echo ' '
 
++ expr X : 'X!'
++ case "$ans" in
++ ans=cwilson@kheldar.nonet
+ cf_email=cwilson@kheldar.nonet
+ case "$cf_email" in
+ cont=
+ test ''
+ /bin/cat

If you or somebody else will be maintaining perl at your site, please
fill in the correct e-mail address here so that they may be contacted
if necessary. Currently, the "perlbug" program included with perl
will send mail to this address in addition to perlbug@perl.org. You may
enter "none" for no administrator.

+ case "$perladmin" in
+ dflt=mingw-dvlpr@lists.sourceforge.net
+ rp='Perl administrator e-mail address'
+ . ./myread
++ xxxm=mingw-dvlpr@lists.sourceforge.net
++ case "$xxxm" in
++ case "$rp" in
+++ echo 'Perl administrator e-mail address [mingw-dvlpr@lists.sourceforge.net]  '
+++ wc -c
++ test 72 -ge 80
++ echo -n 'Perl administrator e-mail address [mingw-dvlpr@lists.sourceforge.net] '
Perl administrator e-mail address [mingw-dvlpr@lists.sourceforge.net] ++ ans='!'
++ case "$fastread" in
++ case "$dflt" in
++ ans=
++ case "$silent-$rp" in
++ echo ' '
 
++ expr X : 'X!'
++ case "$ans" in
++ ans=mingw-dvlpr@lists.sourceforge.net
+ perladmin=mingw-dvlpr@lists.sourceforge.net
+ : determine whether to only install version-specific parts.
+ echo ' '
 
+ /bin/cat
Do you want to install only the version-specific parts of the perl
distribution?  Usually you do *not* want to do this.
+ case "$versiononly" in
+ dflt=n
+ rp='Do you want to install only the version-specific parts of perl?'
+ . ./myread
++ xxxm=n
++ case "$xxxm" in
++ case "$rp" in
+++ echo 'Do you want to install only the version-specific parts of perl? [n]  '
+++ wc -c
++ test 70 -ge 80
++ echo -n 'Do you want to install only the version-specific parts of perl? [n] '
Do you want to install only the version-specific parts of perl? [n] ++ ans='!'
++ case "$fastread" in
++ case "$dflt" in
++ ans=
++ case "$silent-$rp" in
++ echo ' '
 
++ expr X : 'X!'
++ case "$ans" in
++ ans=n
+ case "$ans" in
+ val=undef
+ set versiononly
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=versiononly
++ eval 'was=$versiononly'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval versiononly=undef
+++ versiononly=undef
+ case "$versiononly" in
+ : figure out how to guarantee perl startup
+ case "$startperl" in
+ case "$sharpbang" in
+ /bin/cat

I can use the #! construct to start perl on your system. This will
make startup of perl scripts faster, but may cause problems if you
want to share those scripts and perl is not in a standard place
(/usr/bin/perl) on all your platforms. The alternative is to force
a shell by starting the script with a single ':' character.

+ case "$versiononly" in
+ dflt=/usr/bin/perl
+ rp='What shall I put after the #! to start up perl ("none" to not use #!)?'
+ . ./myread
++ xxxm=/usr/bin/perl
++ case "$xxxm" in
++ case "$rp" in
+++ echo 'What shall I put after the #! to start up perl ("none" to not use #!)? [/usr/bin/perl]  '
+++ wc -c
++ test 89 -ge 80
++ echo 'What shall I put after the #! to start up perl ("none" to not use #!)?'
What shall I put after the #! to start up perl ("none" to not use #!)?
++ echo -n '[/usr/bin/perl] '
[/usr/bin/perl] ++ ans='!'
++ case "$fastread" in
++ case "$dflt" in
++ ans=
++ case "$silent-$rp" in
++ echo ' '
 
++ expr X : 'X!'
++ case "$ans" in
++ ans=/usr/bin/perl
+ case "$ans" in
+ startperl='#!/usr/bin/perl'
++ echo /usr/bin/perl
++ wc -c
+ test 30 -lt 14
+ echo 'I'\''ll use #!/usr/bin/perl to start perl scripts.'
I'll use #!/usr/bin/perl to start perl scripts.
+ : figure best path for perl in scripts
+ case "$perlpath" in
+ case "$versiononly" in
+ perlpath=/usr/bin/perl
+ case "$startperl" in
+ case "$startperl" in
+ : determine where public executable scripts go
+ set scriptdir scriptdir
+ eval case '"$3"' in '""|none)' case '"$oldprefix"' in '"")' eval '"$1=\"\$$2\"";;' '*)' case '"$3"' in '"")' eval '"$1=";;' 'none)' eval '"tp=\"\$$2\"";' case '"$tp"' in '""|"' '")' eval '"$1=\"\$$2\"";;' '*)' eval '"$1=";;' 'esac;;' 'esac;;' 'esac;;' '*)' eval '"tp=\"$oldprefix-\$$2-\"";' eval '"tp=\"$tp\"";' case '"$tp"' in '--|/*--|\~*--)' eval '"$1=\"$prefix/$3\"";;' '/*-$oldprefix/*|\~*-$oldprefix/*)' eval '"$1=\`echo' '\$$2' '|' sed '\"s,^$oldprefix,$prefix,\"\`";;' '*)' eval '"$1=\"\$$2\"";;' 'esac;;' esac
++ case "$3" in
++ case "$oldprefix" in
++ eval 'scriptdir="$scriptdir"'
+++ scriptdir=
+ case "$scriptdir" in
+ dflt=/usr/bin
+ : guess some guesses
+ test -d /usr/share/scripts
+ test -d /usr/share/bin
+ test -d /usr/local/script
+ test -d /usr/local/scripts
+ test -d /usr/script
+ set dflt
+ eval case '"$prefixexp"' in '"$prefix")' ';;' '*)' eval '"$1=\`echo' '\$$1' '|' sed '\"s,^$prefixexp,$prefix,\"\`";;' esac
++ case "$prefixexp" in
+ /bin/cat
 
Some installations have a separate directory just for executable scripts so
that they can mount it across multiple architectures but keep the scripts in
one spot.  You might, for example, have a subdirectory of /usr/share for this.
Or you might just lump your scripts in with all your other executables.
 
+ fn=d~
+ rp='Where do you keep publicly executable scripts?'
+ . ./getfile
++ tilde=
++ fullpath=
++ already=
++ skip=
++ none_ok=
++ exp_file=
++ nopath_ok=
++ orig_rp='Where do you keep publicly executable scripts?'
++ orig_dflt=/usr/bin
++ case "$gfpth" in
++ gfpth=.
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ tilde=true
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ type=Directory
++ what=Directory
++ case "$what" in
++ case "$exp_file" in
++ case "$d_portable" in
++ cd ..
++ test Directory
++ redo=
++ rp='Where do you keep publicly executable scripts?'
++ dflt=/usr/bin
++ case "$tilde" in
++ rp='Where do you keep publicly executable scripts? (~name ok)'
++ . UU/myread
+++ xxxm=/usr/bin
+++ case "$xxxm" in
+++ case "$rp" in
++++ echo 'Where do you keep publicly executable scripts? (~name ok) [/usr/bin]  '
++++ wc -c
+++ test 71 -ge 80
+++ echo -n 'Where do you keep publicly executable scripts? (~name ok) [/usr/bin] '
Where do you keep publicly executable scripts? (~name ok) [/usr/bin] +++ ans='!'
+++ case "$fastread" in
+++ case "$dflt" in
+++ ans=
+++ case "$silent-$rp" in
+++ echo ' '
 
+++ expr X : 'X!'
+++ case "$ans" in
+++ ans=/usr/bin
++ test -f UU/getfile.ok
++ case "$ans" in
++ case "$tilde" in
+++ UU/filexp /usr/bin
++ value=/usr/bin
++ case $? in
++ test /usr/bin '!=' /usr/bin
++ ansexp=/usr/bin
++ case "$exp_file" in
++ value=/usr/bin
++ case "$fullpath" in
++ case "$redo" in
++ case "$type" in
++ for fp in '$gfpth'
++ test X. = X.
++ dir=/usr/bin
++ direxp=/usr/bin
++ test -d /usr/bin
++ type=
++ value=/usr/bin
++ break
++ case "$skip" in
++ case "$type" in
++ test ''
++ cd UU
++ ans=/usr/bin
++ rp='Where do you keep publicly executable scripts?'
++ dflt=/usr/bin
++ rm -f getfile.ok
++ test X '!=' Xy
++ gfpth=
+ test X/usr/bin '!=' X
+ installscript=
+ scriptdir=/usr/bin
+ scriptdirexp=/usr/bin
+ : Change installation prefix, if necessary.
+ test X/usr '!=' X/usr
+ installscript=/usr/bin
+ : determine where add-on public executables go
+ case "$sitebin" in
+ dflt=/usr/bin
+ fn=d~
+ rp='Pathname where the add-on public executables should be installed?'
+ . ./getfile
++ tilde=
++ fullpath=
++ already=
++ skip=
++ none_ok=
++ exp_file=
++ nopath_ok=
++ orig_rp='Pathname where the add-on public executables should be installed?'
++ orig_dflt=/usr/bin
++ case "$gfpth" in
++ gfpth=.
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ tilde=true
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ type=Directory
++ what=Directory
++ case "$what" in
++ case "$exp_file" in
++ case "$d_portable" in
++ cd ..
++ test Directory
++ redo=
++ rp='Pathname where the add-on public executables should be installed?'
++ dflt=/usr/bin
++ case "$tilde" in
++ rp='Pathname where the add-on public executables should be installed? (~name ok)'
++ . UU/myread
+++ xxxm=/usr/bin
+++ case "$xxxm" in
+++ case "$rp" in
++++ echo 'Pathname where the add-on public executables should be installed? (~name ok) [/usr/bin]  '
++++ wc -c
+++ test 90 -ge 80
+++ echo 'Pathname where the add-on public executables should be installed? (~name ok)'
Pathname where the add-on public executables should be installed? (~name ok)
+++ echo -n '[/usr/bin] '
[/usr/bin] +++ ans='!'
+++ case "$fastread" in
+++ case "$dflt" in
+++ ans=
+++ case "$silent-$rp" in
+++ echo ' '
 
+++ expr X : 'X!'
+++ case "$ans" in
+++ ans=/usr/bin
++ test -f UU/getfile.ok
++ case "$ans" in
++ case "$tilde" in
+++ UU/filexp /usr/bin
++ value=/usr/bin
++ case $? in
++ test /usr/bin '!=' /usr/bin
++ ansexp=/usr/bin
++ case "$exp_file" in
++ value=/usr/bin
++ case "$fullpath" in
++ case "$redo" in
++ case "$type" in
++ for fp in '$gfpth'
++ test X. = X.
++ dir=/usr/bin
++ direxp=/usr/bin
++ test -d /usr/bin
++ type=
++ value=/usr/bin
++ break
++ case "$skip" in
++ case "$type" in
++ test ''
++ cd UU
++ ans=/usr/bin
++ rp='Pathname where the add-on public executables should be installed?'
++ dflt=/usr/bin
++ rm -f getfile.ok
++ test X '!=' Xy
++ gfpth=
+ sitebin=/usr/bin
+ sitebinexp=/usr/bin
+ : Change installation prefix, if necessary.
+ test X/usr '!=' X/usr
+ installsitebin=/usr/bin
+ : determine where add-on html pages go
+ : There is no standard location, so try to copy the previously-selected
+ : directory structure for the core html pages.
+ case "$sitehtml1dir" in
++ echo ' '
++ /bin/sed 's#^/usr#/usr#'
+ dflt=' '
+ case "$dflt" in
+ dflt=none
+ fn=dn+~
+ rp='Pathname where the site-specific html pages should be installed?'
+ . ./getfile
++ tilde=
++ fullpath=
++ already=
++ skip=
++ none_ok=
++ exp_file=
++ nopath_ok=
++ orig_rp='Pathname where the site-specific html pages should be installed?'
++ orig_dflt=none
++ case "$gfpth" in
++ gfpth=.
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ tilde=true
++ case "$fn" in
++ case "$fn" in
++ skip=true
++ case "$fn" in
++ none_ok=true
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ type=Directory
++ what=Directory
++ case "$what" in
++ case "$exp_file" in
++ case "$d_portable" in
++ cd ..
++ test Directory
++ redo=
++ rp='Pathname where the site-specific html pages should be installed?'
++ dflt=none
++ case "$tilde" in
++ rp='Pathname where the site-specific html pages should be installed? (~name ok)'
++ . UU/myread
+++ xxxm=none
+++ case "$xxxm" in
+++ case "$rp" in
++++ echo 'Pathname where the site-specific html pages should be installed? (~name ok) [none]  '
++++ wc -c
+++ test 85 -ge 80
+++ echo 'Pathname where the site-specific html pages should be installed? (~name ok)'
Pathname where the site-specific html pages should be installed? (~name ok)
+++ echo -n '[none] '
[none] +++ ans='!'
+++ case "$fastread" in
+++ case "$dflt" in
+++ ans=
+++ case "$silent-$rp" in
+++ echo ' '
 
+++ expr X : 'X!'
+++ case "$ans" in
+++ ans=none
++ test -f UU/getfile.ok
++ case "$ans" in
++ value=
++ ansexp=
++ case "$none_ok" in
++ type=
++ test ''
++ cd UU
++ ans=
++ rp='Pathname where the site-specific html pages should be installed?'
++ dflt=none
++ rm -f getfile.ok
++ test X '!=' Xy
++ gfpth=
+ sitehtml1dir=
+ sitehtml1direxp=
+ : Change installation prefix, if necessary.
+ test X/usr '!=' X/usr
+ installsitehtml1dir=
+ : determine where add-on library html pages go
+ : There is no standard location, so try to copy the previously-selected
+ : directory structure for the core html pages.
+ case "$sitehtml3dir" in
++ echo ' '
++ /bin/sed 's#^/usr#/usr#'
+ dflt=' '
+ case "$dflt" in
+ dflt=none
+ fn=dn+~
+ rp='Pathname where the site-specific library html pages should be installed?'
+ . ./getfile
++ tilde=
++ fullpath=
++ already=
++ skip=
++ none_ok=
++ exp_file=
++ nopath_ok=
++ orig_rp='Pathname where the site-specific library html pages should be installed?'
++ orig_dflt=none
++ case "$gfpth" in
++ gfpth=.
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ tilde=true
++ case "$fn" in
++ case "$fn" in
++ skip=true
++ case "$fn" in
++ none_ok=true
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ type=Directory
++ what=Directory
++ case "$what" in
++ case "$exp_file" in
++ case "$d_portable" in
++ cd ..
++ test Directory
++ redo=
++ rp='Pathname where the site-specific library html pages should be installed?'
++ dflt=none
++ case "$tilde" in
++ rp='Pathname where the site-specific library html pages should be installed? (~name ok)'
++ . UU/myread
+++ xxxm=none
+++ case "$xxxm" in
+++ case "$rp" in
++++ echo 'Pathname where the site-specific library html pages should be installed? (~name ok) [none]  '
++++ wc -c
+++ test 93 -ge 80
+++ echo 'Pathname where the site-specific library html pages should be installed? (~name ok)'
Pathname where the site-specific library html pages should be installed? (~name ok)
+++ echo -n '[none] '
[none] +++ ans='!'
+++ case "$fastread" in
+++ case "$dflt" in
+++ ans=
+++ case "$silent-$rp" in
+++ echo ' '
 
+++ expr X : 'X!'
+++ case "$ans" in
+++ ans=none
++ test -f UU/getfile.ok
++ case "$ans" in
++ value=
++ ansexp=
++ case "$none_ok" in
++ type=
++ test ''
++ cd UU
++ ans=
++ rp='Pathname where the site-specific library html pages should be installed?'
++ dflt=none
++ rm -f getfile.ok
++ test X '!=' Xy
++ gfpth=
+ sitehtml3dir=
+ sitehtml3direxp=
+ : Change installation prefix, if necessary.
+ test X/usr '!=' X/usr
+ installsitehtml3dir=
+ : determine where add-on manual pages go
+ case "$siteman1dir" in
+ dflt=/usr/share/man/man1
+ case "$dflt" in
+ fn=dn+~
+ rp='Pathname where the site-specific manual pages should be installed?'
+ . ./getfile
++ tilde=
++ fullpath=
++ already=
++ skip=
++ none_ok=
++ exp_file=
++ nopath_ok=
++ orig_rp='Pathname where the site-specific manual pages should be installed?'
++ orig_dflt=/usr/share/man/man1
++ case "$gfpth" in
++ gfpth=.
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ tilde=true
++ case "$fn" in
++ case "$fn" in
++ skip=true
++ case "$fn" in
++ none_ok=true
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ type=Directory
++ what=Directory
++ case "$what" in
++ case "$exp_file" in
++ case "$d_portable" in
++ cd ..
++ test Directory
++ redo=
++ rp='Pathname where the site-specific manual pages should be installed?'
++ dflt=/usr/share/man/man1
++ case "$tilde" in
++ rp='Pathname where the site-specific manual pages should be installed? (~name ok)'
++ . UU/myread
+++ xxxm=/usr/share/man/man1
+++ case "$xxxm" in
+++ case "$rp" in
++++ echo 'Pathname where the site-specific manual pages should be installed? (~name ok) [/usr/share/man/man1]  '
++++ wc -c
+++ test 102 -ge 80
+++ echo 'Pathname where the site-specific manual pages should be installed? (~name ok)'
Pathname where the site-specific manual pages should be installed? (~name ok)
+++ echo -n '[/usr/share/man/man1] '
[/usr/share/man/man1] +++ ans='!'
+++ case "$fastread" in
+++ case "$dflt" in
+++ ans=
+++ case "$silent-$rp" in
+++ echo ' '
 
+++ expr X : 'X!'
+++ case "$ans" in
+++ ans=/usr/share/man/man1
++ test -f UU/getfile.ok
++ case "$ans" in
++ case "$tilde" in
+++ UU/filexp /usr/share/man/man1
++ value=/usr/share/man/man1
++ case $? in
++ test /usr/share/man/man1 '!=' /usr/share/man/man1
++ ansexp=/usr/share/man/man1
++ case "$exp_file" in
++ value=/usr/share/man/man1
++ case "$fullpath" in
++ case "$redo" in
++ case "$type" in
++ for fp in '$gfpth'
++ test X. = X.
++ dir=/usr/share/man/man1
++ direxp=/usr/share/man/man1
++ test -d /usr/share/man/man1
++ type=
++ value=/usr/share/man/man1
++ break
++ case "$skip" in
++ type=
++ case "$type" in
++ test ''
++ cd UU
++ ans=/usr/share/man/man1
++ rp='Pathname where the site-specific manual pages should be installed?'
++ dflt=/usr/share/man/man1
++ rm -f getfile.ok
++ test X '!=' Xy
++ gfpth=
+ siteman1dir=/usr/share/man/man1
+ siteman1direxp=/usr/share/man/man1
+ : Change installation prefix, if necessary.
+ test X/usr '!=' X/usr
+ installsiteman1dir=/usr/share/man/man1
+ : determine where add-on library man pages go
+ case "$siteman3dir" in
+ dflt=/usr/share/man/man3
+ case "$dflt" in
+ fn=dn+~
+ rp='Pathname where the site-specific library manual pages should be installed?'
+ . ./getfile
++ tilde=
++ fullpath=
++ already=
++ skip=
++ none_ok=
++ exp_file=
++ nopath_ok=
++ orig_rp='Pathname where the site-specific library manual pages should be installed?'
++ orig_dflt=/usr/share/man/man3
++ case "$gfpth" in
++ gfpth=.
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ tilde=true
++ case "$fn" in
++ case "$fn" in
++ skip=true
++ case "$fn" in
++ none_ok=true
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ type=Directory
++ what=Directory
++ case "$what" in
++ case "$exp_file" in
++ case "$d_portable" in
++ cd ..
++ test Directory
++ redo=
++ rp='Pathname where the site-specific library manual pages should be installed?'
++ dflt=/usr/share/man/man3
++ case "$tilde" in
++ rp='Pathname where the site-specific library manual pages should be installed? (~name ok)'
++ . UU/myread
+++ xxxm=/usr/share/man/man3
+++ case "$xxxm" in
+++ case "$rp" in
++++ echo 'Pathname where the site-specific library manual pages should be installed? (~name ok) [/usr/share/man/man3]  '
++++ wc -c
+++ test 110 -ge 80
+++ echo 'Pathname where the site-specific library manual pages should be installed? (~name ok)'
Pathname where the site-specific library manual pages should be installed? (~name ok)
+++ echo -n '[/usr/share/man/man3] '
[/usr/share/man/man3] +++ ans='!'
+++ case "$fastread" in
+++ case "$dflt" in
+++ ans=
+++ case "$silent-$rp" in
+++ echo ' '
 
+++ expr X : 'X!'
+++ case "$ans" in
+++ ans=/usr/share/man/man3
++ test -f UU/getfile.ok
++ case "$ans" in
++ case "$tilde" in
+++ UU/filexp /usr/share/man/man3
++ value=/usr/share/man/man3
++ case $? in
++ test /usr/share/man/man3 '!=' /usr/share/man/man3
++ ansexp=/usr/share/man/man3
++ case "$exp_file" in
++ value=/usr/share/man/man3
++ case "$fullpath" in
++ case "$redo" in
++ case "$type" in
++ for fp in '$gfpth'
++ test X. = X.
++ dir=/usr/share/man/man3
++ direxp=/usr/share/man/man3
++ test -d /usr/share/man/man3
++ type=
++ value=/usr/share/man/man3
++ break
++ case "$skip" in
++ type=
++ case "$type" in
++ test ''
++ cd UU
++ ans=/usr/share/man/man3
++ rp='Pathname where the site-specific library manual pages should be installed?'
++ dflt=/usr/share/man/man3
++ rm -f getfile.ok
++ test X '!=' Xy
++ gfpth=
+ siteman3dir=/usr/share/man/man3
+ siteman3direxp=/usr/share/man/man3
+ : Change installation prefix, if necessary.
+ test X/usr '!=' X/usr
+ installsiteman3dir=/usr/share/man/man3
+ : determine where add-on public executable scripts go
+ case "$sitescript" in
+ dflt=/usr/script
+ test -d /usr/script
+ dflt=/usr/bin
+ fn=d~+
+ rp='Pathname where add-on public executable scripts should be installed?'
+ . ./getfile
++ tilde=
++ fullpath=
++ already=
++ skip=
++ none_ok=
++ exp_file=
++ nopath_ok=
++ orig_rp='Pathname where add-on public executable scripts should be installed?'
++ orig_dflt=/usr/bin
++ case "$gfpth" in
++ gfpth=.
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ tilde=true
++ case "$fn" in
++ case "$fn" in
++ skip=true
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ type=Directory
++ what=Directory
++ case "$what" in
++ case "$exp_file" in
++ case "$d_portable" in
++ cd ..
++ test Directory
++ redo=
++ rp='Pathname where add-on public executable scripts should be installed?'
++ dflt=/usr/bin
++ case "$tilde" in
++ rp='Pathname where add-on public executable scripts should be installed? (~name ok)'
++ . UU/myread
+++ xxxm=/usr/bin
+++ case "$xxxm" in
+++ case "$rp" in
++++ echo 'Pathname where add-on public executable scripts should be installed? (~name ok) [/usr/bin]  '
++++ wc -c
+++ test 93 -ge 80
+++ echo 'Pathname where add-on public executable scripts should be installed? (~name ok)'
Pathname where add-on public executable scripts should be installed? (~name ok)
+++ echo -n '[/usr/bin] '
[/usr/bin] +++ ans='!'
+++ case "$fastread" in
+++ case "$dflt" in
+++ ans=
+++ case "$silent-$rp" in
+++ echo ' '
 
+++ expr X : 'X!'
+++ case "$ans" in
+++ ans=/usr/bin
++ test -f UU/getfile.ok
++ case "$ans" in
++ case "$tilde" in
+++ UU/filexp /usr/bin
++ value=/usr/bin
++ case $? in
++ test /usr/bin '!=' /usr/bin
++ ansexp=/usr/bin
++ case "$exp_file" in
++ value=/usr/bin
++ case "$fullpath" in
++ case "$redo" in
++ case "$type" in
++ for fp in '$gfpth'
++ test X. = X.
++ dir=/usr/bin
++ direxp=/usr/bin
++ test -d /usr/bin
++ type=
++ value=/usr/bin
++ break
++ case "$skip" in
++ type=
++ case "$type" in
++ test ''
++ cd UU
++ ans=/usr/bin
++ rp='Pathname where add-on public executable scripts should be installed?'
++ dflt=/usr/bin
++ rm -f getfile.ok
++ test X '!=' Xy
++ gfpth=
+ sitescript=/usr/bin
+ sitescriptexp=/usr/bin
+ : Change installation prefix, if necessary.
+ test X/usr '!=' X/usr
+ installsitescript=/usr/bin
+ case "$usefaststdio" in
++ awk '/define[ 	]+PERL_VERSION/ {print $3}' ../patchlevel.h
+ xversion=8
+ case "$xversion" in
+ dflt=y
+ cat

Perl can be built to use 'fast stdio', which means using the stdio
library but also directly manipulating the stdio buffers to enable
faster I/O.  Using stdio is better for backward compatibility (especially
for Perl extensions), but on the other hand since Perl 5.8 the 'perlio'
interface has been preferred instead of stdio.

If this doesn't make any sense to you, just accept the default 'y'.
+ rp='Use the "fast stdio" if available?'
+ . ./myread
++ xxxm=y
++ case "$xxxm" in
++ case "$rp" in
+++ echo 'Use the "fast stdio" if available? [y]  '
+++ wc -c
++ test 41 -ge 80
++ echo -n 'Use the "fast stdio" if available? [y] '
Use the "fast stdio" if available? [y] ++ ans='!'
++ case "$fastread" in
++ case "$dflt" in
++ ans=
++ case "$silent-$rp" in
++ echo ' '
 
++ expr X : 'X!'
++ case "$ans" in
++ ans=y
+ case "$ans" in
+ val=define
+ set usefaststdio
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=usefaststdio
++ eval 'was=$usefaststdio'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval usefaststdio=define
+++ usefaststdio=define
+ : define an 'is-a-typedef?' function
+ typedef='type=$1; var=$2; def=$3; shift; shift; shift; inclist=$@;
case "$inclist" in
"") inclist="sys/types.h";;
esac;
eval "varval=\$$var";
case "$varval" in
"")
	$rm -f temp.c;
	for inc in $inclist; do
		echo "#include <$inc>" >>temp.c;
	done;
	echo "#ifdef $type" >> temp.c;
	echo "printf(\"We have $type\");" >> temp.c;
	echo "#endif" >> temp.c;
	$cppstdin $cppflags $cppminus < temp.c >temp.E 2>/dev/null;
	if $contains $type temp.E >/dev/null 2>&1; then
		eval "$var=\$type";
	else
		eval "$var=\$def";
	fi;
	$rm -f temp.?;;
*) eval "$var=\$varval";;
esac'
+ : define an 'is-a-typedef?' function that prompts if the type is not available.
+ typedef_ask='type=$1; var=$2; def=$3; shift; shift; shift; inclist=$@;
case "$inclist" in
"") inclist="sys/types.h";;
esac;
eval "varval=\$$var";
case "$varval" in
"")
	$rm -f temp.c;
	for inc in $inclist; do
		echo "#include <$inc>" >>temp.c;
	done;
	echo "#ifdef $type" >> temp.c;
	echo "printf(\"We have $type\");" >> temp.c;
	echo "#endif" >> temp.c;
	$cppstdin $cppflags $cppminus < temp.c >temp.E 2>/dev/null;
	echo " " ;
	echo "$rp" | $sed -e "s/What is/Looking for/" -e "s/?/./";
	if $contains $type temp.E >/dev/null 2>&1; then
		echo "$type found." >&4;
		eval "$var=\$type";
	else
		echo "$type NOT found." >&4;
		dflt="$def";
		. ./myread ;
		eval "$var=\$ans";
	fi;
	$rm -f temp.?;;
*) eval "$var=\$varval";;
esac'
+ : see what type lseek is declared as in the kernel
+ rp='What is the type used for lseek'\''s offset on this system?'
+ set off_t lseektype long stdio.h sys/types.h
+ eval 'type=$1;' 'var=$2;' 'def=$3;' 'shift;' 'shift;' 'shift;' 'inclist=$@;' case '"$inclist"' in '"")' 'inclist="sys/types.h";;' 'esac;' eval '"varval=\$$var";' case '"$varval"' in '"")' '$rm' -f 'temp.c;' for inc in '$inclist;' do echo '"#include' '<$inc>"' '>>temp.c;' 'done;' echo '"#ifdef' '$type"' '>>' 'temp.c;' echo '"printf(\"We' have '$type\");"' '>>' 'temp.c;' echo '"#endif"' '>>' 'temp.c;' '$cppstdin' '$cppflags' '$cppminus' '<' temp.c '>temp.E' '2>/dev/null;' echo '"' '"' ';' echo '"$rp"' '|' '$sed' -e '"s/What' is/Looking 'for/"' -e '"s/?/./";' if '$contains' '$type' temp.E '>/dev/null' '2>&1;' then echo '"$type' 'found."' '>&4;' eval '"$var=\$type";' else echo '"$type' NOT 'found."' '>&4;' 'dflt="$def";' . ./myread ';' eval '"$var=\$ans";' 'fi;' '$rm' -f 'temp.?;;' '*)' eval '"$var=\$varval";;' esac
++ type=off_t
++ var=lseektype
++ def=long
++ shift
++ shift
++ shift
++ inclist='stdio.h sys/types.h'
++ case "$inclist" in
++ eval 'varval=$lseektype'
+++ varval=
++ case "$varval" in
++ /bin/rm -f temp.c
++ for inc in '$inclist'
++ echo '#include <stdio.h>'
++ for inc in '$inclist'
++ echo '#include <sys/types.h>'
++ echo '#ifdef off_t'
++ echo 'printf("We have off_t");'
++ echo '#endif'
++ gcc -E -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -
++ echo ' '
 
++ echo 'What is the type used for lseek'\''s offset on this system?'
++ /bin/sed -e 's/What is/Looking for/' -e 's/?/./'
Looking for the type used for lseek's offset on this system.
++ grep off_t temp.E
++ echo 'off_t found.'
off_t found.
++ eval 'lseektype=$type'
+++ lseektype=off_t
++ /bin/rm -f temp.E temp.c
+ echo ' '
 
+ echo 'Checking to see how big your file offsets are...'
Checking to see how big your file offsets are...
+ /bin/cat
+ set try
+ eval 'mc_file=$1;' 'shift;' '$cc' -o '${mc_file}' '$optimize' '$ccflags' '$ldflags' '$*' '${mc_file}.c' '$libs;'
++ mc_file=try
++ shift
++ gcc -o try -O3 -fno-unit-at-a-time -s -mtune=pentium -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s try.c -lgdbm -lcrypt -lgdbm_compat
++ ./try
+ lseeksize=4
+ echo 'Your file offsets are 4 bytes long.'
Your file offsets are 4 bytes long.
+ /bin/rm -f try.c try
+ : see what type file positions are declared as in the library
+ rp='What is the type for file position used by fsetpos()?'
+ set fpos_t fpostype long stdio.h sys/types.h
+ eval 'type=$1;' 'var=$2;' 'def=$3;' 'shift;' 'shift;' 'shift;' 'inclist=$@;' case '"$inclist"' in '"")' 'inclist="sys/types.h";;' 'esac;' eval '"varval=\$$var";' case '"$varval"' in '"")' '$rm' -f 'temp.c;' for inc in '$inclist;' do echo '"#include' '<$inc>"' '>>temp.c;' 'done;' echo '"#ifdef' '$type"' '>>' 'temp.c;' echo '"printf(\"We' have '$type\");"' '>>' 'temp.c;' echo '"#endif"' '>>' 'temp.c;' '$cppstdin' '$cppflags' '$cppminus' '<' temp.c '>temp.E' '2>/dev/null;' echo '"' '"' ';' echo '"$rp"' '|' '$sed' -e '"s/What' is/Looking 'for/"' -e '"s/?/./";' if '$contains' '$type' temp.E '>/dev/null' '2>&1;' then echo '"$type' 'found."' '>&4;' eval '"$var=\$type";' else echo '"$type' NOT 'found."' '>&4;' 'dflt="$def";' . ./myread ';' eval '"$var=\$ans";' 'fi;' '$rm' -f 'temp.?;;' '*)' eval '"$var=\$varval";;' esac
++ type=fpos_t
++ var=fpostype
++ def=long
++ shift
++ shift
++ shift
++ inclist='stdio.h sys/types.h'
++ case "$inclist" in
++ eval 'varval=$fpostype'
+++ varval=
++ case "$varval" in
++ /bin/rm -f temp.c
++ for inc in '$inclist'
++ echo '#include <stdio.h>'
++ for inc in '$inclist'
++ echo '#include <sys/types.h>'
++ echo '#ifdef fpos_t'
++ echo 'printf("We have fpos_t");'
++ echo '#endif'
++ gcc -E -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -
++ echo ' '
 
++ echo 'What is the type for file position used by fsetpos()?'
++ /bin/sed -e 's/What is/Looking for/' -e 's/?/./'
Looking for the type for file position used by fsetpos().
++ grep fpos_t temp.E
++ echo 'fpos_t found.'
fpos_t found.
++ eval 'fpostype=$type'
+++ fpostype=fpos_t
++ /bin/rm -f temp.E temp.c
+ echo ' '
 
+ case "$fpostype" in
+ zzz=fpos_t
+ echo 'Checking the size of fpos_t...'
Checking the size of fpos_t...
+ cat
+ set try
+ eval 'mc_file=$1;' 'shift;' '$cc' -o '${mc_file}' '$optimize' '$ccflags' '$ldflags' '$*' '${mc_file}.c' '$libs;'
++ mc_file=try
++ shift
++ gcc -o try -O3 -fno-unit-at-a-time -s -mtune=pentium -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s try.c -lgdbm -lcrypt -lgdbm_compat
++ ./try
+ yyy=4
+ case "$yyy" in
+ fpossize=4
+ echo 'Your fpos_t is 4 bytes long.'
Your fpos_t is 4 bytes long.
+ case "$uselfs" in
+ case "$lseeksize:$fpossize" in
+ case "$uselargefiles" in
+ dflt=y
+ cat

Perl can be built to understand large files (files larger than 2 gigabytes)
on some systems.  To do so, Configure can be run with -Duselargefiles.

If this doesn't make any sense to you, just accept the default 'y'.
+ rp='Try to understand large files, if available?'
+ . ./myread
++ xxxm=y
++ case "$xxxm" in
++ case "$rp" in
+++ echo 'Try to understand large files, if available? [y]  '
+++ wc -c
++ test 51 -ge 80
++ echo -n 'Try to understand large files, if available? [y] '
Try to understand large files, if available? [y] ++ ans='!'
++ case "$fastread" in
++ case "$dflt" in
++ ans=
++ case "$silent-$rp" in
++ echo ' '
 
++ expr X : 'X!'
++ case "$ans" in
++ ans=y
+ case "$ans" in
+ val=define
+ set uselargefiles
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=uselargefiles
++ eval 'was=$uselargefiles'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval uselargefiles=define
+++ uselargefiles=define
+ : Look for a hint-file generated call-back-unit. If the
+ : user has specified that a large files perl is to be built,
+ : we may need to set or change some other defaults.
+ test -f uselargefiles.cbu
+ case "$uselargefiles" in
+ test -f uselargefiles.cbu
+ case "$vendorprefix" in
+ d_vendorbin=define
+ : determine where vendor-supplied executables go.
+ case "$vendorbin" in
+ dflt=/usr/bin
+ fn=d~+
+ rp='Pathname for the vendor-supplied executables directory?'
+ . ./getfile
++ tilde=
++ fullpath=
++ already=
++ skip=
++ none_ok=
++ exp_file=
++ nopath_ok=
++ orig_rp='Pathname for the vendor-supplied executables directory?'
++ orig_dflt=/usr/bin
++ case "$gfpth" in
++ gfpth=.
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ tilde=true
++ case "$fn" in
++ case "$fn" in
++ skip=true
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ type=Directory
++ what=Directory
++ case "$what" in
++ case "$exp_file" in
++ case "$d_portable" in
++ cd ..
++ test Directory
++ redo=
++ rp='Pathname for the vendor-supplied executables directory?'
++ dflt=/usr/bin
++ case "$tilde" in
++ rp='Pathname for the vendor-supplied executables directory? (~name ok)'
++ . UU/myread
+++ xxxm=/usr/bin
+++ case "$xxxm" in
+++ case "$rp" in
++++ echo 'Pathname for the vendor-supplied executables directory? (~name ok) [/usr/bin]  '
++++ wc -c
+++ test 80 -ge 80
+++ echo 'Pathname for the vendor-supplied executables directory? (~name ok)'
Pathname for the vendor-supplied executables directory? (~name ok)
+++ echo -n '[/usr/bin] '
[/usr/bin] +++ ans='!'
+++ case "$fastread" in
+++ case "$dflt" in
+++ ans=
+++ case "$silent-$rp" in
+++ echo ' '
 
+++ expr X : 'X!'
+++ case "$ans" in
+++ ans=/usr/bin
++ test -f UU/getfile.ok
++ case "$ans" in
++ case "$tilde" in
+++ UU/filexp /usr/bin
++ value=/usr/bin
++ case $? in
++ test /usr/bin '!=' /usr/bin
++ ansexp=/usr/bin
++ case "$exp_file" in
++ value=/usr/bin
++ case "$fullpath" in
++ case "$redo" in
++ case "$type" in
++ for fp in '$gfpth'
++ test X. = X.
++ dir=/usr/bin
++ direxp=/usr/bin
++ test -d /usr/bin
++ type=
++ value=/usr/bin
++ break
++ case "$skip" in
++ type=
++ case "$type" in
++ test ''
++ cd UU
++ ans=/usr/bin
++ rp='Pathname for the vendor-supplied executables directory?'
++ dflt=/usr/bin
++ rm -f getfile.ok
++ test X '!=' Xy
++ gfpth=
+ vendorbin=/usr/bin
+ vendorbinexp=/usr/bin
+ : Change installation prefix, if necessary.
+ test X/usr '!=' X/usr
+ installvendorbin=/usr/bin
+ case "$vendorprefix" in
+ : determine where vendor-supplied html pages go.
+ : There is no standard location, so try to copy the previously-selected
+ : directory structure for the core html pages.
+ : XXX Better default suggestions would be welcome.
+ case "$vendorhtml1dir" in
++ echo ' '
++ /bin/sed 's#^/usr#/usr#'
+ dflt=' '
+ case "$dflt" in
+ dflt=none
+ fn=dn+~
+ rp='Pathname for the vendor-supplied html pages?'
+ . ./getfile
++ tilde=
++ fullpath=
++ already=
++ skip=
++ none_ok=
++ exp_file=
++ nopath_ok=
++ orig_rp='Pathname for the vendor-supplied html pages?'
++ orig_dflt=none
++ case "$gfpth" in
++ gfpth=.
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ tilde=true
++ case "$fn" in
++ case "$fn" in
++ skip=true
++ case "$fn" in
++ none_ok=true
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ type=Directory
++ what=Directory
++ case "$what" in
++ case "$exp_file" in
++ case "$d_portable" in
++ cd ..
++ test Directory
++ redo=
++ rp='Pathname for the vendor-supplied html pages?'
++ dflt=none
++ case "$tilde" in
++ rp='Pathname for the vendor-supplied html pages? (~name ok)'
++ . UU/myread
+++ xxxm=none
+++ case "$xxxm" in
+++ case "$rp" in
++++ echo 'Pathname for the vendor-supplied html pages? (~name ok) [none]  '
++++ wc -c
+++ test 65 -ge 80
+++ echo -n 'Pathname for the vendor-supplied html pages? (~name ok) [none] '
Pathname for the vendor-supplied html pages? (~name ok) [none] +++ ans='!'
+++ case "$fastread" in
+++ case "$dflt" in
+++ ans=
+++ case "$silent-$rp" in
+++ echo ' '
 
+++ expr X : 'X!'
+++ case "$ans" in
+++ ans=none
++ test -f UU/getfile.ok
++ case "$ans" in
++ value=
++ ansexp=
++ case "$none_ok" in
++ type=
++ test ''
++ cd UU
++ ans=
++ rp='Pathname for the vendor-supplied html pages?'
++ dflt=none
++ rm -f getfile.ok
++ test X '!=' Xy
++ gfpth=
+ vendorhtml1dir=
+ vendorhtml1direxp=
+ : Use ' ' for none so value is preserved next time through Configure
+ test X = X
+ vendorhtml1dir=' '
+ : Change installation prefix, if necessary.
+ test X/usr '!=' X/usr
+ installvendorhtml1dir=
+ case "$vendorprefix" in
+ : determine where vendor-supplied module html pages go.
+ : There is no standard location, so try to copy the previously-selected
+ : directory structure for the core html pages.
+ : XXX Better default suggestions would be welcome.
+ case "$vendorhtml3dir" in
++ echo ' '
++ /bin/sed 's#^/usr#/usr#'
+ dflt=' '
+ case "$dflt" in
+ dflt=none
+ fn=dn+~
+ rp='Pathname for the vendor-supplied html pages?'
+ . ./getfile
++ tilde=
++ fullpath=
++ already=
++ skip=
++ none_ok=
++ exp_file=
++ nopath_ok=
++ orig_rp='Pathname for the vendor-supplied html pages?'
++ orig_dflt=none
++ case "$gfpth" in
++ gfpth=.
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ tilde=true
++ case "$fn" in
++ case "$fn" in
++ skip=true
++ case "$fn" in
++ none_ok=true
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ type=Directory
++ what=Directory
++ case "$what" in
++ case "$exp_file" in
++ case "$d_portable" in
++ cd ..
++ test Directory
++ redo=
++ rp='Pathname for the vendor-supplied html pages?'
++ dflt=none
++ case "$tilde" in
++ rp='Pathname for the vendor-supplied html pages? (~name ok)'
++ . UU/myread
+++ xxxm=none
+++ case "$xxxm" in
+++ case "$rp" in
++++ echo 'Pathname for the vendor-supplied html pages? (~name ok) [none]  '
++++ wc -c
+++ test 65 -ge 80
+++ echo -n 'Pathname for the vendor-supplied html pages? (~name ok) [none] '
Pathname for the vendor-supplied html pages? (~name ok) [none] +++ ans='!'
+++ case "$fastread" in
+++ case "$dflt" in
+++ ans=
+++ case "$silent-$rp" in
+++ echo ' '
 
+++ expr X : 'X!'
+++ case "$ans" in
+++ ans=none
++ test -f UU/getfile.ok
++ case "$ans" in
++ value=
++ ansexp=
++ case "$none_ok" in
++ type=
++ test ''
++ cd UU
++ ans=
++ rp='Pathname for the vendor-supplied html pages?'
++ dflt=none
++ rm -f getfile.ok
++ test X '!=' Xy
++ gfpth=
+ vendorhtml3dir=
+ vendorhtml3direxp=
+ : Use ' ' for none so value is preserved next time through Configure
+ test X = X
+ vendorhtml3dir=' '
+ : Change installation prefix, if necessary.
+ test X/usr '!=' X/usr
+ installvendorhtml3dir=
+ case "$vendorprefix" in
+ : determine where vendor-supplied manual pages go.
+ case "$vendorman1dir" in
+ dflt=/usr/share/man/man1
+ case "$dflt" in
+ fn=nd~+
+ rp='Pathname for the vendor-supplied manual section 1 pages?'
+ . ./getfile
++ tilde=
++ fullpath=
++ already=
++ skip=
++ none_ok=
++ exp_file=
++ nopath_ok=
++ orig_rp='Pathname for the vendor-supplied manual section 1 pages?'
++ orig_dflt=/usr/share/man/man1
++ case "$gfpth" in
++ gfpth=.
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ tilde=true
++ case "$fn" in
++ case "$fn" in
++ skip=true
++ case "$fn" in
++ none_ok=true
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ type=Directory
++ what=Directory
++ case "$what" in
++ case "$exp_file" in
++ case "$d_portable" in
++ cd ..
++ test Directory
++ redo=
++ rp='Pathname for the vendor-supplied manual section 1 pages?'
++ dflt=/usr/share/man/man1
++ case "$tilde" in
++ rp='Pathname for the vendor-supplied manual section 1 pages? (~name ok)'
++ . UU/myread
+++ xxxm=/usr/share/man/man1
+++ case "$xxxm" in
+++ case "$rp" in
++++ echo 'Pathname for the vendor-supplied manual section 1 pages? (~name ok) [/usr/share/man/man1]  '
++++ wc -c
+++ test 92 -ge 80
+++ echo 'Pathname for the vendor-supplied manual section 1 pages? (~name ok)'
Pathname for the vendor-supplied manual section 1 pages? (~name ok)
+++ echo -n '[/usr/share/man/man1] '
[/usr/share/man/man1] +++ ans='!'
+++ case "$fastread" in
+++ case "$dflt" in
+++ ans=
+++ case "$silent-$rp" in
+++ echo ' '
 
+++ expr X : 'X!'
+++ case "$ans" in
+++ ans=/usr/share/man/man1
++ test -f UU/getfile.ok
++ case "$ans" in
++ case "$tilde" in
+++ UU/filexp /usr/share/man/man1
++ value=/usr/share/man/man1
++ case $? in
++ test /usr/share/man/man1 '!=' /usr/share/man/man1
++ ansexp=/usr/share/man/man1
++ case "$exp_file" in
++ value=/usr/share/man/man1
++ case "$fullpath" in
++ case "$redo" in
++ case "$type" in
++ for fp in '$gfpth'
++ test X. = X.
++ dir=/usr/share/man/man1
++ direxp=/usr/share/man/man1
++ test -d /usr/share/man/man1
++ type=
++ value=/usr/share/man/man1
++ break
++ case "$skip" in
++ type=
++ case "$type" in
++ test ''
++ cd UU
++ ans=/usr/share/man/man1
++ rp='Pathname for the vendor-supplied manual section 1 pages?'
++ dflt=/usr/share/man/man1
++ rm -f getfile.ok
++ test X '!=' Xy
++ gfpth=
+ vendorman1dir=/usr/share/man/man1
+ vendorman1direxp=/usr/share/man/man1
+ : Use ' ' for none so value is preserved next time through Configure
+ test X/usr/share/man/man1 = X
+ : Change installation prefix, if necessary.
+ test X/usr '!=' X/usr
+ installvendorman1dir=/usr/share/man/man1
+ case "$vendorprefix" in
+ : determine where vendor-supplied module manual pages go.
+ case "$vendorman3dir" in
+ dflt=/usr/share/man/man3
+ case "$dflt" in
+ fn=nd~+
+ rp='Pathname for the vendor-supplied manual section 3 pages?'
+ . ./getfile
++ tilde=
++ fullpath=
++ already=
++ skip=
++ none_ok=
++ exp_file=
++ nopath_ok=
++ orig_rp='Pathname for the vendor-supplied manual section 3 pages?'
++ orig_dflt=/usr/share/man/man3
++ case "$gfpth" in
++ gfpth=.
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ tilde=true
++ case "$fn" in
++ case "$fn" in
++ skip=true
++ case "$fn" in
++ none_ok=true
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ type=Directory
++ what=Directory
++ case "$what" in
++ case "$exp_file" in
++ case "$d_portable" in
++ cd ..
++ test Directory
++ redo=
++ rp='Pathname for the vendor-supplied manual section 3 pages?'
++ dflt=/usr/share/man/man3
++ case "$tilde" in
++ rp='Pathname for the vendor-supplied manual section 3 pages? (~name ok)'
++ . UU/myread
+++ xxxm=/usr/share/man/man3
+++ case "$xxxm" in
+++ case "$rp" in
++++ echo 'Pathname for the vendor-supplied manual section 3 pages? (~name ok) [/usr/share/man/man3]  '
++++ wc -c
+++ test 92 -ge 80
+++ echo 'Pathname for the vendor-supplied manual section 3 pages? (~name ok)'
Pathname for the vendor-supplied manual section 3 pages? (~name ok)
+++ echo -n '[/usr/share/man/man3] '
[/usr/share/man/man3] +++ ans='!'
+++ case "$fastread" in
+++ case "$dflt" in
+++ ans=
+++ case "$silent-$rp" in
+++ echo ' '
 
+++ expr X : 'X!'
+++ case "$ans" in
+++ ans=/usr/share/man/man3
++ test -f UU/getfile.ok
++ case "$ans" in
++ case "$tilde" in
+++ UU/filexp /usr/share/man/man3
++ value=/usr/share/man/man3
++ case $? in
++ test /usr/share/man/man3 '!=' /usr/share/man/man3
++ ansexp=/usr/share/man/man3
++ case "$exp_file" in
++ value=/usr/share/man/man3
++ case "$fullpath" in
++ case "$redo" in
++ case "$type" in
++ for fp in '$gfpth'
++ test X. = X.
++ dir=/usr/share/man/man3
++ direxp=/usr/share/man/man3
++ test -d /usr/share/man/man3
++ type=
++ value=/usr/share/man/man3
++ break
++ case "$skip" in
++ type=
++ case "$type" in
++ test ''
++ cd UU
++ ans=/usr/share/man/man3
++ rp='Pathname for the vendor-supplied manual section 3 pages?'
++ dflt=/usr/share/man/man3
++ rm -f getfile.ok
++ test X '!=' Xy
++ gfpth=
+ vendorman3dir=/usr/share/man/man3
+ vendorman3direxp=/usr/share/man/man3
+ : Use ' ' for none so value is preserved next time through Configure
+ test X/usr/share/man/man3 = X
+ : Change installation prefix, if necessary.
+ test X/usr '!=' X/usr
+ installvendorman3dir=/usr/share/man/man3
+ case "$vendorprefix" in
+ d_vendorscript=define
+ : determine where vendor-supplied scripts go.
+ case "$vendorscript" in
+ dflt=/usr/script
+ test -d /usr/script
+ dflt=/usr/bin
+ /bin/cat

The installation process will create a directory for 
vendor-supplied scripts.

+ fn=d~+
+ rp='Pathname for the vendor-supplied scripts directory?'
+ . ./getfile
++ tilde=
++ fullpath=
++ already=
++ skip=
++ none_ok=
++ exp_file=
++ nopath_ok=
++ orig_rp='Pathname for the vendor-supplied scripts directory?'
++ orig_dflt=/usr/bin
++ case "$gfpth" in
++ gfpth=.
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ tilde=true
++ case "$fn" in
++ case "$fn" in
++ skip=true
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ type=Directory
++ what=Directory
++ case "$what" in
++ case "$exp_file" in
++ case "$d_portable" in
++ cd ..
++ test Directory
++ redo=
++ rp='Pathname for the vendor-supplied scripts directory?'
++ dflt=/usr/bin
++ case "$tilde" in
++ rp='Pathname for the vendor-supplied scripts directory? (~name ok)'
++ . UU/myread
+++ xxxm=/usr/bin
+++ case "$xxxm" in
+++ case "$rp" in
++++ echo 'Pathname for the vendor-supplied scripts directory? (~name ok) [/usr/bin]  '
++++ wc -c
+++ test 76 -ge 80
+++ echo -n 'Pathname for the vendor-supplied scripts directory? (~name ok) [/usr/bin] '
Pathname for the vendor-supplied scripts directory? (~name ok) [/usr/bin] +++ ans='!'
+++ case "$fastread" in
+++ case "$dflt" in
+++ ans=
+++ case "$silent-$rp" in
+++ echo ' '
 
+++ expr X : 'X!'
+++ case "$ans" in
+++ ans=/usr/bin
++ test -f UU/getfile.ok
++ case "$ans" in
++ case "$tilde" in
+++ UU/filexp /usr/bin
++ value=/usr/bin
++ case $? in
++ test /usr/bin '!=' /usr/bin
++ ansexp=/usr/bin
++ case "$exp_file" in
++ value=/usr/bin
++ case "$fullpath" in
++ case "$redo" in
++ case "$type" in
++ for fp in '$gfpth'
++ test X. = X.
++ dir=/usr/bin
++ direxp=/usr/bin
++ test -d /usr/bin
++ type=
++ value=/usr/bin
++ break
++ case "$skip" in
++ type=
++ case "$type" in
++ test ''
++ cd UU
++ ans=/usr/bin
++ rp='Pathname for the vendor-supplied scripts directory?'
++ dflt=/usr/bin
++ rm -f getfile.ok
++ test X '!=' Xy
++ gfpth=
+ vendorscript=/usr/bin
+ vendorscriptexp=/usr/bin
+ : Change installation prefix, if necessary.
+ test X/usr '!=' X/usr
+ installvendorscript=/usr/bin
+ : see if qgcvt exists
+ set qgcvt d_qgcvt
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=qgcvt
++ var=d_qgcvt
++ eval 'was=$d_qgcvt'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set qgcvt tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=qgcvt
+++ case "$3" in
+++ tlook='^qgcvt$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^qgcvt$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'qgcvt() NOT found.'
qgcvt() NOT found.
++ case "$was" in
++ eval 'd_qgcvt=$tu'
+++ d_qgcvt=undef
+ echo ' '
 
+ test Xdefine = Xdefine
+ echo 'Checking how to print long doubles...'
Checking how to print long doubles...
+ test X = X -a X8 = X12
+ test X = X
+ /bin/cat
+ set try
+ eval 'mc_file=$1;' 'shift;' '$cc' -o '${mc_file}' '$optimize' '$ccflags' '$ldflags' '$*' '${mc_file}.c' '$libs' '>' /dev/null '2>&1;'
++ mc_file=try
++ shift
++ gcc -o try -O3 -fno-unit-at-a-time -s -mtune=pentium -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s try.c -lgdbm -lcrypt -lgdbm_compat
++ ./try
+ yyy=123.456
+ case "$yyy" in
+ sPRIfldbl='"Lf"'
+ sPRIgldbl='"Lg"'
+ sPRIeldbl='"Le"'
+ sPRIFUldbl='"LF"'
+ sPRIGUldbl='"LG"'
+ sPRIEUldbl='"LE"'
+ echo 'We will use %Lf.'
We will use %Lf.
+ test 'X"Lf"' = X
+ test 'X"Lf"' = X
+ test 'X"Lf"' = X
+ sSCNfldbl='"Lf"'
+ /bin/rm -f try try.c try.exe
+ case "$sPRIfldbl" in
+ d_PRIfldbl=define
+ d_PRIgldbl=define
+ d_PRIeldbl=define
+ d_PRIFUldbl=define
+ d_PRIGUldbl=define
+ d_PRIEUldbl=define
+ d_SCNfldbl=define
+ : Check how to convert floats to strings.
+ test X = X
+ echo ' '
 
+ echo 'Checking for an efficient way to convert floats to strings.'
Checking for an efficient way to convert floats to strings.
+ echo ' '
+ case "$uselongdouble" in
+ case "$d_longdbl" in
+ echo '#define HAS_LONG_DOUBLE'
+ case "$d_PRIgldbl" in
+ echo '#define HAS_PRIgldbl'
+ /bin/cat
+ : first add preferred functions to our list
+ xxx_list=
+ : then add any others
+ for xxx_convert in gconvert gcvt sprintf
+ case "$xxx_list" in
+ xxx_list=' gconvert'
+ for xxx_convert in gconvert gcvt sprintf
+ case "$xxx_list" in
+ xxx_list=' gconvert gcvt'
+ for xxx_convert in gconvert gcvt sprintf
+ case "$xxx_list" in
+ xxx_list=' gconvert gcvt sprintf'
+ case "$d_longdbl$uselongdouble" in
+ for xxx_convert in '$xxx_list'
+ echo 'Trying gconvert...'
Trying gconvert...
+ /bin/rm -f try try.o
+ set try -DTRY_gconvert
+ eval 'mc_file=$1;' 'shift;' '$cc' -o '${mc_file}' '$optimize' '$ccflags' '$ldflags' '$*' '${mc_file}.c' '$libs' '>' /dev/null '2>&1;'
++ mc_file=try
++ shift
++ gcc -o try -O3 -fno-unit-at-a-time -s -mtune=pentium -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s -DTRY_gconvert try.c -lgdbm -lcrypt -lgdbm_compat
+ echo 'gconvert NOT found.'
gconvert NOT found.
+ for xxx_convert in '$xxx_list'
+ echo 'Trying gcvt...'
Trying gcvt...
+ /bin/rm -f try try.o
+ set try -DTRY_gcvt
+ eval 'mc_file=$1;' 'shift;' '$cc' -o '${mc_file}' '$optimize' '$ccflags' '$ldflags' '$*' '${mc_file}.c' '$libs' '>' /dev/null '2>&1;'
++ mc_file=try
++ shift
++ gcc -o try -O3 -fno-unit-at-a-time -s -mtune=pentium -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s -DTRY_gcvt try.c -lgdbm -lcrypt -lgdbm_compat
+ echo 'gcvt() found.'
gcvt() found.
+ ./try
gcvt oddity:  Expected 0.0001, got 1.e-04
+ echo '...But gcvt didn'\''t work as I expected.'
...But gcvt didn't work as I expected.
+ xxx_convert=
+ for xxx_convert in '$xxx_list'
+ echo 'Trying sprintf...'
Trying sprintf...
+ /bin/rm -f try try.o
+ set try -DTRY_sprintf
+ eval 'mc_file=$1;' 'shift;' '$cc' -o '${mc_file}' '$optimize' '$ccflags' '$ldflags' '$*' '${mc_file}.c' '$libs' '>' /dev/null '2>&1;'
++ mc_file=try
++ shift
++ gcc -o try -O3 -fno-unit-at-a-time -s -mtune=pentium -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s -DTRY_sprintf try.c -lgdbm -lcrypt -lgdbm_compat
+ echo 'sprintf() found.'
sprintf() found.
+ ./try
+ echo 'I'\''ll use sprintf to convert floats into a string.'
I'll use sprintf to convert floats into a string.
+ break
+ test Xsprintf = X
+ case "$xxx_convert" in
+ case "$uselongdouble$d_longdbl$d_PRIgldbl" in
+ d_Gconvert='sprintf((b),"%.*g",(n),(x))'
+ : see if _fwalk exists
+ set fwalk d__fwalk
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=fwalk
++ var=d__fwalk
++ eval 'was=$d__fwalk'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set fwalk tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=fwalk
+++ case "$3" in
+++ tlook='^fwalk$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^fwalk$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'fwalk() NOT found.'
fwalk() NOT found.
++ case "$was" in
++ eval 'd__fwalk=$tu'
+++ d__fwalk=undef
+ : Initialize h_fcntl
+ h_fcntl=false
+ : Initialize h_sysfile
+ h_sysfile=false
+ : access call always available on UNIX
+ set access d_access
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=access
++ var=d_access
++ eval 'was=$d_access'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set access tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=access
+++ case "$3" in
+++ tlook='^access$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^access$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'access() found.'
access() found.
++ case "$was" in
++ eval 'd_access=$td'
+++ d_access=define
+ : locate the flags for 'access()'
+ case "$d_access" in
+ echo ' '
 
+ /bin/cat
+ : check sys/file.h first, no particular reason here
++ ./findhdr sys/file.h
+ test /usr/include/sys/file.h
+ gcc -o access -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -DI_SYS_FILE access.c
+ h_sysfile=true
+ echo '<sys/file.h> defines the *_OK access constants.'
<sys/file.h> defines the *_OK access constants.
+ /bin/rm -f access.c access.exe
+ : see if accessx exists
+ set accessx d_accessx
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=accessx
++ var=d_accessx
++ eval 'was=$d_accessx'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set accessx tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=accessx
+++ case "$3" in
+++ tlook='^accessx$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^accessx$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'accessx() NOT found.'
accessx() NOT found.
++ case "$was" in
++ eval 'd_accessx=$tu'
+++ d_accessx=undef
+ : see if aintl exists
+ set aintl d_aintl
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=aintl
++ var=d_aintl
++ eval 'was=$d_aintl'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set aintl tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=aintl
+++ case "$3" in
+++ tlook='^aintl$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^aintl$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'aintl() NOT found.'
aintl() NOT found.
++ case "$was" in
++ eval 'd_aintl=$tu'
+++ d_aintl=undef
+ : see if alarm exists
+ set alarm d_alarm
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=alarm
++ var=d_alarm
++ eval 'was=$d_alarm'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set alarm tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=alarm
+++ case "$3" in
+++ tlook='^alarm$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^alarm$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'alarm() found.'
alarm() found.
++ case "$was" in
++ eval 'd_alarm=$td'
+++ d_alarm=define
+ : see if POSIX threads are available
+ set pthread.h i_pthread
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'yyy=$@;' 'cont=true;' 'xxf="echo' '\"<\$1>' 'found.\"' '>&4";' case '$#' in '2)' 'xxnf="echo' '\"<\$1>' NOT 'found.\"' '>&4";;' '*)' 'xxnf="echo' '\"<\$1>' NOT found, '...\"' '>&4";;' 'esac;' case '$#' in '4)' 'instead=instead;;' '*)' 'instead="at' 'last";;' 'esac;' while '$test' '"$cont";' do 'xxx=`./findhdr' '$1`' 'var=$2;' eval '"was=\$$2";' if '$test' '"$xxx"' '&&' '$test' -r '"$xxx";' then eval '$xxf;' eval '"case' '\"\$$var\"' in '$undef)' . './whoa;' 'esac";' eval '"$var=\$td";' 'cont="";' else eval '$xxnf;' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' 'fi;' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' case '$#' in '0)' 'cont="";;' '2)' 'xxf="echo' '\"but' I found '<\$1>' '$instead.\"' '>&4";' 'xxnf="echo' '\"and' I did not find '<\$1>' 'either.\"' '>&4";;' '*)' 'xxf="echo' '\"but' I found '<\$1\>' 'instead.\"' '>&4";' 'xxnf="echo' '\"there' is no '<\$1>,' '...\"' '>&4";;' 'esac;' 'done;' while '$test' '"$yyy";' do set '$yyy;' 'var=$2;' eval '"was=\$$2";' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' done
++ echo ' '
 
++ td=define
++ tu=undef
++ yyy='pthread.h i_pthread'
++ cont=true
++ xxf='echo "<$1> found." >&4'
++ case $# in
++ xxnf='echo "<$1> NOT found." >&4'
++ case $# in
++ instead='at last'
++ test true
+++ ./findhdr pthread.h
++ xxx=/usr/include/pthread.h
++ var=i_pthread
++ eval 'was=$i_pthread'
+++ was=
++ test /usr/include/pthread.h
++ test -r /usr/include/pthread.h
++ eval echo '"<$1>' 'found."' '>&4'
+++ echo '<pthread.h> found.'
<pthread.h> found.
++ eval 'case "$i_pthread" in undef) . ./whoa; esac'
+++ case "$i_pthread" in
++ eval 'i_pthread=$td'
+++ i_pthread=define
++ cont=
++ set pthread.h i_pthread
++ shift
++ shift
++ yyy=
++ case $# in
++ cont=
++ test ''
++ test ''
+ : define a fucntion to check prototypes
+ /bin/cat
+ /bin/cat
+ chmod +x protochk
+ : protochk
+ hasproto='varname=$1; func=$2; shift; shift;
while $test $# -ge 2; do
	case "$1" in
	$define) echo "#include <$2>";;
	esac ;
    shift 2;
done > try.c;
$cppstdin $cppflags $cppminus < try.c > tryout.c 2>/dev/null;
if $contains "$func.*(" tryout.c >/dev/null 2>&1; then
	echo "$func() prototype found.";
	val="$define";
else
	echo "$func() prototype NOT found.";
	val="$undef";
fi;
set $varname;
eval $setvar;
$rm -f try.c tryout.c'
+ : see if sys/types.h has to be included
+ set sys/types.h i_systypes
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'yyy=$@;' 'cont=true;' 'xxf="echo' '\"<\$1>' 'found.\"' '>&4";' case '$#' in '2)' 'xxnf="echo' '\"<\$1>' NOT 'found.\"' '>&4";;' '*)' 'xxnf="echo' '\"<\$1>' NOT found, '...\"' '>&4";;' 'esac;' case '$#' in '4)' 'instead=instead;;' '*)' 'instead="at' 'last";;' 'esac;' while '$test' '"$cont";' do 'xxx=`./findhdr' '$1`' 'var=$2;' eval '"was=\$$2";' if '$test' '"$xxx"' '&&' '$test' -r '"$xxx";' then eval '$xxf;' eval '"case' '\"\$$var\"' in '$undef)' . './whoa;' 'esac";' eval '"$var=\$td";' 'cont="";' else eval '$xxnf;' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' 'fi;' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' case '$#' in '0)' 'cont="";;' '2)' 'xxf="echo' '\"but' I found '<\$1>' '$instead.\"' '>&4";' 'xxnf="echo' '\"and' I did not find '<\$1>' 'either.\"' '>&4";;' '*)' 'xxf="echo' '\"but' I found '<\$1\>' 'instead.\"' '>&4";' 'xxnf="echo' '\"there' is no '<\$1>,' '...\"' '>&4";;' 'esac;' 'done;' while '$test' '"$yyy";' do set '$yyy;' 'var=$2;' eval '"was=\$$2";' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' done
++ echo ' '
 
++ td=define
++ tu=undef
++ yyy='sys/types.h i_systypes'
++ cont=true
++ xxf='echo "<$1> found." >&4'
++ case $# in
++ xxnf='echo "<$1> NOT found." >&4'
++ case $# in
++ instead='at last'
++ test true
+++ ./findhdr sys/types.h
++ xxx=/usr/include/sys/types.h
++ var=i_systypes
++ eval 'was=$i_systypes'
+++ was=
++ test /usr/include/sys/types.h
++ test -r /usr/include/sys/types.h
++ eval echo '"<$1>' 'found."' '>&4'
+++ echo '<sys/types.h> found.'
<sys/types.h> found.
++ eval 'case "$i_systypes" in undef) . ./whoa; esac'
+++ case "$i_systypes" in
++ eval 'i_systypes=$td'
+++ i_systypes=define
++ cont=
++ set sys/types.h i_systypes
++ shift
++ shift
++ yyy=
++ case $# in
++ cont=
++ test ''
++ test ''
+ : see if sys/select.h has to be included
+ set sys/select.h i_sysselct
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'yyy=$@;' 'cont=true;' 'xxf="echo' '\"<\$1>' 'found.\"' '>&4";' case '$#' in '2)' 'xxnf="echo' '\"<\$1>' NOT 'found.\"' '>&4";;' '*)' 'xxnf="echo' '\"<\$1>' NOT found, '...\"' '>&4";;' 'esac;' case '$#' in '4)' 'instead=instead;;' '*)' 'instead="at' 'last";;' 'esac;' while '$test' '"$cont";' do 'xxx=`./findhdr' '$1`' 'var=$2;' eval '"was=\$$2";' if '$test' '"$xxx"' '&&' '$test' -r '"$xxx";' then eval '$xxf;' eval '"case' '\"\$$var\"' in '$undef)' . './whoa;' 'esac";' eval '"$var=\$td";' 'cont="";' else eval '$xxnf;' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' 'fi;' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' case '$#' in '0)' 'cont="";;' '2)' 'xxf="echo' '\"but' I found '<\$1>' '$instead.\"' '>&4";' 'xxnf="echo' '\"and' I did not find '<\$1>' 'either.\"' '>&4";;' '*)' 'xxf="echo' '\"but' I found '<\$1\>' 'instead.\"' '>&4";' 'xxnf="echo' '\"there' is no '<\$1>,' '...\"' '>&4";;' 'esac;' 'done;' while '$test' '"$yyy";' do set '$yyy;' 'var=$2;' eval '"was=\$$2";' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' done
++ echo ' '
 
++ td=define
++ tu=undef
++ yyy='sys/select.h i_sysselct'
++ cont=true
++ xxf='echo "<$1> found." >&4'
++ case $# in
++ xxnf='echo "<$1> NOT found." >&4'
++ case $# in
++ instead='at last'
++ test true
+++ ./findhdr sys/select.h
++ xxx=/usr/include/sys/select.h
++ var=i_sysselct
++ eval 'was=$i_sysselct'
+++ was=
++ test /usr/include/sys/select.h
++ test -r /usr/include/sys/select.h
++ eval echo '"<$1>' 'found."' '>&4'
+++ echo '<sys/select.h> found.'
<sys/select.h> found.
++ eval 'case "$i_sysselct" in undef) . ./whoa; esac'
+++ case "$i_sysselct" in
++ eval 'i_sysselct=$td'
+++ i_sysselct=define
++ cont=
++ set sys/select.h i_sysselct
++ shift
++ shift
++ yyy=
++ case $# in
++ cont=
++ test ''
++ test ''
+ hasfield='varname=$1; struct=$2; field=$3; shift; shift; shift;
while $test $# -ge 2; do
	case "$1" in
	$define) echo "#include <$2>";;
	esac ;
    shift 2;
done > try.c;
echo "int main () { struct $struct foo; char* bar; bar = (char*)foo.$field; }" >> try.c;
set try;
if eval $compile; then
	val="$define";
else
	val="$undef";
fi;
set $varname;
eval $setvar;
$rm -f try.c try.o'
+ : see if we should include time.h, sys/time.h, or both
+ echo ' '
 
+ test X = X
+ echo 'Testing to see if we should include <time.h>, <sys/time.h> or both.'
Testing to see if we should include <time.h>, <sys/time.h> or both.
+ /bin/echo -n 'I'\''m now running the test program...'
I'm now running the test program...+ /bin/cat
+ flags=
+ for s_timezone in ''\''-DS_TIMEZONE'\''' ''\'''\'''
+ sysselect=
+ for s_timeval in ''\''-DS_TIMEVAL'\''' ''\'''\'''
+ for i_systimek in ''\'''\''' ''\''-DSYSTIMEKERNEL'\'''
+ for i_time in ''\'''\''' ''\''-DI_TIME'\'''
+ for i_systime in ''\''-DI_SYSTIME'\''' ''\'''\'''
+ case "$flags" in
+ /bin/echo -n .
.+ set try -DI_SYSTIME -DS_TIMEVAL -DS_TIMEZONE
+ eval 'mc_file=$1;' 'shift;' '$cc' -o '${mc_file}' '$optimize' '$ccflags' '$ldflags' '$*' '${mc_file}.c' '$libs' '>' /dev/null '2>&1;'
++ mc_file=try
++ shift
++ gcc -o try -O3 -fno-unit-at-a-time -s -mtune=pentium -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s -DI_SYSTIME -DS_TIMEVAL -DS_TIMEZONE try.c -lgdbm -lcrypt -lgdbm_compat
+ set X -DI_SYSTIME -DS_TIMEVAL
+ shift
+ flags='-DI_SYSTIME -DS_TIMEVAL'
+ echo ' '
 
+ /bin/echo -n 'Succeeded with -DI_SYSTIME -DS_TIMEVAL'
Succeeded with -DI_SYSTIME -DS_TIMEVAL+ for i_systime in ''\''-DI_SYSTIME'\''' ''\'''\'''
+ case "$flags" in
+ for i_time in ''\'''\''' ''\''-DI_TIME'\'''
+ for i_systime in ''\''-DI_SYSTIME'\''' ''\'''\'''
+ case "$flags" in
+ for i_systime in ''\''-DI_SYSTIME'\''' ''\'''\'''
+ case "$flags" in
+ for i_systimek in ''\'''\''' ''\''-DSYSTIMEKERNEL'\'''
+ for i_time in ''\'''\''' ''\''-DI_TIME'\'''
+ for i_systime in ''\''-DI_SYSTIME'\''' ''\'''\'''
+ case "$flags" in
+ for i_systime in ''\''-DI_SYSTIME'\''' ''\'''\'''
+ case "$flags" in
+ for i_time in ''\'''\''' ''\''-DI_TIME'\'''
+ for i_systime in ''\''-DI_SYSTIME'\''' ''\'''\'''
+ case "$flags" in
+ for i_systime in ''\''-DI_SYSTIME'\''' ''\'''\'''
+ case "$flags" in
+ for s_timeval in ''\''-DS_TIMEVAL'\''' ''\'''\'''
+ for i_systimek in ''\'''\''' ''\''-DSYSTIMEKERNEL'\'''
+ for i_time in ''\'''\''' ''\''-DI_TIME'\'''
+ for i_systime in ''\''-DI_SYSTIME'\''' ''\'''\'''
+ case "$flags" in
+ for i_systime in ''\''-DI_SYSTIME'\''' ''\'''\'''
+ case "$flags" in
+ for i_time in ''\'''\''' ''\''-DI_TIME'\'''
+ for i_systime in ''\''-DI_SYSTIME'\''' ''\'''\'''
+ case "$flags" in
+ for i_systime in ''\''-DI_SYSTIME'\''' ''\'''\'''
+ case "$flags" in
+ for i_systimek in ''\'''\''' ''\''-DSYSTIMEKERNEL'\'''
+ for i_time in ''\'''\''' ''\''-DI_TIME'\'''
+ for i_systime in ''\''-DI_SYSTIME'\''' ''\'''\'''
+ case "$flags" in
+ for i_systime in ''\''-DI_SYSTIME'\''' ''\'''\'''
+ case "$flags" in
+ for i_time in ''\'''\''' ''\''-DI_TIME'\'''
+ for i_systime in ''\''-DI_SYSTIME'\''' ''\'''\'''
+ case "$flags" in
+ for i_systime in ''\''-DI_SYSTIME'\''' ''\'''\'''
+ case "$flags" in
+ for s_timezone in ''\''-DS_TIMEZONE'\''' ''\'''\'''
+ sysselect=
+ for s_timeval in ''\''-DS_TIMEVAL'\''' ''\'''\'''
+ for i_systimek in ''\'''\''' ''\''-DSYSTIMEKERNEL'\'''
+ for i_time in ''\'''\''' ''\''-DI_TIME'\'''
+ for i_systime in ''\''-DI_SYSTIME'\''' ''\'''\'''
+ case "$flags" in
+ for i_systime in ''\''-DI_SYSTIME'\''' ''\'''\'''
+ case "$flags" in
+ for i_time in ''\'''\''' ''\''-DI_TIME'\'''
+ for i_systime in ''\''-DI_SYSTIME'\''' ''\'''\'''
+ case "$flags" in
+ for i_systime in ''\''-DI_SYSTIME'\''' ''\'''\'''
+ case "$flags" in
+ for i_systimek in ''\'''\''' ''\''-DSYSTIMEKERNEL'\'''
+ for i_time in ''\'''\''' ''\''-DI_TIME'\'''
+ for i_systime in ''\''-DI_SYSTIME'\''' ''\'''\'''
+ case "$flags" in
+ for i_systime in ''\''-DI_SYSTIME'\''' ''\'''\'''
+ case "$flags" in
+ for i_time in ''\'''\''' ''\''-DI_TIME'\'''
+ for i_systime in ''\''-DI_SYSTIME'\''' ''\'''\'''
+ case "$flags" in
+ for i_systime in ''\''-DI_SYSTIME'\''' ''\'''\'''
+ case "$flags" in
+ for s_timeval in ''\''-DS_TIMEVAL'\''' ''\'''\'''
+ for i_systimek in ''\'''\''' ''\''-DSYSTIMEKERNEL'\'''
+ for i_time in ''\'''\''' ''\''-DI_TIME'\'''
+ for i_systime in ''\''-DI_SYSTIME'\''' ''\'''\'''
+ case "$flags" in
+ for i_systime in ''\''-DI_SYSTIME'\''' ''\'''\'''
+ case "$flags" in
+ for i_time in ''\'''\''' ''\''-DI_TIME'\'''
+ for i_systime in ''\''-DI_SYSTIME'\''' ''\'''\'''
+ case "$flags" in
+ for i_systime in ''\''-DI_SYSTIME'\''' ''\'''\'''
+ case "$flags" in
+ for i_systimek in ''\'''\''' ''\''-DSYSTIMEKERNEL'\'''
+ for i_time in ''\'''\''' ''\''-DI_TIME'\'''
+ for i_systime in ''\''-DI_SYSTIME'\''' ''\'''\'''
+ case "$flags" in
+ for i_systime in ''\''-DI_SYSTIME'\''' ''\'''\'''
+ case "$flags" in
+ for i_time in ''\'''\''' ''\''-DI_TIME'\'''
+ for i_systime in ''\''-DI_SYSTIME'\''' ''\'''\'''
+ case "$flags" in
+ for i_systime in ''\''-DI_SYSTIME'\''' ''\'''\'''
+ case "$flags" in
+ timeincl=
+ echo ' '
 
+ case "$flags" in
+ i_systimek=undef
+ case "$flags" in
+ i_time=undef
+ case "$flags" in
+ i_systime=define
++ ./findhdr sys/time.h
+ timeincl='/usr/include/sys/time.h '
+ echo 'We'\''ll include <sys/time.h>.'
We'll include <sys/time.h>.
+ /bin/rm -f try.c try
+ : see if struct tm knows about tm_zone
+ case "$i_systime$i_time" in
+ echo ' '
 
+ echo 'Checking to see if your struct tm has tm_zone field...'
Checking to see if your struct tm has tm_zone field...
+ set d_tm_tm_zone tm tm_zone define sys/time.h undef time.h
+ eval 'varname=$1;' 'struct=$2;' 'field=$3;' 'shift;' 'shift;' 'shift;' while '$test' '$#' -ge '2;' do case '"$1"' in '$define)' echo '"#include' '<$2>";;' esac ';' shift '2;' done '>' 'try.c;' echo '"int' main '()' '{' struct '$struct' 'foo;' 'char*' 'bar;' bar = '(char*)foo.$field;' '}"' '>>' 'try.c;' set 'try;' if eval '$compile;' then 'val="$define";' else 'val="$undef";' 'fi;' set '$varname;' eval '$setvar;' '$rm' -f try.c try.o
++ varname=d_tm_tm_zone
++ struct=tm
++ field=tm_zone
++ shift
++ shift
++ shift
++ test 4 -ge 2
++ case "$1" in
++ echo '#include <sys/time.h>'
++ shift 2
++ test 2 -ge 2
++ case "$1" in
++ shift 2
++ test 0 -ge 2
++ echo 'int main () { struct tm foo; char* bar; bar = (char*)foo.tm_zone; }'
++ set try
++ eval 'mc_file=$1;' 'shift;' '$cc' -o '${mc_file}' '$optimize' '$ccflags' '$ldflags' '$*' '${mc_file}.c' '$libs' '>' /dev/null '2>&1;'
+++ mc_file=try
+++ shift
+++ gcc -o try -O3 -fno-unit-at-a-time -s -mtune=pentium -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s try.c -lgdbm -lcrypt -lgdbm_compat
++ val=undef
++ set d_tm_tm_zone
++ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
+++ var=d_tm_tm_zone
+++ eval 'was=$d_tm_tm_zone'
++++ was=
+++ td=define
+++ tu=undef
+++ case "$val$was" in
+++ eval d_tm_tm_zone=undef
++++ d_tm_tm_zone=undef
++ /bin/rm -f try.c try.o
+ case "$d_tm_tm_zone" in
+ echo 'No, it doesn'\''t.'
No, it doesn't.
+ : see if struct tm knows about tm_gmtoff
+ case "$i_systime$i_time" in
+ echo ' '
 
+ echo 'Checking to see if your struct tm has tm_gmtoff field...'
Checking to see if your struct tm has tm_gmtoff field...
+ set d_tm_tm_gmtoff tm tm_gmtoff define sys/time.h undef time.h
+ eval 'varname=$1;' 'struct=$2;' 'field=$3;' 'shift;' 'shift;' 'shift;' while '$test' '$#' -ge '2;' do case '"$1"' in '$define)' echo '"#include' '<$2>";;' esac ';' shift '2;' done '>' 'try.c;' echo '"int' main '()' '{' struct '$struct' 'foo;' 'char*' 'bar;' bar = '(char*)foo.$field;' '}"' '>>' 'try.c;' set 'try;' if eval '$compile;' then 'val="$define";' else 'val="$undef";' 'fi;' set '$varname;' eval '$setvar;' '$rm' -f try.c try.o
++ varname=d_tm_tm_gmtoff
++ struct=tm
++ field=tm_gmtoff
++ shift
++ shift
++ shift
++ test 4 -ge 2
++ case "$1" in
++ echo '#include <sys/time.h>'
++ shift 2
++ test 2 -ge 2
++ case "$1" in
++ shift 2
++ test 0 -ge 2
++ echo 'int main () { struct tm foo; char* bar; bar = (char*)foo.tm_gmtoff; }'
++ set try
++ eval 'mc_file=$1;' 'shift;' '$cc' -o '${mc_file}' '$optimize' '$ccflags' '$ldflags' '$*' '${mc_file}.c' '$libs' '>' /dev/null '2>&1;'
+++ mc_file=try
+++ shift
+++ gcc -o try -O3 -fno-unit-at-a-time -s -mtune=pentium -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s try.c -lgdbm -lcrypt -lgdbm_compat
++ val=undef
++ set d_tm_tm_gmtoff
++ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
+++ var=d_tm_tm_gmtoff
+++ eval 'was=$d_tm_tm_gmtoff'
++++ was=
+++ td=define
+++ tu=undef
+++ case "$val$was" in
+++ eval d_tm_tm_gmtoff=undef
++++ d_tm_tm_gmtoff=undef
++ /bin/rm -f try.c try.o
+ case "$d_tm_tm_gmtoff" in
+ echo 'No, it doesn'\''t.'
No, it doesn't.
+ : see if asctime_r exists
+ set asctime_r d_asctime_r
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=asctime_r
++ var=d_asctime_r
++ eval 'was=$d_asctime_r'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set asctime_r tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=asctime_r
+++ case "$3" in
+++ tlook='^asctime_r$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^asctime_r$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'asctime_r() found.'
asctime_r() found.
++ case "$was" in
++ eval 'd_asctime_r=$td'
+++ d_asctime_r=define
+ case "$d_asctime_r" in
+ hdrs='define sys/types.h define stdio.h undef time.h define sys/time.h'
+ case "$d_asctime_r_proto:$usethreads" in
+ case "$d_asctime_r_proto" in
+ case "$usethreads" in
+ d_asctime_r=undef
+ asctime_r_proto=0
+ : see if atolf exists
+ set atolf d_atolf
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=atolf
++ var=d_atolf
++ eval 'was=$d_atolf'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set atolf tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=atolf
+++ case "$3" in
+++ tlook='^atolf$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^atolf$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'atolf() NOT found.'
atolf() NOT found.
++ case "$was" in
++ eval 'd_atolf=$tu'
+++ d_atolf=undef
+ : see if atoll exists
+ set atoll d_atoll
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=atoll
++ var=d_atoll
++ eval 'was=$d_atoll'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set atoll tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=atoll
+++ case "$3" in
+++ tlook='^atoll$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^atoll$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'atoll() NOT found.'
atoll() NOT found.
++ case "$was" in
++ eval 'd_atoll=$tu'
+++ d_atoll=undef
+ : Look for GCC-style attribute format
+ case "$d_attribute_format" in
+ echo ' '
 
+ echo 'Checking whether your compiler can handle __attribute__((format)) ...'
Checking whether your compiler can handle __attribute__((format)) ...
+ /bin/cat
+ gcc -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -c attrib.c
+ grep warning attrib.out
+ echo 'Your C compiler supports __attribute__((format)).'
Your C compiler supports __attribute__((format)).
+ val=define
+ set d_attribute_format
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=d_attribute_format
++ eval 'was=$d_attribute_format'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval d_attribute_format=define
+++ d_attribute_format=define
+ /bin/rm -f attrib.c attrib.o attrib.out
+ : Look for GCC-style attribute malloc
+ case "$d_attribute_malloc" in
+ echo ' '
 
+ echo 'Checking whether your compiler can handle __attribute__((malloc)) ...'
Checking whether your compiler can handle __attribute__((malloc)) ...
+ /bin/cat
+ gcc -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -c attrib.c
+ grep warning attrib.out
+ echo 'Your C compiler supports __attribute__((malloc)).'
Your C compiler supports __attribute__((malloc)).
+ val=define
+ set d_attribute_malloc
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=d_attribute_malloc
++ eval 'was=$d_attribute_malloc'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval d_attribute_malloc=define
+++ d_attribute_malloc=define
+ /bin/rm -f attrib.c attrib.o attrib.out
+ : Look for GCC-style attribute nonnull
+ case "$d_attribute_nonnull" in
+ echo ' '
 
+ echo 'Checking whether your compiler can handle __attribute__((nonnull(1))) ...'
Checking whether your compiler can handle __attribute__((nonnull(1))) ...
+ /bin/cat
+ gcc -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -c attrib.c
+ grep warning attrib.out
+ echo 'Your C compiler supports __attribute__((nonnull)).'
Your C compiler supports __attribute__((nonnull)).
+ val=define
+ set d_attribute_nonnull
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=d_attribute_nonnull
++ eval 'was=$d_attribute_nonnull'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval d_attribute_nonnull=define
+++ d_attribute_nonnull=define
+ /bin/rm -f attrib.c attrib.o attrib.out
+ : Look for GCC-style attribute noreturn
+ case "$d_attribute_noreturn" in
+ echo ' '
 
+ echo 'Checking whether your compiler can handle __attribute__((noreturn)) ...'
Checking whether your compiler can handle __attribute__((noreturn)) ...
+ /bin/cat
+ gcc -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -c attrib.c
+ grep warning attrib.out
+ echo 'Your C compiler supports __attribute__((noreturn)).'
Your C compiler supports __attribute__((noreturn)).
+ val=define
+ set d_attribute_noreturn
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=d_attribute_noreturn
++ eval 'was=$d_attribute_noreturn'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval d_attribute_noreturn=define
+++ d_attribute_noreturn=define
+ /bin/rm -f attrib.c attrib.o attrib.out
+ : Look for GCC-style attribute pure
+ case "$d_attribute_pure" in
+ echo ' '
 
+ echo 'Checking whether your compiler can handle __attribute__((pure)) ...'
Checking whether your compiler can handle __attribute__((pure)) ...
+ /bin/cat
+ gcc -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -c attrib.c
+ grep warning attrib.out
+ echo 'Your C compiler supports __attribute__((pure)).'
Your C compiler supports __attribute__((pure)).
+ val=define
+ set d_attribute_pure
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=d_attribute_pure
++ eval 'was=$d_attribute_pure'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval d_attribute_pure=define
+++ d_attribute_pure=define
+ /bin/rm -f attrib.c attrib.o attrib.out
+ : Look for GCC-style attribute unused
+ case "$d_attribute_unused" in
+ echo ' '
 
+ echo 'Checking whether your compiler can handle __attribute__((unused)) ...'
Checking whether your compiler can handle __attribute__((unused)) ...
+ /bin/cat
+ gcc -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -c attrib.c
+ grep warning attrib.out
+ echo 'Your C compiler supports __attribute__((unused)).'
Your C compiler supports __attribute__((unused)).
+ val=define
+ set d_attribute_unused
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=d_attribute_unused
++ eval 'was=$d_attribute_unused'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval d_attribute_unused=define
+++ d_attribute_unused=define
+ /bin/rm -f attrib.c attrib.o attrib.out
+ : Look for GCC-style attribute warn_unused_result
+ case "$d_attribute_warn_unused_result" in
+ echo ' '
 
+ echo 'Checking whether your compiler can handle __attribute__((warn_unused_result)) ...'
Checking whether your compiler can handle __attribute__((warn_unused_result)) ...
+ /bin/cat
+ gcc -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -c attrib.c
+ grep warning attrib.out
+ echo 'Your C compiler supports __attribute__((warn_unused_result)).'
Your C compiler supports __attribute__((warn_unused_result)).
+ val=define
+ set d_attribute_warn_unused_result
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=d_attribute_warn_unused_result
++ eval 'was=$d_attribute_warn_unused_result'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval d_attribute_warn_unused_result=define
+++ d_attribute_warn_unused_result=define
+ /bin/rm -f attrib.c attrib.o attrib.out
+ : see if bcmp exists
+ set bcmp d_bcmp
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=bcmp
++ var=d_bcmp
++ eval 'was=$d_bcmp'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set bcmp tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=bcmp
+++ case "$3" in
+++ tlook='^bcmp$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^bcmp$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'bcmp() found.'
bcmp() found.
++ case "$was" in
++ eval 'd_bcmp=$td'
+++ d_bcmp=define
+ : see if bcopy exists
+ set bcopy d_bcopy
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=bcopy
++ var=d_bcopy
++ eval 'was=$d_bcopy'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set bcopy tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=bcopy
+++ case "$3" in
+++ tlook='^bcopy$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^bcopy$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'bcopy() found.'
bcopy() found.
++ case "$was" in
++ eval 'd_bcopy=$td'
+++ d_bcopy=define
+ : see if this is a unistd.h system
+ set unistd.h i_unistd
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'yyy=$@;' 'cont=true;' 'xxf="echo' '\"<\$1>' 'found.\"' '>&4";' case '$#' in '2)' 'xxnf="echo' '\"<\$1>' NOT 'found.\"' '>&4";;' '*)' 'xxnf="echo' '\"<\$1>' NOT found, '...\"' '>&4";;' 'esac;' case '$#' in '4)' 'instead=instead;;' '*)' 'instead="at' 'last";;' 'esac;' while '$test' '"$cont";' do 'xxx=`./findhdr' '$1`' 'var=$2;' eval '"was=\$$2";' if '$test' '"$xxx"' '&&' '$test' -r '"$xxx";' then eval '$xxf;' eval '"case' '\"\$$var\"' in '$undef)' . './whoa;' 'esac";' eval '"$var=\$td";' 'cont="";' else eval '$xxnf;' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' 'fi;' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' case '$#' in '0)' 'cont="";;' '2)' 'xxf="echo' '\"but' I found '<\$1>' '$instead.\"' '>&4";' 'xxnf="echo' '\"and' I did not find '<\$1>' 'either.\"' '>&4";;' '*)' 'xxf="echo' '\"but' I found '<\$1\>' 'instead.\"' '>&4";' 'xxnf="echo' '\"there' is no '<\$1>,' '...\"' '>&4";;' 'esac;' 'done;' while '$test' '"$yyy";' do set '$yyy;' 'var=$2;' eval '"was=\$$2";' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' done
++ echo ' '
 
++ td=define
++ tu=undef
++ yyy='unistd.h i_unistd'
++ cont=true
++ xxf='echo "<$1> found." >&4'
++ case $# in
++ xxnf='echo "<$1> NOT found." >&4'
++ case $# in
++ instead='at last'
++ test true
+++ ./findhdr unistd.h
++ xxx=/usr/include/unistd.h
++ var=i_unistd
++ eval 'was=$i_unistd'
+++ was=
++ test /usr/include/unistd.h
++ test -r /usr/include/unistd.h
++ eval echo '"<$1>' 'found."' '>&4'
+++ echo '<unistd.h> found.'
<unistd.h> found.
++ eval 'case "$i_unistd" in undef) . ./whoa; esac'
+++ case "$i_unistd" in
++ eval 'i_unistd=$td'
+++ i_unistd=define
++ cont=
++ set unistd.h i_unistd
++ shift
++ shift
++ yyy=
++ case $# in
++ cont=
++ test ''
++ test ''
+ : see if getpgrp exists
+ set getpgrp d_getpgrp
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=getpgrp
++ var=d_getpgrp
++ eval 'was=$d_getpgrp'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set getpgrp tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=getpgrp
+++ case "$3" in
+++ tlook='^getpgrp$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^getpgrp$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'getpgrp() found.'
getpgrp() found.
++ case "$was" in
++ eval 'd_getpgrp=$td'
+++ d_getpgrp=define
+ case "$d_getpgrp" in
+ echo ' '
 
+ echo 'Checking to see which flavor of getpgrp is in use...'
Checking to see which flavor of getpgrp is in use...
+ /bin/cat
+ gcc -o try -DTRY_BSD_PGRP -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s try.c -lgdbm -lcrypt -lgdbm_compat
+ gcc -o try -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s try.c -lgdbm -lcrypt -lgdbm_compat
+ ./try
+ echo 'You have to use getpgrp() instead of getpgrp(pid).'
You have to use getpgrp() instead of getpgrp(pid).
+ val=undef
+ set d_bsdgetpgrp
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=d_bsdgetpgrp
++ eval 'was=$d_bsdgetpgrp'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval d_bsdgetpgrp=undef
+++ d_bsdgetpgrp=undef
+ /bin/rm -f try try.c try.exe
+ : see if setpgrp exists
+ set setpgrp d_setpgrp
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=setpgrp
++ var=d_setpgrp
++ eval 'was=$d_setpgrp'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set setpgrp tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=setpgrp
+++ case "$3" in
+++ tlook='^setpgrp$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^setpgrp$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'setpgrp() found.'
setpgrp() found.
++ case "$was" in
++ eval 'd_setpgrp=$td'
+++ d_setpgrp=define
+ case "$d_setpgrp" in
+ echo ' '
 
+ echo 'Checking to see which flavor of setpgrp is in use...'
Checking to see which flavor of setpgrp is in use...
+ /bin/cat
+ gcc -o try -DTRY_BSD_PGRP -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s try.c -lgdbm -lcrypt -lgdbm_compat
+ gcc -o try -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s try.c -lgdbm -lcrypt -lgdbm_compat
+ ./try
+ echo 'You have to use setpgrp() instead of setpgrp(pid,pgrp).'
You have to use setpgrp() instead of setpgrp(pid,pgrp).
+ val=undef
+ set d_bsdsetpgrp
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=d_bsdsetpgrp
++ eval 'was=$d_bsdsetpgrp'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval d_bsdsetpgrp=undef
+++ d_bsdsetpgrp=undef
+ /bin/rm -f try try.c try.exe
+ : see if bzero exists
+ set bzero d_bzero
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=bzero
++ var=d_bzero
++ eval 'was=$d_bzero'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set bzero tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=bzero
+++ case "$3" in
+++ tlook='^bzero$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^bzero$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'bzero() found.'
bzero() found.
++ case "$was" in
++ eval 'd_bzero=$td'
+++ d_bzero=define
+ : see if signal is declared as pointer to function returning int or void
+ echo ' '
 
++ ./findhdr signal.h
+ xxx=/usr/include/signal.h
+ test /usr/include/signal.h
+ gcc -E - -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement
+ grep 'int.*\*[ 	]*signal' 5528.tmp
+ grep 'void.*\*[ 	]*signal' 5528.tmp
+ grep 'extern[ 	]*[(\*]*signal' 5528.tmp
+ grep 'void.*\*.*sig' 5528.tmp
+ echo 'You have void (*signal())().'
You have void (*signal())().
+ val=define
+ set d_voidsig
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=d_voidsig
++ eval 'was=$d_voidsig'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval d_voidsig=define
+++ d_voidsig=define
+ case "$d_voidsig" in
+ signal_t=void
+ /bin/rm -f 5528.tmp
+ : check for ability to cast large floats to 32-bit ints.
+ echo ' '
 
+ echo 'Checking whether your C compiler can cast large floats to int32.'
Checking whether your C compiler can cast large floats to int32.
+ test 4 -ge 4
+ xxx=int
+ /bin/cat
+ set try
+ eval 'mc_file=$1;' 'shift;' '$cc' -o '${mc_file}' '$optimize' '$ccflags' '$ldflags' '$*' '${mc_file}.c' '$libs;'
++ mc_file=try
++ shift
++ gcc -o try -O3 -fno-unit-at-a-time -s -mtune=pentium -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s try.c -lgdbm -lcrypt -lgdbm_compat
+ ./try
+ yyy=1
+ case "$yyy" in
+ val=undef
+ echo 'Nope, it can'\''t.'
Nope, it can't.
+ set d_casti32
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=d_casti32
++ eval 'was=$d_casti32'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval d_casti32=undef
+++ d_casti32=undef
+ /bin/rm -f try try.c try.exe
+ : check for ability to cast negative floats to unsigned
+ echo ' '
 
+ echo 'Checking whether your C compiler can cast negative float to unsigned.'
Checking whether your C compiler can cast negative float to unsigned.
+ /bin/cat
+ set try
+ eval 'mc_file=$1;' 'shift;' '$cc' -o '${mc_file}' '$optimize' '$ccflags' '$ldflags' '$*' '${mc_file}.c' '$libs;'
++ mc_file=try
++ shift
++ gcc -o try -O3 -fno-unit-at-a-time -s -mtune=pentium -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s try.c -lgdbm -lcrypt -lgdbm_compat
+ ./try
+ castflags=0
+ case "$castflags" in
+ val=define
+ echo 'Yup, it can.'
Yup, it can.
+ set d_castneg
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=d_castneg
++ eval 'was=$d_castneg'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval d_castneg=define
+++ d_castneg=define
+ /bin/rm -f try.c try.exe
+ : see if vprintf exists
+ echo ' '
 
+ set vprintf val -f d_vprintf
+ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
++ tlook=vprintf
++ case "$3" in
++ tlook='^vprintf$'
++ tf=libc.list
++ tdc='()'
++ tx=yes
++ case "$reuseval-$4" in
++ case "$tx" in
++ tval=false
++ test true = true
++ grep '^vprintf$' libc.list
++ tval=true
++ eval val=true
+++ val=true
+ true
+ echo 'vprintf() found.'
vprintf() found.
+ val=define
+ /bin/cat
+ set try
+ eval 'mc_file=$1;' 'shift;' '$cc' -o '${mc_file}' '$optimize' '$ccflags' '$ldflags' '$*' '${mc_file}.c' '$libs' '>' /dev/null '2>&1;'
++ mc_file=try
++ shift
++ gcc -o try -O3 -fno-unit-at-a-time -s -mtune=pentium -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s try.c -lgdbm -lcrypt -lgdbm_compat
+ echo 'Your vsprintf() returns (char*).'
Your vsprintf() returns (char*).
+ val2=define
+ /bin/rm -f try try.c
+ set d_vprintf
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=d_vprintf
++ eval 'was=$d_vprintf'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval d_vprintf=define
+++ d_vprintf=define
+ val=define
+ set d_charvspr
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=d_charvspr
++ eval 'was=$d_charvspr'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval d_charvspr=define
+++ d_charvspr=define
+ : see if chown exists
+ set chown d_chown
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=chown
++ var=d_chown
++ eval 'was=$d_chown'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set chown tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=chown
+++ case "$3" in
+++ tlook='^chown$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^chown$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'chown() found.'
chown() found.
++ case "$was" in
++ eval 'd_chown=$td'
+++ d_chown=define
+ : see if chroot exists
+ set chroot d_chroot
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=chroot
++ var=d_chroot
++ eval 'was=$d_chroot'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set chroot tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=chroot
+++ case "$3" in
+++ tlook='^chroot$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^chroot$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'chroot() found.'
chroot() found.
++ case "$was" in
++ eval 'd_chroot=$td'
+++ d_chroot=define
+ : see if chsize exists
+ set chsize d_chsize
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=chsize
++ var=d_chsize
++ eval 'was=$d_chsize'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set chsize tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=chsize
+++ case "$3" in
+++ tlook='^chsize$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^chsize$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'chsize() NOT found.'
chsize() NOT found.
++ case "$was" in
++ eval 'd_chsize=$tu'
+++ d_chsize=undef
+ : see if class exists
+ set class d_class
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=class
++ var=d_class
++ eval 'was=$d_class'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set class tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=class
+++ case "$3" in
+++ tlook='^class$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^class$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'class() NOT found.'
class() NOT found.
++ case "$was" in
++ eval 'd_class=$tu'
+++ d_class=undef
+ : see if clearenv exists
+ set clearenv d_clearenv
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=clearenv
++ var=d_clearenv
++ eval 'was=$d_clearenv'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set clearenv tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=clearenv
+++ case "$3" in
+++ tlook='^clearenv$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^clearenv$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'clearenv() NOT found.'
clearenv() NOT found.
++ case "$was" in
++ eval 'd_clearenv=$tu'
+++ d_clearenv=undef
+ hasstruct='varname=$1; struct=$2; shift; shift;
while $test $# -ge 2; do
	case "$1" in
	$define) echo "#include <$2>";;
	esac ;
    shift 2;
done > try.c;
echo "int main () { struct $struct foo; }" >> try.c;
set try;
if eval $compile; then
	val="$define";
else
	val="$undef";
fi;
set $varname;
eval $setvar;
$rm -f try.c try.o'
+ socketlib=
+ sockethdr=
+ : see whether socket exists
+ echo ' '
 
+ /bin/echo -n 'Hmm... '
Hmm... + set socket val -f d_socket
+ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
++ tlook=socket
++ case "$3" in
++ tlook='^socket$'
++ tf=libc.list
++ tdc='()'
++ tx=yes
++ case "$reuseval-$4" in
++ case "$tx" in
++ tval=false
++ test true = true
++ grep '^socket$' libc.list
++ tval=true
++ eval val=true
+++ val=true
+ true
+ echo 'Looks like you have Berkeley networking support.'
Looks like you have Berkeley networking support.
+ d_socket=define
+ set setsockopt val -f
+ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
++ tlook=setsockopt
++ case "$3" in
++ tlook='^setsockopt$'
++ tf=libc.list
++ tdc='()'
++ tx=yes
++ case "$reuseval-$4" in
++ case "$tx" in
++ tval=false
++ test true = true
++ grep '^setsockopt$' libc.list
++ tval=true
++ eval val=true
+++ val=true
+ true
+ d_oldsock=undef
+ : see if socketpair exists
+ set socketpair d_sockpair
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=socketpair
++ var=d_sockpair
++ eval 'was=$d_sockpair'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set socketpair tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=socketpair
+++ case "$3" in
+++ tlook='^socketpair$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^socketpair$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'socketpair() found.'
socketpair() found.
++ case "$was" in
++ eval 'd_sockpair=$td'
+++ d_sockpair=define
+ echo ' '
 
+ echo 'Checking the availability of certain socket constants...'
Checking the availability of certain socket constants...
+ for ENUM in MSG_CTRUNC MSG_DONTROUTE MSG_OOB MSG_PEEK MSG_PROXY SCM_RIGHTS
++ /bin/echo MSG_CTRUNC
++ ./tr '[A-Z]' '[a-z]'
+ enum=msg_ctrunc
+ /bin/cat
+ val=undef
+ set try
+ eval 'mc_file=$1;' 'shift;' '$cc' -o '${mc_file}' '$optimize' '$ccflags' '$ldflags' '$*' '${mc_file}.c' '$libs' '>' /dev/null '2>&1;'
++ mc_file=try
++ shift
++ gcc -o try -O3 -fno-unit-at-a-time -s -mtune=pentium -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s try.c -lgdbm -lcrypt -lgdbm_compat
+ set d_msg_ctrunc
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=d_msg_ctrunc
++ eval 'was=$d_msg_ctrunc'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval d_msg_ctrunc=undef
+++ d_msg_ctrunc=undef
+ /bin/rm -f try.c try
+ for ENUM in MSG_CTRUNC MSG_DONTROUTE MSG_OOB MSG_PEEK MSG_PROXY SCM_RIGHTS
++ /bin/echo MSG_DONTROUTE
++ ./tr '[A-Z]' '[a-z]'
+ enum=msg_dontroute
+ /bin/cat
+ val=undef
+ set try
+ eval 'mc_file=$1;' 'shift;' '$cc' -o '${mc_file}' '$optimize' '$ccflags' '$ldflags' '$*' '${mc_file}.c' '$libs' '>' /dev/null '2>&1;'
++ mc_file=try
++ shift
++ gcc -o try -O3 -fno-unit-at-a-time -s -mtune=pentium -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s try.c -lgdbm -lcrypt -lgdbm_compat
+ val=define
+ set d_msg_dontroute
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=d_msg_dontroute
++ eval 'was=$d_msg_dontroute'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval d_msg_dontroute=define
+++ d_msg_dontroute=define
+ /bin/rm -f try.c try
+ for ENUM in MSG_CTRUNC MSG_DONTROUTE MSG_OOB MSG_PEEK MSG_PROXY SCM_RIGHTS
++ /bin/echo MSG_OOB
++ ./tr '[A-Z]' '[a-z]'
+ enum=msg_oob
+ /bin/cat
+ val=undef
+ set try
+ eval 'mc_file=$1;' 'shift;' '$cc' -o '${mc_file}' '$optimize' '$ccflags' '$ldflags' '$*' '${mc_file}.c' '$libs' '>' /dev/null '2>&1;'
++ mc_file=try
++ shift
++ gcc -o try -O3 -fno-unit-at-a-time -s -mtune=pentium -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s try.c -lgdbm -lcrypt -lgdbm_compat
+ val=define
+ set d_msg_oob
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=d_msg_oob
++ eval 'was=$d_msg_oob'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval d_msg_oob=define
+++ d_msg_oob=define
+ /bin/rm -f try.c try
+ for ENUM in MSG_CTRUNC MSG_DONTROUTE MSG_OOB MSG_PEEK MSG_PROXY SCM_RIGHTS
++ /bin/echo MSG_PEEK
++ ./tr '[A-Z]' '[a-z]'
+ enum=msg_peek
+ /bin/cat
+ val=undef
+ set try
+ eval 'mc_file=$1;' 'shift;' '$cc' -o '${mc_file}' '$optimize' '$ccflags' '$ldflags' '$*' '${mc_file}.c' '$libs' '>' /dev/null '2>&1;'
++ mc_file=try
++ shift
++ gcc -o try -O3 -fno-unit-at-a-time -s -mtune=pentium -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s try.c -lgdbm -lcrypt -lgdbm_compat
+ val=define
+ set d_msg_peek
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=d_msg_peek
++ eval 'was=$d_msg_peek'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval d_msg_peek=define
+++ d_msg_peek=define
+ /bin/rm -f try.c try
+ for ENUM in MSG_CTRUNC MSG_DONTROUTE MSG_OOB MSG_PEEK MSG_PROXY SCM_RIGHTS
++ /bin/echo MSG_PROXY
++ ./tr '[A-Z]' '[a-z]'
+ enum=msg_proxy
+ /bin/cat
+ val=undef
+ set try
+ eval 'mc_file=$1;' 'shift;' '$cc' -o '${mc_file}' '$optimize' '$ccflags' '$ldflags' '$*' '${mc_file}.c' '$libs' '>' /dev/null '2>&1;'
++ mc_file=try
++ shift
++ gcc -o try -O3 -fno-unit-at-a-time -s -mtune=pentium -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s try.c -lgdbm -lcrypt -lgdbm_compat
+ set d_msg_proxy
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=d_msg_proxy
++ eval 'was=$d_msg_proxy'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval d_msg_proxy=undef
+++ d_msg_proxy=undef
+ /bin/rm -f try.c try
+ for ENUM in MSG_CTRUNC MSG_DONTROUTE MSG_OOB MSG_PEEK MSG_PROXY SCM_RIGHTS
++ /bin/echo SCM_RIGHTS
++ ./tr '[A-Z]' '[a-z]'
+ enum=scm_rights
+ /bin/cat
+ val=undef
+ set try
+ eval 'mc_file=$1;' 'shift;' '$cc' -o '${mc_file}' '$optimize' '$ccflags' '$ldflags' '$*' '${mc_file}.c' '$libs' '>' /dev/null '2>&1;'
++ mc_file=try
++ shift
++ gcc -o try -O3 -fno-unit-at-a-time -s -mtune=pentium -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s try.c -lgdbm -lcrypt -lgdbm_compat
+ set d_scm_rights
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=d_scm_rights
++ eval 'was=$d_scm_rights'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval d_scm_rights=undef
+++ d_scm_rights=undef
+ /bin/rm -f try.c try
+ : see if this is a sys/uio.h system
+ set sys/uio.h i_sysuio
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'yyy=$@;' 'cont=true;' 'xxf="echo' '\"<\$1>' 'found.\"' '>&4";' case '$#' in '2)' 'xxnf="echo' '\"<\$1>' NOT 'found.\"' '>&4";;' '*)' 'xxnf="echo' '\"<\$1>' NOT found, '...\"' '>&4";;' 'esac;' case '$#' in '4)' 'instead=instead;;' '*)' 'instead="at' 'last";;' 'esac;' while '$test' '"$cont";' do 'xxx=`./findhdr' '$1`' 'var=$2;' eval '"was=\$$2";' if '$test' '"$xxx"' '&&' '$test' -r '"$xxx";' then eval '$xxf;' eval '"case' '\"\$$var\"' in '$undef)' . './whoa;' 'esac";' eval '"$var=\$td";' 'cont="";' else eval '$xxnf;' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' 'fi;' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' case '$#' in '0)' 'cont="";;' '2)' 'xxf="echo' '\"but' I found '<\$1>' '$instead.\"' '>&4";' 'xxnf="echo' '\"and' I did not find '<\$1>' 'either.\"' '>&4";;' '*)' 'xxf="echo' '\"but' I found '<\$1\>' 'instead.\"' '>&4";' 'xxnf="echo' '\"there' is no '<\$1>,' '...\"' '>&4";;' 'esac;' 'done;' while '$test' '"$yyy";' do set '$yyy;' 'var=$2;' eval '"was=\$$2";' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' done
++ echo ' '
 
++ td=define
++ tu=undef
++ yyy='sys/uio.h i_sysuio'
++ cont=true
++ xxf='echo "<$1> found." >&4'
++ case $# in
++ xxnf='echo "<$1> NOT found." >&4'
++ case $# in
++ instead='at last'
++ test true
+++ ./findhdr sys/uio.h
++ xxx=/usr/include/sys/uio.h
++ var=i_sysuio
++ eval 'was=$i_sysuio'
+++ was=
++ test /usr/include/sys/uio.h
++ test -r /usr/include/sys/uio.h
++ eval echo '"<$1>' 'found."' '>&4'
+++ echo '<sys/uio.h> found.'
<sys/uio.h> found.
++ eval 'case "$i_sysuio" in undef) . ./whoa; esac'
+++ case "$i_sysuio" in
++ eval 'i_sysuio=$td'
+++ i_sysuio=define
++ cont=
++ set sys/uio.h i_sysuio
++ shift
++ shift
++ yyy=
++ case $# in
++ cont=
++ test ''
++ test ''
+ echo ' '
 
+ echo 'Checking to see if your system supports struct cmsghdr...'
Checking to see if your system supports struct cmsghdr...
+ set d_cmsghdr_s cmsghdr define sys/types.h define sys/socket.h define sys/uio.h
+ eval 'varname=$1;' 'struct=$2;' 'shift;' 'shift;' while '$test' '$#' -ge '2;' do case '"$1"' in '$define)' echo '"#include' '<$2>";;' esac ';' shift '2;' done '>' 'try.c;' echo '"int' main '()' '{' struct '$struct' 'foo;' '}"' '>>' 'try.c;' set 'try;' if eval '$compile;' then 'val="$define";' else 'val="$undef";' 'fi;' set '$varname;' eval '$setvar;' '$rm' -f try.c try.o
++ varname=d_cmsghdr_s
++ struct=cmsghdr
++ shift
++ shift
++ test 6 -ge 2
++ case "$1" in
++ echo '#include <sys/types.h>'
++ shift 2
++ test 4 -ge 2
++ case "$1" in
++ echo '#include <sys/socket.h>'
++ shift 2
++ test 2 -ge 2
++ case "$1" in
++ echo '#include <sys/uio.h>'
++ shift 2
++ test 0 -ge 2
++ echo 'int main () { struct cmsghdr foo; }'
++ set try
++ eval 'mc_file=$1;' 'shift;' '$cc' -o '${mc_file}' '$optimize' '$ccflags' '$ldflags' '$*' '${mc_file}.c' '$libs' '>' /dev/null '2>&1;'
+++ mc_file=try
+++ shift
+++ gcc -o try -O3 -fno-unit-at-a-time -s -mtune=pentium -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s try.c -lgdbm -lcrypt -lgdbm_compat
++ val=undef
++ set d_cmsghdr_s
++ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
+++ var=d_cmsghdr_s
+++ eval 'was=$d_cmsghdr_s'
++++ was=
+++ td=define
+++ tu=undef
+++ case "$val$was" in
+++ eval d_cmsghdr_s=undef
++++ d_cmsghdr_s=undef
++ /bin/rm -f try.c try.o
+ case "$d_cmsghdr_s" in
+ echo 'No, it doesn'\''t.'
No, it doesn't.
+ : check for const keyword
+ echo ' '
 
+ echo 'Checking to see if your C compiler knows about "const"...'
Checking to see if your C compiler knows about "const"...
+ /bin/cat
+ gcc -c -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement const.c
+ val=define
+ echo 'Yup, it does.'
Yup, it does.
+ set d_const
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=d_const
++ eval 'was=$d_const'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval d_const=define
+++ d_const=define
+ : see if copysignl exists
+ set copysignl d_copysignl
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=copysignl
++ var=d_copysignl
++ eval 'was=$d_copysignl'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set copysignl tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=copysignl
+++ case "$3" in
+++ tlook='^copysignl$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^copysignl$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'copysignl() NOT found.'
copysignl() NOT found.
++ case "$was" in
++ eval 'd_copysignl=$tu'
+++ d_copysignl=undef
+ : see if crypt exists
+ echo ' '
 
+ set crypt d_crypt
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=crypt
++ var=d_crypt
++ eval 'was=$d_crypt'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set crypt tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=crypt
+++ case "$3" in
+++ tlook='^crypt$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^crypt$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'crypt() found.'
crypt() found.
++ case "$was" in
++ eval 'd_crypt=$td'
+++ d_crypt=define
+ case "$d_crypt" in
+ cryptlib=
+ : see if this is a crypt.h system
+ set crypt.h i_crypt
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'yyy=$@;' 'cont=true;' 'xxf="echo' '\"<\$1>' 'found.\"' '>&4";' case '$#' in '2)' 'xxnf="echo' '\"<\$1>' NOT 'found.\"' '>&4";;' '*)' 'xxnf="echo' '\"<\$1>' NOT found, '...\"' '>&4";;' 'esac;' case '$#' in '4)' 'instead=instead;;' '*)' 'instead="at' 'last";;' 'esac;' while '$test' '"$cont";' do 'xxx=`./findhdr' '$1`' 'var=$2;' eval '"was=\$$2";' if '$test' '"$xxx"' '&&' '$test' -r '"$xxx";' then eval '$xxf;' eval '"case' '\"\$$var\"' in '$undef)' . './whoa;' 'esac";' eval '"$var=\$td";' 'cont="";' else eval '$xxnf;' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' 'fi;' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' case '$#' in '0)' 'cont="";;' '2)' 'xxf="echo' '\"but' I found '<\$1>' '$instead.\"' '>&4";' 'xxnf="echo' '\"and' I did not find '<\$1>' 'either.\"' '>&4";;' '*)' 'xxf="echo' '\"but' I found '<\$1\>' 'instead.\"' '>&4";' 'xxnf="echo' '\"there' is no '<\$1>,' '...\"' '>&4";;' 'esac;' 'done;' while '$test' '"$yyy";' do set '$yyy;' 'var=$2;' eval '"was=\$$2";' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' done
++ echo ' '
 
++ td=define
++ tu=undef
++ yyy='crypt.h i_crypt'
++ cont=true
++ xxf='echo "<$1> found." >&4'
++ case $# in
++ xxnf='echo "<$1> NOT found." >&4'
++ case $# in
++ instead='at last'
++ test true
+++ ./findhdr crypt.h
++ xxx=/usr/include/crypt.h
++ var=i_crypt
++ eval 'was=$i_crypt'
+++ was=
++ test /usr/include/crypt.h
++ test -r /usr/include/crypt.h
++ eval echo '"<$1>' 'found."' '>&4'
+++ echo '<crypt.h> found.'
<crypt.h> found.
++ eval 'case "$i_crypt" in undef) . ./whoa; esac'
+++ case "$i_crypt" in
++ eval 'i_crypt=$td'
+++ i_crypt=define
++ cont=
++ set crypt.h i_crypt
++ shift
++ shift
++ yyy=
++ case $# in
++ cont=
++ test ''
++ test ''
+ : see if crypt_r exists
+ set crypt_r d_crypt_r
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=crypt_r
++ var=d_crypt_r
++ eval 'was=$d_crypt_r'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set crypt_r tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=crypt_r
+++ case "$3" in
+++ tlook='^crypt_r$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^crypt_r$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'crypt_r() NOT found.'
crypt_r() NOT found.
++ case "$was" in
++ eval 'd_crypt_r=$tu'
+++ d_crypt_r=undef
+ case "$d_crypt_r" in
+ crypt_r_proto=0
+ : get csh whereabouts
+ case "$csh" in
+ val=undef
+ set d_csh
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=d_csh
++ eval 'was=$d_csh'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval d_csh=undef
+++ d_csh=undef
+ : Respect a hint or command line value for full_csh.
+ case "$full_csh" in
+ full_csh=csh
+ : see if ctermid_r exists
+ set ctermid_r d_ctermid_r
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=ctermid_r
++ var=d_ctermid_r
++ eval 'was=$d_ctermid_r'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set ctermid_r tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=ctermid_r
+++ case "$3" in
+++ tlook='^ctermid_r$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^ctermid_r$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'ctermid_r() NOT found.'
ctermid_r() NOT found.
++ case "$was" in
++ eval 'd_ctermid_r=$tu'
+++ d_ctermid_r=undef
+ case "$d_ctermid_r" in
+ ctermid_r_proto=0
+ : see if ctime_r exists
+ set ctime_r d_ctime_r
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=ctime_r
++ var=d_ctime_r
++ eval 'was=$d_ctime_r'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set ctime_r tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=ctime_r
+++ case "$3" in
+++ tlook='^ctime_r$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^ctime_r$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'ctime_r() found.'
ctime_r() found.
++ case "$was" in
++ eval 'd_ctime_r=$td'
+++ d_ctime_r=define
+ case "$d_ctime_r" in
+ hdrs='define sys/types.h define stdio.h undef time.h define sys/time.h'
+ case "$d_ctime_r_proto:$usethreads" in
+ case "$d_ctime_r_proto" in
+ case "$usethreads" in
+ d_ctime_r=undef
+ ctime_r_proto=0
+ : see if cuserid exists
+ set cuserid d_cuserid
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=cuserid
++ var=d_cuserid
++ eval 'was=$d_cuserid'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set cuserid tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=cuserid
+++ case "$3" in
+++ tlook='^cuserid$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^cuserid$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'cuserid() found.'
cuserid() found.
++ case "$was" in
++ eval 'd_cuserid=$td'
+++ d_cuserid=define
+ : see if this is a limits.h system
+ set limits.h i_limits
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'yyy=$@;' 'cont=true;' 'xxf="echo' '\"<\$1>' 'found.\"' '>&4";' case '$#' in '2)' 'xxnf="echo' '\"<\$1>' NOT 'found.\"' '>&4";;' '*)' 'xxnf="echo' '\"<\$1>' NOT found, '...\"' '>&4";;' 'esac;' case '$#' in '4)' 'instead=instead;;' '*)' 'instead="at' 'last";;' 'esac;' while '$test' '"$cont";' do 'xxx=`./findhdr' '$1`' 'var=$2;' eval '"was=\$$2";' if '$test' '"$xxx"' '&&' '$test' -r '"$xxx";' then eval '$xxf;' eval '"case' '\"\$$var\"' in '$undef)' . './whoa;' 'esac";' eval '"$var=\$td";' 'cont="";' else eval '$xxnf;' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' 'fi;' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' case '$#' in '0)' 'cont="";;' '2)' 'xxf="echo' '\"but' I found '<\$1>' '$instead.\"' '>&4";' 'xxnf="echo' '\"and' I did not find '<\$1>' 'either.\"' '>&4";;' '*)' 'xxf="echo' '\"but' I found '<\$1\>' 'instead.\"' '>&4";' 'xxnf="echo' '\"there' is no '<\$1>,' '...\"' '>&4";;' 'esac;' 'done;' while '$test' '"$yyy";' do set '$yyy;' 'var=$2;' eval '"was=\$$2";' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' done
++ echo ' '
 
++ td=define
++ tu=undef
++ yyy='limits.h i_limits'
++ cont=true
++ xxf='echo "<$1> found." >&4'
++ case $# in
++ xxnf='echo "<$1> NOT found." >&4'
++ case $# in
++ instead='at last'
++ test true
+++ ./findhdr limits.h
++ xxx=/usr/include/limits.h
++ var=i_limits
++ eval 'was=$i_limits'
+++ was=
++ test /usr/include/limits.h
++ test -r /usr/include/limits.h
++ eval echo '"<$1>' 'found."' '>&4'
+++ echo '<limits.h> found.'
<limits.h> found.
++ eval 'case "$i_limits" in undef) . ./whoa; esac'
+++ case "$i_limits" in
++ eval 'i_limits=$td'
+++ i_limits=define
++ cont=
++ set limits.h i_limits
++ shift
++ shift
++ yyy=
++ case $# in
++ cont=
++ test ''
++ test ''
+ : see if this is a float.h system
+ set float.h i_float
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'yyy=$@;' 'cont=true;' 'xxf="echo' '\"<\$1>' 'found.\"' '>&4";' case '$#' in '2)' 'xxnf="echo' '\"<\$1>' NOT 'found.\"' '>&4";;' '*)' 'xxnf="echo' '\"<\$1>' NOT found, '...\"' '>&4";;' 'esac;' case '$#' in '4)' 'instead=instead;;' '*)' 'instead="at' 'last";;' 'esac;' while '$test' '"$cont";' do 'xxx=`./findhdr' '$1`' 'var=$2;' eval '"was=\$$2";' if '$test' '"$xxx"' '&&' '$test' -r '"$xxx";' then eval '$xxf;' eval '"case' '\"\$$var\"' in '$undef)' . './whoa;' 'esac";' eval '"$var=\$td";' 'cont="";' else eval '$xxnf;' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' 'fi;' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' case '$#' in '0)' 'cont="";;' '2)' 'xxf="echo' '\"but' I found '<\$1>' '$instead.\"' '>&4";' 'xxnf="echo' '\"and' I did not find '<\$1>' 'either.\"' '>&4";;' '*)' 'xxf="echo' '\"but' I found '<\$1\>' 'instead.\"' '>&4";' 'xxnf="echo' '\"there' is no '<\$1>,' '...\"' '>&4";;' 'esac;' 'done;' while '$test' '"$yyy";' do set '$yyy;' 'var=$2;' eval '"was=\$$2";' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' done
++ echo ' '
 
++ td=define
++ tu=undef
++ yyy='float.h i_float'
++ cont=true
++ xxf='echo "<$1> found." >&4'
++ case $# in
++ xxnf='echo "<$1> NOT found." >&4'
++ case $# in
++ instead='at last'
++ test true
+++ ./findhdr float.h
++ xxx=/usr/lib/gcc/i686-pc-msys/3.4.4/include/float.h
++ var=i_float
++ eval 'was=$i_float'
+++ was=
++ test /usr/lib/gcc/i686-pc-msys/3.4.4/include/float.h
++ test -r /usr/lib/gcc/i686-pc-msys/3.4.4/include/float.h
++ eval echo '"<$1>' 'found."' '>&4'
+++ echo '<float.h> found.'
<float.h> found.
++ eval 'case "$i_float" in undef) . ./whoa; esac'
+++ case "$i_float" in
++ eval 'i_float=$td'
+++ i_float=define
++ cont=
++ set float.h i_float
++ shift
++ shift
++ yyy=
++ case $# in
++ cont=
++ test ''
++ test ''
+ : See if number of significant digits in a double precision number is known
+ echo ' '
 
+ /bin/cat
+ gcc -E -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -
+ grep DBL_DIG dbl_dig.E
+ echo 'DBL_DIG found.'
DBL_DIG found.
+ val=define
+ /bin/rm -f dbl_dig.E dbl_dig.c
+ set d_dbl_dig
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=d_dbl_dig
++ eval 'was=$d_dbl_dig'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval d_dbl_dig=define
+++ d_dbl_dig=define
+ : see if dbm.h is available
+ : see if dbmclose exists
+ set dbmclose d_dbmclose
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=dbmclose
++ var=d_dbmclose
++ eval 'was=$d_dbmclose'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set dbmclose tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=dbmclose
+++ case "$3" in
+++ tlook='^dbmclose$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^dbmclose$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'dbmclose() found.'
dbmclose() found.
++ case "$was" in
++ eval 'd_dbmclose=$td'
+++ d_dbmclose=define
+ case "$d_dbmclose" in
+ set dbm.h i_dbm
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'yyy=$@;' 'cont=true;' 'xxf="echo' '\"<\$1>' 'found.\"' '>&4";' case '$#' in '2)' 'xxnf="echo' '\"<\$1>' NOT 'found.\"' '>&4";;' '*)' 'xxnf="echo' '\"<\$1>' NOT found, '...\"' '>&4";;' 'esac;' case '$#' in '4)' 'instead=instead;;' '*)' 'instead="at' 'last";;' 'esac;' while '$test' '"$cont";' do 'xxx=`./findhdr' '$1`' 'var=$2;' eval '"was=\$$2";' if '$test' '"$xxx"' '&&' '$test' -r '"$xxx";' then eval '$xxf;' eval '"case' '\"\$$var\"' in '$undef)' . './whoa;' 'esac";' eval '"$var=\$td";' 'cont="";' else eval '$xxnf;' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' 'fi;' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' case '$#' in '0)' 'cont="";;' '2)' 'xxf="echo' '\"but' I found '<\$1>' '$instead.\"' '>&4";' 'xxnf="echo' '\"and' I did not find '<\$1>' 'either.\"' '>&4";;' '*)' 'xxf="echo' '\"but' I found '<\$1\>' 'instead.\"' '>&4";' 'xxnf="echo' '\"there' is no '<\$1>,' '...\"' '>&4";;' 'esac;' 'done;' while '$test' '"$yyy";' do set '$yyy;' 'var=$2;' eval '"was=\$$2";' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' done
++ echo ' '
 
++ td=define
++ tu=undef
++ yyy='dbm.h i_dbm'
++ cont=true
++ xxf='echo "<$1> found." >&4'
++ case $# in
++ xxnf='echo "<$1> NOT found." >&4'
++ case $# in
++ instead='at last'
++ test true
+++ ./findhdr dbm.h
++ xxx=/usr/include/dbm.h
++ var=i_dbm
++ eval 'was=$i_dbm'
+++ was=
++ test /usr/include/dbm.h
++ test -r /usr/include/dbm.h
++ eval echo '"<$1>' 'found."' '>&4'
+++ echo '<dbm.h> found.'
<dbm.h> found.
++ eval 'case "$i_dbm" in undef) . ./whoa; esac'
+++ case "$i_dbm" in
++ eval 'i_dbm=$td'
+++ i_dbm=define
++ cont=
++ set dbm.h i_dbm
++ shift
++ shift
++ yyy=
++ case $# in
++ cont=
++ test ''
++ test ''
+ case "$i_dbm" in
+ val=undef
+ set i_rpcsvcdbm
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=i_rpcsvcdbm
++ eval 'was=$i_rpcsvcdbm'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval i_rpcsvcdbm=undef
+++ i_rpcsvcdbm=undef
+ : see if prototype for dbminit is available
+ echo ' '
 
+ set d_dbminitproto dbminit define dbm.h
+ eval 'varname=$1;' 'func=$2;' 'shift;' 'shift;' while '$test' '$#' -ge '2;' do case '"$1"' in '$define)' echo '"#include' '<$2>";;' esac ';' shift '2;' done '>' 'try.c;' '$cppstdin' '$cppflags' '$cppminus' '<' try.c '>' tryout.c '2>/dev/null;' if '$contains' '"$func.*("' tryout.c '>/dev/null' '2>&1;' then echo '"$func()' prototype 'found.";' 'val="$define";' else echo '"$func()' prototype NOT 'found.";' 'val="$undef";' 'fi;' set '$varname;' eval '$setvar;' '$rm' -f try.c tryout.c
++ varname=d_dbminitproto
++ func=dbminit
++ shift
++ shift
++ test 2 -ge 2
++ case "$1" in
++ echo '#include <dbm.h>'
++ shift 2
++ test 0 -ge 2
++ gcc -E -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -
++ grep 'dbminit.*(' tryout.c
++ echo 'dbminit() prototype found.'
dbminit() prototype found.
++ val=define
++ set d_dbminitproto
++ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
+++ var=d_dbminitproto
+++ eval 'was=$d_dbminitproto'
++++ was=
+++ td=define
+++ tu=undef
+++ case "$val$was" in
+++ eval d_dbminitproto=define
++++ d_dbminitproto=define
++ /bin/rm -f try.c tryout.c
+ : see if difftime exists
+ set difftime d_difftime
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=difftime
++ var=d_difftime
++ eval 'was=$d_difftime'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set difftime tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=difftime
+++ case "$3" in
+++ tlook='^difftime$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^difftime$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'difftime() found.'
difftime() found.
++ case "$was" in
++ eval 'd_difftime=$td'
+++ d_difftime=define
+ : see if this is a dirent system
+ echo ' '
 
++ ./findhdr dirent.h
+ xinc=/usr/include/dirent.h
+ test /usr/include/dirent.h
+ val=define
+ echo '<dirent.h> found.'
<dirent.h> found.
+ set i_dirent
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=i_dirent
++ eval 'was=$i_dirent'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval i_dirent=define
+++ i_dirent=define
+ : Look for type of directory structure.
+ echo ' '
 
+ gcc -E -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -
+ case "$direntrytype" in
+ case "$i_dirent" in
+ guess1='struct dirent'
+ case "$guess1" in
+ guess2='struct direct'
+ grep 'struct dirent' try.c
+ direntrytype='struct dirent'
+ echo 'Your directory entries are struct dirent.'
Your directory entries are struct dirent.
+ /bin/rm -f try.c
+ : see if the directory entry stores field length
+ echo ' '
 
+ gcc -E -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -
+ grep d_namlen try.c
+ echo 'Your directory entry does not know about the d_namlen field.'
Your directory entry does not know about the d_namlen field.
+ val=undef
+ set d_dirnamlen
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=d_dirnamlen
++ eval 'was=$d_dirnamlen'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval d_dirnamlen=undef
+++ d_dirnamlen=undef
+ /bin/rm -f try.c
+ : see if this is an sysdir system
+ set sys/dir.h i_sysdir
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'yyy=$@;' 'cont=true;' 'xxf="echo' '\"<\$1>' 'found.\"' '>&4";' case '$#' in '2)' 'xxnf="echo' '\"<\$1>' NOT 'found.\"' '>&4";;' '*)' 'xxnf="echo' '\"<\$1>' NOT found, '...\"' '>&4";;' 'esac;' case '$#' in '4)' 'instead=instead;;' '*)' 'instead="at' 'last";;' 'esac;' while '$test' '"$cont";' do 'xxx=`./findhdr' '$1`' 'var=$2;' eval '"was=\$$2";' if '$test' '"$xxx"' '&&' '$test' -r '"$xxx";' then eval '$xxf;' eval '"case' '\"\$$var\"' in '$undef)' . './whoa;' 'esac";' eval '"$var=\$td";' 'cont="";' else eval '$xxnf;' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' 'fi;' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' case '$#' in '0)' 'cont="";;' '2)' 'xxf="echo' '\"but' I found '<\$1>' '$instead.\"' '>&4";' 'xxnf="echo' '\"and' I did not find '<\$1>' 'either.\"' '>&4";;' '*)' 'xxf="echo' '\"but' I found '<\$1\>' 'instead.\"' '>&4";' 'xxnf="echo' '\"there' is no '<\$1>,' '...\"' '>&4";;' 'esac;' 'done;' while '$test' '"$yyy";' do set '$yyy;' 'var=$2;' eval '"was=\$$2";' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' done
++ echo ' '
 
++ td=define
++ tu=undef
++ yyy='sys/dir.h i_sysdir'
++ cont=true
++ xxf='echo "<$1> found." >&4'
++ case $# in
++ xxnf='echo "<$1> NOT found." >&4'
++ case $# in
++ instead='at last'
++ test true
+++ ./findhdr sys/dir.h
++ xxx=
++ var=i_sysdir
++ eval 'was=$i_sysdir'
+++ was=
++ test ''
++ eval echo '"<$1>' NOT 'found."' '>&4'
+++ echo '<sys/dir.h> NOT found.'
<sys/dir.h> NOT found.
++ eval 'case "$i_sysdir" in define) . ./whoa; esac'
+++ case "$i_sysdir" in
++ eval 'i_sysdir=$tu'
+++ i_sysdir=undef
++ set sys/dir.h i_sysdir
++ shift
++ shift
++ yyy=
++ case $# in
++ cont=
++ test ''
++ test ''
+ : see if this is an sysndir system
+ set sys/ndir.h i_sysndir
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'yyy=$@;' 'cont=true;' 'xxf="echo' '\"<\$1>' 'found.\"' '>&4";' case '$#' in '2)' 'xxnf="echo' '\"<\$1>' NOT 'found.\"' '>&4";;' '*)' 'xxnf="echo' '\"<\$1>' NOT found, '...\"' '>&4";;' 'esac;' case '$#' in '4)' 'instead=instead;;' '*)' 'instead="at' 'last";;' 'esac;' while '$test' '"$cont";' do 'xxx=`./findhdr' '$1`' 'var=$2;' eval '"was=\$$2";' if '$test' '"$xxx"' '&&' '$test' -r '"$xxx";' then eval '$xxf;' eval '"case' '\"\$$var\"' in '$undef)' . './whoa;' 'esac";' eval '"$var=\$td";' 'cont="";' else eval '$xxnf;' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' 'fi;' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' case '$#' in '0)' 'cont="";;' '2)' 'xxf="echo' '\"but' I found '<\$1>' '$instead.\"' '>&4";' 'xxnf="echo' '\"and' I did not find '<\$1>' 'either.\"' '>&4";;' '*)' 'xxf="echo' '\"but' I found '<\$1\>' 'instead.\"' '>&4";' 'xxnf="echo' '\"there' is no '<\$1>,' '...\"' '>&4";;' 'esac;' 'done;' while '$test' '"$yyy";' do set '$yyy;' 'var=$2;' eval '"was=\$$2";' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' done
++ echo ' '
 
++ td=define
++ tu=undef
++ yyy='sys/ndir.h i_sysndir'
++ cont=true
++ xxf='echo "<$1> found." >&4'
++ case $# in
++ xxnf='echo "<$1> NOT found." >&4'
++ case $# in
++ instead='at last'
++ test true
+++ ./findhdr sys/ndir.h
++ xxx=
++ var=i_sysndir
++ eval 'was=$i_sysndir'
+++ was=
++ test ''
++ eval echo '"<$1>' NOT 'found."' '>&4'
+++ echo '<sys/ndir.h> NOT found.'
<sys/ndir.h> NOT found.
++ eval 'case "$i_sysndir" in define) . ./whoa; esac'
+++ case "$i_sysndir" in
++ eval 'i_sysndir=$tu'
+++ i_sysndir=undef
++ set sys/ndir.h i_sysndir
++ shift
++ shift
++ yyy=
++ case $# in
++ cont=
++ test ''
++ test ''
+ : Look for dirfd
+ echo ' '
 
+ /bin/cat
+ val=undef
+ set dirfd
+ eval 'mc_file=$1;' 'shift;' '$cc' -o '${mc_file}' '$optimize' '$ccflags' '$ldflags' '$*' '${mc_file}.c' '$libs' '>' /dev/null '2>&1;'
++ mc_file=dirfd
++ shift
++ gcc -o dirfd -O3 -fno-unit-at-a-time -s -mtune=pentium -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s dirfd.c -lgdbm -lcrypt -lgdbm_compat
+ val=define
+ case "$val" in
+ echo 'dirfd() found.'
dirfd() found.
+ set d_dirfd
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=d_dirfd
++ eval 'was=$d_dirfd'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval d_dirfd=define
+++ d_dirfd=define
+ /bin/rm -f dirfd.c dirfd.exe
+ : see if dlerror exists
+ xxx_runnm=true
+ runnm=false
+ set dlerror d_dlerror
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=dlerror
++ var=d_dlerror
++ eval 'was=$d_dlerror'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set dlerror tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=dlerror
+++ case "$3" in
+++ tlook='^dlerror$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test false = true
+++ echo 'void *(*(p()))() { extern void *dlerror(); return &dlerror; } int main() { if(p()) return(0); else return(1); }'
+++ gcc -o try -O3 -fno-unit-at-a-time -s -mtune=pentium -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s try.c -lgdbm -lcrypt -lgdbm_compat
+++ tval=true
+++ /bin/rm -f try.exe try.c
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'dlerror() found.'
dlerror() found.
++ case "$was" in
++ eval 'd_dlerror=$td'
+++ d_dlerror=define
+ runnm=true
+ : see if dlfcn is available
+ set dlfcn.h i_dlfcn
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'yyy=$@;' 'cont=true;' 'xxf="echo' '\"<\$1>' 'found.\"' '>&4";' case '$#' in '2)' 'xxnf="echo' '\"<\$1>' NOT 'found.\"' '>&4";;' '*)' 'xxnf="echo' '\"<\$1>' NOT found, '...\"' '>&4";;' 'esac;' case '$#' in '4)' 'instead=instead;;' '*)' 'instead="at' 'last";;' 'esac;' while '$test' '"$cont";' do 'xxx=`./findhdr' '$1`' 'var=$2;' eval '"was=\$$2";' if '$test' '"$xxx"' '&&' '$test' -r '"$xxx";' then eval '$xxf;' eval '"case' '\"\$$var\"' in '$undef)' . './whoa;' 'esac";' eval '"$var=\$td";' 'cont="";' else eval '$xxnf;' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' 'fi;' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' case '$#' in '0)' 'cont="";;' '2)' 'xxf="echo' '\"but' I found '<\$1>' '$instead.\"' '>&4";' 'xxnf="echo' '\"and' I did not find '<\$1>' 'either.\"' '>&4";;' '*)' 'xxf="echo' '\"but' I found '<\$1\>' 'instead.\"' '>&4";' 'xxnf="echo' '\"there' is no '<\$1>,' '...\"' '>&4";;' 'esac;' 'done;' while '$test' '"$yyy";' do set '$yyy;' 'var=$2;' eval '"was=\$$2";' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' done
++ echo ' '
 
++ td=define
++ tu=undef
++ yyy='dlfcn.h i_dlfcn'
++ cont=true
++ xxf='echo "<$1> found." >&4'
++ case $# in
++ xxnf='echo "<$1> NOT found." >&4'
++ case $# in
++ instead='at last'
++ test true
+++ ./findhdr dlfcn.h
++ xxx=/usr/include/dlfcn.h
++ var=i_dlfcn
++ eval 'was=$i_dlfcn'
+++ was=
++ test /usr/include/dlfcn.h
++ test -r /usr/include/dlfcn.h
++ eval echo '"<$1>' 'found."' '>&4'
+++ echo '<dlfcn.h> found.'
<dlfcn.h> found.
++ eval 'case "$i_dlfcn" in undef) . ./whoa; esac'
+++ case "$i_dlfcn" in
++ eval 'i_dlfcn=$td'
+++ i_dlfcn=define
++ cont=
++ set dlfcn.h i_dlfcn
++ shift
++ shift
++ yyy=
++ case $# in
++ cont=
++ test ''
++ test ''
+ case "$usedl" in
+ /bin/cat

On a few systems, the dynamically loaded modules that perl generates and uses
will need a different extension than shared libs. The default will probably
be appropriate.

+ case "$dlext" in
+ dflt=dll
+ rp='What is the extension of dynamically loaded modules'
+ . ./myread
++ xxxm=dll
++ case "$xxxm" in
++ case "$rp" in
+++ echo 'What is the extension of dynamically loaded modules [dll]  '
+++ wc -c
++ test 60 -ge 80
++ echo -n 'What is the extension of dynamically loaded modules [dll] '
What is the extension of dynamically loaded modules [dll] ++ ans='!'
++ case "$fastread" in
++ case "$dflt" in
++ ans=
++ case "$silent-$rp" in
++ echo ' '
 
++ expr X : 'X!'
++ case "$ans" in
++ ans=dll
+ dlext=dll
+ : Check if dlsym need a leading underscore
+ echo ' '
 
+ val=undef
+ case "$dlsrc" in
+ echo 'Checking whether your dlsym() needs a leading underscore ...'
Checking whether your dlsym() needs a leading underscore ...
+ /bin/cat
+ /bin/cat
+ : Call the object file tmp-dyna.o in case dlext=o.
+ gcc -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -c dyna.c
+ mv dyna.o tmp-dyna.o
+ ld2 -o dyna.dll -s tmp-dyna.o
gcc -shared -o dyna.dll -Wl,--out-implib=libdyna.dll.a -Wl,--export-all-symbols -Wl,--enable-auto-import -Wl,--stack,8388608 -Wl,--enable-auto-image-base \
 -s tmp-dyna.o
Creating library file: libdyna.dll.a
+ gcc -o fred -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s -s fred.c -lgdbm -lcrypt -lgdbm_compat
+ ./fred
4
+ gcc -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -c dyna.c
+ mv dyna.o tmp-dyna.o
+ ld2 -o dyna.dll -s -s tmp-dyna.o
+ gcc -o fred -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s -s fred.c -lgdbm -lcrypt -lgdbm_compat
+ : dyna.dll
++ ./fred
+ xxx=4
+ case $xxx in
+ echo 'dlsym doesn'\''t need a leading underscore.'
dlsym doesn't need a leading underscore.
+ /bin/rm -f fred fred.c fred.exe dyna.dll dyna.c dyna.dll tmp-dyna.o
+ set d_dlsymun
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=d_dlsymun
++ eval 'was=$d_dlsymun'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval d_dlsymun=undef
+++ d_dlsymun=undef
+ : see if drand48_r exists
+ set drand48_r d_drand48_r
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=drand48_r
++ var=d_drand48_r
++ eval 'was=$d_drand48_r'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set drand48_r tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=drand48_r
+++ case "$3" in
+++ tlook='^drand48_r$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^drand48_r$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'drand48_r() NOT found.'
drand48_r() NOT found.
++ case "$was" in
++ eval 'd_drand48_r=$tu'
+++ d_drand48_r=undef
+ case "$d_drand48_r" in
+ drand48_r_proto=0
+ : see if prototype for drand48 is available
+ echo ' '
 
+ set d_drand48proto drand48 define stdlib.h define unistd.h
+ eval 'varname=$1;' 'func=$2;' 'shift;' 'shift;' while '$test' '$#' -ge '2;' do case '"$1"' in '$define)' echo '"#include' '<$2>";;' esac ';' shift '2;' done '>' 'try.c;' '$cppstdin' '$cppflags' '$cppminus' '<' try.c '>' tryout.c '2>/dev/null;' if '$contains' '"$func.*("' tryout.c '>/dev/null' '2>&1;' then echo '"$func()' prototype 'found.";' 'val="$define";' else echo '"$func()' prototype NOT 'found.";' 'val="$undef";' 'fi;' set '$varname;' eval '$setvar;' '$rm' -f try.c tryout.c
++ varname=d_drand48proto
++ func=drand48
++ shift
++ shift
++ test 4 -ge 2
++ case "$1" in
++ echo '#include <stdlib.h>'
++ shift 2
++ test 2 -ge 2
++ case "$1" in
++ echo '#include <unistd.h>'
++ shift 2
++ test 0 -ge 2
++ gcc -E -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -
++ grep 'drand48.*(' tryout.c
++ echo 'drand48() prototype found.'
drand48() prototype found.
++ val=define
++ set d_drand48proto
++ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
+++ var=d_drand48proto
+++ eval 'was=$d_drand48proto'
++++ was=
+++ td=define
+++ tu=undef
+++ case "$val$was" in
+++ eval d_drand48proto=define
++++ d_drand48proto=define
++ /bin/rm -f try.c tryout.c
+ : see if dup2 exists
+ set dup2 d_dup2
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=dup2
++ var=d_dup2
++ eval 'was=$d_dup2'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set dup2 tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=dup2
+++ case "$3" in
+++ tlook='^dup2$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^dup2$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'dup2() found.'
dup2() found.
++ case "$was" in
++ eval 'd_dup2=$td'
+++ d_dup2=define
+ : see if eaccess exists
+ set eaccess d_eaccess
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=eaccess
++ var=d_eaccess
++ eval 'was=$d_eaccess'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set eaccess tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=eaccess
+++ case "$3" in
+++ tlook='^eaccess$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^eaccess$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'eaccess() NOT found.'
eaccess() NOT found.
++ case "$was" in
++ eval 'd_eaccess=$tu'
+++ d_eaccess=undef
+ : see if endgrent exists
+ set endgrent d_endgrent
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=endgrent
++ var=d_endgrent
++ eval 'was=$d_endgrent'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set endgrent tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=endgrent
+++ case "$3" in
+++ tlook='^endgrent$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^endgrent$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'endgrent() found.'
endgrent() found.
++ case "$was" in
++ eval 'd_endgrent=$td'
+++ d_endgrent=define
+ : see if this is an grp system
+ set grp.h i_grp
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'yyy=$@;' 'cont=true;' 'xxf="echo' '\"<\$1>' 'found.\"' '>&4";' case '$#' in '2)' 'xxnf="echo' '\"<\$1>' NOT 'found.\"' '>&4";;' '*)' 'xxnf="echo' '\"<\$1>' NOT found, '...\"' '>&4";;' 'esac;' case '$#' in '4)' 'instead=instead;;' '*)' 'instead="at' 'last";;' 'esac;' while '$test' '"$cont";' do 'xxx=`./findhdr' '$1`' 'var=$2;' eval '"was=\$$2";' if '$test' '"$xxx"' '&&' '$test' -r '"$xxx";' then eval '$xxf;' eval '"case' '\"\$$var\"' in '$undef)' . './whoa;' 'esac";' eval '"$var=\$td";' 'cont="";' else eval '$xxnf;' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' 'fi;' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' case '$#' in '0)' 'cont="";;' '2)' 'xxf="echo' '\"but' I found '<\$1>' '$instead.\"' '>&4";' 'xxnf="echo' '\"and' I did not find '<\$1>' 'either.\"' '>&4";;' '*)' 'xxf="echo' '\"but' I found '<\$1\>' 'instead.\"' '>&4";' 'xxnf="echo' '\"there' is no '<\$1>,' '...\"' '>&4";;' 'esac;' 'done;' while '$test' '"$yyy";' do set '$yyy;' 'var=$2;' eval '"was=\$$2";' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' done
++ echo ' '
 
++ td=define
++ tu=undef
++ yyy='grp.h i_grp'
++ cont=true
++ xxf='echo "<$1> found." >&4'
++ case $# in
++ xxnf='echo "<$1> NOT found." >&4'
++ case $# in
++ instead='at last'
++ test true
+++ ./findhdr grp.h
++ xxx=/usr/include/grp.h
++ var=i_grp
++ eval 'was=$i_grp'
+++ was=
++ test /usr/include/grp.h
++ test -r /usr/include/grp.h
++ eval echo '"<$1>' 'found."' '>&4'
+++ echo '<grp.h> found.'
<grp.h> found.
++ eval 'case "$i_grp" in undef) . ./whoa; esac'
+++ case "$i_grp" in
++ eval 'i_grp=$td'
+++ i_grp=define
++ cont=
++ set grp.h i_grp
++ shift
++ shift
++ yyy=
++ case $# in
++ cont=
++ test ''
++ test ''
+ case "$i_grp" in
++ ./findhdr grp.h
+ xxx=/usr/include/grp.h
+ gcc -E -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -
+ grep gr_passwd 5528.h
+ val=define
+ set d_grpasswd
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=d_grpasswd
++ eval 'was=$d_grpasswd'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval d_grpasswd=define
+++ d_grpasswd=define
+ /bin/rm -f 5528.h
+ : see if endgrent_r exists
+ set endgrent_r d_endgrent_r
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=endgrent_r
++ var=d_endgrent_r
++ eval 'was=$d_endgrent_r'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set endgrent_r tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=endgrent_r
+++ case "$3" in
+++ tlook='^endgrent_r$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^endgrent_r$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'endgrent_r() NOT found.'
endgrent_r() NOT found.
++ case "$was" in
++ eval 'd_endgrent_r=$tu'
+++ d_endgrent_r=undef
+ case "$d_endgrent_r" in
+ endgrent_r_proto=0
+ : see if endhostent exists
+ set endhostent d_endhent
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=endhostent
++ var=d_endhent
++ eval 'was=$d_endhent'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set endhostent tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=endhostent
+++ case "$3" in
+++ tlook='^endhostent$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^endhostent$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'endhostent() found.'
endhostent() found.
++ case "$was" in
++ eval 'd_endhent=$td'
+++ d_endhent=define
+ : see if this is a netdb.h system
+ set netdb.h i_netdb
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'yyy=$@;' 'cont=true;' 'xxf="echo' '\"<\$1>' 'found.\"' '>&4";' case '$#' in '2)' 'xxnf="echo' '\"<\$1>' NOT 'found.\"' '>&4";;' '*)' 'xxnf="echo' '\"<\$1>' NOT found, '...\"' '>&4";;' 'esac;' case '$#' in '4)' 'instead=instead;;' '*)' 'instead="at' 'last";;' 'esac;' while '$test' '"$cont";' do 'xxx=`./findhdr' '$1`' 'var=$2;' eval '"was=\$$2";' if '$test' '"$xxx"' '&&' '$test' -r '"$xxx";' then eval '$xxf;' eval '"case' '\"\$$var\"' in '$undef)' . './whoa;' 'esac";' eval '"$var=\$td";' 'cont="";' else eval '$xxnf;' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' 'fi;' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' case '$#' in '0)' 'cont="";;' '2)' 'xxf="echo' '\"but' I found '<\$1>' '$instead.\"' '>&4";' 'xxnf="echo' '\"and' I did not find '<\$1>' 'either.\"' '>&4";;' '*)' 'xxf="echo' '\"but' I found '<\$1\>' 'instead.\"' '>&4";' 'xxnf="echo' '\"there' is no '<\$1>,' '...\"' '>&4";;' 'esac;' 'done;' while '$test' '"$yyy";' do set '$yyy;' 'var=$2;' eval '"was=\$$2";' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' done
++ echo ' '
 
++ td=define
++ tu=undef
++ yyy='netdb.h i_netdb'
++ cont=true
++ xxf='echo "<$1> found." >&4'
++ case $# in
++ xxnf='echo "<$1> NOT found." >&4'
++ case $# in
++ instead='at last'
++ test true
+++ ./findhdr netdb.h
++ xxx=/usr/include/netdb.h
++ var=i_netdb
++ eval 'was=$i_netdb'
+++ was=
++ test /usr/include/netdb.h
++ test -r /usr/include/netdb.h
++ eval echo '"<$1>' 'found."' '>&4'
+++ echo '<netdb.h> found.'
<netdb.h> found.
++ eval 'case "$i_netdb" in undef) . ./whoa; esac'
+++ case "$i_netdb" in
++ eval 'i_netdb=$td'
+++ i_netdb=define
++ cont=
++ set netdb.h i_netdb
++ shift
++ shift
++ yyy=
++ case $# in
++ cont=
++ test ''
++ test ''
+ : see if endhostent_r exists
+ set endhostent_r d_endhostent_r
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=endhostent_r
++ var=d_endhostent_r
++ eval 'was=$d_endhostent_r'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set endhostent_r tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=endhostent_r
+++ case "$3" in
+++ tlook='^endhostent_r$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^endhostent_r$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'endhostent_r() NOT found.'
endhostent_r() NOT found.
++ case "$was" in
++ eval 'd_endhostent_r=$tu'
+++ d_endhostent_r=undef
+ case "$d_endhostent_r" in
+ endhostent_r_proto=0
+ : see if endnetent exists
+ set endnetent d_endnent
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=endnetent
++ var=d_endnent
++ eval 'was=$d_endnent'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set endnetent tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=endnetent
+++ case "$3" in
+++ tlook='^endnetent$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^endnetent$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'endnetent() NOT found.'
endnetent() NOT found.
++ case "$was" in
++ eval 'd_endnent=$tu'
+++ d_endnent=undef
+ : see if endnetent_r exists
+ set endnetent_r d_endnetent_r
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=endnetent_r
++ var=d_endnetent_r
++ eval 'was=$d_endnetent_r'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set endnetent_r tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=endnetent_r
+++ case "$3" in
+++ tlook='^endnetent_r$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^endnetent_r$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'endnetent_r() NOT found.'
endnetent_r() NOT found.
++ case "$was" in
++ eval 'd_endnetent_r=$tu'
+++ d_endnetent_r=undef
+ case "$d_endnetent_r" in
+ endnetent_r_proto=0
+ : see if endprotoent exists
+ set endprotoent d_endpent
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=endprotoent
++ var=d_endpent
++ eval 'was=$d_endpent'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set endprotoent tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=endprotoent
+++ case "$3" in
+++ tlook='^endprotoent$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^endprotoent$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'endprotoent() NOT found.'
endprotoent() NOT found.
++ case "$was" in
++ eval 'd_endpent=$tu'
+++ d_endpent=undef
+ : see if endprotoent_r exists
+ set endprotoent_r d_endprotoent_r
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=endprotoent_r
++ var=d_endprotoent_r
++ eval 'was=$d_endprotoent_r'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set endprotoent_r tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=endprotoent_r
+++ case "$3" in
+++ tlook='^endprotoent_r$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^endprotoent_r$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'endprotoent_r() NOT found.'
endprotoent_r() NOT found.
++ case "$was" in
++ eval 'd_endprotoent_r=$tu'
+++ d_endprotoent_r=undef
+ case "$d_endprotoent_r" in
+ endprotoent_r_proto=0
+ : see if endpwent exists
+ set endpwent d_endpwent
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=endpwent
++ var=d_endpwent
++ eval 'was=$d_endpwent'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set endpwent tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=endpwent
+++ case "$3" in
+++ tlook='^endpwent$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^endpwent$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'endpwent() found.'
endpwent() found.
++ case "$was" in
++ eval 'd_endpwent=$td'
+++ d_endpwent=define
+ : see if this is a pwd.h system
+ set pwd.h i_pwd
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'yyy=$@;' 'cont=true;' 'xxf="echo' '\"<\$1>' 'found.\"' '>&4";' case '$#' in '2)' 'xxnf="echo' '\"<\$1>' NOT 'found.\"' '>&4";;' '*)' 'xxnf="echo' '\"<\$1>' NOT found, '...\"' '>&4";;' 'esac;' case '$#' in '4)' 'instead=instead;;' '*)' 'instead="at' 'last";;' 'esac;' while '$test' '"$cont";' do 'xxx=`./findhdr' '$1`' 'var=$2;' eval '"was=\$$2";' if '$test' '"$xxx"' '&&' '$test' -r '"$xxx";' then eval '$xxf;' eval '"case' '\"\$$var\"' in '$undef)' . './whoa;' 'esac";' eval '"$var=\$td";' 'cont="";' else eval '$xxnf;' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' 'fi;' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' case '$#' in '0)' 'cont="";;' '2)' 'xxf="echo' '\"but' I found '<\$1>' '$instead.\"' '>&4";' 'xxnf="echo' '\"and' I did not find '<\$1>' 'either.\"' '>&4";;' '*)' 'xxf="echo' '\"but' I found '<\$1\>' 'instead.\"' '>&4";' 'xxnf="echo' '\"there' is no '<\$1>,' '...\"' '>&4";;' 'esac;' 'done;' while '$test' '"$yyy";' do set '$yyy;' 'var=$2;' eval '"was=\$$2";' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' done
++ echo ' '
 
++ td=define
++ tu=undef
++ yyy='pwd.h i_pwd'
++ cont=true
++ xxf='echo "<$1> found." >&4'
++ case $# in
++ xxnf='echo "<$1> NOT found." >&4'
++ case $# in
++ instead='at last'
++ test true
+++ ./findhdr pwd.h
++ xxx=/usr/include/pwd.h
++ var=i_pwd
++ eval 'was=$i_pwd'
+++ was=
++ test /usr/include/pwd.h
++ test -r /usr/include/pwd.h
++ eval echo '"<$1>' 'found."' '>&4'
+++ echo '<pwd.h> found.'
<pwd.h> found.
++ eval 'case "$i_pwd" in undef) . ./whoa; esac'
+++ case "$i_pwd" in
++ eval 'i_pwd=$td'
+++ i_pwd=define
++ cont=
++ set pwd.h i_pwd
++ shift
++ shift
++ yyy=
++ case $# in
++ cont=
++ test ''
++ test ''
+ case "$i_pwd" in
++ ./findhdr pwd.h
+ xxx=/usr/include/pwd.h
+ gcc -E -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -
+ grep pw_quota 5528.h
+ val=undef
+ set d_pwquota
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=d_pwquota
++ eval 'was=$d_pwquota'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval d_pwquota=undef
+++ d_pwquota=undef
+ grep pw_age 5528.h
+ val=undef
+ set d_pwage
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=d_pwage
++ eval 'was=$d_pwage'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval d_pwage=undef
+++ d_pwage=undef
+ grep pw_change 5528.h
+ val=undef
+ set d_pwchange
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=d_pwchange
++ eval 'was=$d_pwchange'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval d_pwchange=undef
+++ d_pwchange=undef
+ grep pw_class 5528.h
+ val=undef
+ set d_pwclass
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=d_pwclass
++ eval 'was=$d_pwclass'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval d_pwclass=undef
+++ d_pwclass=undef
+ grep pw_expire 5528.h
+ val=undef
+ set d_pwexpire
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=d_pwexpire
++ eval 'was=$d_pwexpire'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval d_pwexpire=undef
+++ d_pwexpire=undef
+ grep pw_comment 5528.h
+ val=define
+ set d_pwcomment
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=d_pwcomment
++ eval 'was=$d_pwcomment'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval d_pwcomment=define
+++ d_pwcomment=define
+ grep pw_gecos 5528.h
+ val=define
+ set d_pwgecos
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=d_pwgecos
++ eval 'was=$d_pwgecos'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval d_pwgecos=define
+++ d_pwgecos=define
+ grep pw_passwd 5528.h
+ val=define
+ set d_pwpasswd
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=d_pwpasswd
++ eval 'was=$d_pwpasswd'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval d_pwpasswd=define
+++ d_pwpasswd=define
+ /bin/rm -f 5528.h
+ : see if endpwent_r exists
+ set endpwent_r d_endpwent_r
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=endpwent_r
++ var=d_endpwent_r
++ eval 'was=$d_endpwent_r'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set endpwent_r tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=endpwent_r
+++ case "$3" in
+++ tlook='^endpwent_r$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^endpwent_r$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'endpwent_r() NOT found.'
endpwent_r() NOT found.
++ case "$was" in
++ eval 'd_endpwent_r=$tu'
+++ d_endpwent_r=undef
+ case "$d_endpwent_r" in
+ endpwent_r_proto=0
+ : see if endservent exists
+ set endservent d_endsent
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=endservent
++ var=d_endsent
++ eval 'was=$d_endsent'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set endservent tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=endservent
+++ case "$3" in
+++ tlook='^endservent$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^endservent$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'endservent() NOT found.'
endservent() NOT found.
++ case "$was" in
++ eval 'd_endsent=$tu'
+++ d_endsent=undef
+ : see if endservent_r exists
+ set endservent_r d_endservent_r
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=endservent_r
++ var=d_endservent_r
++ eval 'was=$d_endservent_r'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set endservent_r tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=endservent_r
+++ case "$3" in
+++ tlook='^endservent_r$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^endservent_r$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'endservent_r() NOT found.'
endservent_r() NOT found.
++ case "$was" in
++ eval 'd_endservent_r=$tu'
+++ d_endservent_r=undef
+ case "$d_endservent_r" in
+ endservent_r_proto=0
+ : Locate the flags for 'open()'
+ echo ' '
 
+ /bin/cat
+ : check sys/file.h first to get FREAD on Sun
++ ./findhdr sys/file.h
+ test /usr/include/sys/file.h
+ set try -DI_SYS_FILE
+ eval 'mc_file=$1;' 'shift;' '$cc' -o '${mc_file}' '$optimize' '$ccflags' '$ldflags' '$*' '${mc_file}.c' '$libs' '>' /dev/null '2>&1;'
++ mc_file=try
++ shift
++ gcc -o try -O3 -fno-unit-at-a-time -s -mtune=pentium -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s -DI_SYS_FILE try.c -lgdbm -lcrypt -lgdbm_compat
+ h_sysfile=true
+ echo '<sys/file.h> defines the O_* constants...'
<sys/file.h> defines the O_* constants...
+ ./try
+ echo 'and you have the 3 argument form of open().'
and you have the 3 argument form of open().
+ val=define
+ set d_open3
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=d_open3
++ eval 'was=$d_open3'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval d_open3=define
+++ d_open3=define
+ /bin/rm -f try try.c try.exe
+ : see which of string.h or strings.h is needed
+ echo ' '
 
++ ./findhdr string.h
+ strings=/usr/include/string.h
+ test /usr/include/string.h
+ test -r /usr/include/string.h
+ echo 'Using <string.h> instead of <strings.h>.'
Using <string.h> instead of <strings.h>.
+ val=define
+ set i_string
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=i_string
++ eval 'was=$i_string'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval i_string=define
+++ i_string=define
+ case "$i_string" in
++ ./findhdr string.h
+ strings=/usr/include/string.h
+ : see if this is a sys/file.h system
+ val=
+ set sys/file.h val
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'yyy=$@;' 'cont=true;' 'xxf="echo' '\"<\$1>' 'found.\"' '>&4";' case '$#' in '2)' 'xxnf="echo' '\"<\$1>' NOT 'found.\"' '>&4";;' '*)' 'xxnf="echo' '\"<\$1>' NOT found, '...\"' '>&4";;' 'esac;' case '$#' in '4)' 'instead=instead;;' '*)' 'instead="at' 'last";;' 'esac;' while '$test' '"$cont";' do 'xxx=`./findhdr' '$1`' 'var=$2;' eval '"was=\$$2";' if '$test' '"$xxx"' '&&' '$test' -r '"$xxx";' then eval '$xxf;' eval '"case' '\"\$$var\"' in '$undef)' . './whoa;' 'esac";' eval '"$var=\$td";' 'cont="";' else eval '$xxnf;' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' 'fi;' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' case '$#' in '0)' 'cont="";;' '2)' 'xxf="echo' '\"but' I found '<\$1>' '$instead.\"' '>&4";' 'xxnf="echo' '\"and' I did not find '<\$1>' 'either.\"' '>&4";;' '*)' 'xxf="echo' '\"but' I found '<\$1\>' 'instead.\"' '>&4";' 'xxnf="echo' '\"there' is no '<\$1>,' '...\"' '>&4";;' 'esac;' 'done;' while '$test' '"$yyy";' do set '$yyy;' 'var=$2;' eval '"was=\$$2";' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' done
++ echo ' '
 
++ td=define
++ tu=undef
++ yyy='sys/file.h val'
++ cont=true
++ xxf='echo "<$1> found." >&4'
++ case $# in
++ xxnf='echo "<$1> NOT found." >&4'
++ case $# in
++ instead='at last'
++ test true
+++ ./findhdr sys/file.h
++ xxx=/usr/include/sys/file.h
++ var=val
++ eval 'was=$val'
+++ was=
++ test /usr/include/sys/file.h
++ test -r /usr/include/sys/file.h
++ eval echo '"<$1>' 'found."' '>&4'
+++ echo '<sys/file.h> found.'
<sys/file.h> found.
++ eval 'case "$val" in undef) . ./whoa; esac'
+++ case "$val" in
++ eval 'val=$td'
+++ val=define
++ cont=
++ set sys/file.h val
++ shift
++ shift
++ yyy=
++ case $# in
++ cont=
++ test ''
++ test ''
+ : do we need to include sys/file.h '?'
+ case "$val" in
+ echo ' '
 
+ true
+ val=define
+ echo 'We'\''ll be including <sys/file.h>.'
We'll be including <sys/file.h>.
+ set i_sysfile
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=i_sysfile
++ eval 'was=$i_sysfile'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval i_sysfile=define
+++ i_sysfile=define
+ : see if fcntl.h is there
+ val=
+ set fcntl.h val
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'yyy=$@;' 'cont=true;' 'xxf="echo' '\"<\$1>' 'found.\"' '>&4";' case '$#' in '2)' 'xxnf="echo' '\"<\$1>' NOT 'found.\"' '>&4";;' '*)' 'xxnf="echo' '\"<\$1>' NOT found, '...\"' '>&4";;' 'esac;' case '$#' in '4)' 'instead=instead;;' '*)' 'instead="at' 'last";;' 'esac;' while '$test' '"$cont";' do 'xxx=`./findhdr' '$1`' 'var=$2;' eval '"was=\$$2";' if '$test' '"$xxx"' '&&' '$test' -r '"$xxx";' then eval '$xxf;' eval '"case' '\"\$$var\"' in '$undef)' . './whoa;' 'esac";' eval '"$var=\$td";' 'cont="";' else eval '$xxnf;' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' 'fi;' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' case '$#' in '0)' 'cont="";;' '2)' 'xxf="echo' '\"but' I found '<\$1>' '$instead.\"' '>&4";' 'xxnf="echo' '\"and' I did not find '<\$1>' 'either.\"' '>&4";;' '*)' 'xxf="echo' '\"but' I found '<\$1\>' 'instead.\"' '>&4";' 'xxnf="echo' '\"there' is no '<\$1>,' '...\"' '>&4";;' 'esac;' 'done;' while '$test' '"$yyy";' do set '$yyy;' 'var=$2;' eval '"was=\$$2";' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' done
++ echo ' '
 
++ td=define
++ tu=undef
++ yyy='fcntl.h val'
++ cont=true
++ xxf='echo "<$1> found." >&4'
++ case $# in
++ xxnf='echo "<$1> NOT found." >&4'
++ case $# in
++ instead='at last'
++ test true
+++ ./findhdr fcntl.h
++ xxx=/usr/include/fcntl.h
++ var=val
++ eval 'was=$val'
+++ was=
++ test /usr/include/fcntl.h
++ test -r /usr/include/fcntl.h
++ eval echo '"<$1>' 'found."' '>&4'
+++ echo '<fcntl.h> found.'
<fcntl.h> found.
++ eval 'case "$val" in undef) . ./whoa; esac'
+++ case "$val" in
++ eval 'val=$td'
+++ val=define
++ cont=
++ set fcntl.h val
++ shift
++ shift
++ yyy=
++ case $# in
++ cont=
++ test ''
++ test ''
+ : see if we can include fcntl.h
+ case "$val" in
+ echo ' '
 
+ false
+ val=undef
+ true
+ echo 'We don'\''t need to include <fcntl.h> if we include <sys/file.h>.'
We don't need to include <fcntl.h> if we include <sys/file.h>.
+ set i_fcntl
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=i_fcntl
++ eval 'was=$i_fcntl'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval i_fcntl=undef
+++ i_fcntl=undef
+ : check for non-blocking I/O stuff
+ case "$h_sysfile" in
+ echo '#include <sys/file.h>'
+ echo ' '
 
+ echo 'Figuring out the flag used by open() for non-blocking I/O...'
Figuring out the flag used by open() for non-blocking I/O...
+ case "$o_nonblock" in
+ /bin/cat head.c
+ /bin/cat
+ set try
+ eval 'mc_file=$1;' 'shift;' '$cc' -o '${mc_file}' '$optimize' '$ccflags' '$ldflags' '$*' '${mc_file}.c' '$libs;'
++ mc_file=try
++ shift
++ gcc -o try -O3 -fno-unit-at-a-time -s -mtune=pentium -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s try.c -lgdbm -lcrypt -lgdbm_compat
++ ./try
+ o_nonblock=O_NONBLOCK
+ case "$o_nonblock" in
+ echo 'Seems like we can use O_NONBLOCK.'
Seems like we can use O_NONBLOCK.
+ /bin/rm -f try try.c try.exe .out core
+ echo ' '
 
+ echo 'Let'\''s see what value errno gets from read() on a O_NONBLOCK file...'
Let's see what value errno gets from read() on a O_NONBLOCK file...
+ case "$eagain" in
+ /bin/cat head.c
+ /bin/cat
+ /bin/cat
+ set try
+ eval 'mc_file=$1;' 'shift;' '$cc' -o '${mc_file}' '$optimize' '$ccflags' '$ldflags' '$*' '${mc_file}.c' '$libs;'
++ mc_file=try
++ shift
++ gcc -o try -O3 -fno-unit-at-a-time -s -mtune=pentium -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s try.c -lgdbm -lcrypt -lgdbm_compat
+ echo '#!/bin/sh'
+ echo ' ./try >try.out 2>try.ret 4>try.err || exit 4'
+ chmod +x mtry
+ ./mtry
+ case $? in
++ /bin/cat try.out
+ eagain=EAGAIN
++ /bin/cat try.ret
+ rd_nodata=-1
+ echo 'A read() system call with no data present returns -1.'
A read() system call with no data present returns -1.
+ case "$rd_nodata" in
+ case "$eagain" in
+ echo 'Your read() sets errno to EAGAIN when no data is available.'
Your read() sets errno to EAGAIN when no data is available.
++ /bin/cat try.err
+ status=0
+ case "$status" in
+ echo 'And it correctly returns 0 to signal EOF.'
And it correctly returns 0 to signal EOF.
+ val=define
+ test 0 = -1
+ set d_eofnblk
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=d_eofnblk
++ eval 'was=$d_eofnblk'
+++ was=define
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval d_eofnblk=define
+++ d_eofnblk=define
+ /bin/rm -f try try.c try.err try.exe try.out try.ret .out core head.c mtry
+ : see if _ptr and _cnt from stdio act std
+ echo ' '
 
++ ./findhdr stdio.h
+ grep _lbfsize /usr/include/stdio.h
+ echo '(Looks like you have stdio.h from BSD.)'
(Looks like you have stdio.h from BSD.)
+ case "$stdio_ptr" in
+ stdio_ptr='((fp)->_p)'
+ ptr_lval=define
+ case "$stdio_cnt" in
+ stdio_cnt='((fp)->_r)'
+ cnt_lval=define
+ case "$stdio_base" in
+ stdio_base='((fp)->_ub._base ? (fp)->_ub._base : (fp)->_bf._base)'
+ case "$stdio_bufsiz" in
+ stdio_bufsiz='((fp)->_ub._base ? (fp)->_ub._size : (fp)->_bf._size)'
+ : test whether _ptr and _cnt really work
+ echo 'Checking how std your stdio is...'
Checking how std your stdio is...
+ /bin/cat
+ val=undef
+ set try
+ eval 'mc_file=$1;' 'shift;' '$cc' -o '${mc_file}' '$optimize' '$ccflags' '$ldflags' '$*' '${mc_file}.c' '$libs' '>' /dev/null '2>&1;'
++ mc_file=try
++ shift
++ gcc -o try -O3 -fno-unit-at-a-time -s -mtune=pentium -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s try.c -lgdbm -lcrypt -lgdbm_compat
+ : try.c
+ ./try
+ echo 'Your stdio acts pretty std.'
Your stdio acts pretty std.
+ val=define
+ /bin/rm -f try.c try
+ case "$d_gnulibc" in
+ set d_stdstdio
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=d_stdstdio
++ eval 'was=$d_stdstdio'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval d_stdstdio=define
+++ d_stdstdio=define
+ : Can _ptr be used as an 'lvalue?'
+ case "$d_stdstdio$ptr_lval" in
+ val=define
+ set d_stdio_ptr_lval
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=d_stdio_ptr_lval
++ eval 'was=$d_stdio_ptr_lval'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval d_stdio_ptr_lval=define
+++ d_stdio_ptr_lval=define
+ : Can _cnt be used as an 'lvalue?'
+ case "$d_stdstdio$cnt_lval" in
+ val=define
+ set d_stdio_cnt_lval
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=d_stdio_cnt_lval
++ eval 'was=$d_stdio_cnt_lval'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval d_stdio_cnt_lval=define
+++ d_stdio_cnt_lval=define
+ : test whether setting _ptr sets _cnt as a side effect
+ d_stdio_ptr_lval_sets_cnt=undef
+ d_stdio_ptr_lval_nochange_cnt=undef
+ case "$d_stdio_ptr_lval$d_stdstdio" in
+ echo 'Checking to see what happens if we set the stdio ptr...'
Checking to see what happens if we set the stdio ptr...
+ /bin/cat
+ set try
+ eval 'mc_file=$1;' 'shift;' '$cc' -o '${mc_file}' '$optimize' '$ccflags' '$ldflags' '$*' '${mc_file}.c' '$libs' '>' /dev/null '2>&1;'
++ mc_file=try
++ shift
++ gcc -o try -O3 -fno-unit-at-a-time -s -mtune=pentium -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s try.c -lgdbm -lcrypt -lgdbm_compat
+ : try.c
+ case `$run ./try` in
++ ./try
+ echo 'Increasing ptr in your stdio leaves cnt unchanged.  Good.'
Increasing ptr in your stdio leaves cnt unchanged.  Good.
+ d_stdio_ptr_lval_nochange_cnt=define
+ /bin/rm -f try.c try
+ : see if _base is also standard
+ val=undef
+ case "$d_stdstdio" in
+ /bin/cat
+ set try
+ eval 'mc_file=$1;' 'shift;' '$cc' -o '${mc_file}' '$optimize' '$ccflags' '$ldflags' '$*' '${mc_file}.c' '$libs' '>' /dev/null '2>&1;'
++ mc_file=try
++ shift
++ gcc -o try -O3 -fno-unit-at-a-time -s -mtune=pentium -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s try.c -lgdbm -lcrypt -lgdbm_compat
+ : try.c
+ ./try
+ echo 'And its _base field acts std.'
And its _base field acts std.
+ val=define
+ /bin/rm -f try.c try
+ set d_stdiobase
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=d_stdiobase
++ eval 'was=$d_stdiobase'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval d_stdiobase=define
+++ d_stdiobase=define
+ : see if fast_stdio exists
+ val=undef
+ case "$d_stdstdio:$d_stdio_ptr_lval" in
+ case "$d_stdio_cnt_lval$d_stdio_ptr_lval_sets_cnt" in
+ echo 'You seem to have '\''fast stdio'\'' to directly manipulate the stdio buffers.'
You seem to have 'fast stdio' to directly manipulate the stdio buffers.
+ val=define
+ set d_faststdio
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=d_faststdio
++ eval 'was=$d_faststdio'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval d_faststdio=define
+++ d_faststdio=define
+ : see if fchdir exists
+ set fchdir d_fchdir
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=fchdir
++ var=d_fchdir
++ eval 'was=$d_fchdir'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set fchdir tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=fchdir
+++ case "$3" in
+++ tlook='^fchdir$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^fchdir$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'fchdir() found.'
fchdir() found.
++ case "$was" in
++ eval 'd_fchdir=$td'
+++ d_fchdir=define
+ : see if fchmod exists
+ set fchmod d_fchmod
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=fchmod
++ var=d_fchmod
++ eval 'was=$d_fchmod'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set fchmod tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=fchmod
+++ case "$3" in
+++ tlook='^fchmod$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^fchmod$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'fchmod() found.'
fchmod() found.
++ case "$was" in
++ eval 'd_fchmod=$td'
+++ d_fchmod=define
+ : see if fchown exists
+ set fchown d_fchown
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=fchown
++ var=d_fchown
++ eval 'was=$d_fchown'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set fchown tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=fchown
+++ case "$3" in
+++ tlook='^fchown$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^fchown$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'fchown() found.'
fchown() found.
++ case "$was" in
++ eval 'd_fchown=$td'
+++ d_fchown=define
+ : see if this is an fcntl system
+ set fcntl d_fcntl
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=fcntl
++ var=d_fcntl
++ eval 'was=$d_fcntl'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set fcntl tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=fcntl
+++ case "$3" in
+++ tlook='^fcntl$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^fcntl$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'fcntl() found.'
fcntl() found.
++ case "$was" in
++ eval 'd_fcntl=$td'
+++ d_fcntl=define
+ echo ' '
 
+ : See if fcntl-based locking works.
+ /bin/cat
+ echo 'Checking if fcntl-based file locking works... '
Checking if fcntl-based file locking works... 
+ case "$d_fcntl" in
+ set try
+ eval 'mc_file=$1;' 'shift;' '$cc' -o '${mc_file}' '$optimize' '$ccflags' '$ldflags' '$*' '${mc_file}.c' '$libs;'
++ mc_file=try
++ shift
++ gcc -o try -O3 -fno-unit-at-a-time -s -mtune=pentium -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s try.c -lgdbm -lcrypt -lgdbm_compat
+ ./try
+ echo 'Yes, it seems to work.'
Yes, it seems to work.
+ val=define
+ set d_fcntl_can_lock
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=d_fcntl_can_lock
++ eval 'was=$d_fcntl_can_lock'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval d_fcntl_can_lock=define
+++ d_fcntl_can_lock=define
+ /bin/rm -f try.c try.exe trygcc
+ : check for fd_set items
+ /bin/cat

Checking to see how well your C compiler handles fd_set and friends ...
+ /bin/cat
+ set try -DTRYBITS
+ eval 'mc_file=$1;' 'shift;' '$cc' -o '${mc_file}' '$optimize' '$ccflags' '$ldflags' '$*' '${mc_file}.c' '$libs' '>' /dev/null '2>&1;'
++ mc_file=try
++ shift
++ gcc -o try -O3 -fno-unit-at-a-time -s -mtune=pentium -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s -DTRYBITS try.c -lgdbm -lcrypt -lgdbm_compat
+ d_fds_bits=define
+ d_fd_set=define
+ echo 'Well, your system knows about the normal fd_set typedef...'
Well, your system knows about the normal fd_set typedef...
+ ./try
+ echo 'and you have the normal fd_set macros (just as I'\''d expect).'
and you have the normal fd_set macros (just as I'd expect).
+ d_fd_macros=define
+ /bin/rm -f try try.c try.exe
+ : see if fgetpos exists
+ set fgetpos d_fgetpos
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=fgetpos
++ var=d_fgetpos
++ eval 'was=$d_fgetpos'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set fgetpos tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=fgetpos
+++ case "$3" in
+++ tlook='^fgetpos$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^fgetpos$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'fgetpos() found.'
fgetpos() found.
++ case "$was" in
++ eval 'd_fgetpos=$td'
+++ d_fgetpos=define
+ : see if finite exists
+ set finite d_finite
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=finite
++ var=d_finite
++ eval 'was=$d_finite'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set finite tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=finite
+++ case "$3" in
+++ tlook='^finite$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^finite$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'finite() found.'
finite() found.
++ case "$was" in
++ eval 'd_finite=$td'
+++ d_finite=define
+ : see if finitel exists
+ set finitel d_finitel
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=finitel
++ var=d_finitel
++ eval 'was=$d_finitel'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set finitel tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=finitel
+++ case "$3" in
+++ tlook='^finitel$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^finitel$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'finitel() NOT found.'
finitel() NOT found.
++ case "$was" in
++ eval 'd_finitel=$tu'
+++ d_finitel=undef
+ : see if flock exists
+ set flock d_flock
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=flock
++ var=d_flock
++ eval 'was=$d_flock'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set flock tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=flock
+++ case "$3" in
+++ tlook='^flock$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^flock$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'flock() NOT found.'
flock() NOT found.
++ case "$was" in
++ eval 'd_flock=$tu'
+++ d_flock=undef
+ : see if prototype for flock is available
+ echo ' '
 
+ set d_flockproto flock define sys/file.h
+ eval 'varname=$1;' 'func=$2;' 'shift;' 'shift;' while '$test' '$#' -ge '2;' do case '"$1"' in '$define)' echo '"#include' '<$2>";;' esac ';' shift '2;' done '>' 'try.c;' '$cppstdin' '$cppflags' '$cppminus' '<' try.c '>' tryout.c '2>/dev/null;' if '$contains' '"$func.*("' tryout.c '>/dev/null' '2>&1;' then echo '"$func()' prototype 'found.";' 'val="$define";' else echo '"$func()' prototype NOT 'found.";' 'val="$undef";' 'fi;' set '$varname;' eval '$setvar;' '$rm' -f try.c tryout.c
++ varname=d_flockproto
++ func=flock
++ shift
++ shift
++ test 2 -ge 2
++ case "$1" in
++ echo '#include <sys/file.h>'
++ shift 2
++ test 0 -ge 2
++ gcc -E -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -
++ grep 'flock.*(' tryout.c
++ echo 'flock() prototype NOT found.'
flock() prototype NOT found.
++ val=undef
++ set d_flockproto
++ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
+++ var=d_flockproto
+++ eval 'was=$d_flockproto'
++++ was=
+++ td=define
+++ tu=undef
+++ case "$val$was" in
+++ eval d_flockproto=undef
++++ d_flockproto=undef
++ /bin/rm -f try.c tryout.c
+ : see if fork exists
+ set fork d_fork
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=fork
++ var=d_fork
++ eval 'was=$d_fork'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set fork tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=fork
+++ case "$3" in
+++ tlook='^fork$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^fork$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'fork() found.'
fork() found.
++ case "$was" in
++ eval 'd_fork=$td'
+++ d_fork=define
+ : see if fp_class exists
+ set fp_class d_fp_class
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=fp_class
++ var=d_fp_class
++ eval 'was=$d_fp_class'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set fp_class tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=fp_class
+++ case "$3" in
+++ tlook='^fp_class$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^fp_class$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'fp_class() NOT found.'
fp_class() NOT found.
++ case "$was" in
++ eval 'd_fp_class=$tu'
+++ d_fp_class=undef
+ : see if pathconf exists
+ set pathconf d_pathconf
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=pathconf
++ var=d_pathconf
++ eval 'was=$d_pathconf'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set pathconf tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=pathconf
+++ case "$3" in
+++ tlook='^pathconf$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^pathconf$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'pathconf() found.'
pathconf() found.
++ case "$was" in
++ eval 'd_pathconf=$td'
+++ d_pathconf=define
+ : see if fpathconf exists
+ set fpathconf d_fpathconf
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=fpathconf
++ var=d_fpathconf
++ eval 'was=$d_fpathconf'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set fpathconf tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=fpathconf
+++ case "$3" in
+++ tlook='^fpathconf$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^fpathconf$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'fpathconf() found.'
fpathconf() found.
++ case "$was" in
++ eval 'd_fpathconf=$td'
+++ d_fpathconf=define
+ : see if fpclass exists
+ set fpclass d_fpclass
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=fpclass
++ var=d_fpclass
++ eval 'was=$d_fpclass'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set fpclass tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=fpclass
+++ case "$3" in
+++ tlook='^fpclass$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^fpclass$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'fpclass() NOT found.'
fpclass() NOT found.
++ case "$was" in
++ eval 'd_fpclass=$tu'
+++ d_fpclass=undef
+ : see if fpclassify exists
+ set fpclassify d_fpclassify
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=fpclassify
++ var=d_fpclassify
++ eval 'was=$d_fpclassify'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set fpclassify tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=fpclassify
+++ case "$3" in
+++ tlook='^fpclassify$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^fpclassify$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'fpclassify() NOT found.'
fpclassify() NOT found.
++ case "$was" in
++ eval 'd_fpclassify=$tu'
+++ d_fpclassify=undef
+ : see if fpclassl exists
+ set fpclassl d_fpclassl
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=fpclassl
++ var=d_fpclassl
++ eval 'was=$d_fpclassl'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set fpclassl tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=fpclassl
+++ case "$3" in
+++ tlook='^fpclassl$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^fpclassl$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'fpclassl() NOT found.'
fpclassl() NOT found.
++ case "$was" in
++ eval 'd_fpclassl=$tu'
+++ d_fpclassl=undef
+ : check for fpos64_t
+ echo ' '
 
+ echo 'Checking to see if you have fpos64_t...'
Checking to see if you have fpos64_t...
+ /bin/cat
+ set try
+ eval 'mc_file=$1;' 'shift;' '$cc' -o '${mc_file}' '$optimize' '$ccflags' '$ldflags' '$*' '${mc_file}.c' '$libs' '>' /dev/null '2>&1;'
++ mc_file=try
++ shift
++ gcc -o try -O3 -fno-unit-at-a-time -s -mtune=pentium -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s try.c -lgdbm -lcrypt -lgdbm_compat
+ val=undef
+ echo 'You do not have fpos64_t.'
You do not have fpos64_t.
+ case "$fpossize" in
+ /bin/rm -f try.c try
+ set d_fpos64_t
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=d_fpos64_t
++ eval 'was=$d_fpos64_t'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval d_fpos64_t=undef
+++ d_fpos64_t=undef
+ : see if frexpl exists
+ set frexpl d_frexpl
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=frexpl
++ var=d_frexpl
++ eval 'was=$d_frexpl'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set frexpl tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=frexpl
+++ case "$3" in
+++ tlook='^frexpl$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^frexpl$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'frexpl() NOT found.'
frexpl() NOT found.
++ case "$was" in
++ eval 'd_frexpl=$tu'
+++ d_frexpl=undef
+ : see if this is a sys/param system
+ set sys/param.h i_sysparam
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'yyy=$@;' 'cont=true;' 'xxf="echo' '\"<\$1>' 'found.\"' '>&4";' case '$#' in '2)' 'xxnf="echo' '\"<\$1>' NOT 'found.\"' '>&4";;' '*)' 'xxnf="echo' '\"<\$1>' NOT found, '...\"' '>&4";;' 'esac;' case '$#' in '4)' 'instead=instead;;' '*)' 'instead="at' 'last";;' 'esac;' while '$test' '"$cont";' do 'xxx=`./findhdr' '$1`' 'var=$2;' eval '"was=\$$2";' if '$test' '"$xxx"' '&&' '$test' -r '"$xxx";' then eval '$xxf;' eval '"case' '\"\$$var\"' in '$undef)' . './whoa;' 'esac";' eval '"$var=\$td";' 'cont="";' else eval '$xxnf;' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' 'fi;' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' case '$#' in '0)' 'cont="";;' '2)' 'xxf="echo' '\"but' I found '<\$1>' '$instead.\"' '>&4";' 'xxnf="echo' '\"and' I did not find '<\$1>' 'either.\"' '>&4";;' '*)' 'xxf="echo' '\"but' I found '<\$1\>' 'instead.\"' '>&4";' 'xxnf="echo' '\"there' is no '<\$1>,' '...\"' '>&4";;' 'esac;' 'done;' while '$test' '"$yyy";' do set '$yyy;' 'var=$2;' eval '"was=\$$2";' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' done
++ echo ' '
 
++ td=define
++ tu=undef
++ yyy='sys/param.h i_sysparam'
++ cont=true
++ xxf='echo "<$1> found." >&4'
++ case $# in
++ xxnf='echo "<$1> NOT found." >&4'
++ case $# in
++ instead='at last'
++ test true
+++ ./findhdr sys/param.h
++ xxx=/usr/include/sys/param.h
++ var=i_sysparam
++ eval 'was=$i_sysparam'
+++ was=
++ test /usr/include/sys/param.h
++ test -r /usr/include/sys/param.h
++ eval echo '"<$1>' 'found."' '>&4'
+++ echo '<sys/param.h> found.'
<sys/param.h> found.
++ eval 'case "$i_sysparam" in undef) . ./whoa; esac'
+++ case "$i_sysparam" in
++ eval 'i_sysparam=$td'
+++ i_sysparam=define
++ cont=
++ set sys/param.h i_sysparam
++ shift
++ shift
++ yyy=
++ case $# in
++ cont=
++ test ''
++ test ''
+ : see if this is a sys/mount.h system
+ set sys/mount.h i_sysmount
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'yyy=$@;' 'cont=true;' 'xxf="echo' '\"<\$1>' 'found.\"' '>&4";' case '$#' in '2)' 'xxnf="echo' '\"<\$1>' NOT 'found.\"' '>&4";;' '*)' 'xxnf="echo' '\"<\$1>' NOT found, '...\"' '>&4";;' 'esac;' case '$#' in '4)' 'instead=instead;;' '*)' 'instead="at' 'last";;' 'esac;' while '$test' '"$cont";' do 'xxx=`./findhdr' '$1`' 'var=$2;' eval '"was=\$$2";' if '$test' '"$xxx"' '&&' '$test' -r '"$xxx";' then eval '$xxf;' eval '"case' '\"\$$var\"' in '$undef)' . './whoa;' 'esac";' eval '"$var=\$td";' 'cont="";' else eval '$xxnf;' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' 'fi;' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' case '$#' in '0)' 'cont="";;' '2)' 'xxf="echo' '\"but' I found '<\$1>' '$instead.\"' '>&4";' 'xxnf="echo' '\"and' I did not find '<\$1>' 'either.\"' '>&4";;' '*)' 'xxf="echo' '\"but' I found '<\$1\>' 'instead.\"' '>&4";' 'xxnf="echo' '\"there' is no '<\$1>,' '...\"' '>&4";;' 'esac;' 'done;' while '$test' '"$yyy";' do set '$yyy;' 'var=$2;' eval '"was=\$$2";' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' done
++ echo ' '
 
++ td=define
++ tu=undef
++ yyy='sys/mount.h i_sysmount'
++ cont=true
++ xxf='echo "<$1> found." >&4'
++ case $# in
++ xxnf='echo "<$1> NOT found." >&4'
++ case $# in
++ instead='at last'
++ test true
+++ ./findhdr sys/mount.h
++ xxx=/usr/include/sys/mount.h
++ var=i_sysmount
++ eval 'was=$i_sysmount'
+++ was=
++ test /usr/include/sys/mount.h
++ test -r /usr/include/sys/mount.h
++ eval echo '"<$1>' 'found."' '>&4'
+++ echo '<sys/mount.h> found.'
<sys/mount.h> found.
++ eval 'case "$i_sysmount" in undef) . ./whoa; esac'
+++ case "$i_sysmount" in
++ eval 'i_sysmount=$td'
+++ i_sysmount=define
++ cont=
++ set sys/mount.h i_sysmount
++ shift
++ shift
++ yyy=
++ case $# in
++ cont=
++ test ''
++ test ''
+ echo ' '
 
+ echo 'Checking to see if your system supports struct fs_data...'
Checking to see if your system supports struct fs_data...
+ set d_fs_data_s fs_data define sys/types.h define sys/param.h define sys/mount.h
+ eval 'varname=$1;' 'struct=$2;' 'shift;' 'shift;' while '$test' '$#' -ge '2;' do case '"$1"' in '$define)' echo '"#include' '<$2>";;' esac ';' shift '2;' done '>' 'try.c;' echo '"int' main '()' '{' struct '$struct' 'foo;' '}"' '>>' 'try.c;' set 'try;' if eval '$compile;' then 'val="$define";' else 'val="$undef";' 'fi;' set '$varname;' eval '$setvar;' '$rm' -f try.c try.o
++ varname=d_fs_data_s
++ struct=fs_data
++ shift
++ shift
++ test 6 -ge 2
++ case "$1" in
++ echo '#include <sys/types.h>'
++ shift 2
++ test 4 -ge 2
++ case "$1" in
++ echo '#include <sys/param.h>'
++ shift 2
++ test 2 -ge 2
++ case "$1" in
++ echo '#include <sys/mount.h>'
++ shift 2
++ test 0 -ge 2
++ echo 'int main () { struct fs_data foo; }'
++ set try
++ eval 'mc_file=$1;' 'shift;' '$cc' -o '${mc_file}' '$optimize' '$ccflags' '$ldflags' '$*' '${mc_file}.c' '$libs' '>' /dev/null '2>&1;'
+++ mc_file=try
+++ shift
+++ gcc -o try -O3 -fno-unit-at-a-time -s -mtune=pentium -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s try.c -lgdbm -lcrypt -lgdbm_compat
++ val=undef
++ set d_fs_data_s
++ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
+++ var=d_fs_data_s
+++ eval 'was=$d_fs_data_s'
++++ was=
+++ td=define
+++ tu=undef
+++ case "$val$was" in
+++ eval d_fs_data_s=undef
++++ d_fs_data_s=undef
++ /bin/rm -f try.c try.o
+ case "$d_fs_data_s" in
+ echo 'No, it doesn'\''t.'
No, it doesn't.
+ : see if fseeko exists
+ set fseeko d_fseeko
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=fseeko
++ var=d_fseeko
++ eval 'was=$d_fseeko'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set fseeko tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=fseeko
+++ case "$3" in
+++ tlook='^fseeko$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^fseeko$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'fseeko() NOT found.'
fseeko() NOT found.
++ case "$was" in
++ eval 'd_fseeko=$tu'
+++ d_fseeko=undef
+ case "$longsize" in
+ : see if fsetpos exists
+ set fsetpos d_fsetpos
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=fsetpos
++ var=d_fsetpos
++ eval 'was=$d_fsetpos'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set fsetpos tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=fsetpos
+++ case "$3" in
+++ tlook='^fsetpos$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^fsetpos$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'fsetpos() found.'
fsetpos() found.
++ case "$was" in
++ eval 'd_fsetpos=$td'
+++ d_fsetpos=define
+ : see if fstatfs exists
+ set fstatfs d_fstatfs
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=fstatfs
++ var=d_fstatfs
++ eval 'was=$d_fstatfs'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set fstatfs tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=fstatfs
+++ case "$3" in
+++ tlook='^fstatfs$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^fstatfs$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'fstatfs() found.'
fstatfs() found.
++ case "$was" in
++ eval 'd_fstatfs=$td'
+++ d_fstatfs=define
+ : see if statvfs exists
+ set statvfs d_statvfs
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=statvfs
++ var=d_statvfs
++ eval 'was=$d_statvfs'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set statvfs tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=statvfs
+++ case "$3" in
+++ tlook='^statvfs$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^statvfs$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'statvfs() NOT found.'
statvfs() NOT found.
++ case "$was" in
++ eval 'd_statvfs=$tu'
+++ d_statvfs=undef
+ : see if fstatvfs exists
+ set fstatvfs d_fstatvfs
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=fstatvfs
++ var=d_fstatvfs
++ eval 'was=$d_fstatvfs'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set fstatvfs tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=fstatvfs
+++ case "$3" in
+++ tlook='^fstatvfs$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^fstatvfs$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'fstatvfs() NOT found.'
fstatvfs() NOT found.
++ case "$was" in
++ eval 'd_fstatvfs=$tu'
+++ d_fstatvfs=undef
+ : see if fsync exists
+ set fsync d_fsync
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=fsync
++ var=d_fsync
++ eval 'was=$d_fsync'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set fsync tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=fsync
+++ case "$3" in
+++ tlook='^fsync$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^fsync$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'fsync() found.'
fsync() found.
++ case "$was" in
++ eval 'd_fsync=$td'
+++ d_fsync=define
+ : see if ftello exists
+ set ftello d_ftello
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=ftello
++ var=d_ftello
++ eval 'was=$d_ftello'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set ftello tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=ftello
+++ case "$3" in
+++ tlook='^ftello$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^ftello$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'ftello() NOT found.'
ftello() NOT found.
++ case "$was" in
++ eval 'd_ftello=$tu'
+++ d_ftello=undef
+ case "$longsize" in
+ d_futimes=undef
+ : check for a working futimes
+ echo ' '
 
+ echo 'Checking for a working futimes()'
Checking for a working futimes()
+ /bin/cat
+ set try
+ eval 'mc_file=$1;' 'shift;' '$cc' -o '${mc_file}' '$optimize' '$ccflags' '$ldflags' '$*' '${mc_file}.c' '$libs' '>' /dev/null '2>&1;'
++ mc_file=try
++ shift
++ gcc -o try -O3 -fno-unit-at-a-time -s -mtune=pentium -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s try.c -lgdbm -lcrypt -lgdbm_compat
+ echo 'No, it does not (probably harmless)\n'
No, it does not (probably harmless)\n
+ /bin/rm -f try.c try core 'core.try.*'
+ : see if getcwd exists
+ set getcwd d_getcwd
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=getcwd
++ var=d_getcwd
++ eval 'was=$d_getcwd'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set getcwd tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=getcwd
+++ case "$3" in
+++ tlook='^getcwd$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^getcwd$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'getcwd() found.'
getcwd() found.
++ case "$was" in
++ eval 'd_getcwd=$td'
+++ d_getcwd=define
+ : see if getespwnam exists
+ set getespwnam d_getespwnam
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=getespwnam
++ var=d_getespwnam
++ eval 'was=$d_getespwnam'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set getespwnam tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=getespwnam
+++ case "$3" in
+++ tlook='^getespwnam$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^getespwnam$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'getespwnam() NOT found.'
getespwnam() NOT found.
++ case "$was" in
++ eval 'd_getespwnam=$tu'
+++ d_getespwnam=undef
+ : see if getfsstat exists
+ set getfsstat d_getfsstat
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=getfsstat
++ var=d_getfsstat
++ eval 'was=$d_getfsstat'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set getfsstat tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=getfsstat
+++ case "$3" in
+++ tlook='^getfsstat$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^getfsstat$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'getfsstat() NOT found.'
getfsstat() NOT found.
++ case "$was" in
++ eval 'd_getfsstat=$tu'
+++ d_getfsstat=undef
+ : see if getgrent exists
+ set getgrent d_getgrent
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=getgrent
++ var=d_getgrent
++ eval 'was=$d_getgrent'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set getgrent tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=getgrent
+++ case "$3" in
+++ tlook='^getgrent$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^getgrent$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'getgrent() found.'
getgrent() found.
++ case "$was" in
++ eval 'd_getgrent=$td'
+++ d_getgrent=define
+ : see if getgrent_r exists
+ set getgrent_r d_getgrent_r
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=getgrent_r
++ var=d_getgrent_r
++ eval 'was=$d_getgrent_r'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set getgrent_r tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=getgrent_r
+++ case "$3" in
+++ tlook='^getgrent_r$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^getgrent_r$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'getgrent_r() NOT found.'
getgrent_r() NOT found.
++ case "$was" in
++ eval 'd_getgrent_r=$tu'
+++ d_getgrent_r=undef
+ case "$d_getgrent_r" in
+ getgrent_r_proto=0
+ : see if getgrgid_r exists
+ set getgrgid_r d_getgrgid_r
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=getgrgid_r
++ var=d_getgrgid_r
++ eval 'was=$d_getgrgid_r'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set getgrgid_r tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=getgrgid_r
+++ case "$3" in
+++ tlook='^getgrgid_r$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^getgrgid_r$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'getgrgid_r() NOT found.'
getgrgid_r() NOT found.
++ case "$was" in
++ eval 'd_getgrgid_r=$tu'
+++ d_getgrgid_r=undef
+ case "$d_getgrgid_r" in
+ getgrgid_r_proto=0
+ : see if getgrnam_r exists
+ set getgrnam_r d_getgrnam_r
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=getgrnam_r
++ var=d_getgrnam_r
++ eval 'was=$d_getgrnam_r'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set getgrnam_r tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=getgrnam_r
+++ case "$3" in
+++ tlook='^getgrnam_r$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^getgrnam_r$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'getgrnam_r() NOT found.'
getgrnam_r() NOT found.
++ case "$was" in
++ eval 'd_getgrnam_r=$tu'
+++ d_getgrnam_r=undef
+ case "$d_getgrnam_r" in
+ getgrnam_r_proto=0
+ : see if gethostbyaddr exists
+ set gethostbyaddr d_gethbyaddr
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=gethostbyaddr
++ var=d_gethbyaddr
++ eval 'was=$d_gethbyaddr'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set gethostbyaddr tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=gethostbyaddr
+++ case "$3" in
+++ tlook='^gethostbyaddr$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^gethostbyaddr$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'gethostbyaddr() found.'
gethostbyaddr() found.
++ case "$was" in
++ eval 'd_gethbyaddr=$td'
+++ d_gethbyaddr=define
+ : see if gethostbyname exists
+ set gethostbyname d_gethbyname
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=gethostbyname
++ var=d_gethbyname
++ eval 'was=$d_gethbyname'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set gethostbyname tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=gethostbyname
+++ case "$3" in
+++ tlook='^gethostbyname$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^gethostbyname$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'gethostbyname() found.'
gethostbyname() found.
++ case "$was" in
++ eval 'd_gethbyname=$td'
+++ d_gethbyname=define
+ : see if gethostent exists
+ set gethostent d_gethent
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=gethostent
++ var=d_gethent
++ eval 'was=$d_gethent'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set gethostent tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=gethostent
+++ case "$3" in
+++ tlook='^gethostent$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^gethostent$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'gethostent() NOT found.'
gethostent() NOT found.
++ case "$was" in
++ eval 'd_gethent=$tu'
+++ d_gethent=undef
+ : see how we will look up host name
+ echo ' '
 
+ call=
+ set gethostname val -f d_gethname
+ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
++ tlook=gethostname
++ case "$3" in
++ tlook='^gethostname$'
++ tf=libc.list
++ tdc='()'
++ tx=yes
++ case "$reuseval-$4" in
++ case "$tx" in
++ tval=false
++ test true = true
++ grep '^gethostname$' libc.list
++ tval=true
++ eval val=true
+++ val=true
+ true
+ echo 'gethostname() found.'
gethostname() found.
+ d_gethname=define
+ call=gethostname
+ set uname val -f d_uname
+ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
++ tlook=uname
++ case "$3" in
++ tlook='^uname$'
++ tf=libc.list
++ tdc='()'
++ tx=yes
++ case "$reuseval-$4" in
++ case "$tx" in
++ tval=false
++ test true = true
++ grep '^uname$' libc.list
++ tval=true
++ eval val=true
+++ val=true
+ true
+ ./xenix
+ echo 'uname() found.'
uname() found.
+ d_uname=define
+ case "$call" in
+ case "$d_gethname" in
+ case "$d_uname" in
+ case "$d_uname$d_gethname" in
+ dflt=n
+ cat
 
Every now and then someone has a gethostname() that lies about the hostname
but can't be fixed for political or economic reasons.  If you wish, I can
pretend gethostname() isn't there and maybe compute hostname at run-time
thanks to the 'hostname' command.

+ rp='Shall I ignore gethostname() from now on?'
+ . ./myread
++ xxxm=n
++ case "$xxxm" in
++ case "$rp" in
+++ echo 'Shall I ignore gethostname() from now on? [n]  '
+++ wc -c
++ test 48 -ge 80
++ echo -n 'Shall I ignore gethostname() from now on? [n] '
Shall I ignore gethostname() from now on? [n] ++ ans='!'
++ case "$fastread" in
++ case "$dflt" in
++ ans=
++ case "$silent-$rp" in
++ echo ' '
 
++ expr X : 'X!'
++ case "$ans" in
++ ans=n
+ case "$ans" in
+ case "$phostname" in
+ case "$aphostname" in
+ set X hostname
+ shift
+ file=hostname
+ shift
++ ./loc hostname hostname . /usr/src/perl /bin /mingw/bin /C/Windows/system32 /C/Windows /usr/bin /etc /usr/lib /lib /sbin /usr/sbin
+ file=/bin/hostname
++ echo /bin/hostname
+ aphostname=/bin/hostname
+ case "$d_uname$d_gethname" in
+ case "$d_phostname" in
+ d_phostname=undef
+ : see if gethostbyaddr_r exists
+ set gethostbyaddr_r d_gethostbyaddr_r
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=gethostbyaddr_r
++ var=d_gethostbyaddr_r
++ eval 'was=$d_gethostbyaddr_r'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set gethostbyaddr_r tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=gethostbyaddr_r
+++ case "$3" in
+++ tlook='^gethostbyaddr_r$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^gethostbyaddr_r$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'gethostbyaddr_r() NOT found.'
gethostbyaddr_r() NOT found.
++ case "$was" in
++ eval 'd_gethostbyaddr_r=$tu'
+++ d_gethostbyaddr_r=undef
+ case "$d_gethostbyaddr_r" in
+ gethostbyaddr_r_proto=0
+ : see if gethostbyname_r exists
+ set gethostbyname_r d_gethostbyname_r
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=gethostbyname_r
++ var=d_gethostbyname_r
++ eval 'was=$d_gethostbyname_r'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set gethostbyname_r tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=gethostbyname_r
+++ case "$3" in
+++ tlook='^gethostbyname_r$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^gethostbyname_r$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'gethostbyname_r() NOT found.'
gethostbyname_r() NOT found.
++ case "$was" in
++ eval 'd_gethostbyname_r=$tu'
+++ d_gethostbyname_r=undef
+ case "$d_gethostbyname_r" in
+ gethostbyname_r_proto=0
+ : see if gethostent_r exists
+ set gethostent_r d_gethostent_r
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=gethostent_r
++ var=d_gethostent_r
++ eval 'was=$d_gethostent_r'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set gethostent_r tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=gethostent_r
+++ case "$3" in
+++ tlook='^gethostent_r$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^gethostent_r$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'gethostent_r() NOT found.'
gethostent_r() NOT found.
++ case "$was" in
++ eval 'd_gethostent_r=$tu'
+++ d_gethostent_r=undef
+ case "$d_gethostent_r" in
+ gethostent_r_proto=0
+ : see if prototypes for various gethostxxx netdb.h functions are available
+ echo ' '
 
+ set d_gethostprotos gethostent define netdb.h
+ eval 'varname=$1;' 'func=$2;' 'shift;' 'shift;' while '$test' '$#' -ge '2;' do case '"$1"' in '$define)' echo '"#include' '<$2>";;' esac ';' shift '2;' done '>' 'try.c;' '$cppstdin' '$cppflags' '$cppminus' '<' try.c '>' tryout.c '2>/dev/null;' if '$contains' '"$func.*("' tryout.c '>/dev/null' '2>&1;' then echo '"$func()' prototype 'found.";' 'val="$define";' else echo '"$func()' prototype NOT 'found.";' 'val="$undef";' 'fi;' set '$varname;' eval '$setvar;' '$rm' -f try.c tryout.c
++ varname=d_gethostprotos
++ func=gethostent
++ shift
++ shift
++ test 2 -ge 2
++ case "$1" in
++ echo '#include <netdb.h>'
++ shift 2
++ test 0 -ge 2
++ gcc -E -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -
++ grep 'gethostent.*(' tryout.c
++ echo 'gethostent() prototype found.'
gethostent() prototype found.
++ val=define
++ set d_gethostprotos
++ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
+++ var=d_gethostprotos
+++ eval 'was=$d_gethostprotos'
++++ was=
+++ td=define
+++ tu=undef
+++ case "$val$was" in
+++ eval d_gethostprotos=define
++++ d_gethostprotos=define
++ /bin/rm -f try.c tryout.c
+ : see if getitimer exists
+ set getitimer d_getitimer
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=getitimer
++ var=d_getitimer
++ eval 'was=$d_getitimer'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set getitimer tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=getitimer
+++ case "$3" in
+++ tlook='^getitimer$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^getitimer$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'getitimer() found.'
getitimer() found.
++ case "$was" in
++ eval 'd_getitimer=$td'
+++ d_getitimer=define
+ : see if getlogin exists
+ set getlogin d_getlogin
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=getlogin
++ var=d_getlogin
++ eval 'was=$d_getlogin'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set getlogin tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=getlogin
+++ case "$3" in
+++ tlook='^getlogin$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^getlogin$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'getlogin() found.'
getlogin() found.
++ case "$was" in
++ eval 'd_getlogin=$td'
+++ d_getlogin=define
+ : see if getlogin_r exists
+ set getlogin_r d_getlogin_r
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=getlogin_r
++ var=d_getlogin_r
++ eval 'was=$d_getlogin_r'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set getlogin_r tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=getlogin_r
+++ case "$3" in
+++ tlook='^getlogin_r$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^getlogin_r$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'getlogin_r() NOT found.'
getlogin_r() NOT found.
++ case "$was" in
++ eval 'd_getlogin_r=$tu'
+++ d_getlogin_r=undef
+ case "$d_getlogin_r" in
+ getlogin_r_proto=0
+ : see if getmnt exists
+ set getmnt d_getmnt
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=getmnt
++ var=d_getmnt
++ eval 'was=$d_getmnt'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set getmnt tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=getmnt
+++ case "$3" in
+++ tlook='^getmnt$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^getmnt$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'getmnt() NOT found.'
getmnt() NOT found.
++ case "$was" in
++ eval 'd_getmnt=$tu'
+++ d_getmnt=undef
+ : see if getmntent exists
+ set getmntent d_getmntent
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=getmntent
++ var=d_getmntent
++ eval 'was=$d_getmntent'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set getmntent tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=getmntent
+++ case "$3" in
+++ tlook='^getmntent$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^getmntent$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'getmntent() found.'
getmntent() found.
++ case "$was" in
++ eval 'd_getmntent=$td'
+++ d_getmntent=define
+ : see if getnetbyaddr exists
+ set getnetbyaddr d_getnbyaddr
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=getnetbyaddr
++ var=d_getnbyaddr
++ eval 'was=$d_getnbyaddr'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set getnetbyaddr tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=getnetbyaddr
+++ case "$3" in
+++ tlook='^getnetbyaddr$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^getnetbyaddr$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'getnetbyaddr() NOT found.'
getnetbyaddr() NOT found.
++ case "$was" in
++ eval 'd_getnbyaddr=$tu'
+++ d_getnbyaddr=undef
+ : see if getnetbyname exists
+ set getnetbyname d_getnbyname
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=getnetbyname
++ var=d_getnbyname
++ eval 'was=$d_getnbyname'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set getnetbyname tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=getnetbyname
+++ case "$3" in
+++ tlook='^getnetbyname$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^getnetbyname$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'getnetbyname() NOT found.'
getnetbyname() NOT found.
++ case "$was" in
++ eval 'd_getnbyname=$tu'
+++ d_getnbyname=undef
+ : see if getnetent exists
+ set getnetent d_getnent
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=getnetent
++ var=d_getnent
++ eval 'was=$d_getnent'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set getnetent tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=getnetent
+++ case "$3" in
+++ tlook='^getnetent$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^getnetent$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'getnetent() NOT found.'
getnetent() NOT found.
++ case "$was" in
++ eval 'd_getnent=$tu'
+++ d_getnent=undef
+ : see if getnetbyaddr_r exists
+ set getnetbyaddr_r d_getnetbyaddr_r
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=getnetbyaddr_r
++ var=d_getnetbyaddr_r
++ eval 'was=$d_getnetbyaddr_r'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set getnetbyaddr_r tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=getnetbyaddr_r
+++ case "$3" in
+++ tlook='^getnetbyaddr_r$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^getnetbyaddr_r$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'getnetbyaddr_r() NOT found.'
getnetbyaddr_r() NOT found.
++ case "$was" in
++ eval 'd_getnetbyaddr_r=$tu'
+++ d_getnetbyaddr_r=undef
+ case "$d_getnetbyaddr_r" in
+ getnetbyaddr_r_proto=0
+ : see if getnetbyname_r exists
+ set getnetbyname_r d_getnetbyname_r
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=getnetbyname_r
++ var=d_getnetbyname_r
++ eval 'was=$d_getnetbyname_r'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set getnetbyname_r tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=getnetbyname_r
+++ case "$3" in
+++ tlook='^getnetbyname_r$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^getnetbyname_r$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'getnetbyname_r() NOT found.'
getnetbyname_r() NOT found.
++ case "$was" in
++ eval 'd_getnetbyname_r=$tu'
+++ d_getnetbyname_r=undef
+ case "$d_getnetbyname_r" in
+ getnetbyname_r_proto=0
+ : see if getnetent_r exists
+ set getnetent_r d_getnetent_r
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=getnetent_r
++ var=d_getnetent_r
++ eval 'was=$d_getnetent_r'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set getnetent_r tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=getnetent_r
+++ case "$3" in
+++ tlook='^getnetent_r$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^getnetent_r$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'getnetent_r() NOT found.'
getnetent_r() NOT found.
++ case "$was" in
++ eval 'd_getnetent_r=$tu'
+++ d_getnetent_r=undef
+ case "$d_getnetent_r" in
+ getnetent_r_proto=0
+ : see if prototypes for various getnetxxx netdb.h functions are available
+ echo ' '
 
+ set d_getnetprotos getnetent define netdb.h
+ eval 'varname=$1;' 'func=$2;' 'shift;' 'shift;' while '$test' '$#' -ge '2;' do case '"$1"' in '$define)' echo '"#include' '<$2>";;' esac ';' shift '2;' done '>' 'try.c;' '$cppstdin' '$cppflags' '$cppminus' '<' try.c '>' tryout.c '2>/dev/null;' if '$contains' '"$func.*("' tryout.c '>/dev/null' '2>&1;' then echo '"$func()' prototype 'found.";' 'val="$define";' else echo '"$func()' prototype NOT 'found.";' 'val="$undef";' 'fi;' set '$varname;' eval '$setvar;' '$rm' -f try.c tryout.c
++ varname=d_getnetprotos
++ func=getnetent
++ shift
++ shift
++ test 2 -ge 2
++ case "$1" in
++ echo '#include <netdb.h>'
++ shift 2
++ test 0 -ge 2
++ gcc -E -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -
++ grep 'getnetent.*(' tryout.c
++ echo 'getnetent() prototype found.'
getnetent() prototype found.
++ val=define
++ set d_getnetprotos
++ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
+++ var=d_getnetprotos
+++ eval 'was=$d_getnetprotos'
++++ was=
+++ td=define
+++ tu=undef
+++ case "$val$was" in
+++ eval d_getnetprotos=define
++++ d_getnetprotos=define
++ /bin/rm -f try.c tryout.c
+ : see if getpagesize exists
+ set getpagesize d_getpagsz
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=getpagesize
++ var=d_getpagsz
++ eval 'was=$d_getpagsz'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set getpagesize tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=getpagesize
+++ case "$3" in
+++ tlook='^getpagesize$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^getpagesize$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'getpagesize() found.'
getpagesize() found.
++ case "$was" in
++ eval 'd_getpagsz=$td'
+++ d_getpagsz=define
+ : see if getprotobyname exists
+ set getprotobyname d_getpbyname
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=getprotobyname
++ var=d_getpbyname
++ eval 'was=$d_getpbyname'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set getprotobyname tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=getprotobyname
+++ case "$3" in
+++ tlook='^getprotobyname$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^getprotobyname$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'getprotobyname() found.'
getprotobyname() found.
++ case "$was" in
++ eval 'd_getpbyname=$td'
+++ d_getpbyname=define
+ : see if getprotobynumber exists
+ set getprotobynumber d_getpbynumber
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=getprotobynumber
++ var=d_getpbynumber
++ eval 'was=$d_getpbynumber'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set getprotobynumber tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=getprotobynumber
+++ case "$3" in
+++ tlook='^getprotobynumber$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^getprotobynumber$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'getprotobynumber() found.'
getprotobynumber() found.
++ case "$was" in
++ eval 'd_getpbynumber=$td'
+++ d_getpbynumber=define
+ : see if getprotoent exists
+ set getprotoent d_getpent
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=getprotoent
++ var=d_getpent
++ eval 'was=$d_getpent'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set getprotoent tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=getprotoent
+++ case "$3" in
+++ tlook='^getprotoent$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^getprotoent$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'getprotoent() NOT found.'
getprotoent() NOT found.
++ case "$was" in
++ eval 'd_getpent=$tu'
+++ d_getpent=undef
+ : see if getpgid exists
+ set getpgid d_getpgid
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=getpgid
++ var=d_getpgid
++ eval 'was=$d_getpgid'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set getpgid tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=getpgid
+++ case "$3" in
+++ tlook='^getpgid$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^getpgid$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'getpgid() found.'
getpgid() found.
++ case "$was" in
++ eval 'd_getpgid=$td'
+++ d_getpgid=define
+ : see if getpgrp2 exists
+ set getpgrp2 d_getpgrp2
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=getpgrp2
++ var=d_getpgrp2
++ eval 'was=$d_getpgrp2'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set getpgrp2 tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=getpgrp2
+++ case "$3" in
+++ tlook='^getpgrp2$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^getpgrp2$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'getpgrp2() NOT found.'
getpgrp2() NOT found.
++ case "$was" in
++ eval 'd_getpgrp2=$tu'
+++ d_getpgrp2=undef
+ : see if getppid exists
+ set getppid d_getppid
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=getppid
++ var=d_getppid
++ eval 'was=$d_getppid'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set getppid tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=getppid
+++ case "$3" in
+++ tlook='^getppid$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^getppid$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'getppid() found.'
getppid() found.
++ case "$was" in
++ eval 'd_getppid=$td'
+++ d_getppid=define
+ : see if getpriority exists
+ set getpriority d_getprior
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=getpriority
++ var=d_getprior
++ eval 'was=$d_getprior'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set getpriority tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=getpriority
+++ case "$3" in
+++ tlook='^getpriority$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^getpriority$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'getpriority() NOT found.'
getpriority() NOT found.
++ case "$was" in
++ eval 'd_getprior=$tu'
+++ d_getprior=undef
+ : see if getprotobyname_r exists
+ set getprotobyname_r d_getprotobyname_r
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=getprotobyname_r
++ var=d_getprotobyname_r
++ eval 'was=$d_getprotobyname_r'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set getprotobyname_r tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=getprotobyname_r
+++ case "$3" in
+++ tlook='^getprotobyname_r$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^getprotobyname_r$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'getprotobyname_r() NOT found.'
getprotobyname_r() NOT found.
++ case "$was" in
++ eval 'd_getprotobyname_r=$tu'
+++ d_getprotobyname_r=undef
+ case "$d_getprotobyname_r" in
+ getprotobyname_r_proto=0
+ : see if getprotobynumber_r exists
+ set getprotobynumber_r d_getprotobynumber_r
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=getprotobynumber_r
++ var=d_getprotobynumber_r
++ eval 'was=$d_getprotobynumber_r'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set getprotobynumber_r tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=getprotobynumber_r
+++ case "$3" in
+++ tlook='^getprotobynumber_r$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^getprotobynumber_r$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'getprotobynumber_r() NOT found.'
getprotobynumber_r() NOT found.
++ case "$was" in
++ eval 'd_getprotobynumber_r=$tu'
+++ d_getprotobynumber_r=undef
+ case "$d_getprotobynumber_r" in
+ getprotobynumber_r_proto=0
+ : see if getprotoent_r exists
+ set getprotoent_r d_getprotoent_r
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=getprotoent_r
++ var=d_getprotoent_r
++ eval 'was=$d_getprotoent_r'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set getprotoent_r tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=getprotoent_r
+++ case "$3" in
+++ tlook='^getprotoent_r$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^getprotoent_r$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'getprotoent_r() NOT found.'
getprotoent_r() NOT found.
++ case "$was" in
++ eval 'd_getprotoent_r=$tu'
+++ d_getprotoent_r=undef
+ case "$d_getprotoent_r" in
+ getprotoent_r_proto=0
+ : see if prototypes for various getprotoxxx netdb.h functions are available
+ echo ' '
 
+ set d_getprotoprotos getprotoent define netdb.h
+ eval 'varname=$1;' 'func=$2;' 'shift;' 'shift;' while '$test' '$#' -ge '2;' do case '"$1"' in '$define)' echo '"#include' '<$2>";;' esac ';' shift '2;' done '>' 'try.c;' '$cppstdin' '$cppflags' '$cppminus' '<' try.c '>' tryout.c '2>/dev/null;' if '$contains' '"$func.*("' tryout.c '>/dev/null' '2>&1;' then echo '"$func()' prototype 'found.";' 'val="$define";' else echo '"$func()' prototype NOT 'found.";' 'val="$undef";' 'fi;' set '$varname;' eval '$setvar;' '$rm' -f try.c tryout.c
++ varname=d_getprotoprotos
++ func=getprotoent
++ shift
++ shift
++ test 2 -ge 2
++ case "$1" in
++ echo '#include <netdb.h>'
++ shift 2
++ test 0 -ge 2
++ gcc -E -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -
++ grep 'getprotoent.*(' tryout.c
++ echo 'getprotoent() prototype found.'
getprotoent() prototype found.
++ val=define
++ set d_getprotoprotos
++ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
+++ var=d_getprotoprotos
+++ eval 'was=$d_getprotoprotos'
++++ was=
+++ td=define
+++ tu=undef
+++ case "$val$was" in
+++ eval d_getprotoprotos=define
++++ d_getprotoprotos=define
++ /bin/rm -f try.c tryout.c
+ : see if getprpwnam exists
+ set getprpwnam d_getprpwnam
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=getprpwnam
++ var=d_getprpwnam
++ eval 'was=$d_getprpwnam'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set getprpwnam tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=getprpwnam
+++ case "$3" in
+++ tlook='^getprpwnam$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^getprpwnam$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'getprpwnam() NOT found.'
getprpwnam() NOT found.
++ case "$was" in
++ eval 'd_getprpwnam=$tu'
+++ d_getprpwnam=undef
+ : see if getpwent exists
+ set getpwent d_getpwent
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=getpwent
++ var=d_getpwent
++ eval 'was=$d_getpwent'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set getpwent tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=getpwent
+++ case "$3" in
+++ tlook='^getpwent$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^getpwent$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'getpwent() found.'
getpwent() found.
++ case "$was" in
++ eval 'd_getpwent=$td'
+++ d_getpwent=define
+ : see if getpwent_r exists
+ set getpwent_r d_getpwent_r
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=getpwent_r
++ var=d_getpwent_r
++ eval 'was=$d_getpwent_r'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set getpwent_r tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=getpwent_r
+++ case "$3" in
+++ tlook='^getpwent_r$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^getpwent_r$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'getpwent_r() NOT found.'
getpwent_r() NOT found.
++ case "$was" in
++ eval 'd_getpwent_r=$tu'
+++ d_getpwent_r=undef
+ case "$d_getpwent_r" in
+ getpwent_r_proto=0
+ : see if getpwnam_r exists
+ set getpwnam_r d_getpwnam_r
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=getpwnam_r
++ var=d_getpwnam_r
++ eval 'was=$d_getpwnam_r'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set getpwnam_r tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=getpwnam_r
+++ case "$3" in
+++ tlook='^getpwnam_r$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^getpwnam_r$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'getpwnam_r() found.'
getpwnam_r() found.
++ case "$was" in
++ eval 'd_getpwnam_r=$td'
+++ d_getpwnam_r=define
+ case "$d_getpwnam_r" in
+ hdrs='define sys/types.h define stdio.h define pwd.h'
+ case "$d_getpwnam_r_proto:$usethreads" in
+ case "$d_getpwnam_r_proto" in
+ case "$usethreads" in
+ d_getpwnam_r=undef
+ getpwnam_r_proto=0
+ : see if getpwuid_r exists
+ set getpwuid_r d_getpwuid_r
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=getpwuid_r
++ var=d_getpwuid_r
++ eval 'was=$d_getpwuid_r'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set getpwuid_r tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=getpwuid_r
+++ case "$3" in
+++ tlook='^getpwuid_r$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^getpwuid_r$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'getpwuid_r() found.'
getpwuid_r() found.
++ case "$was" in
++ eval 'd_getpwuid_r=$td'
+++ d_getpwuid_r=define
+ case "$d_getpwuid_r" in
+ hdrs='define sys/types.h define stdio.h define pwd.h'
+ case "$d_getpwuid_r_proto:$usethreads" in
+ case "$d_getpwuid_r_proto" in
+ case "$usethreads" in
+ d_getpwuid_r=undef
+ getpwuid_r_proto=0
+ : see if getservbyname exists
+ set getservbyname d_getsbyname
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=getservbyname
++ var=d_getsbyname
++ eval 'was=$d_getsbyname'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set getservbyname tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=getservbyname
+++ case "$3" in
+++ tlook='^getservbyname$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^getservbyname$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'getservbyname() found.'
getservbyname() found.
++ case "$was" in
++ eval 'd_getsbyname=$td'
+++ d_getsbyname=define
+ : see if getservbyport exists
+ set getservbyport d_getsbyport
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=getservbyport
++ var=d_getsbyport
++ eval 'was=$d_getsbyport'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set getservbyport tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=getservbyport
+++ case "$3" in
+++ tlook='^getservbyport$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^getservbyport$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'getservbyport() found.'
getservbyport() found.
++ case "$was" in
++ eval 'd_getsbyport=$td'
+++ d_getsbyport=define
+ : see if getservent exists
+ set getservent d_getsent
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=getservent
++ var=d_getsent
++ eval 'was=$d_getsent'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set getservent tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=getservent
+++ case "$3" in
+++ tlook='^getservent$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^getservent$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'getservent() NOT found.'
getservent() NOT found.
++ case "$was" in
++ eval 'd_getsent=$tu'
+++ d_getsent=undef
+ : see if getservbyname_r exists
+ set getservbyname_r d_getservbyname_r
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=getservbyname_r
++ var=d_getservbyname_r
++ eval 'was=$d_getservbyname_r'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set getservbyname_r tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=getservbyname_r
+++ case "$3" in
+++ tlook='^getservbyname_r$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^getservbyname_r$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'getservbyname_r() NOT found.'
getservbyname_r() NOT found.
++ case "$was" in
++ eval 'd_getservbyname_r=$tu'
+++ d_getservbyname_r=undef
+ case "$d_getservbyname_r" in
+ getservbyname_r_proto=0
+ : see if getservbyport_r exists
+ set getservbyport_r d_getservbyport_r
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=getservbyport_r
++ var=d_getservbyport_r
++ eval 'was=$d_getservbyport_r'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set getservbyport_r tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=getservbyport_r
+++ case "$3" in
+++ tlook='^getservbyport_r$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^getservbyport_r$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'getservbyport_r() NOT found.'
getservbyport_r() NOT found.
++ case "$was" in
++ eval 'd_getservbyport_r=$tu'
+++ d_getservbyport_r=undef
+ case "$d_getservbyport_r" in
+ getservbyport_r_proto=0
+ : see if getservent_r exists
+ set getservent_r d_getservent_r
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=getservent_r
++ var=d_getservent_r
++ eval 'was=$d_getservent_r'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set getservent_r tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=getservent_r
+++ case "$3" in
+++ tlook='^getservent_r$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^getservent_r$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'getservent_r() NOT found.'
getservent_r() NOT found.
++ case "$was" in
++ eval 'd_getservent_r=$tu'
+++ d_getservent_r=undef
+ case "$d_getservent_r" in
+ getservent_r_proto=0
+ : see if prototypes for various getservxxx netdb.h functions are available
+ echo ' '
 
+ set d_getservprotos getservent define netdb.h
+ eval 'varname=$1;' 'func=$2;' 'shift;' 'shift;' while '$test' '$#' -ge '2;' do case '"$1"' in '$define)' echo '"#include' '<$2>";;' esac ';' shift '2;' done '>' 'try.c;' '$cppstdin' '$cppflags' '$cppminus' '<' try.c '>' tryout.c '2>/dev/null;' if '$contains' '"$func.*("' tryout.c '>/dev/null' '2>&1;' then echo '"$func()' prototype 'found.";' 'val="$define";' else echo '"$func()' prototype NOT 'found.";' 'val="$undef";' 'fi;' set '$varname;' eval '$setvar;' '$rm' -f try.c tryout.c
++ varname=d_getservprotos
++ func=getservent
++ shift
++ shift
++ test 2 -ge 2
++ case "$1" in
++ echo '#include <netdb.h>'
++ shift 2
++ test 0 -ge 2
++ gcc -E -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -
++ grep 'getservent.*(' tryout.c
++ echo 'getservent() prototype found.'
getservent() prototype found.
++ val=define
++ set d_getservprotos
++ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
+++ var=d_getservprotos
+++ eval 'was=$d_getservprotos'
++++ was=
+++ td=define
+++ tu=undef
+++ case "$val$was" in
+++ eval d_getservprotos=define
++++ d_getservprotos=define
++ /bin/rm -f try.c tryout.c
+ : see if getspnam exists
+ set getspnam d_getspnam
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=getspnam
++ var=d_getspnam
++ eval 'was=$d_getspnam'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set getspnam tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=getspnam
+++ case "$3" in
+++ tlook='^getspnam$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^getspnam$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'getspnam() NOT found.'
getspnam() NOT found.
++ case "$was" in
++ eval 'd_getspnam=$tu'
+++ d_getspnam=undef
+ : see if this is a shadow.h system
+ set shadow.h i_shadow
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'yyy=$@;' 'cont=true;' 'xxf="echo' '\"<\$1>' 'found.\"' '>&4";' case '$#' in '2)' 'xxnf="echo' '\"<\$1>' NOT 'found.\"' '>&4";;' '*)' 'xxnf="echo' '\"<\$1>' NOT found, '...\"' '>&4";;' 'esac;' case '$#' in '4)' 'instead=instead;;' '*)' 'instead="at' 'last";;' 'esac;' while '$test' '"$cont";' do 'xxx=`./findhdr' '$1`' 'var=$2;' eval '"was=\$$2";' if '$test' '"$xxx"' '&&' '$test' -r '"$xxx";' then eval '$xxf;' eval '"case' '\"\$$var\"' in '$undef)' . './whoa;' 'esac";' eval '"$var=\$td";' 'cont="";' else eval '$xxnf;' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' 'fi;' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' case '$#' in '0)' 'cont="";;' '2)' 'xxf="echo' '\"but' I found '<\$1>' '$instead.\"' '>&4";' 'xxnf="echo' '\"and' I did not find '<\$1>' 'either.\"' '>&4";;' '*)' 'xxf="echo' '\"but' I found '<\$1\>' 'instead.\"' '>&4";' 'xxnf="echo' '\"there' is no '<\$1>,' '...\"' '>&4";;' 'esac;' 'done;' while '$test' '"$yyy";' do set '$yyy;' 'var=$2;' eval '"was=\$$2";' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' done
++ echo ' '
 
++ td=define
++ tu=undef
++ yyy='shadow.h i_shadow'
++ cont=true
++ xxf='echo "<$1> found." >&4'
++ case $# in
++ xxnf='echo "<$1> NOT found." >&4'
++ case $# in
++ instead='at last'
++ test true
+++ ./findhdr shadow.h
++ xxx=
++ var=i_shadow
++ eval 'was=$i_shadow'
+++ was=
++ test ''
++ eval echo '"<$1>' NOT 'found."' '>&4'
+++ echo '<shadow.h> NOT found.'
<shadow.h> NOT found.
++ eval 'case "$i_shadow" in define) . ./whoa; esac'
+++ case "$i_shadow" in
++ eval 'i_shadow=$tu'
+++ i_shadow=undef
++ set shadow.h i_shadow
++ shift
++ shift
++ yyy=
++ case $# in
++ cont=
++ test ''
++ test ''
+ : see if getspnam_r exists
+ set getspnam_r d_getspnam_r
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=getspnam_r
++ var=d_getspnam_r
++ eval 'was=$d_getspnam_r'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set getspnam_r tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=getspnam_r
+++ case "$3" in
+++ tlook='^getspnam_r$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^getspnam_r$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'getspnam_r() NOT found.'
getspnam_r() NOT found.
++ case "$was" in
++ eval 'd_getspnam_r=$tu'
+++ d_getspnam_r=undef
+ case "$d_getspnam_r" in
+ getspnam_r_proto=0
+ : see if gettimeofday or ftime exists
+ set gettimeofday d_gettimeod
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=gettimeofday
++ var=d_gettimeod
++ eval 'was=$d_gettimeod'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set gettimeofday tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=gettimeofday
+++ case "$3" in
+++ tlook='^gettimeofday$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^gettimeofday$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'gettimeofday() found.'
gettimeofday() found.
++ case "$was" in
++ eval 'd_gettimeod=$td'
+++ d_gettimeod=define
+ case "$d_gettimeod" in
+ val=undef
+ set d_ftime
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=d_ftime
++ eval 'was=$d_ftime'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval d_ftime=undef
+++ d_ftime=undef
+ case "$d_gettimeod$d_ftime" in
+ : see if gmtime_r exists
+ set gmtime_r d_gmtime_r
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=gmtime_r
++ var=d_gmtime_r
++ eval 'was=$d_gmtime_r'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set gmtime_r tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=gmtime_r
+++ case "$3" in
+++ tlook='^gmtime_r$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^gmtime_r$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'gmtime_r() found.'
gmtime_r() found.
++ case "$was" in
++ eval 'd_gmtime_r=$td'
+++ d_gmtime_r=define
+ case "$d_gmtime_r" in
+ hdrs='define sys/types.h define stdio.h undef time.h define sys/time.h'
+ case "$d_gmtime_r_proto:$usethreads" in
+ case "$d_gmtime_r_proto" in
+ case "$usethreads" in
+ d_gmtime_r=undef
+ gmtime_r_proto=0
+ : see if hasmntopt exists
+ set hasmntopt d_hasmntopt
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=hasmntopt
++ var=d_hasmntopt
++ eval 'was=$d_hasmntopt'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set hasmntopt tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=hasmntopt
+++ case "$3" in
+++ tlook='^hasmntopt$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^hasmntopt$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'hasmntopt() NOT found.'
hasmntopt() NOT found.
++ case "$was" in
++ eval 'd_hasmntopt=$tu'
+++ d_hasmntopt=undef
+ : see if this is a netinet/in.h or sys/in.h system
+ set netinet/in.h i_niin sys/in.h i_sysin
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'yyy=$@;' 'cont=true;' 'xxf="echo' '\"<\$1>' 'found.\"' '>&4";' case '$#' in '2)' 'xxnf="echo' '\"<\$1>' NOT 'found.\"' '>&4";;' '*)' 'xxnf="echo' '\"<\$1>' NOT found, '...\"' '>&4";;' 'esac;' case '$#' in '4)' 'instead=instead;;' '*)' 'instead="at' 'last";;' 'esac;' while '$test' '"$cont";' do 'xxx=`./findhdr' '$1`' 'var=$2;' eval '"was=\$$2";' if '$test' '"$xxx"' '&&' '$test' -r '"$xxx";' then eval '$xxf;' eval '"case' '\"\$$var\"' in '$undef)' . './whoa;' 'esac";' eval '"$var=\$td";' 'cont="";' else eval '$xxnf;' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' 'fi;' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' case '$#' in '0)' 'cont="";;' '2)' 'xxf="echo' '\"but' I found '<\$1>' '$instead.\"' '>&4";' 'xxnf="echo' '\"and' I did not find '<\$1>' 'either.\"' '>&4";;' '*)' 'xxf="echo' '\"but' I found '<\$1\>' 'instead.\"' '>&4";' 'xxnf="echo' '\"there' is no '<\$1>,' '...\"' '>&4";;' 'esac;' 'done;' while '$test' '"$yyy";' do set '$yyy;' 'var=$2;' eval '"was=\$$2";' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' done
++ echo ' '
 
++ td=define
++ tu=undef
++ yyy='netinet/in.h i_niin sys/in.h i_sysin'
++ cont=true
++ xxf='echo "<$1> found." >&4'
++ case $# in
++ xxnf='echo "<$1> NOT found, ..." >&4'
++ case $# in
++ instead=instead
++ test true
+++ ./findhdr netinet/in.h
++ xxx=/usr/include/netinet/in.h
++ var=i_niin
++ eval 'was=$i_niin'
+++ was=
++ test /usr/include/netinet/in.h
++ test -r /usr/include/netinet/in.h
++ eval echo '"<$1>' 'found."' '>&4'
+++ echo '<netinet/in.h> found.'
<netinet/in.h> found.
++ eval 'case "$i_niin" in undef) . ./whoa; esac'
+++ case "$i_niin" in
++ eval 'i_niin=$td'
+++ i_niin=define
++ cont=
++ set netinet/in.h i_niin sys/in.h i_sysin
++ shift
++ shift
++ yyy='sys/in.h i_sysin'
++ case $# in
++ xxf='echo "but I found <$1> instead." >&4'
++ xxnf='echo "and I did not find <$1> either." >&4'
++ test ''
++ test 'sys/in.h i_sysin'
++ set sys/in.h i_sysin
++ var=i_sysin
++ eval 'was=$i_sysin'
+++ was=
++ eval 'case "$i_sysin" in define) . ./whoa; esac'
+++ case "$i_sysin" in
++ eval 'i_sysin=$tu'
+++ i_sysin=undef
++ set sys/in.h i_sysin
++ shift
++ shift
++ yyy=
++ test ''
+ : see if arpa/inet.h has to be included
+ set arpa/inet.h i_arpainet
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'yyy=$@;' 'cont=true;' 'xxf="echo' '\"<\$1>' 'found.\"' '>&4";' case '$#' in '2)' 'xxnf="echo' '\"<\$1>' NOT 'found.\"' '>&4";;' '*)' 'xxnf="echo' '\"<\$1>' NOT found, '...\"' '>&4";;' 'esac;' case '$#' in '4)' 'instead=instead;;' '*)' 'instead="at' 'last";;' 'esac;' while '$test' '"$cont";' do 'xxx=`./findhdr' '$1`' 'var=$2;' eval '"was=\$$2";' if '$test' '"$xxx"' '&&' '$test' -r '"$xxx";' then eval '$xxf;' eval '"case' '\"\$$var\"' in '$undef)' . './whoa;' 'esac";' eval '"$var=\$td";' 'cont="";' else eval '$xxnf;' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' 'fi;' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' case '$#' in '0)' 'cont="";;' '2)' 'xxf="echo' '\"but' I found '<\$1>' '$instead.\"' '>&4";' 'xxnf="echo' '\"and' I did not find '<\$1>' 'either.\"' '>&4";;' '*)' 'xxf="echo' '\"but' I found '<\$1\>' 'instead.\"' '>&4";' 'xxnf="echo' '\"there' is no '<\$1>,' '...\"' '>&4";;' 'esac;' 'done;' while '$test' '"$yyy";' do set '$yyy;' 'var=$2;' eval '"was=\$$2";' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' done
++ echo ' '
 
++ td=define
++ tu=undef
++ yyy='arpa/inet.h i_arpainet'
++ cont=true
++ xxf='echo "<$1> found." >&4'
++ case $# in
++ xxnf='echo "<$1> NOT found." >&4'
++ case $# in
++ instead='at last'
++ test true
+++ ./findhdr arpa/inet.h
++ xxx=/usr/include/arpa/inet.h
++ var=i_arpainet
++ eval 'was=$i_arpainet'
+++ was=
++ test /usr/include/arpa/inet.h
++ test -r /usr/include/arpa/inet.h
++ eval echo '"<$1>' 'found."' '>&4'
+++ echo '<arpa/inet.h> found.'
<arpa/inet.h> found.
++ eval 'case "$i_arpainet" in undef) . ./whoa; esac'
+++ case "$i_arpainet" in
++ eval 'i_arpainet=$td'
+++ i_arpainet=define
++ cont=
++ set arpa/inet.h i_arpainet
++ shift
++ shift
++ yyy=
++ case $# in
++ cont=
++ test ''
++ test ''
+ : see if htonl --and friends-- exists
+ val=
+ set htonl val
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=htonl
++ var=val
++ eval 'was=$val'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set htonl tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=htonl
+++ case "$3" in
+++ tlook='^htonl$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^htonl$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'htonl() found.'
htonl() found.
++ case "$was" in
++ eval 'val=$td'
+++ val=define
+ : Maybe they are macros.
+ case "$val" in
+ set d_htonl
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=d_htonl
++ eval 'was=$d_htonl'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval d_htonl=define
+++ d_htonl=define
+ : see if ilogbl exists
+ set ilogbl d_ilogbl
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=ilogbl
++ var=d_ilogbl
++ eval 'was=$d_ilogbl'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set ilogbl tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=ilogbl
+++ case "$3" in
+++ tlook='^ilogbl$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^ilogbl$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'ilogbl() NOT found.'
ilogbl() NOT found.
++ case "$was" in
++ eval 'd_ilogbl=$tu'
+++ d_ilogbl=undef
+ : index or strchr
+ echo ' '
 
+ set index val -f
+ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
++ tlook=index
++ case "$3" in
++ tlook='^index$'
++ tf=libc.list
++ tdc='()'
++ tx=yes
++ case "$reuseval-$4" in
++ case "$tx" in
++ tval=false
++ test true = true
++ grep '^index$' libc.list
++ tval=true
++ eval val=true
+++ val=true
+ true
+ set strchr val -f d_strchr
+ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
++ tlook=strchr
++ case "$3" in
++ tlook='^strchr$'
++ tf=libc.list
++ tdc='()'
++ tx=yes
++ case "$reuseval-$4" in
++ case "$tx" in
++ tval=false
++ test true = true
++ grep '^strchr$' libc.list
++ tval=true
++ eval val=true
+++ val=true
+ true
+ grep strchr /usr/include/string.h
+ val=define
+ vali=undef
+ echo 'strchr() found.'
strchr() found.
+ set d_strchr
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=d_strchr
++ eval 'was=$d_strchr'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval d_strchr=define
+++ d_strchr=define
+ val=undef
+ set d_index
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=d_index
++ eval 'was=$d_index'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval d_index=undef
+++ d_index=undef
+ : check whether inet_aton exists
+ set inet_aton d_inetaton
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=inet_aton
++ var=d_inetaton
++ eval 'was=$d_inetaton'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set inet_aton tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=inet_aton
+++ case "$3" in
+++ tlook='^inet_aton$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^inet_aton$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'inet_aton() found.'
inet_aton() found.
++ case "$was" in
++ eval 'd_inetaton=$td'
+++ d_inetaton=define
+ : Look for isascii
+ echo ' '
 
+ /bin/cat
+ set isascii
+ eval 'mc_file=$1;' 'shift;' '$cc' -o '${mc_file}' '$optimize' '$ccflags' '$ldflags' '$*' '${mc_file}.c' '$libs' '>' /dev/null '2>&1;'
++ mc_file=isascii
++ shift
++ gcc -o isascii -O3 -fno-unit-at-a-time -s -mtune=pentium -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s isascii.c -lgdbm -lcrypt -lgdbm_compat
+ echo 'isascii() found.'
isascii() found.
+ val=define
+ set d_isascii
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=d_isascii
++ eval 'was=$d_isascii'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval d_isascii=define
+++ d_isascii=define
+ /bin/rm -f isascii.c isascii.exe
+ : see if isfinite exists
+ set isfinite d_isfinite
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=isfinite
++ var=d_isfinite
++ eval 'was=$d_isfinite'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set isfinite tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=isfinite
+++ case "$3" in
+++ tlook='^isfinite$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^isfinite$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'isfinite() NOT found.'
isfinite() NOT found.
++ case "$was" in
++ eval 'd_isfinite=$tu'
+++ d_isfinite=undef
+ : see if isinf exists
+ set isinf d_isinf
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=isinf
++ var=d_isinf
++ eval 'was=$d_isinf'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set isinf tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=isinf
+++ case "$3" in
+++ tlook='^isinf$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^isinf$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'isinf() found.'
isinf() found.
++ case "$was" in
++ eval 'd_isinf=$td'
+++ d_isinf=define
+ : see if isnan exists
+ set isnan d_isnan
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=isnan
++ var=d_isnan
++ eval 'was=$d_isnan'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set isnan tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=isnan
+++ case "$3" in
+++ tlook='^isnan$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^isnan$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'isnan() found.'
isnan() found.
++ case "$was" in
++ eval 'd_isnan=$td'
+++ d_isnan=define
+ : see if isnanl exists
+ set isnanl d_isnanl
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=isnanl
++ var=d_isnanl
++ eval 'was=$d_isnanl'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set isnanl tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=isnanl
+++ case "$3" in
+++ tlook='^isnanl$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^isnanl$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'isnanl() NOT found.'
isnanl() NOT found.
++ case "$was" in
++ eval 'd_isnanl=$tu'
+++ d_isnanl=undef
+ : see if killpg exists
+ set killpg d_killpg
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=killpg
++ var=d_killpg
++ eval 'was=$d_killpg'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set killpg tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=killpg
+++ case "$3" in
+++ tlook='^killpg$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^killpg$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'killpg() found.'
killpg() found.
++ case "$was" in
++ eval 'd_killpg=$td'
+++ d_killpg=define
+ : see if lchown exists
+ echo ' '
 
+ /bin/cat
+ set try
+ eval 'mc_file=$1;' 'shift;' '$cc' -o '${mc_file}' '$optimize' '$ccflags' '$ldflags' '$*' '${mc_file}.c' '$libs' '>' /dev/null '2>&1;'
++ mc_file=try
++ shift
++ gcc -o try -O3 -fno-unit-at-a-time -s -mtune=pentium -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s try.c -lgdbm -lcrypt -lgdbm_compat
+ /bin/echo 'lchown() found.'
lchown() found.
+ val=define
+ set d_lchown
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=d_lchown
++ eval 'was=$d_lchown'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval d_lchown=define
+++ d_lchown=define
+ : See if number of significant digits in a double precision number is known
+ echo ' '
 
+ /bin/cat
+ gcc -E -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -
+ grep LDBL_DIG ldbl_dig.E
+ echo 'LDBL_DIG found.'
LDBL_DIG found.
+ val=define
+ /bin/rm -f ldbl_dig.E ldbl_dig.c
+ set d_ldbl_dig
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=d_ldbl_dig
++ eval 'was=$d_ldbl_dig'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval d_ldbl_dig=define
+++ d_ldbl_dig=define
+ : see if this is a math.h system
+ set math.h i_math
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'yyy=$@;' 'cont=true;' 'xxf="echo' '\"<\$1>' 'found.\"' '>&4";' case '$#' in '2)' 'xxnf="echo' '\"<\$1>' NOT 'found.\"' '>&4";;' '*)' 'xxnf="echo' '\"<\$1>' NOT found, '...\"' '>&4";;' 'esac;' case '$#' in '4)' 'instead=instead;;' '*)' 'instead="at' 'last";;' 'esac;' while '$test' '"$cont";' do 'xxx=`./findhdr' '$1`' 'var=$2;' eval '"was=\$$2";' if '$test' '"$xxx"' '&&' '$test' -r '"$xxx";' then eval '$xxf;' eval '"case' '\"\$$var\"' in '$undef)' . './whoa;' 'esac";' eval '"$var=\$td";' 'cont="";' else eval '$xxnf;' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' 'fi;' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' case '$#' in '0)' 'cont="";;' '2)' 'xxf="echo' '\"but' I found '<\$1>' '$instead.\"' '>&4";' 'xxnf="echo' '\"and' I did not find '<\$1>' 'either.\"' '>&4";;' '*)' 'xxf="echo' '\"but' I found '<\$1\>' 'instead.\"' '>&4";' 'xxnf="echo' '\"there' is no '<\$1>,' '...\"' '>&4";;' 'esac;' 'done;' while '$test' '"$yyy";' do set '$yyy;' 'var=$2;' eval '"was=\$$2";' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' done
++ echo ' '
 
++ td=define
++ tu=undef
++ yyy='math.h i_math'
++ cont=true
++ xxf='echo "<$1> found." >&4'
++ case $# in
++ xxnf='echo "<$1> NOT found." >&4'
++ case $# in
++ instead='at last'
++ test true
+++ ./findhdr math.h
++ xxx=/usr/include/math.h
++ var=i_math
++ eval 'was=$i_math'
+++ was=
++ test /usr/include/math.h
++ test -r /usr/include/math.h
++ eval echo '"<$1>' 'found."' '>&4'
+++ echo '<math.h> found.'
<math.h> found.
++ eval 'case "$i_math" in undef) . ./whoa; esac'
+++ case "$i_math" in
++ eval 'i_math=$td'
+++ i_math=define
++ cont=
++ set math.h i_math
++ shift
++ shift
++ yyy=
++ case $# in
++ cont=
++ test ''
++ test ''
+ d_libm_lib_version=undef
+ case $i_math in
+ : check to see if math.h defines _LIB_VERSION
+ echo ' '
 
+ echo 'Checking to see if your libm supports _LIB_VERSION...'
Checking to see if your libm supports _LIB_VERSION...
+ /bin/cat
+ set try
+ eval 'mc_file=$1;' 'shift;' '$cc' -o '${mc_file}' '$optimize' '$ccflags' '$ldflags' '$*' '${mc_file}.c' '$libs' '>' /dev/null '2>&1;'
++ mc_file=try
++ shift
++ gcc -o try -O3 -fno-unit-at-a-time -s -mtune=pentium -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s try.c -lgdbm -lcrypt -lgdbm_compat
+ echo 'No, it does not (probably harmless)\n'
No, it does not (probably harmless)\n
+ /bin/rm -f try.c try core 'core.try.*'
+ : see if link exists
+ set link d_link
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=link
++ var=d_link
++ eval 'was=$d_link'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set link tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=link
+++ case "$3" in
+++ tlook='^link$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^link$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'link() found.'
link() found.
++ case "$was" in
++ eval 'd_link=$td'
+++ d_link=define
+ : see if localtime_r exists
+ set localtime_r d_localtime_r
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=localtime_r
++ var=d_localtime_r
++ eval 'was=$d_localtime_r'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set localtime_r tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=localtime_r
+++ case "$3" in
+++ tlook='^localtime_r$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^localtime_r$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'localtime_r() found.'
localtime_r() found.
++ case "$was" in
++ eval 'd_localtime_r=$td'
+++ d_localtime_r=define
+ case "$d_localtime_r" in
+ hdrs='define sys/types.h define stdio.h undef time.h define sys/time.h'
+ case "$d_localtime_r_proto:$usethreads" in
+ case "$d_localtime_r_proto" in
+ case "$usethreads" in
+ d_localtime_r=undef
+ localtime_r_proto=0
+ : see if localeconv exists
+ set localeconv d_locconv
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=localeconv
++ var=d_locconv
++ eval 'was=$d_locconv'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set localeconv tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=localeconv
+++ case "$3" in
+++ tlook='^localeconv$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^localeconv$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'localeconv() found.'
localeconv() found.
++ case "$was" in
++ eval 'd_locconv=$td'
+++ d_locconv=define
+ : see if lockf exists
+ set lockf d_lockf
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=lockf
++ var=d_lockf
++ eval 'was=$d_lockf'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set lockf tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=lockf
+++ case "$3" in
+++ tlook='^lockf$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^lockf$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'lockf() NOT found.'
lockf() NOT found.
++ case "$was" in
++ eval 'd_lockf=$tu'
+++ d_lockf=undef
+ : see if prototype for lseek is available
+ echo ' '
 
+ set d_lseekproto lseek define sys/types.h define unistd.h
+ eval 'varname=$1;' 'func=$2;' 'shift;' 'shift;' while '$test' '$#' -ge '2;' do case '"$1"' in '$define)' echo '"#include' '<$2>";;' esac ';' shift '2;' done '>' 'try.c;' '$cppstdin' '$cppflags' '$cppminus' '<' try.c '>' tryout.c '2>/dev/null;' if '$contains' '"$func.*("' tryout.c '>/dev/null' '2>&1;' then echo '"$func()' prototype 'found.";' 'val="$define";' else echo '"$func()' prototype NOT 'found.";' 'val="$undef";' 'fi;' set '$varname;' eval '$setvar;' '$rm' -f try.c tryout.c
++ varname=d_lseekproto
++ func=lseek
++ shift
++ shift
++ test 4 -ge 2
++ case "$1" in
++ echo '#include <sys/types.h>'
++ shift 2
++ test 2 -ge 2
++ case "$1" in
++ echo '#include <unistd.h>'
++ shift 2
++ test 0 -ge 2
++ gcc -E -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -
++ grep 'lseek.*(' tryout.c
++ echo 'lseek() prototype found.'
lseek() prototype found.
++ val=define
++ set d_lseekproto
++ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
+++ var=d_lseekproto
+++ eval 'was=$d_lseekproto'
++++ was=
+++ td=define
+++ tu=undef
+++ case "$val$was" in
+++ eval d_lseekproto=define
++++ d_lseekproto=define
++ /bin/rm -f try.c tryout.c
+ : see if lstat exists
+ set lstat d_lstat
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=lstat
++ var=d_lstat
++ eval 'was=$d_lstat'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set lstat tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=lstat
+++ case "$3" in
+++ tlook='^lstat$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^lstat$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'lstat() found.'
lstat() found.
++ case "$was" in
++ eval 'd_lstat=$td'
+++ d_lstat=define
+ : see if madvise exists
+ set madvise d_madvise
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=madvise
++ var=d_madvise
++ eval 'was=$d_madvise'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set madvise tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=madvise
+++ case "$3" in
+++ tlook='^madvise$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^madvise$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'madvise() NOT found.'
madvise() NOT found.
++ case "$was" in
++ eval 'd_madvise=$tu'
+++ d_madvise=undef
+ : see if malloc_size exists
+ set malloc_size d_malloc_size
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=malloc_size
++ var=d_malloc_size
++ eval 'was=$d_malloc_size'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set malloc_size tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=malloc_size
+++ case "$3" in
+++ tlook='^malloc_size$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^malloc_size$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'malloc_size() NOT found.'
malloc_size() NOT found.
++ case "$was" in
++ eval 'd_malloc_size=$tu'
+++ d_malloc_size=undef
+ : see if malloc_size_good exists
+ set malloc_good_size d_malloc_good_size
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=malloc_good_size
++ var=d_malloc_good_size
++ eval 'was=$d_malloc_good_size'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set malloc_good_size tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=malloc_good_size
+++ case "$3" in
+++ tlook='^malloc_good_size$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^malloc_good_size$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'malloc_good_size() NOT found.'
malloc_good_size() NOT found.
++ case "$was" in
++ eval 'd_malloc_good_size=$tu'
+++ d_malloc_good_size=undef
+ : see if mblen exists
+ set mblen d_mblen
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=mblen
++ var=d_mblen
++ eval 'was=$d_mblen'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set mblen tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=mblen
+++ case "$3" in
+++ tlook='^mblen$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^mblen$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'mblen() found.'
mblen() found.
++ case "$was" in
++ eval 'd_mblen=$td'
+++ d_mblen=define
+ : see if mbstowcs exists
+ set mbstowcs d_mbstowcs
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=mbstowcs
++ var=d_mbstowcs
++ eval 'was=$d_mbstowcs'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set mbstowcs tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=mbstowcs
+++ case "$3" in
+++ tlook='^mbstowcs$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^mbstowcs$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'mbstowcs() found.'
mbstowcs() found.
++ case "$was" in
++ eval 'd_mbstowcs=$td'
+++ d_mbstowcs=define
+ : see if mbtowc exists
+ set mbtowc d_mbtowc
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=mbtowc
++ var=d_mbtowc
++ eval 'was=$d_mbtowc'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set mbtowc tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=mbtowc
+++ case "$3" in
+++ tlook='^mbtowc$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^mbtowc$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'mbtowc() found.'
mbtowc() found.
++ case "$was" in
++ eval 'd_mbtowc=$td'
+++ d_mbtowc=define
+ : see if memchr exists
+ set memchr d_memchr
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=memchr
++ var=d_memchr
++ eval 'was=$d_memchr'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set memchr tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=memchr
+++ case "$3" in
+++ tlook='^memchr$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^memchr$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'memchr() found.'
memchr() found.
++ case "$was" in
++ eval 'd_memchr=$td'
+++ d_memchr=define
+ : see if memcmp exists
+ set memcmp d_memcmp
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=memcmp
++ var=d_memcmp
++ eval 'was=$d_memcmp'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set memcmp tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=memcmp
+++ case "$3" in
+++ tlook='^memcmp$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^memcmp$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'memcmp() found.'
memcmp() found.
++ case "$was" in
++ eval 'd_memcmp=$td'
+++ d_memcmp=define
+ : see if memcpy exists
+ set memcpy d_memcpy
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=memcpy
++ var=d_memcpy
++ eval 'was=$d_memcpy'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set memcpy tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=memcpy
+++ case "$3" in
+++ tlook='^memcpy$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^memcpy$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'memcpy() found.'
memcpy() found.
++ case "$was" in
++ eval 'd_memcpy=$td'
+++ d_memcpy=define
+ : see if memmove exists
+ set memmove d_memmove
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=memmove
++ var=d_memmove
++ eval 'was=$d_memmove'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set memmove tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=memmove
+++ case "$3" in
+++ tlook='^memmove$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^memmove$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'memmove() found.'
memmove() found.
++ case "$was" in
++ eval 'd_memmove=$td'
+++ d_memmove=define
+ : see if memset exists
+ set memset d_memset
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=memset
++ var=d_memset
++ eval 'was=$d_memset'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set memset tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=memset
+++ case "$3" in
+++ tlook='^memset$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^memset$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'memset() found.'
memset() found.
++ case "$was" in
++ eval 'd_memset=$td'
+++ d_memset=define
+ : see if mkdir exists
+ set mkdir d_mkdir
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=mkdir
++ var=d_mkdir
++ eval 'was=$d_mkdir'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set mkdir tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=mkdir
+++ case "$3" in
+++ tlook='^mkdir$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^mkdir$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'mkdir() found.'
mkdir() found.
++ case "$was" in
++ eval 'd_mkdir=$td'
+++ d_mkdir=define
+ : see if mkdtemp exists
+ set mkdtemp d_mkdtemp
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=mkdtemp
++ var=d_mkdtemp
++ eval 'was=$d_mkdtemp'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set mkdtemp tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=mkdtemp
+++ case "$3" in
+++ tlook='^mkdtemp$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^mkdtemp$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'mkdtemp() NOT found.'
mkdtemp() NOT found.
++ case "$was" in
++ eval 'd_mkdtemp=$tu'
+++ d_mkdtemp=undef
+ : see if mkfifo exists
+ set mkfifo d_mkfifo
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=mkfifo
++ var=d_mkfifo
++ eval 'was=$d_mkfifo'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set mkfifo tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=mkfifo
+++ case "$3" in
+++ tlook='^mkfifo$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^mkfifo$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'mkfifo() found.'
mkfifo() found.
++ case "$was" in
++ eval 'd_mkfifo=$td'
+++ d_mkfifo=define
+ : see if mkstemp exists
+ set mkstemp d_mkstemp
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=mkstemp
++ var=d_mkstemp
++ eval 'was=$d_mkstemp'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set mkstemp tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=mkstemp
+++ case "$3" in
+++ tlook='^mkstemp$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^mkstemp$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'mkstemp() found.'
mkstemp() found.
++ case "$was" in
++ eval 'd_mkstemp=$td'
+++ d_mkstemp=define
+ : see if mkstemps exists
+ set mkstemps d_mkstemps
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=mkstemps
++ var=d_mkstemps
++ eval 'was=$d_mkstemps'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set mkstemps tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=mkstemps
+++ case "$3" in
+++ tlook='^mkstemps$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^mkstemps$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'mkstemps() NOT found.'
mkstemps() NOT found.
++ case "$was" in
++ eval 'd_mkstemps=$tu'
+++ d_mkstemps=undef
+ : see if mktime exists
+ set mktime d_mktime
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=mktime
++ var=d_mktime
++ eval 'was=$d_mktime'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set mktime tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=mktime
+++ case "$3" in
+++ tlook='^mktime$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^mktime$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'mktime() found.'
mktime() found.
++ case "$was" in
++ eval 'd_mktime=$td'
+++ d_mktime=define
+ : see if this is a sys/mman.h system
+ set sys/mman.h i_sysmman
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'yyy=$@;' 'cont=true;' 'xxf="echo' '\"<\$1>' 'found.\"' '>&4";' case '$#' in '2)' 'xxnf="echo' '\"<\$1>' NOT 'found.\"' '>&4";;' '*)' 'xxnf="echo' '\"<\$1>' NOT found, '...\"' '>&4";;' 'esac;' case '$#' in '4)' 'instead=instead;;' '*)' 'instead="at' 'last";;' 'esac;' while '$test' '"$cont";' do 'xxx=`./findhdr' '$1`' 'var=$2;' eval '"was=\$$2";' if '$test' '"$xxx"' '&&' '$test' -r '"$xxx";' then eval '$xxf;' eval '"case' '\"\$$var\"' in '$undef)' . './whoa;' 'esac";' eval '"$var=\$td";' 'cont="";' else eval '$xxnf;' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' 'fi;' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' case '$#' in '0)' 'cont="";;' '2)' 'xxf="echo' '\"but' I found '<\$1>' '$instead.\"' '>&4";' 'xxnf="echo' '\"and' I did not find '<\$1>' 'either.\"' '>&4";;' '*)' 'xxf="echo' '\"but' I found '<\$1\>' 'instead.\"' '>&4";' 'xxnf="echo' '\"there' is no '<\$1>,' '...\"' '>&4";;' 'esac;' 'done;' while '$test' '"$yyy";' do set '$yyy;' 'var=$2;' eval '"was=\$$2";' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' done
++ echo ' '
 
++ td=define
++ tu=undef
++ yyy='sys/mman.h i_sysmman'
++ cont=true
++ xxf='echo "<$1> found." >&4'
++ case $# in
++ xxnf='echo "<$1> NOT found." >&4'
++ case $# in
++ instead='at last'
++ test true
+++ ./findhdr sys/mman.h
++ xxx=/usr/include/sys/mman.h
++ var=i_sysmman
++ eval 'was=$i_sysmman'
+++ was=
++ test /usr/include/sys/mman.h
++ test -r /usr/include/sys/mman.h
++ eval echo '"<$1>' 'found."' '>&4'
+++ echo '<sys/mman.h> found.'
<sys/mman.h> found.
++ eval 'case "$i_sysmman" in undef) . ./whoa; esac'
+++ case "$i_sysmman" in
++ eval 'i_sysmman=$td'
+++ i_sysmman=define
++ cont=
++ set sys/mman.h i_sysmman
++ shift
++ shift
++ yyy=
++ case $# in
++ cont=
++ test ''
++ test ''
+ : see if mmap exists
+ set mmap d_mmap
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=mmap
++ var=d_mmap
++ eval 'was=$d_mmap'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set mmap tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=mmap
+++ case "$3" in
+++ tlook='^mmap$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^mmap$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'mmap() found.'
mmap() found.
++ case "$was" in
++ eval 'd_mmap=$td'
+++ d_mmap=define
+ : see what shmat returns
+ : default to something harmless
+ mmaptype='void *'
+ case "$i_sysmman$d_mmap" in
+ /bin/cat
+ gcc -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -c mmap.c
+ mmaptype=caddr_t
+ echo 'and it returns (caddr_t).'
and it returns (caddr_t).
+ : see if sqrtl exists
+ set sqrtl d_sqrtl
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=sqrtl
++ var=d_sqrtl
++ eval 'was=$d_sqrtl'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set sqrtl tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=sqrtl
+++ case "$3" in
+++ tlook='^sqrtl$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^sqrtl$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'sqrtl() NOT found.'
sqrtl() NOT found.
++ case "$was" in
++ eval 'd_sqrtl=$tu'
+++ d_sqrtl=undef
+ : see if scalbnl exists
+ set scalbnl d_scalbnl
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=scalbnl
++ var=d_scalbnl
++ eval 'was=$d_scalbnl'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set scalbnl tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=scalbnl
+++ case "$3" in
+++ tlook='^scalbnl$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^scalbnl$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'scalbnl() NOT found.'
scalbnl() NOT found.
++ case "$was" in
++ eval 'd_scalbnl=$tu'
+++ d_scalbnl=undef
+ : see if modfl exists
+ set modfl d_modfl
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=modfl
++ var=d_modfl
++ eval 'was=$d_modfl'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set modfl tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=modfl
+++ case "$3" in
+++ tlook='^modfl$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^modfl$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'modfl() NOT found.'
modfl() NOT found.
++ case "$was" in
++ eval 'd_modfl=$tu'
+++ d_modfl=undef
+ : see if prototype for modfl is available
+ echo ' '
 
+ set d_modflproto modfl define math.h
+ eval 'varname=$1;' 'func=$2;' 'shift;' 'shift;' while '$test' '$#' -ge '2;' do case '"$1"' in '$define)' echo '"#include' '<$2>";;' esac ';' shift '2;' done '>' 'try.c;' '$cppstdin' '$cppflags' '$cppminus' '<' try.c '>' tryout.c '2>/dev/null;' if '$contains' '"$func.*("' tryout.c '>/dev/null' '2>&1;' then echo '"$func()' prototype 'found.";' 'val="$define";' else echo '"$func()' prototype NOT 'found.";' 'val="$undef";' 'fi;' set '$varname;' eval '$setvar;' '$rm' -f try.c tryout.c
++ varname=d_modflproto
++ func=modfl
++ shift
++ shift
++ test 2 -ge 2
++ case "$1" in
++ echo '#include <math.h>'
++ shift 2
++ test 0 -ge 2
++ gcc -E -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -
++ grep 'modfl.*(' tryout.c
++ echo 'modfl() prototype NOT found.'
modfl() prototype NOT found.
++ val=undef
++ set d_modflproto
++ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
+++ var=d_modflproto
+++ eval 'was=$d_modflproto'
++++ was=
+++ td=define
+++ tu=undef
+++ case "$val$was" in
+++ eval d_modflproto=undef
++++ d_modflproto=undef
++ /bin/rm -f try.c tryout.c
+ d_modfl_pow32_bug=undef
+ case "$d_longdbl$d_modfl" in
+ test undef = define
+ : see if mprotect exists
+ set mprotect d_mprotect
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=mprotect
++ var=d_mprotect
++ eval 'was=$d_mprotect'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set mprotect tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=mprotect
+++ case "$3" in
+++ tlook='^mprotect$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^mprotect$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'mprotect() found.'
mprotect() found.
++ case "$was" in
++ eval 'd_mprotect=$td'
+++ d_mprotect=define
+ : see if msgctl exists
+ set msgctl d_msgctl
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=msgctl
++ var=d_msgctl
++ eval 'was=$d_msgctl'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set msgctl tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=msgctl
+++ case "$3" in
+++ tlook='^msgctl$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^msgctl$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'msgctl() NOT found.'
msgctl() NOT found.
++ case "$was" in
++ eval 'd_msgctl=$tu'
+++ d_msgctl=undef
+ : see if msgget exists
+ set msgget d_msgget
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=msgget
++ var=d_msgget
++ eval 'was=$d_msgget'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set msgget tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=msgget
+++ case "$3" in
+++ tlook='^msgget$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^msgget$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'msgget() NOT found.'
msgget() NOT found.
++ case "$was" in
++ eval 'd_msgget=$tu'
+++ d_msgget=undef
+ : see if msgsnd exists
+ set msgsnd d_msgsnd
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=msgsnd
++ var=d_msgsnd
++ eval 'was=$d_msgsnd'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set msgsnd tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=msgsnd
+++ case "$3" in
+++ tlook='^msgsnd$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^msgsnd$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'msgsnd() NOT found.'
msgsnd() NOT found.
++ case "$was" in
++ eval 'd_msgsnd=$tu'
+++ d_msgsnd=undef
+ : see if msgrcv exists
+ set msgrcv d_msgrcv
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=msgrcv
++ var=d_msgrcv
++ eval 'was=$d_msgrcv'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set msgrcv tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=msgrcv
+++ case "$3" in
+++ tlook='^msgrcv$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^msgrcv$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'msgrcv() NOT found.'
msgrcv() NOT found.
++ case "$was" in
++ eval 'd_msgrcv=$tu'
+++ d_msgrcv=undef
+ : see how much of the 'msg*(2)' library is present.
+ h_msg=true
+ echo ' '
 
+ case "$d_msgctl$d_msgget$d_msgsnd$d_msgrcv" in
+ h_msg=false
+ case "$osname" in
+ : we could also check for sys/ipc.h ...
+ false
+ echo 'You don'\''t have the full msg*(2) library.'
You don't have the full msg*(2) library.
+ val=undef
+ set d_msg
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=d_msg
++ eval 'was=$d_msg'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval d_msg=undef
+++ d_msg=undef
+ echo ' '
 
+ echo 'Checking to see if your system supports struct msghdr...'
Checking to see if your system supports struct msghdr...
+ set d_msghdr_s msghdr define sys/types.h define sys/socket.h define sys/uio.h
+ eval 'varname=$1;' 'struct=$2;' 'shift;' 'shift;' while '$test' '$#' -ge '2;' do case '"$1"' in '$define)' echo '"#include' '<$2>";;' esac ';' shift '2;' done '>' 'try.c;' echo '"int' main '()' '{' struct '$struct' 'foo;' '}"' '>>' 'try.c;' set 'try;' if eval '$compile;' then 'val="$define";' else 'val="$undef";' 'fi;' set '$varname;' eval '$setvar;' '$rm' -f try.c try.o
++ varname=d_msghdr_s
++ struct=msghdr
++ shift
++ shift
++ test 6 -ge 2
++ case "$1" in
++ echo '#include <sys/types.h>'
++ shift 2
++ test 4 -ge 2
++ case "$1" in
++ echo '#include <sys/socket.h>'
++ shift 2
++ test 2 -ge 2
++ case "$1" in
++ echo '#include <sys/uio.h>'
++ shift 2
++ test 0 -ge 2
++ echo 'int main () { struct msghdr foo; }'
++ set try
++ eval 'mc_file=$1;' 'shift;' '$cc' -o '${mc_file}' '$optimize' '$ccflags' '$ldflags' '$*' '${mc_file}.c' '$libs' '>' /dev/null '2>&1;'
+++ mc_file=try
+++ shift
+++ gcc -o try -O3 -fno-unit-at-a-time -s -mtune=pentium -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s try.c -lgdbm -lcrypt -lgdbm_compat
++ val=define
++ set d_msghdr_s
++ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
+++ var=d_msghdr_s
+++ eval 'was=$d_msghdr_s'
++++ was=
+++ td=define
+++ tu=undef
+++ case "$val$was" in
+++ eval d_msghdr_s=define
++++ d_msghdr_s=define
++ /bin/rm -f try.c try.o
+ case "$d_msghdr_s" in
+ echo 'Yes, it does.'
Yes, it does.
+ : see if msync exists
+ set msync d_msync
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=msync
++ var=d_msync
++ eval 'was=$d_msync'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set msync tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=msync
+++ case "$3" in
+++ tlook='^msync$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^msync$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'msync() found.'
msync() found.
++ case "$was" in
++ eval 'd_msync=$td'
+++ d_msync=define
+ : see if munmap exists
+ set munmap d_munmap
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=munmap
++ var=d_munmap
++ eval 'was=$d_munmap'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set munmap tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=munmap
+++ case "$3" in
+++ tlook='^munmap$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^munmap$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'munmap() found.'
munmap() found.
++ case "$was" in
++ eval 'd_munmap=$td'
+++ d_munmap=define
+ : see if nice exists
+ set nice d_nice
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=nice
++ var=d_nice
++ eval 'was=$d_nice'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set nice tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=nice
+++ case "$3" in
+++ tlook='^nice$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^nice$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'nice() found.'
nice() found.
++ case "$was" in
++ eval 'd_nice=$td'
+++ d_nice=define
+ : see if this is a langinfo.h system
+ set langinfo.h i_langinfo
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'yyy=$@;' 'cont=true;' 'xxf="echo' '\"<\$1>' 'found.\"' '>&4";' case '$#' in '2)' 'xxnf="echo' '\"<\$1>' NOT 'found.\"' '>&4";;' '*)' 'xxnf="echo' '\"<\$1>' NOT found, '...\"' '>&4";;' 'esac;' case '$#' in '4)' 'instead=instead;;' '*)' 'instead="at' 'last";;' 'esac;' while '$test' '"$cont";' do 'xxx=`./findhdr' '$1`' 'var=$2;' eval '"was=\$$2";' if '$test' '"$xxx"' '&&' '$test' -r '"$xxx";' then eval '$xxf;' eval '"case' '\"\$$var\"' in '$undef)' . './whoa;' 'esac";' eval '"$var=\$td";' 'cont="";' else eval '$xxnf;' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' 'fi;' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' case '$#' in '0)' 'cont="";;' '2)' 'xxf="echo' '\"but' I found '<\$1>' '$instead.\"' '>&4";' 'xxnf="echo' '\"and' I did not find '<\$1>' 'either.\"' '>&4";;' '*)' 'xxf="echo' '\"but' I found '<\$1\>' 'instead.\"' '>&4";' 'xxnf="echo' '\"there' is no '<\$1>,' '...\"' '>&4";;' 'esac;' 'done;' while '$test' '"$yyy";' do set '$yyy;' 'var=$2;' eval '"was=\$$2";' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' done
++ echo ' '
 
++ td=define
++ tu=undef
++ yyy='langinfo.h i_langinfo'
++ cont=true
++ xxf='echo "<$1> found." >&4'
++ case $# in
++ xxnf='echo "<$1> NOT found." >&4'
++ case $# in
++ instead='at last'
++ test true
+++ ./findhdr langinfo.h
++ xxx=
++ var=i_langinfo
++ eval 'was=$i_langinfo'
+++ was=
++ test ''
++ eval echo '"<$1>' NOT 'found."' '>&4'
+++ echo '<langinfo.h> NOT found.'
<langinfo.h> NOT found.
++ eval 'case "$i_langinfo" in define) . ./whoa; esac'
+++ case "$i_langinfo" in
++ eval 'i_langinfo=$tu'
+++ i_langinfo=undef
++ set langinfo.h i_langinfo
++ shift
++ shift
++ yyy=
++ case $# in
++ cont=
++ test ''
++ test ''
+ : see if nl_langinfo exists
+ set nl_langinfo d_nl_langinfo
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=nl_langinfo
++ var=d_nl_langinfo
++ eval 'was=$d_nl_langinfo'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set nl_langinfo tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=nl_langinfo
+++ case "$3" in
+++ tlook='^nl_langinfo$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^nl_langinfo$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'nl_langinfo() NOT found.'
nl_langinfo() NOT found.
++ case "$was" in
++ eval 'd_nl_langinfo=$tu'
+++ d_nl_langinfo=undef
+ : check for length of character
+ echo ' '
 
+ case "$charsize" in
+ echo 'Checking to see how big your characters are (hey, you never know)...'
Checking to see how big your characters are (hey, you never know)...
+ /bin/cat
+ set try
+ eval 'mc_file=$1;' 'shift;' '$cc' -o '${mc_file}' '$optimize' '$ccflags' '$ldflags' '$*' '${mc_file}.c' '$libs;'
++ mc_file=try
++ shift
++ gcc -o try -O3 -fno-unit-at-a-time -s -mtune=pentium -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s try.c -lgdbm -lcrypt -lgdbm_compat
++ ./try
+ dflt=1
+ rp='What is the size of a character (in bytes)?'
+ . ./myread
++ xxxm=1
++ case "$xxxm" in
++ case "$rp" in
+++ echo 'What is the size of a character (in bytes)? [1]  '
+++ wc -c
++ test 50 -ge 80
++ echo -n 'What is the size of a character (in bytes)? [1] '
What is the size of a character (in bytes)? [1] ++ ans='!'
++ case "$fastread" in
++ case "$dflt" in
++ ans=
++ case "$silent-$rp" in
++ echo ' '
 
++ expr X : 'X!'
++ case "$ans" in
++ ans=1
+ charsize=1
+ /bin/rm -f try.c try
+ : check for volatile keyword
+ echo ' '
 
+ echo 'Checking to see if your C compiler knows about "volatile"...'
Checking to see if your C compiler knows about "volatile"...
+ /bin/cat
+ gcc -c -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement try.c
+ val=define
+ echo 'Yup, it does.'
Yup, it does.
+ set d_volatile
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=d_volatile
++ eval 'was=$d_volatile'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval d_volatile=define
+++ d_volatile=define
+ /bin/rm -f try.c try.exe try.o
+ echo ' '
 
+ /bin/echo 'Choosing the C types to be used for Perl'\''s internal types...'
Choosing the C types to be used for Perl's internal types...
+ case "$use64bitint:$d_quad:$quadtype" in
+ ivtype='long long'
+ uvtype='unsigned long long'
+ ivsize=8
+ uvsize=8
+ case "$uselongdouble:$d_longdbl" in
+ nvtype=double
+ nvsize=8
+ /bin/echo '(IV will be long' 'long, 8 bytes)'
(IV will be long long, 8 bytes)
+ /bin/echo '(UV will be unsigned' long 'long, 8 bytes)'
(UV will be unsigned long long, 8 bytes)
+ /bin/echo '(NV will be double, 8 bytes)'
(NV will be double, 8 bytes)
+ /bin/cat
+ case "$i8type" in
+ case "$charsize" in
+ i8type=char
+ u8type='unsigned char'
+ i8size=1
+ u8size=1
+ case "$i8type" in
+ case "$i8type" in
+ case "$i16type" in
+ case "$shortsize" in
+ i16type=short
+ u16type='unsigned short'
+ i16size=2
+ u16size=2
+ case "$i16type" in
+ case "$i16type" in
+ case "$i32type" in
+ case "$longsize" in
+ i32type=long
+ u32type='unsigned long'
+ i32size=4
+ u32size=4
+ case "$i32type" in
+ case "$i32type" in
+ case "$i64type" in
+ case "$d_quad:$quadtype" in
+ i64type='long long'
+ u64type='unsigned long long'
+ i64size=8
+ u64size=8
+ /bin/echo 'Checking how many bits of your UVs your NVs can preserve...'
Checking how many bits of your UVs your NVs can preserve...
+ : volatile so that the compiler has to store it out to memory.
+ test Xdefine = Xdefine
+ volatile=volatile
+ /bin/cat
+ set try
+ d_nv_preserves_uv=undef
+ eval 'mc_file=$1;' 'shift;' '$cc' -o '${mc_file}' '$optimize' '$ccflags' '$ldflags' '$*' '${mc_file}.c' '$libs' '>' /dev/null '2>&1;'
++ mc_file=try
++ shift
++ gcc -o try -O3 -fno-unit-at-a-time -s -mtune=pentium -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s try.c -lgdbm -lcrypt -lgdbm_compat
++ ./try
+ nv_preserves_uv_bits=53
+ case "$nv_preserves_uv_bits" in
+ /bin/echo 'Your NVs can preserve only 53 bits of your UVs.'
Your NVs can preserve only 53 bits of your UVs.
+ d_nv_preserves_uv=undef
+ /bin/rm -f try.c try.exe try
+ /bin/echo 'Checking whether NV 0.0 is all bits zero in memory...'
Checking whether NV 0.0 is all bits zero in memory...
+ : volatile so that the compiler has to store it out to memory.
+ test Xdefine = Xdefine
+ volatile=volatile
+ /bin/cat
+ set try
+ d_nv_zero_is_allbits_zero=undef
+ eval 'mc_file=$1;' 'shift;' '$cc' -o '${mc_file}' '$optimize' '$ccflags' '$ldflags' '$*' '${mc_file}.c' '$libs' '>' /dev/null '2>&1;'
++ mc_file=try
++ shift
++ gcc -o try -O3 -fno-unit-at-a-time -s -mtune=pentium -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s try.c -lgdbm -lcrypt -lgdbm_compat
++ ./try
+ xxx=Yes
+ case "$?" in
+ case "$xxx" in
+ cat
0.0 is represented as all bits zero in memory
+ d_nv_zero_is_allbits_zero=define
+ /bin/rm -f try.c try.exe try
+ : check for off64_t
+ echo ' '
 
+ echo 'Checking to see if you have off64_t...'
Checking to see if you have off64_t...
+ /bin/cat
+ set try
+ eval 'mc_file=$1;' 'shift;' '$cc' -o '${mc_file}' '$optimize' '$ccflags' '$ldflags' '$*' '${mc_file}.c' '$libs' '>' /dev/null '2>&1;'
++ mc_file=try
++ shift
++ gcc -o try -O3 -fno-unit-at-a-time -s -mtune=pentium -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s try.c -lgdbm -lcrypt -lgdbm_compat
+ val=undef
+ echo 'You do not have off64_t.'
You do not have off64_t.
+ case "$lseeksize" in
+ /bin/rm -f try.c try
+ set d_off64_t
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=d_off64_t
++ eval 'was=$d_off64_t'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval d_off64_t=undef
+++ d_off64_t=undef
+ : how to create joinable pthreads
+ test Xundef = Xdefine -a Xdefine = Xdefine
+ d_old_pthread_create_joinable=undef
+ old_pthread_create_joinable=
+ : see if pause exists
+ set pause d_pause
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=pause
++ var=d_pause
++ eval 'was=$d_pause'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set pause tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=pause
+++ case "$3" in
+++ tlook='^pause$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^pause$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'pause() found.'
pause() found.
++ case "$was" in
++ eval 'd_pause=$td'
+++ d_pause=define
+ : see if pipe exists
+ set pipe d_pipe
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=pipe
++ var=d_pipe
++ eval 'was=$d_pipe'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set pipe tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=pipe
+++ case "$3" in
+++ tlook='^pipe$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^pipe$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'pipe() found.'
pipe() found.
++ case "$was" in
++ eval 'd_pipe=$td'
+++ d_pipe=define
+ : see if poll exists
+ set poll d_poll
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=poll
++ var=d_poll
++ eval 'was=$d_poll'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set poll tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=poll
+++ case "$3" in
+++ tlook='^poll$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^poll$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'poll() found.'
poll() found.
++ case "$was" in
++ eval 'd_poll=$td'
+++ d_poll=define
+ : see if readlink exists
+ set readlink d_readlink
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=readlink
++ var=d_readlink
++ eval 'was=$d_readlink'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set readlink tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=readlink
+++ case "$3" in
+++ tlook='^readlink$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^readlink$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'readlink() found.'
readlink() found.
++ case "$was" in
++ eval 'd_readlink=$td'
+++ d_readlink=define
+ echo ' '
 
+ procselfexe=
+ val=undef
+ case "$d_readlink" in
+ /proc/self/exe
./Configure: line 15134: /proc/self/exe: No such file or directory
+ /proc/curproc/file
./Configure: line 15142: /proc/curproc/file: No such file or directory
+ /bin/rm -f reflect
+ set d_procselfexe
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=d_procselfexe
++ eval 'was=$d_procselfexe'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval d_procselfexe=undef
+++ d_procselfexe=undef
+ : see whether the pthread_atfork exists
+ /bin/cat
+ : see if pthread_atfork exists
+ set try -DPTHREAD_ATFORK
+ eval 'mc_file=$1;' 'shift;' '$cc' -o '${mc_file}' '$optimize' '$ccflags' '$ldflags' '$*' '${mc_file}.c' '$libs' '>' /dev/null '2>&1;'
++ mc_file=try
++ shift
++ gcc -o try -O3 -fno-unit-at-a-time -s -mtune=pentium -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s -DPTHREAD_ATFORK try.c -lgdbm -lcrypt -lgdbm_compat
+ val=define
+ case "$usethreads" in
+ set d_pthread_atfork
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=d_pthread_atfork
++ eval 'was=$d_pthread_atfork'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval d_pthread_atfork=define
+++ d_pthread_atfork=define
+ : see if pthread_attr_setscope exists
+ set pthread_attr_setscope d_pthread_attr_setscope
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=pthread_attr_setscope
++ var=d_pthread_attr_setscope
++ eval 'was=$d_pthread_attr_setscope'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set pthread_attr_setscope tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=pthread_attr_setscope
+++ case "$3" in
+++ tlook='^pthread_attr_setscope$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^pthread_attr_setscope$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'pthread_attr_setscope() found.'
pthread_attr_setscope() found.
++ case "$was" in
++ eval 'd_pthread_attr_setscope=$td'
+++ d_pthread_attr_setscope=define
+ : see whether the various POSIXish _yields exist
+ /bin/cat
+ : see if sched_yield exists
+ set try -DSCHED_YIELD
+ eval 'mc_file=$1;' 'shift;' '$cc' -o '${mc_file}' '$optimize' '$ccflags' '$ldflags' '$*' '${mc_file}.c' '$libs' '>' /dev/null '2>&1;'
++ mc_file=try
++ shift
++ gcc -o try -O3 -fno-unit-at-a-time -s -mtune=pentium -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s -DSCHED_YIELD try.c -lgdbm -lcrypt -lgdbm_compat
+ val=define
+ sched_yield='sched_yield()'
+ case "$usethreads" in
+ set d_sched_yield
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=d_sched_yield
++ eval 'was=$d_sched_yield'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval d_sched_yield=define
+++ d_sched_yield=define
+ : see if pthread_yield exists
+ set try -DPTHREAD_YIELD
+ eval 'mc_file=$1;' 'shift;' '$cc' -o '${mc_file}' '$optimize' '$ccflags' '$ldflags' '$*' '${mc_file}.c' '$libs' '>' /dev/null '2>&1;'
++ mc_file=try
++ shift
++ gcc -o try -O3 -fno-unit-at-a-time -s -mtune=pentium -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s -DPTHREAD_YIELD try.c -lgdbm -lcrypt -lgdbm_compat
+ set try -DPTHREAD_YIELD_NULL
+ eval 'mc_file=$1;' 'shift;' '$cc' -o '${mc_file}' '$optimize' '$ccflags' '$ldflags' '$*' '${mc_file}.c' '$libs' '>' /dev/null '2>&1;'
++ mc_file=try
++ shift
++ gcc -o try -O3 -fno-unit-at-a-time -s -mtune=pentium -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s -DPTHREAD_YIELD_NULL try.c -lgdbm -lcrypt -lgdbm_compat
+ val=undef
+ case "$usethreads" in
+ set d_pthread_yield
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=d_pthread_yield
++ eval 'was=$d_pthread_yield'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval d_pthread_yield=undef
+++ d_pthread_yield=undef
+ case "$sched_yield" in
+ /bin/rm -f try try.c
+ : see if random_r exists
+ set random_r d_random_r
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=random_r
++ var=d_random_r
++ eval 'was=$d_random_r'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set random_r tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=random_r
+++ case "$3" in
+++ tlook='^random_r$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^random_r$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'random_r() NOT found.'
random_r() NOT found.
++ case "$was" in
++ eval 'd_random_r=$tu'
+++ d_random_r=undef
+ case "$d_random_r" in
+ random_r_proto=0
+ : see if readdir and friends exist
+ set readdir d_readdir
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=readdir
++ var=d_readdir
++ eval 'was=$d_readdir'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set readdir tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=readdir
+++ case "$3" in
+++ tlook='^readdir$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^readdir$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'readdir() found.'
readdir() found.
++ case "$was" in
++ eval 'd_readdir=$td'
+++ d_readdir=define
+ set seekdir d_seekdir
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=seekdir
++ var=d_seekdir
++ eval 'was=$d_seekdir'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set seekdir tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=seekdir
+++ case "$3" in
+++ tlook='^seekdir$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^seekdir$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'seekdir() found.'
seekdir() found.
++ case "$was" in
++ eval 'd_seekdir=$td'
+++ d_seekdir=define
+ set telldir d_telldir
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=telldir
++ var=d_telldir
++ eval 'was=$d_telldir'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set telldir tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=telldir
+++ case "$3" in
+++ tlook='^telldir$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^telldir$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'telldir() found.'
telldir() found.
++ case "$was" in
++ eval 'd_telldir=$td'
+++ d_telldir=define
+ set rewinddir d_rewinddir
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=rewinddir
++ var=d_rewinddir
++ eval 'was=$d_rewinddir'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set rewinddir tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=rewinddir
+++ case "$3" in
+++ tlook='^rewinddir$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^rewinddir$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'rewinddir() found.'
rewinddir() found.
++ case "$was" in
++ eval 'd_rewinddir=$td'
+++ d_rewinddir=define
+ : see if readdir64_r exists
+ set readdir64_r d_readdir64_r
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=readdir64_r
++ var=d_readdir64_r
++ eval 'was=$d_readdir64_r'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set readdir64_r tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=readdir64_r
+++ case "$3" in
+++ tlook='^readdir64_r$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^readdir64_r$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'readdir64_r() NOT found.'
readdir64_r() NOT found.
++ case "$was" in
++ eval 'd_readdir64_r=$tu'
+++ d_readdir64_r=undef
+ case "$d_readdir64_r" in
+ readdir64_r_proto=0
+ : see if readdir_r exists
+ set readdir_r d_readdir_r
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=readdir_r
++ var=d_readdir_r
++ eval 'was=$d_readdir_r'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set readdir_r tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=readdir_r
+++ case "$3" in
+++ tlook='^readdir_r$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^readdir_r$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'readdir_r() NOT found.'
readdir_r() NOT found.
++ case "$was" in
++ eval 'd_readdir_r=$tu'
+++ d_readdir_r=undef
+ case "$d_readdir_r" in
+ readdir_r_proto=0
+ : see if readv exists
+ set readv d_readv
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=readv
++ var=d_readv
++ eval 'was=$d_readv'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set readv tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=readv
+++ case "$3" in
+++ tlook='^readv$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^readv$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'readv() found.'
readv() found.
++ case "$was" in
++ eval 'd_readv=$td'
+++ d_readv=define
+ : see if recvmsg exists
+ set recvmsg d_recvmsg
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=recvmsg
++ var=d_recvmsg
++ eval 'was=$d_recvmsg'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set recvmsg tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=recvmsg
+++ case "$3" in
+++ tlook='^recvmsg$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^recvmsg$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'recvmsg() NOT found.'
recvmsg() NOT found.
++ case "$was" in
++ eval 'd_recvmsg=$tu'
+++ d_recvmsg=undef
+ : see if rename exists
+ set rename d_rename
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=rename
++ var=d_rename
++ eval 'was=$d_rename'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set rename tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=rename
+++ case "$3" in
+++ tlook='^rename$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^rename$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'rename() found.'
rename() found.
++ case "$was" in
++ eval 'd_rename=$td'
+++ d_rename=define
+ : see if rmdir exists
+ set rmdir d_rmdir
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=rmdir
++ var=d_rmdir
++ eval 'was=$d_rmdir'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set rmdir tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=rmdir
+++ case "$3" in
+++ tlook='^rmdir$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^rmdir$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'rmdir() found.'
rmdir() found.
++ case "$was" in
++ eval 'd_rmdir=$td'
+++ d_rmdir=define
+ : see if memory.h is available.
+ val=
+ set memory.h val
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'yyy=$@;' 'cont=true;' 'xxf="echo' '\"<\$1>' 'found.\"' '>&4";' case '$#' in '2)' 'xxnf="echo' '\"<\$1>' NOT 'found.\"' '>&4";;' '*)' 'xxnf="echo' '\"<\$1>' NOT found, '...\"' '>&4";;' 'esac;' case '$#' in '4)' 'instead=instead;;' '*)' 'instead="at' 'last";;' 'esac;' while '$test' '"$cont";' do 'xxx=`./findhdr' '$1`' 'var=$2;' eval '"was=\$$2";' if '$test' '"$xxx"' '&&' '$test' -r '"$xxx";' then eval '$xxf;' eval '"case' '\"\$$var\"' in '$undef)' . './whoa;' 'esac";' eval '"$var=\$td";' 'cont="";' else eval '$xxnf;' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' 'fi;' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' case '$#' in '0)' 'cont="";;' '2)' 'xxf="echo' '\"but' I found '<\$1>' '$instead.\"' '>&4";' 'xxnf="echo' '\"and' I did not find '<\$1>' 'either.\"' '>&4";;' '*)' 'xxf="echo' '\"but' I found '<\$1\>' 'instead.\"' '>&4";' 'xxnf="echo' '\"there' is no '<\$1>,' '...\"' '>&4";;' 'esac;' 'done;' while '$test' '"$yyy";' do set '$yyy;' 'var=$2;' eval '"was=\$$2";' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' done
++ echo ' '
 
++ td=define
++ tu=undef
++ yyy='memory.h val'
++ cont=true
++ xxf='echo "<$1> found." >&4'
++ case $# in
++ xxnf='echo "<$1> NOT found." >&4'
++ case $# in
++ instead='at last'
++ test true
+++ ./findhdr memory.h
++ xxx=/usr/include/memory.h
++ var=val
++ eval 'was=$val'
+++ was=
++ test /usr/include/memory.h
++ test -r /usr/include/memory.h
++ eval echo '"<$1>' 'found."' '>&4'
+++ echo '<memory.h> found.'
<memory.h> found.
++ eval 'case "$val" in undef) . ./whoa; esac'
+++ case "$val" in
++ eval 'val=$td'
+++ val=define
++ cont=
++ set memory.h val
++ shift
++ shift
++ yyy=
++ case $# in
++ cont=
++ test ''
++ test ''
+ : See if it conflicts with string.h
+ case "$val" in
+ case "$strings" in
+ gcc -E -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -
+ grep memcpy mem.h
+ echo ' '
 
+ echo 'We won'\''t be including <memory.h>.'
We won't be including <memory.h>.
+ val=undef
+ /bin/rm -f mem.h
+ set i_memory
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=i_memory
++ eval 'was=$i_memory'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval i_memory=undef
+++ i_memory=undef
+ : can bcopy handle overlapping 'blocks?'
+ echo ' '
 
+ val=undef
+ case "$d_memmove" in
+ echo 'I'\''ll use memmove() instead of bcopy() for overlapping copies.'
I'll use memmove() instead of bcopy() for overlapping copies.
+ set d_safebcpy
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=d_safebcpy
++ eval 'was=$d_safebcpy'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval d_safebcpy=undef
+++ d_safebcpy=undef
+ : can memcpy handle overlapping 'blocks?'
+ echo ' '
 
+ val=undef
+ case "$d_memmove" in
+ echo 'I'\''ll use memmove() instead of memcpy() for overlapping copies.'
I'll use memmove() instead of memcpy() for overlapping copies.
+ set d_safemcpy
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=d_safemcpy
++ eval 'was=$d_safemcpy'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval d_safemcpy=undef
+++ d_safemcpy=undef
+ : can memcmp be trusted to compare relative 'magnitude?'
+ val=undef
+ case "$d_memcmp" in
+ echo ' '
 
+ echo 'Checking if your memcmp() can compare relative magnitude...'
Checking if your memcmp() can compare relative magnitude...
+ /bin/cat
+ /bin/cat
+ set try
+ eval 'mc_file=$1;' 'shift;' '$cc' -o '${mc_file}' '$optimize' '$ccflags' '$ldflags' '$*' '${mc_file}.c' '$libs;'
++ mc_file=try
++ shift
++ gcc -o try -O3 -fno-unit-at-a-time -s -mtune=pentium -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s try.c -lgdbm -lcrypt -lgdbm_compat
+ ./try
+ echo 'Yes, it can.'
Yes, it can.
+ val=define
+ /bin/rm -f try.c try.exe try core
+ set d_sanemcmp
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=d_sanemcmp
++ eval 'was=$d_sanemcmp'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval d_sanemcmp=define
+++ d_sanemcmp=define
+ : see if prototype for sbrk is available
+ echo ' '
 
+ set d_sbrkproto sbrk define unistd.h
+ eval 'varname=$1;' 'func=$2;' 'shift;' 'shift;' while '$test' '$#' -ge '2;' do case '"$1"' in '$define)' echo '"#include' '<$2>";;' esac ';' shift '2;' done '>' 'try.c;' '$cppstdin' '$cppflags' '$cppminus' '<' try.c '>' tryout.c '2>/dev/null;' if '$contains' '"$func.*("' tryout.c '>/dev/null' '2>&1;' then echo '"$func()' prototype 'found.";' 'val="$define";' else echo '"$func()' prototype NOT 'found.";' 'val="$undef";' 'fi;' set '$varname;' eval '$setvar;' '$rm' -f try.c tryout.c
++ varname=d_sbrkproto
++ func=sbrk
++ shift
++ shift
++ test 2 -ge 2
++ case "$1" in
++ echo '#include <unistd.h>'
++ shift 2
++ test 0 -ge 2
++ gcc -E -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -
++ grep 'sbrk.*(' tryout.c
++ echo 'sbrk() prototype found.'
sbrk() prototype found.
++ val=define
++ set d_sbrkproto
++ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
+++ var=d_sbrkproto
+++ eval 'was=$d_sbrkproto'
++++ was=
+++ td=define
+++ tu=undef
+++ case "$val$was" in
+++ eval d_sbrkproto=define
++++ d_sbrkproto=define
++ /bin/rm -f try.c tryout.c
+ : see if select exists
+ set select d_select
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=select
++ var=d_select
++ eval 'was=$d_select'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set select tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=select
+++ case "$3" in
+++ tlook='^select$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^select$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'select() found.'
select() found.
++ case "$was" in
++ eval 'd_select=$td'
+++ d_select=define
+ : see if semctl exists
+ set semctl d_semctl
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=semctl
++ var=d_semctl
++ eval 'was=$d_semctl'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set semctl tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=semctl
+++ case "$3" in
+++ tlook='^semctl$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^semctl$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'semctl() NOT found.'
semctl() NOT found.
++ case "$was" in
++ eval 'd_semctl=$tu'
+++ d_semctl=undef
+ : see if semget exists
+ set semget d_semget
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=semget
++ var=d_semget
++ eval 'was=$d_semget'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set semget tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=semget
+++ case "$3" in
+++ tlook='^semget$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^semget$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'semget() NOT found.'
semget() NOT found.
++ case "$was" in
++ eval 'd_semget=$tu'
+++ d_semget=undef
+ : see if semop exists
+ set semop d_semop
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=semop
++ var=d_semop
++ eval 'was=$d_semop'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set semop tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=semop
+++ case "$3" in
+++ tlook='^semop$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^semop$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'semop() NOT found.'
semop() NOT found.
++ case "$was" in
++ eval 'd_semop=$tu'
+++ d_semop=undef
+ : see how much of the 'sem*(2)' library is present.
+ h_sem=true
+ echo ' '
 
+ case "$d_semctl$d_semget$d_semop" in
+ h_sem=false
+ case "$osname" in
+ : we could also check for sys/ipc.h ...
+ false
+ echo 'You don'\''t have the full sem*(2) library.'
You don't have the full sem*(2) library.
+ val=undef
+ set d_sem
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=d_sem
++ eval 'was=$d_sem'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval d_sem=undef
+++ d_sem=undef
+ : see whether sys/sem.h defines union semun
+ echo ' '
 
+ /bin/cat
+ set try
+ eval 'mc_file=$1;' 'shift;' '$cc' -o '${mc_file}' '$optimize' '$ccflags' '$ldflags' '$*' '${mc_file}.c' '$libs' '>' /dev/null '2>&1;'
++ mc_file=try
++ shift
++ gcc -o try -O3 -fno-unit-at-a-time -s -mtune=pentium -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s try.c -lgdbm -lcrypt -lgdbm_compat
+ echo 'You do not have union semun in <sys/sem.h>.'
You do not have union semun in <sys/sem.h>.
+ val=undef
+ /bin/rm -f try try.c
+ set d_union_semun
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=d_union_semun
++ eval 'was=$d_union_semun'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval d_union_semun=undef
+++ d_union_semun=undef
+ : see how to do semctl IPC_STAT
+ case "$d_sem" in
+ val=undef
+ set d_semctl_semun
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=d_semctl_semun
++ eval 'was=$d_semctl_semun'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval d_semctl_semun=undef
+++ d_semctl_semun=undef
+ set d_semctl_semid_ds
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=d_semctl_semid_ds
++ eval 'was=$d_semctl_semid_ds'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval d_semctl_semid_ds=undef
+++ d_semctl_semid_ds=undef
+ : see if sendmsg exists
+ set sendmsg d_sendmsg
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=sendmsg
++ var=d_sendmsg
++ eval 'was=$d_sendmsg'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set sendmsg tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=sendmsg
+++ case "$3" in
+++ tlook='^sendmsg$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^sendmsg$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'sendmsg() NOT found.'
sendmsg() NOT found.
++ case "$was" in
++ eval 'd_sendmsg=$tu'
+++ d_sendmsg=undef
+ : see if setegid exists
+ set setegid d_setegid
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=setegid
++ var=d_setegid
++ eval 'was=$d_setegid'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set setegid tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=setegid
+++ case "$3" in
+++ tlook='^setegid$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^setegid$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'setegid() found.'
setegid() found.
++ case "$was" in
++ eval 'd_setegid=$td'
+++ d_setegid=define
+ : see if seteuid exists
+ set seteuid d_seteuid
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=seteuid
++ var=d_seteuid
++ eval 'was=$d_seteuid'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set seteuid tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=seteuid
+++ case "$3" in
+++ tlook='^seteuid$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^seteuid$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'seteuid() found.'
seteuid() found.
++ case "$was" in
++ eval 'd_seteuid=$td'
+++ d_seteuid=define
+ : see if setgrent exists
+ set setgrent d_setgrent
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=setgrent
++ var=d_setgrent
++ eval 'was=$d_setgrent'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set setgrent tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=setgrent
+++ case "$3" in
+++ tlook='^setgrent$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^setgrent$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'setgrent() found.'
setgrent() found.
++ case "$was" in
++ eval 'd_setgrent=$td'
+++ d_setgrent=define
+ : see if setgrent_r exists
+ set setgrent_r d_setgrent_r
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=setgrent_r
++ var=d_setgrent_r
++ eval 'was=$d_setgrent_r'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set setgrent_r tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=setgrent_r
+++ case "$3" in
+++ tlook='^setgrent_r$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^setgrent_r$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'setgrent_r() NOT found.'
setgrent_r() NOT found.
++ case "$was" in
++ eval 'd_setgrent_r=$tu'
+++ d_setgrent_r=undef
+ case "$d_setgrent_r" in
+ setgrent_r_proto=0
+ : see if sethostent exists
+ set sethostent d_sethent
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=sethostent
++ var=d_sethent
++ eval 'was=$d_sethent'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set sethostent tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=sethostent
+++ case "$3" in
+++ tlook='^sethostent$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^sethostent$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'sethostent() found.'
sethostent() found.
++ case "$was" in
++ eval 'd_sethent=$td'
+++ d_sethent=define
+ : see if sethostent_r exists
+ set sethostent_r d_sethostent_r
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=sethostent_r
++ var=d_sethostent_r
++ eval 'was=$d_sethostent_r'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set sethostent_r tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=sethostent_r
+++ case "$3" in
+++ tlook='^sethostent_r$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^sethostent_r$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'sethostent_r() NOT found.'
sethostent_r() NOT found.
++ case "$was" in
++ eval 'd_sethostent_r=$tu'
+++ d_sethostent_r=undef
+ case "$d_sethostent_r" in
+ sethostent_r_proto=0
+ : see if setitimer exists
+ set setitimer d_setitimer
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=setitimer
++ var=d_setitimer
++ eval 'was=$d_setitimer'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set setitimer tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=setitimer
+++ case "$3" in
+++ tlook='^setitimer$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^setitimer$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'setitimer() found.'
setitimer() found.
++ case "$was" in
++ eval 'd_setitimer=$td'
+++ d_setitimer=define
+ : see if setlinebuf exists
+ set setlinebuf d_setlinebuf
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=setlinebuf
++ var=d_setlinebuf
++ eval 'was=$d_setlinebuf'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set setlinebuf tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=setlinebuf
+++ case "$3" in
+++ tlook='^setlinebuf$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^setlinebuf$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'setlinebuf() NOT found.'
setlinebuf() NOT found.
++ case "$was" in
++ eval 'd_setlinebuf=$tu'
+++ d_setlinebuf=undef
+ : see if setlocale exists
+ set setlocale d_setlocale
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=setlocale
++ var=d_setlocale
++ eval 'was=$d_setlocale'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set setlocale tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=setlocale
+++ case "$3" in
+++ tlook='^setlocale$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^setlocale$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'setlocale() found.'
setlocale() found.
++ case "$was" in
++ eval 'd_setlocale=$td'
+++ d_setlocale=define
+ : see if locale.h is available
+ set locale.h i_locale
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'yyy=$@;' 'cont=true;' 'xxf="echo' '\"<\$1>' 'found.\"' '>&4";' case '$#' in '2)' 'xxnf="echo' '\"<\$1>' NOT 'found.\"' '>&4";;' '*)' 'xxnf="echo' '\"<\$1>' NOT found, '...\"' '>&4";;' 'esac;' case '$#' in '4)' 'instead=instead;;' '*)' 'instead="at' 'last";;' 'esac;' while '$test' '"$cont";' do 'xxx=`./findhdr' '$1`' 'var=$2;' eval '"was=\$$2";' if '$test' '"$xxx"' '&&' '$test' -r '"$xxx";' then eval '$xxf;' eval '"case' '\"\$$var\"' in '$undef)' . './whoa;' 'esac";' eval '"$var=\$td";' 'cont="";' else eval '$xxnf;' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' 'fi;' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' case '$#' in '0)' 'cont="";;' '2)' 'xxf="echo' '\"but' I found '<\$1>' '$instead.\"' '>&4";' 'xxnf="echo' '\"and' I did not find '<\$1>' 'either.\"' '>&4";;' '*)' 'xxf="echo' '\"but' I found '<\$1\>' 'instead.\"' '>&4";' 'xxnf="echo' '\"there' is no '<\$1>,' '...\"' '>&4";;' 'esac;' 'done;' while '$test' '"$yyy";' do set '$yyy;' 'var=$2;' eval '"was=\$$2";' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' done
++ echo ' '
 
++ td=define
++ tu=undef
++ yyy='locale.h i_locale'
++ cont=true
++ xxf='echo "<$1> found." >&4'
++ case $# in
++ xxnf='echo "<$1> NOT found." >&4'
++ case $# in
++ instead='at last'
++ test true
+++ ./findhdr locale.h
++ xxx=/usr/include/locale.h
++ var=i_locale
++ eval 'was=$i_locale'
+++ was=
++ test /usr/include/locale.h
++ test -r /usr/include/locale.h
++ eval echo '"<$1>' 'found."' '>&4'
+++ echo '<locale.h> found.'
<locale.h> found.
++ eval 'case "$i_locale" in undef) . ./whoa; esac'
+++ case "$i_locale" in
++ eval 'i_locale=$td'
+++ i_locale=define
++ cont=
++ set locale.h i_locale
++ shift
++ shift
++ yyy=
++ case $# in
++ cont=
++ test ''
++ test ''
+ : see if setlocale_r exists
+ set setlocale_r d_setlocale_r
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=setlocale_r
++ var=d_setlocale_r
++ eval 'was=$d_setlocale_r'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set setlocale_r tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=setlocale_r
+++ case "$3" in
+++ tlook='^setlocale_r$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^setlocale_r$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'setlocale_r() NOT found.'
setlocale_r() NOT found.
++ case "$was" in
++ eval 'd_setlocale_r=$tu'
+++ d_setlocale_r=undef
+ case "$d_setlocale_r" in
+ setlocale_r_proto=0
+ : see if setnetent exists
+ set setnetent d_setnent
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=setnetent
++ var=d_setnent
++ eval 'was=$d_setnent'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set setnetent tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=setnetent
+++ case "$3" in
+++ tlook='^setnetent$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^setnetent$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'setnetent() NOT found.'
setnetent() NOT found.
++ case "$was" in
++ eval 'd_setnent=$tu'
+++ d_setnent=undef
+ : see if setnetent_r exists
+ set setnetent_r d_setnetent_r
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=setnetent_r
++ var=d_setnetent_r
++ eval 'was=$d_setnetent_r'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set setnetent_r tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=setnetent_r
+++ case "$3" in
+++ tlook='^setnetent_r$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^setnetent_r$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'setnetent_r() NOT found.'
setnetent_r() NOT found.
++ case "$was" in
++ eval 'd_setnetent_r=$tu'
+++ d_setnetent_r=undef
+ case "$d_setnetent_r" in
+ setnetent_r_proto=0
+ : see if setprotoent exists
+ set setprotoent d_setpent
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=setprotoent
++ var=d_setpent
++ eval 'was=$d_setpent'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set setprotoent tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=setprotoent
+++ case "$3" in
+++ tlook='^setprotoent$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^setprotoent$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'setprotoent() NOT found.'
setprotoent() NOT found.
++ case "$was" in
++ eval 'd_setpent=$tu'
+++ d_setpent=undef
+ : see if setpgid exists
+ set setpgid d_setpgid
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=setpgid
++ var=d_setpgid
++ eval 'was=$d_setpgid'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set setpgid tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=setpgid
+++ case "$3" in
+++ tlook='^setpgid$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^setpgid$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'setpgid() found.'
setpgid() found.
++ case "$was" in
++ eval 'd_setpgid=$td'
+++ d_setpgid=define
+ : see if setpgrp2 exists
+ set setpgrp2 d_setpgrp2
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=setpgrp2
++ var=d_setpgrp2
++ eval 'was=$d_setpgrp2'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set setpgrp2 tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=setpgrp2
+++ case "$3" in
+++ tlook='^setpgrp2$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^setpgrp2$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'setpgrp2() NOT found.'
setpgrp2() NOT found.
++ case "$was" in
++ eval 'd_setpgrp2=$tu'
+++ d_setpgrp2=undef
+ : see if setpriority exists
+ set setpriority d_setprior
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=setpriority
++ var=d_setprior
++ eval 'was=$d_setprior'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set setpriority tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=setpriority
+++ case "$3" in
+++ tlook='^setpriority$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^setpriority$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'setpriority() NOT found.'
setpriority() NOT found.
++ case "$was" in
++ eval 'd_setprior=$tu'
+++ d_setprior=undef
+ : see if setproctitle exists
+ set setproctitle d_setproctitle
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=setproctitle
++ var=d_setproctitle
++ eval 'was=$d_setproctitle'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set setproctitle tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=setproctitle
+++ case "$3" in
+++ tlook='^setproctitle$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^setproctitle$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'setproctitle() NOT found.'
setproctitle() NOT found.
++ case "$was" in
++ eval 'd_setproctitle=$tu'
+++ d_setproctitle=undef
+ : see if setprotoent_r exists
+ set setprotoent_r d_setprotoent_r
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=setprotoent_r
++ var=d_setprotoent_r
++ eval 'was=$d_setprotoent_r'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set setprotoent_r tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=setprotoent_r
+++ case "$3" in
+++ tlook='^setprotoent_r$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^setprotoent_r$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'setprotoent_r() NOT found.'
setprotoent_r() NOT found.
++ case "$was" in
++ eval 'd_setprotoent_r=$tu'
+++ d_setprotoent_r=undef
+ case "$d_setprotoent_r" in
+ setprotoent_r_proto=0
+ : see if setpwent exists
+ set setpwent d_setpwent
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=setpwent
++ var=d_setpwent
++ eval 'was=$d_setpwent'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set setpwent tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=setpwent
+++ case "$3" in
+++ tlook='^setpwent$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^setpwent$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'setpwent() found.'
setpwent() found.
++ case "$was" in
++ eval 'd_setpwent=$td'
+++ d_setpwent=define
+ : see if setpwent_r exists
+ set setpwent_r d_setpwent_r
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=setpwent_r
++ var=d_setpwent_r
++ eval 'was=$d_setpwent_r'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set setpwent_r tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=setpwent_r
+++ case "$3" in
+++ tlook='^setpwent_r$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^setpwent_r$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'setpwent_r() NOT found.'
setpwent_r() NOT found.
++ case "$was" in
++ eval 'd_setpwent_r=$tu'
+++ d_setpwent_r=undef
+ case "$d_setpwent_r" in
+ setpwent_r_proto=0
+ : see if setregid exists
+ set setregid d_setregid
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=setregid
++ var=d_setregid
++ eval 'was=$d_setregid'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set setregid tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=setregid
+++ case "$3" in
+++ tlook='^setregid$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^setregid$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'setregid() NOT found.'
setregid() NOT found.
++ case "$was" in
++ eval 'd_setregid=$tu'
+++ d_setregid=undef
+ set setresgid d_setresgid
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=setresgid
++ var=d_setresgid
++ eval 'was=$d_setresgid'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set setresgid tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=setresgid
+++ case "$3" in
+++ tlook='^setresgid$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^setresgid$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'setresgid() NOT found.'
setresgid() NOT found.
++ case "$was" in
++ eval 'd_setresgid=$tu'
+++ d_setresgid=undef
+ : see if setreuid exists
+ set setreuid d_setreuid
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=setreuid
++ var=d_setreuid
++ eval 'was=$d_setreuid'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set setreuid tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=setreuid
+++ case "$3" in
+++ tlook='^setreuid$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^setreuid$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'setreuid() NOT found.'
setreuid() NOT found.
++ case "$was" in
++ eval 'd_setreuid=$tu'
+++ d_setreuid=undef
+ set setresuid d_setresuid
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=setresuid
++ var=d_setresuid
++ eval 'was=$d_setresuid'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set setresuid tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=setresuid
+++ case "$3" in
+++ tlook='^setresuid$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^setresuid$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'setresuid() NOT found.'
setresuid() NOT found.
++ case "$was" in
++ eval 'd_setresuid=$tu'
+++ d_setresuid=undef
+ : see if setrgid exists
+ set setrgid d_setrgid
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=setrgid
++ var=d_setrgid
++ eval 'was=$d_setrgid'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set setrgid tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=setrgid
+++ case "$3" in
+++ tlook='^setrgid$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^setrgid$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'setrgid() NOT found.'
setrgid() NOT found.
++ case "$was" in
++ eval 'd_setrgid=$tu'
+++ d_setrgid=undef
+ : see if setruid exists
+ set setruid d_setruid
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=setruid
++ var=d_setruid
++ eval 'was=$d_setruid'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set setruid tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=setruid
+++ case "$3" in
+++ tlook='^setruid$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^setruid$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'setruid() NOT found.'
setruid() NOT found.
++ case "$was" in
++ eval 'd_setruid=$tu'
+++ d_setruid=undef
+ : see if setservent exists
+ set setservent d_setsent
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=setservent
++ var=d_setsent
++ eval 'was=$d_setsent'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set setservent tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=setservent
+++ case "$3" in
+++ tlook='^setservent$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^setservent$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'setservent() NOT found.'
setservent() NOT found.
++ case "$was" in
++ eval 'd_setsent=$tu'
+++ d_setsent=undef
+ : see if setservent_r exists
+ set setservent_r d_setservent_r
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=setservent_r
++ var=d_setservent_r
++ eval 'was=$d_setservent_r'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set setservent_r tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=setservent_r
+++ case "$3" in
+++ tlook='^setservent_r$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^setservent_r$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'setservent_r() NOT found.'
setservent_r() NOT found.
++ case "$was" in
++ eval 'd_setservent_r=$tu'
+++ d_setservent_r=undef
+ case "$d_setservent_r" in
+ setservent_r_proto=0
+ : see if setsid exists
+ set setsid d_setsid
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=setsid
++ var=d_setsid
++ eval 'was=$d_setsid'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set setsid tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=setsid
+++ case "$3" in
+++ tlook='^setsid$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^setsid$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'setsid() found.'
setsid() found.
++ case "$was" in
++ eval 'd_setsid=$td'
+++ d_setsid=define
+ : see if setvbuf exists
+ set setvbuf d_setvbuf
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=setvbuf
++ var=d_setvbuf
++ eval 'was=$d_setvbuf'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set setvbuf tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=setvbuf
+++ case "$3" in
+++ tlook='^setvbuf$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^setvbuf$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'setvbuf() found.'
setvbuf() found.
++ case "$was" in
++ eval 'd_setvbuf=$td'
+++ d_setvbuf=define
+ : see if sfio.h is available
+ set sfio.h i_sfio
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'yyy=$@;' 'cont=true;' 'xxf="echo' '\"<\$1>' 'found.\"' '>&4";' case '$#' in '2)' 'xxnf="echo' '\"<\$1>' NOT 'found.\"' '>&4";;' '*)' 'xxnf="echo' '\"<\$1>' NOT found, '...\"' '>&4";;' 'esac;' case '$#' in '4)' 'instead=instead;;' '*)' 'instead="at' 'last";;' 'esac;' while '$test' '"$cont";' do 'xxx=`./findhdr' '$1`' 'var=$2;' eval '"was=\$$2";' if '$test' '"$xxx"' '&&' '$test' -r '"$xxx";' then eval '$xxf;' eval '"case' '\"\$$var\"' in '$undef)' . './whoa;' 'esac";' eval '"$var=\$td";' 'cont="";' else eval '$xxnf;' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' 'fi;' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' case '$#' in '0)' 'cont="";;' '2)' 'xxf="echo' '\"but' I found '<\$1>' '$instead.\"' '>&4";' 'xxnf="echo' '\"and' I did not find '<\$1>' 'either.\"' '>&4";;' '*)' 'xxf="echo' '\"but' I found '<\$1\>' 'instead.\"' '>&4";' 'xxnf="echo' '\"there' is no '<\$1>,' '...\"' '>&4";;' 'esac;' 'done;' while '$test' '"$yyy";' do set '$yyy;' 'var=$2;' eval '"was=\$$2";' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' done
++ echo ' '
 
++ td=define
++ tu=undef
++ yyy='sfio.h i_sfio'
++ cont=true
++ xxf='echo "<$1> found." >&4'
++ case $# in
++ xxnf='echo "<$1> NOT found." >&4'
++ case $# in
++ instead='at last'
++ test true
+++ ./findhdr sfio.h
++ xxx=
++ var=i_sfio
++ eval 'was=$i_sfio'
+++ was=
++ test ''
++ eval echo '"<$1>' NOT 'found."' '>&4'
+++ echo '<sfio.h> NOT found.'
<sfio.h> NOT found.
++ eval 'case "$i_sfio" in define) . ./whoa; esac'
+++ case "$i_sfio" in
++ eval 'i_sfio=$tu'
+++ i_sfio=undef
++ set sfio.h i_sfio
++ shift
++ shift
++ yyy=
++ case $# in
++ cont=
++ test ''
++ test ''
+ : see if sfio library is available
+ case "$i_sfio" in
+ val=undef
+ : Ok, but do we want to use it.
+ case "$val" in
+ case "$usesfio" in
+ set d_sfio
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=d_sfio
++ eval 'was=$d_sfio'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval d_sfio=undef
+++ d_sfio=undef
+ case "$d_sfio" in
+ usesfio=false
+ case "$d_sfio" in
+ : Remove sfio from list of libraries to use
+ case "$libs" in
+ : see if shmctl exists
+ set shmctl d_shmctl
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=shmctl
++ var=d_shmctl
++ eval 'was=$d_shmctl'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set shmctl tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=shmctl
+++ case "$3" in
+++ tlook='^shmctl$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^shmctl$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'shmctl() NOT found.'
shmctl() NOT found.
++ case "$was" in
++ eval 'd_shmctl=$tu'
+++ d_shmctl=undef
+ : see if shmget exists
+ set shmget d_shmget
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=shmget
++ var=d_shmget
++ eval 'was=$d_shmget'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set shmget tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=shmget
+++ case "$3" in
+++ tlook='^shmget$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^shmget$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'shmget() NOT found.'
shmget() NOT found.
++ case "$was" in
++ eval 'd_shmget=$tu'
+++ d_shmget=undef
+ : see if shmat exists
+ set shmat d_shmat
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=shmat
++ var=d_shmat
++ eval 'was=$d_shmat'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set shmat tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=shmat
+++ case "$3" in
+++ tlook='^shmat$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^shmat$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'shmat() NOT found.'
shmat() NOT found.
++ case "$was" in
++ eval 'd_shmat=$tu'
+++ d_shmat=undef
+ : see what shmat returns
+ case "$d_shmat" in
+ val=undef
+ set d_shmatprototype
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=d_shmatprototype
++ eval 'was=$d_shmatprototype'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval d_shmatprototype=undef
+++ d_shmatprototype=undef
+ : see if shmdt exists
+ set shmdt d_shmdt
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=shmdt
++ var=d_shmdt
++ eval 'was=$d_shmdt'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set shmdt tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=shmdt
+++ case "$3" in
+++ tlook='^shmdt$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^shmdt$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'shmdt() NOT found.'
shmdt() NOT found.
++ case "$was" in
++ eval 'd_shmdt=$tu'
+++ d_shmdt=undef
+ : see how much of the 'shm*(2)' library is present.
+ h_shm=true
+ echo ' '
 
+ case "$d_shmctl$d_shmget$d_shmat$d_shmdt" in
+ h_shm=false
+ case "$osname" in
+ : we could also check for sys/ipc.h ...
+ false
+ echo 'You don'\''t have the full shm*(2) library.'
You don't have the full shm*(2) library.
+ val=undef
+ set d_shm
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=d_shm
++ eval 'was=$d_shm'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval d_shm=undef
+++ d_shm=undef
+ echo ' '
 
+ : see if we have sigaction
+ set sigaction val -f d_sigaction
+ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
++ tlook=sigaction
++ case "$3" in
++ tlook='^sigaction$'
++ tf=libc.list
++ tdc='()'
++ tx=yes
++ case "$reuseval-$4" in
++ case "$tx" in
++ tval=false
++ test true = true
++ grep '^sigaction$' libc.list
++ tval=true
++ eval val=true
+++ val=true
+ true
+ echo 'sigaction() found.'
sigaction() found.
+ /bin/cat
+ set try
+ eval 'mc_file=$1;' 'shift;' '$cc' -o '${mc_file}' '$optimize' '$ccflags' '$ldflags' '$*' '${mc_file}.c' '$libs;'
++ mc_file=try
++ shift
++ gcc -o try -O3 -fno-unit-at-a-time -s -mtune=pentium -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s try.c -lgdbm -lcrypt -lgdbm_compat
+ val=define
+ set d_sigaction
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=d_sigaction
++ eval 'was=$d_sigaction'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval d_sigaction=define
+++ d_sigaction=define
+ /bin/rm -f try try.o try.c
+ : see if sigprocmask exists
+ set sigprocmask d_sigprocmask
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=sigprocmask
++ var=d_sigprocmask
++ eval 'was=$d_sigprocmask'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set sigprocmask tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=sigprocmask
+++ case "$3" in
+++ tlook='^sigprocmask$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^sigprocmask$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'sigprocmask() found.'
sigprocmask() found.
++ case "$was" in
++ eval 'd_sigprocmask=$td'
+++ d_sigprocmask=define
+ : see if sigsetjmp exists
+ echo ' '
 
+ case "$d_sigsetjmp" in
+ /bin/cat
+ set try
+ eval 'mc_file=$1;' 'shift;' '$cc' -o '${mc_file}' '$optimize' '$ccflags' '$ldflags' '$*' '${mc_file}.c' '$libs' '>' /dev/null '2>&1;'
++ mc_file=try
++ shift
++ gcc -o try -O3 -fno-unit-at-a-time -s -mtune=pentium -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s try.c -lgdbm -lcrypt -lgdbm_compat
+ ./try
+ echo 'POSIX sigsetjmp found.'
POSIX sigsetjmp found.
+ val=define
+ set d_sigsetjmp
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=d_sigsetjmp
++ eval 'was=$d_sigsetjmp'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval d_sigsetjmp=define
+++ d_sigsetjmp=define
+ /bin/rm -f try.c try
+ : see if sockatmark exists
+ set sockatmark d_sockatmark
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=sockatmark
++ var=d_sockatmark
++ eval 'was=$d_sockatmark'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set sockatmark tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=sockatmark
+++ case "$3" in
+++ tlook='^sockatmark$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^sockatmark$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'sockatmark() NOT found.'
sockatmark() NOT found.
++ case "$was" in
++ eval 'd_sockatmark=$tu'
+++ d_sockatmark=undef
+ : see if prototype for sockatmark is available
+ echo ' '
 
+ set d_sockatmarkproto sockatmark define sys/socket.h
+ eval 'varname=$1;' 'func=$2;' 'shift;' 'shift;' while '$test' '$#' -ge '2;' do case '"$1"' in '$define)' echo '"#include' '<$2>";;' esac ';' shift '2;' done '>' 'try.c;' '$cppstdin' '$cppflags' '$cppminus' '<' try.c '>' tryout.c '2>/dev/null;' if '$contains' '"$func.*("' tryout.c '>/dev/null' '2>&1;' then echo '"$func()' prototype 'found.";' 'val="$define";' else echo '"$func()' prototype NOT 'found.";' 'val="$undef";' 'fi;' set '$varname;' eval '$setvar;' '$rm' -f try.c tryout.c
++ varname=d_sockatmarkproto
++ func=sockatmark
++ shift
++ shift
++ test 2 -ge 2
++ case "$1" in
++ echo '#include <sys/socket.h>'
++ shift 2
++ test 0 -ge 2
++ gcc -E -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -
++ grep 'sockatmark.*(' tryout.c
++ echo 'sockatmark() prototype NOT found.'
sockatmark() prototype NOT found.
++ val=undef
++ set d_sockatmarkproto
++ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
+++ var=d_sockatmarkproto
+++ eval 'was=$d_sockatmarkproto'
++++ was=
+++ td=define
+++ tu=undef
+++ case "$val$was" in
+++ eval d_sockatmarkproto=undef
++++ d_sockatmarkproto=undef
++ /bin/rm -f try.c tryout.c
+ : see if socks5_init exists
+ set socks5_init d_socks5_init
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=socks5_init
++ var=d_socks5_init
++ eval 'was=$d_socks5_init'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set socks5_init tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=socks5_init
+++ case "$3" in
+++ tlook='^socks5_init$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^socks5_init$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'socks5_init() NOT found.'
socks5_init() NOT found.
++ case "$was" in
++ eval 'd_socks5_init=$tu'
+++ d_socks5_init=undef
+ : see if sprintf returns the length of the string in the buffer as per ANSI
+ /bin/echo 'Checking whether sprintf returns the length of the string...'
Checking whether sprintf returns the length of the string...
+ /bin/cat
+ set try
+ d_sprintf_returns_strlen=undef
+ eval 'mc_file=$1;' 'shift;' '$cc' -o '${mc_file}' '$optimize' '$ccflags' '$ldflags' '$*' '${mc_file}.c' '$libs' '>' /dev/null '2>&1;'
++ mc_file=try
++ shift
++ gcc -o try -O3 -fno-unit-at-a-time -s -mtune=pentium -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s try.c -lgdbm -lcrypt -lgdbm_compat
++ ./try
+ xxx=
+ case "$?" in
+ cat
sprintf returns the length of the string (as ANSI says it should)
+ d_sprintf_returns_strlen=define
+ /bin/rm -f try.c try.exe try
+ : see if srand48_r exists
+ set srand48_r d_srand48_r
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=srand48_r
++ var=d_srand48_r
++ eval 'was=$d_srand48_r'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set srand48_r tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=srand48_r
+++ case "$3" in
+++ tlook='^srand48_r$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^srand48_r$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'srand48_r() NOT found.'
srand48_r() NOT found.
++ case "$was" in
++ eval 'd_srand48_r=$tu'
+++ d_srand48_r=undef
+ case "$d_srand48_r" in
+ srand48_r_proto=0
+ : see if srandom_r exists
+ set srandom_r d_srandom_r
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=srandom_r
++ var=d_srandom_r
++ eval 'was=$d_srandom_r'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set srandom_r tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=srandom_r
+++ case "$3" in
+++ tlook='^srandom_r$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^srandom_r$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'srandom_r() NOT found.'
srandom_r() NOT found.
++ case "$was" in
++ eval 'd_srandom_r=$tu'
+++ d_srandom_r=undef
+ case "$d_srandom_r" in
+ srandom_r_proto=0
+ : see if prototype for setresgid is available
+ echo ' '
 
+ set d_sresgproto setresgid define unistd.h
+ eval 'varname=$1;' 'func=$2;' 'shift;' 'shift;' while '$test' '$#' -ge '2;' do case '"$1"' in '$define)' echo '"#include' '<$2>";;' esac ';' shift '2;' done '>' 'try.c;' '$cppstdin' '$cppflags' '$cppminus' '<' try.c '>' tryout.c '2>/dev/null;' if '$contains' '"$func.*("' tryout.c '>/dev/null' '2>&1;' then echo '"$func()' prototype 'found.";' 'val="$define";' else echo '"$func()' prototype NOT 'found.";' 'val="$undef";' 'fi;' set '$varname;' eval '$setvar;' '$rm' -f try.c tryout.c
++ varname=d_sresgproto
++ func=setresgid
++ shift
++ shift
++ test 2 -ge 2
++ case "$1" in
++ echo '#include <unistd.h>'
++ shift 2
++ test 0 -ge 2
++ gcc -E -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -
++ grep 'setresgid.*(' tryout.c
++ echo 'setresgid() prototype NOT found.'
setresgid() prototype NOT found.
++ val=undef
++ set d_sresgproto
++ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
+++ var=d_sresgproto
+++ eval 'was=$d_sresgproto'
++++ was=
+++ td=define
+++ tu=undef
+++ case "$val$was" in
+++ eval d_sresgproto=undef
++++ d_sresgproto=undef
++ /bin/rm -f try.c tryout.c
+ : see if prototype for setresuid is available
+ echo ' '
 
+ set d_sresuproto setresuid define unistd.h
+ eval 'varname=$1;' 'func=$2;' 'shift;' 'shift;' while '$test' '$#' -ge '2;' do case '"$1"' in '$define)' echo '"#include' '<$2>";;' esac ';' shift '2;' done '>' 'try.c;' '$cppstdin' '$cppflags' '$cppminus' '<' try.c '>' tryout.c '2>/dev/null;' if '$contains' '"$func.*("' tryout.c '>/dev/null' '2>&1;' then echo '"$func()' prototype 'found.";' 'val="$define";' else echo '"$func()' prototype NOT 'found.";' 'val="$undef";' 'fi;' set '$varname;' eval '$setvar;' '$rm' -f try.c tryout.c
++ varname=d_sresuproto
++ func=setresuid
++ shift
++ shift
++ test 2 -ge 2
++ case "$1" in
++ echo '#include <unistd.h>'
++ shift 2
++ test 0 -ge 2
++ gcc -E -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -
++ grep 'setresuid.*(' tryout.c
++ echo 'setresuid() prototype NOT found.'
setresuid() prototype NOT found.
++ val=undef
++ set d_sresuproto
++ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
+++ var=d_sresuproto
+++ eval 'was=$d_sresuproto'
++++ was=
+++ td=define
+++ tu=undef
+++ case "$val$was" in
+++ eval d_sresuproto=undef
++++ d_sresuproto=undef
++ /bin/rm -f try.c tryout.c
+ : see if sys/stat.h is available
+ set sys/stat.h i_sysstat
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'yyy=$@;' 'cont=true;' 'xxf="echo' '\"<\$1>' 'found.\"' '>&4";' case '$#' in '2)' 'xxnf="echo' '\"<\$1>' NOT 'found.\"' '>&4";;' '*)' 'xxnf="echo' '\"<\$1>' NOT found, '...\"' '>&4";;' 'esac;' case '$#' in '4)' 'instead=instead;;' '*)' 'instead="at' 'last";;' 'esac;' while '$test' '"$cont";' do 'xxx=`./findhdr' '$1`' 'var=$2;' eval '"was=\$$2";' if '$test' '"$xxx"' '&&' '$test' -r '"$xxx";' then eval '$xxf;' eval '"case' '\"\$$var\"' in '$undef)' . './whoa;' 'esac";' eval '"$var=\$td";' 'cont="";' else eval '$xxnf;' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' 'fi;' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' case '$#' in '0)' 'cont="";;' '2)' 'xxf="echo' '\"but' I found '<\$1>' '$instead.\"' '>&4";' 'xxnf="echo' '\"and' I did not find '<\$1>' 'either.\"' '>&4";;' '*)' 'xxf="echo' '\"but' I found '<\$1\>' 'instead.\"' '>&4";' 'xxnf="echo' '\"there' is no '<\$1>,' '...\"' '>&4";;' 'esac;' 'done;' while '$test' '"$yyy";' do set '$yyy;' 'var=$2;' eval '"was=\$$2";' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' done
++ echo ' '
 
++ td=define
++ tu=undef
++ yyy='sys/stat.h i_sysstat'
++ cont=true
++ xxf='echo "<$1> found." >&4'
++ case $# in
++ xxnf='echo "<$1> NOT found." >&4'
++ case $# in
++ instead='at last'
++ test true
+++ ./findhdr sys/stat.h
++ xxx=/usr/include/sys/stat.h
++ var=i_sysstat
++ eval 'was=$i_sysstat'
+++ was=
++ test /usr/include/sys/stat.h
++ test -r /usr/include/sys/stat.h
++ eval echo '"<$1>' 'found."' '>&4'
+++ echo '<sys/stat.h> found.'
<sys/stat.h> found.
++ eval 'case "$i_sysstat" in undef) . ./whoa; esac'
+++ case "$i_sysstat" in
++ eval 'i_sysstat=$td'
+++ i_sysstat=define
++ cont=
++ set sys/stat.h i_sysstat
++ shift
++ shift
++ yyy=
++ case $# in
++ cont=
++ test ''
++ test ''
+ : see if stat knows about block sizes
+ echo ' '
 
+ echo 'Checking to see if your struct stat has st_blocks field...'
Checking to see if your struct stat has st_blocks field...
+ set d_statblks stat st_blocks define sys/stat.h
+ eval 'varname=$1;' 'struct=$2;' 'field=$3;' 'shift;' 'shift;' 'shift;' while '$test' '$#' -ge '2;' do case '"$1"' in '$define)' echo '"#include' '<$2>";;' esac ';' shift '2;' done '>' 'try.c;' echo '"int' main '()' '{' struct '$struct' 'foo;' 'char*' 'bar;' bar = '(char*)foo.$field;' '}"' '>>' 'try.c;' set 'try;' if eval '$compile;' then 'val="$define";' else 'val="$undef";' 'fi;' set '$varname;' eval '$setvar;' '$rm' -f try.c try.o
++ varname=d_statblks
++ struct=stat
++ field=st_blocks
++ shift
++ shift
++ shift
++ test 2 -ge 2
++ case "$1" in
++ echo '#include <sys/stat.h>'
++ shift 2
++ test 0 -ge 2
++ echo 'int main () { struct stat foo; char* bar; bar = (char*)foo.st_blocks; }'
++ set try
++ eval 'mc_file=$1;' 'shift;' '$cc' -o '${mc_file}' '$optimize' '$ccflags' '$ldflags' '$*' '${mc_file}.c' '$libs' '>' /dev/null '2>&1;'
+++ mc_file=try
+++ shift
+++ gcc -o try -O3 -fno-unit-at-a-time -s -mtune=pentium -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s try.c -lgdbm -lcrypt -lgdbm_compat
++ val=define
++ set d_statblks
++ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
+++ var=d_statblks
+++ eval 'was=$d_statblks'
++++ was=
+++ td=define
+++ tu=undef
+++ case "$val$was" in
+++ eval d_statblks=define
++++ d_statblks=define
++ /bin/rm -f try.c try.o
+ : see if this is a sys/vfs.h system
+ set sys/vfs.h i_sysvfs
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'yyy=$@;' 'cont=true;' 'xxf="echo' '\"<\$1>' 'found.\"' '>&4";' case '$#' in '2)' 'xxnf="echo' '\"<\$1>' NOT 'found.\"' '>&4";;' '*)' 'xxnf="echo' '\"<\$1>' NOT found, '...\"' '>&4";;' 'esac;' case '$#' in '4)' 'instead=instead;;' '*)' 'instead="at' 'last";;' 'esac;' while '$test' '"$cont";' do 'xxx=`./findhdr' '$1`' 'var=$2;' eval '"was=\$$2";' if '$test' '"$xxx"' '&&' '$test' -r '"$xxx";' then eval '$xxf;' eval '"case' '\"\$$var\"' in '$undef)' . './whoa;' 'esac";' eval '"$var=\$td";' 'cont="";' else eval '$xxnf;' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' 'fi;' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' case '$#' in '0)' 'cont="";;' '2)' 'xxf="echo' '\"but' I found '<\$1>' '$instead.\"' '>&4";' 'xxnf="echo' '\"and' I did not find '<\$1>' 'either.\"' '>&4";;' '*)' 'xxf="echo' '\"but' I found '<\$1\>' 'instead.\"' '>&4";' 'xxnf="echo' '\"there' is no '<\$1>,' '...\"' '>&4";;' 'esac;' 'done;' while '$test' '"$yyy";' do set '$yyy;' 'var=$2;' eval '"was=\$$2";' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' done
++ echo ' '
 
++ td=define
++ tu=undef
++ yyy='sys/vfs.h i_sysvfs'
++ cont=true
++ xxf='echo "<$1> found." >&4'
++ case $# in
++ xxnf='echo "<$1> NOT found." >&4'
++ case $# in
++ instead='at last'
++ test true
+++ ./findhdr sys/vfs.h
++ xxx=/usr/include/sys/vfs.h
++ var=i_sysvfs
++ eval 'was=$i_sysvfs'
+++ was=
++ test /usr/include/sys/vfs.h
++ test -r /usr/include/sys/vfs.h
++ eval echo '"<$1>' 'found."' '>&4'
+++ echo '<sys/vfs.h> found.'
<sys/vfs.h> found.
++ eval 'case "$i_sysvfs" in undef) . ./whoa; esac'
+++ case "$i_sysvfs" in
++ eval 'i_sysvfs=$td'
+++ i_sysvfs=define
++ cont=
++ set sys/vfs.h i_sysvfs
++ shift
++ shift
++ yyy=
++ case $# in
++ cont=
++ test ''
++ test ''
+ : see if this is a sys/statfs.h system
+ set sys/statfs.h i_sysstatfs
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'yyy=$@;' 'cont=true;' 'xxf="echo' '\"<\$1>' 'found.\"' '>&4";' case '$#' in '2)' 'xxnf="echo' '\"<\$1>' NOT 'found.\"' '>&4";;' '*)' 'xxnf="echo' '\"<\$1>' NOT found, '...\"' '>&4";;' 'esac;' case '$#' in '4)' 'instead=instead;;' '*)' 'instead="at' 'last";;' 'esac;' while '$test' '"$cont";' do 'xxx=`./findhdr' '$1`' 'var=$2;' eval '"was=\$$2";' if '$test' '"$xxx"' '&&' '$test' -r '"$xxx";' then eval '$xxf;' eval '"case' '\"\$$var\"' in '$undef)' . './whoa;' 'esac";' eval '"$var=\$td";' 'cont="";' else eval '$xxnf;' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' 'fi;' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' case '$#' in '0)' 'cont="";;' '2)' 'xxf="echo' '\"but' I found '<\$1>' '$instead.\"' '>&4";' 'xxnf="echo' '\"and' I did not find '<\$1>' 'either.\"' '>&4";;' '*)' 'xxf="echo' '\"but' I found '<\$1\>' 'instead.\"' '>&4";' 'xxnf="echo' '\"there' is no '<\$1>,' '...\"' '>&4";;' 'esac;' 'done;' while '$test' '"$yyy";' do set '$yyy;' 'var=$2;' eval '"was=\$$2";' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' done
++ echo ' '
 
++ td=define
++ tu=undef
++ yyy='sys/statfs.h i_sysstatfs'
++ cont=true
++ xxf='echo "<$1> found." >&4'
++ case $# in
++ xxnf='echo "<$1> NOT found." >&4'
++ case $# in
++ instead='at last'
++ test true
+++ ./findhdr sys/statfs.h
++ xxx=
++ var=i_sysstatfs
++ eval 'was=$i_sysstatfs'
+++ was=
++ test ''
++ eval echo '"<$1>' NOT 'found."' '>&4'
+++ echo '<sys/statfs.h> NOT found.'
<sys/statfs.h> NOT found.
++ eval 'case "$i_sysstatfs" in define) . ./whoa; esac'
+++ case "$i_sysstatfs" in
++ eval 'i_sysstatfs=$tu'
+++ i_sysstatfs=undef
++ set sys/statfs.h i_sysstatfs
++ shift
++ shift
++ yyy=
++ case $# in
++ cont=
++ test ''
++ test ''
+ echo ' '
 
+ echo 'Checking to see if your system supports struct statfs...'
Checking to see if your system supports struct statfs...
+ set d_statfs_s statfs define sys/types.h define sys/param.h define sys/mount.h define sys/vfs.h undef sys/statfs.h
+ eval 'varname=$1;' 'struct=$2;' 'shift;' 'shift;' while '$test' '$#' -ge '2;' do case '"$1"' in '$define)' echo '"#include' '<$2>";;' esac ';' shift '2;' done '>' 'try.c;' echo '"int' main '()' '{' struct '$struct' 'foo;' '}"' '>>' 'try.c;' set 'try;' if eval '$compile;' then 'val="$define";' else 'val="$undef";' 'fi;' set '$varname;' eval '$setvar;' '$rm' -f try.c try.o
++ varname=d_statfs_s
++ struct=statfs
++ shift
++ shift
++ test 10 -ge 2
++ case "$1" in
++ echo '#include <sys/types.h>'
++ shift 2
++ test 8 -ge 2
++ case "$1" in
++ echo '#include <sys/param.h>'
++ shift 2
++ test 6 -ge 2
++ case "$1" in
++ echo '#include <sys/mount.h>'
++ shift 2
++ test 4 -ge 2
++ case "$1" in
++ echo '#include <sys/vfs.h>'
++ shift 2
++ test 2 -ge 2
++ case "$1" in
++ shift 2
++ test 0 -ge 2
++ echo 'int main () { struct statfs foo; }'
++ set try
++ eval 'mc_file=$1;' 'shift;' '$cc' -o '${mc_file}' '$optimize' '$ccflags' '$ldflags' '$*' '${mc_file}.c' '$libs' '>' /dev/null '2>&1;'
+++ mc_file=try
+++ shift
+++ gcc -o try -O3 -fno-unit-at-a-time -s -mtune=pentium -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s try.c -lgdbm -lcrypt -lgdbm_compat
++ val=define
++ set d_statfs_s
++ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
+++ var=d_statfs_s
+++ eval 'was=$d_statfs_s'
++++ was=
+++ td=define
+++ tu=undef
+++ case "$val$was" in
+++ eval d_statfs_s=define
++++ d_statfs_s=define
++ /bin/rm -f try.c try.o
+ case "$d_statfs_s" in
+ echo 'Yes, it does.'
Yes, it does.
+ : see if struct statfs knows about f_flags
+ case "$d_statfs_s" in
+ echo ' '
 
+ echo 'Checking to see if your struct statfs has f_flags field...'
Checking to see if your struct statfs has f_flags field...
+ set d_statfs_f_flags statfs f_flags define sys/types.h define sys/param.h define sys/mount.h define sys/vfs.h undef sys/statfs.h
+ eval 'varname=$1;' 'struct=$2;' 'field=$3;' 'shift;' 'shift;' 'shift;' while '$test' '$#' -ge '2;' do case '"$1"' in '$define)' echo '"#include' '<$2>";;' esac ';' shift '2;' done '>' 'try.c;' echo '"int' main '()' '{' struct '$struct' 'foo;' 'char*' 'bar;' bar = '(char*)foo.$field;' '}"' '>>' 'try.c;' set 'try;' if eval '$compile;' then 'val="$define";' else 'val="$undef";' 'fi;' set '$varname;' eval '$setvar;' '$rm' -f try.c try.o
++ varname=d_statfs_f_flags
++ struct=statfs
++ field=f_flags
++ shift
++ shift
++ shift
++ test 10 -ge 2
++ case "$1" in
++ echo '#include <sys/types.h>'
++ shift 2
++ test 8 -ge 2
++ case "$1" in
++ echo '#include <sys/param.h>'
++ shift 2
++ test 6 -ge 2
++ case "$1" in
++ echo '#include <sys/mount.h>'
++ shift 2
++ test 4 -ge 2
++ case "$1" in
++ echo '#include <sys/vfs.h>'
++ shift 2
++ test 2 -ge 2
++ case "$1" in
++ shift 2
++ test 0 -ge 2
++ echo 'int main () { struct statfs foo; char* bar; bar = (char*)foo.f_flags; }'
++ set try
++ eval 'mc_file=$1;' 'shift;' '$cc' -o '${mc_file}' '$optimize' '$ccflags' '$ldflags' '$*' '${mc_file}.c' '$libs' '>' /dev/null '2>&1;'
+++ mc_file=try
+++ shift
+++ gcc -o try -O3 -fno-unit-at-a-time -s -mtune=pentium -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s try.c -lgdbm -lcrypt -lgdbm_compat
++ val=undef
++ set d_statfs_f_flags
++ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
+++ var=d_statfs_f_flags
+++ eval 'was=$d_statfs_f_flags'
++++ was=
+++ td=define
+++ tu=undef
+++ case "$val$was" in
+++ eval d_statfs_f_flags=undef
++++ d_statfs_f_flags=undef
++ /bin/rm -f try.c try.o
+ case "$d_statfs_f_flags" in
+ echo 'No, it doesn'\''t.'
No, it doesn't.
+ /bin/cat
Checking how to access stdio streams by file descriptor number...
+ case "$stdio_stream_array" in
+ /bin/cat
+ for s in _iob __iob __sF
+ set try -DSTDIO_STREAM_ARRAY=_iob
+ eval 'mc_file=$1;' 'shift;' '$cc' -o '${mc_file}' '$optimize' '$ccflags' '$ldflags' '$*' '${mc_file}.c' '$libs' '>' /dev/null '2>&1;'
++ mc_file=try
++ shift
++ gcc -o try -O3 -fno-unit-at-a-time -s -mtune=pentium -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s -DSTDIO_STREAM_ARRAY=_iob try.c -lgdbm -lcrypt -lgdbm_compat
+ for s in _iob __iob __sF
+ set try -DSTDIO_STREAM_ARRAY=__iob
+ eval 'mc_file=$1;' 'shift;' '$cc' -o '${mc_file}' '$optimize' '$ccflags' '$ldflags' '$*' '${mc_file}.c' '$libs' '>' /dev/null '2>&1;'
++ mc_file=try
++ shift
++ gcc -o try -O3 -fno-unit-at-a-time -s -mtune=pentium -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s -DSTDIO_STREAM_ARRAY=__iob try.c -lgdbm -lcrypt -lgdbm_compat
+ for s in _iob __iob __sF
+ set try -DSTDIO_STREAM_ARRAY=__sF
+ eval 'mc_file=$1;' 'shift;' '$cc' -o '${mc_file}' '$optimize' '$ccflags' '$ldflags' '$*' '${mc_file}.c' '$libs' '>' /dev/null '2>&1;'
++ mc_file=try
++ shift
++ gcc -o try -O3 -fno-unit-at-a-time -s -mtune=pentium -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s -DSTDIO_STREAM_ARRAY=__sF try.c -lgdbm -lcrypt -lgdbm_compat
+ /bin/rm -f try.c try.exe try.exe
+ case "$stdio_stream_array" in
+ /bin/cat
I can't figure out how to access stdio streams by file descriptor number.
+ d_stdio_stream_array=undef
+ : see if strcoll exists
+ set strcoll d_strcoll
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=strcoll
++ var=d_strcoll
++ eval 'was=$d_strcoll'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set strcoll tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=strcoll
+++ case "$3" in
+++ tlook='^strcoll$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^strcoll$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'strcoll() found.'
strcoll() found.
++ case "$was" in
++ eval 'd_strcoll=$td'
+++ d_strcoll=define
+ : check for structure copying
+ echo ' '
 
+ echo 'Checking to see if your C compiler can copy structs...'
Checking to see if your C compiler can copy structs...
+ /bin/cat
+ gcc -c try.c
+ val=define
+ echo 'Yup, it can.'
Yup, it can.
+ set d_strctcpy
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=d_strctcpy
++ eval 'was=$d_strctcpy'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval d_strctcpy=define
+++ d_strctcpy=define
+ /bin/rm -f try.c try.o
+ : see if strerror and/or 'sys_errlist[]' exist
+ echo ' '
 
+ test X = X -o X = X
+ set strerror val -f d_strerror
+ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
++ tlook=strerror
++ case "$3" in
++ tlook='^strerror$'
++ tf=libc.list
++ tdc='()'
++ tx=yes
++ case "$reuseval-$4" in
++ case "$tx" in
++ tval=false
++ test true = true
++ grep '^strerror$' libc.list
++ tval=true
++ eval val=true
+++ val=true
+ true
+ echo 'strerror() found.'
strerror() found.
+ d_strerror=define
+ d_strerrm='strerror(e)'
+ set sys_errlist val -a d_syserrlst
+ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
++ tlook=sys_errlist
++ case "$3" in
++ tf=libc.tmp
++ tdc='[]'
++ tx=yes
++ case "$reuseval-$4" in
++ case "$tx" in
++ tval=false
++ test true = true
++ grep sys_errlist libc.tmp
++ tval=true
++ eval val=true
+++ val=true
+ true
+ echo '(You also have sys_errlist[], so we could roll our own strerror.)'
(You also have sys_errlist[], so we could roll our own strerror.)
+ d_syserrlst=define
+ : see if strerror_r exists
+ set strerror_r d_strerror_r
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=strerror_r
++ var=d_strerror_r
++ eval 'was=$d_strerror_r'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set strerror_r tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=strerror_r
+++ case "$3" in
+++ tlook='^strerror_r$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^strerror_r$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'strerror_r() NOT found.'
strerror_r() NOT found.
++ case "$was" in
++ eval 'd_strerror_r=$tu'
+++ d_strerror_r=undef
+ case "$d_strerror_r" in
+ strerror_r_proto=0
+ : see if strftime exists
+ set strftime d_strftime
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=strftime
++ var=d_strftime
++ eval 'was=$d_strftime'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set strftime tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=strftime
+++ case "$3" in
+++ tlook='^strftime$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^strftime$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'strftime() found.'
strftime() found.
++ case "$was" in
++ eval 'd_strftime=$td'
+++ d_strftime=define
+ : see if strlcat exists
+ set strlcat d_strlcat
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=strlcat
++ var=d_strlcat
++ eval 'was=$d_strlcat'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set strlcat tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=strlcat
+++ case "$3" in
+++ tlook='^strlcat$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^strlcat$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'strlcat() NOT found.'
strlcat() NOT found.
++ case "$was" in
++ eval 'd_strlcat=$tu'
+++ d_strlcat=undef
+ : see if strlcpy exists
+ set strlcpy d_strlcpy
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=strlcpy
++ var=d_strlcpy
++ eval 'was=$d_strlcpy'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set strlcpy tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=strlcpy
+++ case "$3" in
+++ tlook='^strlcpy$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^strlcpy$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'strlcpy() NOT found.'
strlcpy() NOT found.
++ case "$was" in
++ eval 'd_strlcpy=$tu'
+++ d_strlcpy=undef
+ : see if strtod exists
+ set strtod d_strtod
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=strtod
++ var=d_strtod
++ eval 'was=$d_strtod'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set strtod tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=strtod
+++ case "$3" in
+++ tlook='^strtod$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^strtod$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'strtod() found.'
strtod() found.
++ case "$was" in
++ eval 'd_strtod=$td'
+++ d_strtod=define
+ : see if strtol exists
+ set strtol d_strtol
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=strtol
++ var=d_strtol
++ eval 'was=$d_strtol'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set strtol tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=strtol
+++ case "$3" in
+++ tlook='^strtol$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^strtol$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'strtol() found.'
strtol() found.
++ case "$was" in
++ eval 'd_strtol=$td'
+++ d_strtol=define
+ : see if strtold exists
+ set strtold d_strtold
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=strtold
++ var=d_strtold
++ eval 'was=$d_strtold'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set strtold tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=strtold
+++ case "$3" in
+++ tlook='^strtold$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^strtold$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'strtold() NOT found.'
strtold() NOT found.
++ case "$was" in
++ eval 'd_strtold=$tu'
+++ d_strtold=undef
+ : see if strtoll exists
+ set strtoll d_strtoll
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=strtoll
++ var=d_strtoll
++ eval 'was=$d_strtoll'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set strtoll tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=strtoll
+++ case "$3" in
+++ tlook='^strtoll$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^strtoll$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'strtoll() NOT found.'
strtoll() NOT found.
++ case "$was" in
++ eval 'd_strtoll=$tu'
+++ d_strtoll=undef
+ case "$d_longlong-$d_strtoll" in
+ : see if strtoq exists
+ set strtoq d_strtoq
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=strtoq
++ var=d_strtoq
++ eval 'was=$d_strtoq'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set strtoq tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=strtoq
+++ case "$3" in
+++ tlook='^strtoq$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^strtoq$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'strtoq() NOT found.'
strtoq() NOT found.
++ case "$was" in
++ eval 'd_strtoq=$tu'
+++ d_strtoq=undef
+ : see if strtoul exists
+ set strtoul d_strtoul
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=strtoul
++ var=d_strtoul
++ eval 'was=$d_strtoul'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set strtoul tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=strtoul
+++ case "$3" in
+++ tlook='^strtoul$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^strtoul$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'strtoul() found.'
strtoul() found.
++ case "$was" in
++ eval 'd_strtoul=$td'
+++ d_strtoul=define
+ case "$d_strtoul" in
+ /bin/cat
Checking whether your strtoul() works okay...
+ /bin/cat
+ case "$longsize" in
+ /bin/cat
+ /bin/cat
+ set try
+ eval 'mc_file=$1;' 'shift;' '$cc' -o '${mc_file}' '$optimize' '$ccflags' '$ldflags' '$*' '${mc_file}.c' '$libs' '>' /dev/null '2>&1;'
++ mc_file=try
++ shift
++ gcc -o try -O3 -fno-unit-at-a-time -s -mtune=pentium -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s try.c -lgdbm -lcrypt -lgdbm_compat
+ case "`$run ./try`" in
++ ./try
+ echo 'Your strtoul() seems to be working okay.'
Your strtoul() seems to be working okay.
+ : see if strtoull exists
+ set strtoull d_strtoull
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=strtoull
++ var=d_strtoull
++ eval 'was=$d_strtoull'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set strtoull tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=strtoull
+++ case "$3" in
+++ tlook='^strtoull$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^strtoull$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'strtoull() NOT found.'
strtoull() NOT found.
++ case "$was" in
++ eval 'd_strtoull=$tu'
+++ d_strtoull=undef
+ case "$d_longlong-$d_strtoull" in
+ : see if strtouq exists
+ set strtouq d_strtouq
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=strtouq
++ var=d_strtouq
++ eval 'was=$d_strtouq'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set strtouq tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=strtouq
+++ case "$3" in
+++ tlook='^strtouq$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^strtouq$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'strtouq() NOT found.'
strtouq() NOT found.
++ case "$was" in
++ eval 'd_strtouq=$tu'
+++ d_strtouq=undef
+ case "$d_strtouq" in
+ : see if strxfrm exists
+ set strxfrm d_strxfrm
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=strxfrm
++ var=d_strxfrm
++ eval 'was=$d_strxfrm'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set strxfrm tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=strxfrm
+++ case "$3" in
+++ tlook='^strxfrm$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^strxfrm$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'strxfrm() found.'
strxfrm() found.
++ case "$was" in
++ eval 'd_strxfrm=$td'
+++ d_strxfrm=define
+ : see if symlink exists
+ set symlink d_symlink
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=symlink
++ var=d_symlink
++ eval 'was=$d_symlink'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set symlink tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=symlink
+++ case "$3" in
+++ tlook='^symlink$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^symlink$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'symlink() found.'
symlink() found.
++ case "$was" in
++ eval 'd_symlink=$td'
+++ d_symlink=define
+ : see if syscall exists
+ set syscall d_syscall
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=syscall
++ var=d_syscall
++ eval 'was=$d_syscall'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set syscall tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=syscall
+++ case "$3" in
+++ tlook='^syscall$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^syscall$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'syscall() NOT found.'
syscall() NOT found.
++ case "$was" in
++ eval 'd_syscall=$tu'
+++ d_syscall=undef
+ : see if prototype for syscall is available
+ echo ' '
 
+ set d_syscallproto syscall define unistd.h
+ eval 'varname=$1;' 'func=$2;' 'shift;' 'shift;' while '$test' '$#' -ge '2;' do case '"$1"' in '$define)' echo '"#include' '<$2>";;' esac ';' shift '2;' done '>' 'try.c;' '$cppstdin' '$cppflags' '$cppminus' '<' try.c '>' tryout.c '2>/dev/null;' if '$contains' '"$func.*("' tryout.c '>/dev/null' '2>&1;' then echo '"$func()' prototype 'found.";' 'val="$define";' else echo '"$func()' prototype NOT 'found.";' 'val="$undef";' 'fi;' set '$varname;' eval '$setvar;' '$rm' -f try.c tryout.c
++ varname=d_syscallproto
++ func=syscall
++ shift
++ shift
++ test 2 -ge 2
++ case "$1" in
++ echo '#include <unistd.h>'
++ shift 2
++ test 0 -ge 2
++ gcc -E -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -
++ grep 'syscall.*(' tryout.c
++ echo 'syscall() prototype NOT found.'
syscall() prototype NOT found.
++ val=undef
++ set d_syscallproto
++ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
+++ var=d_syscallproto
+++ eval 'was=$d_syscallproto'
++++ was=
+++ td=define
+++ tu=undef
+++ case "$val$was" in
+++ eval d_syscallproto=undef
++++ d_syscallproto=undef
++ /bin/rm -f try.c tryout.c
+ : see if sysconf exists
+ set sysconf d_sysconf
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=sysconf
++ var=d_sysconf
++ eval 'was=$d_sysconf'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set sysconf tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=sysconf
+++ case "$3" in
+++ tlook='^sysconf$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^sysconf$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'sysconf() found.'
sysconf() found.
++ case "$was" in
++ eval 'd_sysconf=$td'
+++ d_sysconf=define
+ : see if system exists
+ set system d_system
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=system
++ var=d_system
++ eval 'was=$d_system'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set system tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=system
+++ case "$3" in
+++ tlook='^system$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^system$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'system() found.'
system() found.
++ case "$was" in
++ eval 'd_system=$td'
+++ d_system=define
+ : see if tcgetpgrp exists
+ set tcgetpgrp d_tcgetpgrp
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=tcgetpgrp
++ var=d_tcgetpgrp
++ eval 'was=$d_tcgetpgrp'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set tcgetpgrp tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=tcgetpgrp
+++ case "$3" in
+++ tlook='^tcgetpgrp$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^tcgetpgrp$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'tcgetpgrp() found.'
tcgetpgrp() found.
++ case "$was" in
++ eval 'd_tcgetpgrp=$td'
+++ d_tcgetpgrp=define
+ : see if tcsetpgrp exists
+ set tcsetpgrp d_tcsetpgrp
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=tcsetpgrp
++ var=d_tcsetpgrp
++ eval 'was=$d_tcsetpgrp'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set tcsetpgrp tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=tcsetpgrp
+++ case "$3" in
+++ tlook='^tcsetpgrp$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^tcsetpgrp$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'tcsetpgrp() found.'
tcsetpgrp() found.
++ case "$was" in
++ eval 'd_tcsetpgrp=$td'
+++ d_tcsetpgrp=define
+ : see if prototype for telldir is available
+ echo ' '
 
+ set d_telldirproto telldir define sys/types.h define dirent.h
+ eval 'varname=$1;' 'func=$2;' 'shift;' 'shift;' while '$test' '$#' -ge '2;' do case '"$1"' in '$define)' echo '"#include' '<$2>";;' esac ';' shift '2;' done '>' 'try.c;' '$cppstdin' '$cppflags' '$cppminus' '<' try.c '>' tryout.c '2>/dev/null;' if '$contains' '"$func.*("' tryout.c '>/dev/null' '2>&1;' then echo '"$func()' prototype 'found.";' 'val="$define";' else echo '"$func()' prototype NOT 'found.";' 'val="$undef";' 'fi;' set '$varname;' eval '$setvar;' '$rm' -f try.c tryout.c
++ varname=d_telldirproto
++ func=telldir
++ shift
++ shift
++ test 4 -ge 2
++ case "$1" in
++ echo '#include <sys/types.h>'
++ shift 2
++ test 2 -ge 2
++ case "$1" in
++ echo '#include <dirent.h>'
++ shift 2
++ test 0 -ge 2
++ gcc -E -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -
++ grep 'telldir.*(' tryout.c
++ echo 'telldir() prototype found.'
telldir() prototype found.
++ val=define
++ set d_telldirproto
++ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
+++ var=d_telldirproto
+++ eval 'was=$d_telldirproto'
++++ was=
+++ td=define
+++ tu=undef
+++ case "$val$was" in
+++ eval d_telldirproto=define
++++ d_telldirproto=define
++ /bin/rm -f try.c tryout.c
+ : see if time exists
+ echo ' '
 
+ test X = X -o X = X
+ set time val -f d_time
+ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
++ tlook=time
++ case "$3" in
++ tlook='^time$'
++ tf=libc.list
++ tdc='()'
++ tx=yes
++ case "$reuseval-$4" in
++ case "$tx" in
++ tval=false
++ test true = true
++ grep '^time$' libc.list
++ tval=true
++ eval val=true
+++ val=true
+ true
+ echo 'time() found.'
time() found.
+ val=define
+ rp='What is the type returned by time() on this system?'
+ set time_t timetype long stdio.h sys/types.h
+ eval 'type=$1;' 'var=$2;' 'def=$3;' 'shift;' 'shift;' 'shift;' 'inclist=$@;' case '"$inclist"' in '"")' 'inclist="sys/types.h";;' 'esac;' eval '"varval=\$$var";' case '"$varval"' in '"")' '$rm' -f 'temp.c;' for inc in '$inclist;' do echo '"#include' '<$inc>"' '>>temp.c;' 'done;' echo '"#ifdef' '$type"' '>>' 'temp.c;' echo '"printf(\"We' have '$type\");"' '>>' 'temp.c;' echo '"#endif"' '>>' 'temp.c;' '$cppstdin' '$cppflags' '$cppminus' '<' temp.c '>temp.E' '2>/dev/null;' echo '"' '"' ';' echo '"$rp"' '|' '$sed' -e '"s/What' is/Looking 'for/"' -e '"s/?/./";' if '$contains' '$type' temp.E '>/dev/null' '2>&1;' then echo '"$type' 'found."' '>&4;' eval '"$var=\$type";' else echo '"$type' NOT 'found."' '>&4;' 'dflt="$def";' . ./myread ';' eval '"$var=\$ans";' 'fi;' '$rm' -f 'temp.?;;' '*)' eval '"$var=\$varval";;' esac
++ type=time_t
++ var=timetype
++ def=long
++ shift
++ shift
++ shift
++ inclist='stdio.h sys/types.h'
++ case "$inclist" in
++ eval 'varval=$timetype'
+++ varval=
++ case "$varval" in
++ /bin/rm -f temp.c
++ for inc in '$inclist'
++ echo '#include <stdio.h>'
++ for inc in '$inclist'
++ echo '#include <sys/types.h>'
++ echo '#ifdef time_t'
++ echo 'printf("We have time_t");'
++ echo '#endif'
++ gcc -E -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -
++ echo ' '
 
++ echo 'What is the type returned by time() on this system?'
++ /bin/sed -e 's/What is/Looking for/' -e 's/?/./'
Looking for the type returned by time() on this system.
++ grep time_t temp.E
++ echo 'time_t found.'
time_t found.
++ eval 'timetype=$type'
+++ timetype=time_t
++ /bin/rm -f temp.E temp.c
+ set d_time
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=d_time
++ eval 'was=$d_time'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval d_time=define
+++ d_time=define
+ : see if this is a sys/times.h system
+ set sys/times.h i_systimes
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'yyy=$@;' 'cont=true;' 'xxf="echo' '\"<\$1>' 'found.\"' '>&4";' case '$#' in '2)' 'xxnf="echo' '\"<\$1>' NOT 'found.\"' '>&4";;' '*)' 'xxnf="echo' '\"<\$1>' NOT found, '...\"' '>&4";;' 'esac;' case '$#' in '4)' 'instead=instead;;' '*)' 'instead="at' 'last";;' 'esac;' while '$test' '"$cont";' do 'xxx=`./findhdr' '$1`' 'var=$2;' eval '"was=\$$2";' if '$test' '"$xxx"' '&&' '$test' -r '"$xxx";' then eval '$xxf;' eval '"case' '\"\$$var\"' in '$undef)' . './whoa;' 'esac";' eval '"$var=\$td";' 'cont="";' else eval '$xxnf;' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' 'fi;' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' case '$#' in '0)' 'cont="";;' '2)' 'xxf="echo' '\"but' I found '<\$1>' '$instead.\"' '>&4";' 'xxnf="echo' '\"and' I did not find '<\$1>' 'either.\"' '>&4";;' '*)' 'xxf="echo' '\"but' I found '<\$1\>' 'instead.\"' '>&4";' 'xxnf="echo' '\"there' is no '<\$1>,' '...\"' '>&4";;' 'esac;' 'done;' while '$test' '"$yyy";' do set '$yyy;' 'var=$2;' eval '"was=\$$2";' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' done
++ echo ' '
 
++ td=define
++ tu=undef
++ yyy='sys/times.h i_systimes'
++ cont=true
++ xxf='echo "<$1> found." >&4'
++ case $# in
++ xxnf='echo "<$1> NOT found." >&4'
++ case $# in
++ instead='at last'
++ test true
+++ ./findhdr sys/times.h
++ xxx=/usr/include/sys/times.h
++ var=i_systimes
++ eval 'was=$i_systimes'
+++ was=
++ test /usr/include/sys/times.h
++ test -r /usr/include/sys/times.h
++ eval echo '"<$1>' 'found."' '>&4'
+++ echo '<sys/times.h> found.'
<sys/times.h> found.
++ eval 'case "$i_systimes" in undef) . ./whoa; esac'
+++ case "$i_systimes" in
++ eval 'i_systimes=$td'
+++ i_systimes=define
++ cont=
++ set sys/times.h i_systimes
++ shift
++ shift
++ yyy=
++ case $# in
++ cont=
++ test ''
++ test ''
+ : see if times exists
+ echo ' '
 
+ set times val -f d_times
+ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
++ tlook=times
++ case "$3" in
++ tlook='^times$'
++ tf=libc.list
++ tdc='()'
++ tx=yes
++ case "$reuseval-$4" in
++ case "$tx" in
++ tval=false
++ test true = true
++ grep '^times$' libc.list
++ tval=true
++ eval val=true
+++ val=true
+ true
+ echo 'times() found.'
times() found.
+ d_times=define
+ inc=
+ case "$i_systimes" in
+ inc=sys/times.h
+ rp='What is the type returned by times() on this system?'
+ set clock_t clocktype long stdio.h sys/types.h sys/times.h
+ eval 'type=$1;' 'var=$2;' 'def=$3;' 'shift;' 'shift;' 'shift;' 'inclist=$@;' case '"$inclist"' in '"")' 'inclist="sys/types.h";;' 'esac;' eval '"varval=\$$var";' case '"$varval"' in '"")' '$rm' -f 'temp.c;' for inc in '$inclist;' do echo '"#include' '<$inc>"' '>>temp.c;' 'done;' echo '"#ifdef' '$type"' '>>' 'temp.c;' echo '"printf(\"We' have '$type\");"' '>>' 'temp.c;' echo '"#endif"' '>>' 'temp.c;' '$cppstdin' '$cppflags' '$cppminus' '<' temp.c '>temp.E' '2>/dev/null;' echo '"' '"' ';' echo '"$rp"' '|' '$sed' -e '"s/What' is/Looking 'for/"' -e '"s/?/./";' if '$contains' '$type' temp.E '>/dev/null' '2>&1;' then echo '"$type' 'found."' '>&4;' eval '"$var=\$type";' else echo '"$type' NOT 'found."' '>&4;' 'dflt="$def";' . ./myread ';' eval '"$var=\$ans";' 'fi;' '$rm' -f 'temp.?;;' '*)' eval '"$var=\$varval";;' esac
++ type=clock_t
++ var=clocktype
++ def=long
++ shift
++ shift
++ shift
++ inclist='stdio.h sys/types.h sys/times.h'
++ case "$inclist" in
++ eval 'varval=$clocktype'
+++ varval=
++ case "$varval" in
++ /bin/rm -f temp.c
++ for inc in '$inclist'
++ echo '#include <stdio.h>'
++ for inc in '$inclist'
++ echo '#include <sys/types.h>'
++ for inc in '$inclist'
++ echo '#include <sys/times.h>'
++ echo '#ifdef clock_t'
++ echo 'printf("We have clock_t");'
++ echo '#endif'
++ gcc -E -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -
++ echo ' '
 
++ echo 'What is the type returned by times() on this system?'
++ /bin/sed -e 's/What is/Looking for/' -e 's/?/./'
Looking for the type returned by times() on this system.
++ grep clock_t temp.E
++ echo 'clock_t found.'
clock_t found.
++ eval 'clocktype=$type'
+++ clocktype=clock_t
++ /bin/rm -f temp.E temp.c
+ : see if tmpnam_r exists
+ set tmpnam_r d_tmpnam_r
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=tmpnam_r
++ var=d_tmpnam_r
++ eval 'was=$d_tmpnam_r'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set tmpnam_r tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=tmpnam_r
+++ case "$3" in
+++ tlook='^tmpnam_r$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^tmpnam_r$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'tmpnam_r() NOT found.'
tmpnam_r() NOT found.
++ case "$was" in
++ eval 'd_tmpnam_r=$tu'
+++ d_tmpnam_r=undef
+ case "$d_tmpnam_r" in
+ tmpnam_r_proto=0
+ : see if truncate exists
+ set truncate d_truncate
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=truncate
++ var=d_truncate
++ eval 'was=$d_truncate'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set truncate tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=truncate
+++ case "$3" in
+++ tlook='^truncate$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^truncate$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'truncate() found.'
truncate() found.
++ case "$was" in
++ eval 'd_truncate=$td'
+++ d_truncate=define
+ : see if ttyname_r exists
+ set ttyname_r d_ttyname_r
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=ttyname_r
++ var=d_ttyname_r
++ eval 'was=$d_ttyname_r'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set ttyname_r tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=ttyname_r
+++ case "$3" in
+++ tlook='^ttyname_r$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^ttyname_r$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'ttyname_r() NOT found.'
ttyname_r() NOT found.
++ case "$was" in
++ eval 'd_ttyname_r=$tu'
+++ d_ttyname_r=undef
+ case "$d_ttyname_r" in
+ ttyname_r_proto=0
+ : see if 'tzname[]' exists
+ echo ' '
 
+ set tzname val -a d_tzname
+ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
++ tlook=tzname
++ case "$3" in
++ tf=libc.tmp
++ tdc='[]'
++ tx=yes
++ case "$reuseval-$4" in
++ case "$tx" in
++ tval=false
++ test true = true
++ grep tzname libc.tmp
++ tval=true
++ eval val=true
+++ val=true
+ true
+ val=define
+ echo 'tzname[] found.'
tzname[] found.
+ set d_tzname
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=d_tzname
++ eval 'was=$d_tzname'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval d_tzname=define
+++ d_tzname=define
+ case "$osname" in
+ case "$multiarch" in
+ multiarch=undef
+ : check for ordering of bytes in a UV
+ echo ' '
 
+ case "$usecrosscompile$multiarch" in
+ case "$byteorder" in
+ /bin/cat
In the following, larger digits indicate more significance.  A big-endian
machine like a Pyramid or a Motorola 680?0 chip will come out to 4321. A
little-endian machine like a Vax or an Intel 80?86 chip would be 1234. Other
machines may have weird orders like 3412.  A Cray will report 87654321,
an Alpha will report 12345678. If the test program works the default is
probably right.
I'm now running the test program...
+ /bin/cat
+ xxx_prompt=y
+ set try
+ eval 'mc_file=$1;' 'shift;' '$cc' -o '${mc_file}' '$optimize' '$ccflags' '$ldflags' '$*' '${mc_file}.c' '$libs' '>' /dev/null '2>&1;'
++ mc_file=try
++ shift
++ gcc -o try -O3 -fno-unit-at-a-time -s -mtune=pentium -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s try.c -lgdbm -lcrypt -lgdbm_compat
+ ./try
++ ./try
+ dflt=12345678
+ case "$dflt" in
+ echo '(The test program ran ok.)'
(The test program ran ok.)
+ echo byteorder=12345678
byteorder=12345678
+ xxx_prompt=n
+ case "$xxx_prompt" in
+ byteorder=12345678
+ /bin/rm -f try.c try
+ /bin/cat

Checking to see whether you can access character data unalignedly...
+ case "$d_u32align" in
+ /bin/cat
+ set try
+ eval 'mc_file=$1;' 'shift;' '$cc' -o '${mc_file}' '$optimize' '$ccflags' '$ldflags' '$*' '${mc_file}.c' '$libs;'
++ mc_file=try
++ shift
++ gcc -o try -O3 -fno-unit-at-a-time -s -mtune=pentium -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s try.c -lgdbm -lcrypt -lgdbm_compat
+ echo '(Testing for character data alignment may crash the test.  That'\''s okay.)'
(Testing for character data alignment may crash the test.  That's okay.)
+ ./try
+ case "$?" in
+ cat
It seems that you must access character data in an aligned manner.
+ d_u32align=define
+ /bin/rm -f core 'core.try.*' try.core
+ : see if ualarm exists
+ set ualarm d_ualarm
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=ualarm
++ var=d_ualarm
++ eval 'was=$d_ualarm'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set ualarm tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=ualarm
+++ case "$3" in
+++ tlook='^ualarm$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^ualarm$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'ualarm() NOT found.'
ualarm() NOT found.
++ case "$was" in
++ eval 'd_ualarm=$tu'
+++ d_ualarm=undef
+ : see if umask exists
+ set umask d_umask
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=umask
++ var=d_umask
++ eval 'was=$d_umask'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set umask tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=umask
+++ case "$3" in
+++ tlook='^umask$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^umask$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'umask() found.'
umask() found.
++ case "$was" in
++ eval 'd_umask=$td'
+++ d_umask=define
+ : see if unordered exists
+ set unordered d_unordered
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=unordered
++ var=d_unordered
++ eval 'was=$d_unordered'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set unordered tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=unordered
+++ case "$3" in
+++ tlook='^unordered$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^unordered$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'unordered() NOT found.'
unordered() NOT found.
++ case "$was" in
++ eval 'd_unordered=$tu'
+++ d_unordered=undef
+ : see if unsetenv exists
+ set unsetenv d_unsetenv
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=unsetenv
++ var=d_unsetenv
++ eval 'was=$d_unsetenv'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set unsetenv tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=unsetenv
+++ case "$3" in
+++ tlook='^unsetenv$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^unsetenv$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'unsetenv() found.'
unsetenv() found.
++ case "$was" in
++ eval 'd_unsetenv=$td'
+++ d_unsetenv=define
+ : see if usleep exists
+ set usleep d_usleep
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=usleep
++ var=d_usleep
++ eval 'was=$d_usleep'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set usleep tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=usleep
+++ case "$3" in
+++ tlook='^usleep$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^usleep$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'usleep() found.'
usleep() found.
++ case "$was" in
++ eval 'd_usleep=$td'
+++ d_usleep=define
+ : see if prototype for usleep is available
+ echo ' '
 
+ set d_usleepproto usleep define unistd.h
+ eval 'varname=$1;' 'func=$2;' 'shift;' 'shift;' while '$test' '$#' -ge '2;' do case '"$1"' in '$define)' echo '"#include' '<$2>";;' esac ';' shift '2;' done '>' 'try.c;' '$cppstdin' '$cppflags' '$cppminus' '<' try.c '>' tryout.c '2>/dev/null;' if '$contains' '"$func.*("' tryout.c '>/dev/null' '2>&1;' then echo '"$func()' prototype 'found.";' 'val="$define";' else echo '"$func()' prototype NOT 'found.";' 'val="$undef";' 'fi;' set '$varname;' eval '$setvar;' '$rm' -f try.c tryout.c
++ varname=d_usleepproto
++ func=usleep
++ shift
++ shift
++ test 2 -ge 2
++ case "$1" in
++ echo '#include <unistd.h>'
++ shift 2
++ test 0 -ge 2
++ gcc -E -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -
++ grep 'usleep.*(' tryout.c
++ echo 'usleep() prototype found.'
usleep() prototype found.
++ val=define
++ set d_usleepproto
++ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
+++ var=d_usleepproto
+++ eval 'was=$d_usleepproto'
++++ was=
+++ td=define
+++ tu=undef
+++ case "$val$was" in
+++ eval d_usleepproto=define
++++ d_usleepproto=define
++ /bin/rm -f try.c tryout.c
+ : see if ustat exists
+ set ustat d_ustat
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=ustat
++ var=d_ustat
++ eval 'was=$d_ustat'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set ustat tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=ustat
+++ case "$3" in
+++ tlook='^ustat$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^ustat$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'ustat() NOT found.'
ustat() NOT found.
++ case "$was" in
++ eval 'd_ustat=$tu'
+++ d_ustat=undef
+ : backward compatibility for d_hvfork
+ test X '!=' X
+ : see if there is a vfork
+ val=
+ set vfork val
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=vfork
++ var=val
++ eval 'was=$val'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set vfork tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=vfork
+++ case "$3" in
+++ tlook='^vfork$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^vfork$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'vfork() found.'
vfork() found.
++ case "$was" in
++ eval 'val=$td'
+++ val=define
+ : Ok, but do we want to use it. vfork is reportedly unreliable in
+ : perl on Solaris 2.x, and probably elsewhere.
+ case "$val" in
+ echo ' '
 
+ case "$usevfork" in
+ dflt=n
+ cat
 
Perl can only use a vfork() that doesn't suffer from strict
restrictions on calling functions or modifying global data in
the child.  For example, glibc-2.1 contains such a vfork()
that is unsuitable.  If your system provides a proper fork()
call, chances are that you do NOT want perl to use vfork().

+ rp='Do you still want to use vfork()?'
+ . ./myread
++ xxxm=n
++ case "$xxxm" in
++ case "$rp" in
+++ echo 'Do you still want to use vfork()? [n]  '
+++ wc -c
++ test 40 -ge 80
++ echo -n 'Do you still want to use vfork()? [n] '
Do you still want to use vfork()? [n] ++ ans='!'
++ case "$fastread" in
++ case "$dflt" in
++ ans=
++ case "$silent-$rp" in
++ echo ' '
 
++ expr X : 'X!'
++ case "$ans" in
++ ans=n
+ case "$ans" in
+ echo 'Ok, we won'\''t use vfork().'
Ok, we won't use vfork().
+ val=undef
+ set d_vfork
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=d_vfork
++ eval 'was=$d_vfork'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval d_vfork=undef
+++ d_vfork=undef
+ case "$d_vfork" in
+ usevfork=false
+ : see if closedir exists
+ set closedir d_closedir
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=closedir
++ var=d_closedir
++ eval 'was=$d_closedir'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set closedir tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=closedir
+++ case "$3" in
+++ tlook='^closedir$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^closedir$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'closedir() found.'
closedir() found.
++ case "$was" in
++ eval 'd_closedir=$td'
+++ d_closedir=define
+ case "$d_closedir" in
+ echo ' '
 
+ echo 'Checking whether closedir() returns a status...'
Checking whether closedir() returns a status...
+ cat
+ set try
+ eval 'mc_file=$1;' 'shift;' '$cc' -o '${mc_file}' '$optimize' '$ccflags' '$ldflags' '$*' '${mc_file}.c' '$libs;'
++ mc_file=try
++ shift
++ gcc -o try -O3 -fno-unit-at-a-time -s -mtune=pentium -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s try.c -lgdbm -lcrypt -lgdbm_compat
+ ./try
+ echo 'Yes, it does.'
Yes, it does.
+ val=undef
+ set d_void_closedir
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=d_void_closedir
++ eval 'was=$d_void_closedir'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval d_void_closedir=undef
+++ d_void_closedir=undef
+ /bin/rm -f try try.c try.exe
+ : see if there is a wait4
+ set wait4 d_wait4
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=wait4
++ var=d_wait4
++ eval 'was=$d_wait4'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set wait4 tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=wait4
+++ case "$3" in
+++ tlook='^wait4$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^wait4$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'wait4() found.'
wait4() found.
++ case "$was" in
++ eval 'd_wait4=$td'
+++ d_wait4=define
+ : see if waitpid exists
+ set waitpid d_waitpid
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=waitpid
++ var=d_waitpid
++ eval 'was=$d_waitpid'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set waitpid tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=waitpid
+++ case "$3" in
+++ tlook='^waitpid$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^waitpid$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'waitpid() found.'
waitpid() found.
++ case "$was" in
++ eval 'd_waitpid=$td'
+++ d_waitpid=define
+ : see if wcstombs exists
+ set wcstombs d_wcstombs
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=wcstombs
++ var=d_wcstombs
++ eval 'was=$d_wcstombs'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set wcstombs tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=wcstombs
+++ case "$3" in
+++ tlook='^wcstombs$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^wcstombs$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'wcstombs() found.'
wcstombs() found.
++ case "$was" in
++ eval 'd_wcstombs=$td'
+++ d_wcstombs=define
+ : see if wctomb exists
+ set wctomb d_wctomb
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=wctomb
++ var=d_wctomb
++ eval 'was=$d_wctomb'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set wctomb tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=wctomb
+++ case "$3" in
+++ tlook='^wctomb$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^wctomb$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'wctomb() found.'
wctomb() found.
++ case "$was" in
++ eval 'd_wctomb=$td'
+++ d_wctomb=define
+ : see if writev exists
+ set writev d_writev
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=writev
++ var=d_writev
++ eval 'was=$d_writev'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set writev tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=writev
+++ case "$3" in
+++ tlook='^writev$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^writev$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'writev() found.'
writev() found.
++ case "$was" in
++ eval 'd_writev=$td'
+++ d_writev=define
+ : preserve RCS keywords in files with variable substitution, grrr
+ Date='$Date'
+ Id='$Id'
+ Log='$Log'
+ RCSfile='$RCSfile'
+ Revision='$Revision'
+ : check for alignment requirements
+ echo ' '
 
+ case "$usecrosscompile$multiarch" in
+ case "$alignbytes" in
+ echo 'Checking alignment constraints...'
Checking alignment constraints...
+ test Xundef = Xdefine -a Xdefine = Xdefine
+ /bin/cat
+ /bin/cat
+ set try
+ eval 'mc_file=$1;' 'shift;' '$cc' -o '${mc_file}' '$optimize' '$ccflags' '$ldflags' '$*' '${mc_file}.c' '$libs;'
++ mc_file=try
++ shift
++ gcc -o try -O3 -fno-unit-at-a-time -s -mtune=pentium -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s try.c -lgdbm -lcrypt -lgdbm_compat
++ ./try
+ dflt=8
+ rp='Doubles must be aligned on a how-many-byte boundary?'
+ . ./myread
++ xxxm=8
++ case "$xxxm" in
++ case "$rp" in
+++ echo 'Doubles must be aligned on a how-many-byte boundary? [8]  '
+++ wc -c
++ test 59 -ge 80
++ echo -n 'Doubles must be aligned on a how-many-byte boundary? [8] '
Doubles must be aligned on a how-many-byte boundary? [8] ++ ans='!'
++ case "$fastread" in
++ case "$dflt" in
++ ans=
++ case "$silent-$rp" in
++ echo ' '
 
++ expr X : 'X!'
++ case "$ans" in
++ ans=8
+ alignbytes=8
+ /bin/rm -f try.c try
+ : set the base revision
+ baserev=5.0
+ : how do we concatenate cpp tokens 'here?'
+ echo ' '
 
+ echo 'Checking to see how your cpp does stuff like concatenate tokens...'
Checking to see how your cpp does stuff like concatenate tokens...
+ /bin/cat
+ gcc -E -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -
+ grep Circus cpp_stuff.out
+ echo 'Oh!  Smells like ANSI'\''s been here.'
Oh!  Smells like ANSI's been here.
+ echo 'We can catify or stringify, separately or together!'
We can catify or stringify, separately or together!
+ cpp_stuff=42
+ /bin/rm -f cpp_stuff.c cpp_stuff.out
+ : see if this is a db.h system
+ set db.h i_db
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'yyy=$@;' 'cont=true;' 'xxf="echo' '\"<\$1>' 'found.\"' '>&4";' case '$#' in '2)' 'xxnf="echo' '\"<\$1>' NOT 'found.\"' '>&4";;' '*)' 'xxnf="echo' '\"<\$1>' NOT found, '...\"' '>&4";;' 'esac;' case '$#' in '4)' 'instead=instead;;' '*)' 'instead="at' 'last";;' 'esac;' while '$test' '"$cont";' do 'xxx=`./findhdr' '$1`' 'var=$2;' eval '"was=\$$2";' if '$test' '"$xxx"' '&&' '$test' -r '"$xxx";' then eval '$xxf;' eval '"case' '\"\$$var\"' in '$undef)' . './whoa;' 'esac";' eval '"$var=\$td";' 'cont="";' else eval '$xxnf;' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' 'fi;' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' case '$#' in '0)' 'cont="";;' '2)' 'xxf="echo' '\"but' I found '<\$1>' '$instead.\"' '>&4";' 'xxnf="echo' '\"and' I did not find '<\$1>' 'either.\"' '>&4";;' '*)' 'xxf="echo' '\"but' I found '<\$1\>' 'instead.\"' '>&4";' 'xxnf="echo' '\"there' is no '<\$1>,' '...\"' '>&4";;' 'esac;' 'done;' while '$test' '"$yyy";' do set '$yyy;' 'var=$2;' eval '"was=\$$2";' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' done
++ echo ' '
 
++ td=define
++ tu=undef
++ yyy='db.h i_db'
++ cont=true
++ xxf='echo "<$1> found." >&4'
++ case $# in
++ xxnf='echo "<$1> NOT found." >&4'
++ case $# in
++ instead='at last'
++ test true
+++ ./findhdr db.h
++ xxx=
++ var=i_db
++ eval 'was=$i_db'
+++ was=
++ test ''
++ eval echo '"<$1>' NOT 'found."' '>&4'
+++ echo '<db.h> NOT found.'
<db.h> NOT found.
++ eval 'case "$i_db" in define) . ./whoa; esac'
+++ case "$i_db" in
++ eval 'i_db=$tu'
+++ i_db=undef
++ set db.h i_db
++ shift
++ shift
++ yyy=
++ case $# in
++ cont=
++ test ''
++ test ''
+ case "$i_db" in
+ case "$i_db" in
+ db_hashtype=u_int32_t
+ case "$i_db" in
+ db_prefixtype=size_t
+ : How can we generate normalized random numbers '?'
+ echo ' '
 
+ echo 'Looking for a random number function...'
Looking for a random number function...
+ case "$randfunc" in
+ set drand48 val -f
+ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
++ tlook=drand48
++ case "$3" in
++ tlook='^drand48$'
++ tf=libc.list
++ tdc='()'
++ tx=yes
++ case "$reuseval-$4" in
++ case "$tx" in
++ tval=false
++ test true = true
++ grep '^drand48$' libc.list
++ tval=true
++ eval val=true
+++ val=true
+ true
+ dflt=drand48
+ echo 'Good, found drand48().'
Good, found drand48().
+ echo ' '
 
+ cont=true
+ case "$ccflags" in
+ test true
+ rp='Use which function to generate random numbers?'
+ . ./myread
++ xxxm=drand48
++ case "$xxxm" in
++ case "$rp" in
+++ echo 'Use which function to generate random numbers? [drand48]  '
+++ wc -c
++ test 59 -ge 80
++ echo -n 'Use which function to generate random numbers? [drand48] '
Use which function to generate random numbers? [drand48] ++ ans='!'
++ case "$fastread" in
++ case "$dflt" in
++ ans=
++ case "$silent-$rp" in
++ echo ' '
 
++ expr X : 'X!'
++ case "$ans" in
++ ans=drand48
+ test drand48 = drand48
+ : null
+ randfunc=drand48
+ set drand48 val -f
+ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
++ tlook=drand48
++ case "$3" in
++ tlook='^drand48$'
++ tf=libc.list
++ tdc='()'
++ tx=yes
++ case "$reuseval-$4" in
++ case "$tx" in
++ tval=false
++ test true = true
++ grep '^drand48$' libc.list
++ tval=true
++ eval val=true
+++ val=true
+ true
+ cont=
+ case "$cont" in
+ case "$randfunc" in
+ drand01='drand48()'
+ seedfunc=srand48
+ randbits=48
+ randseedtype=long
+ test ''
+ echo ' '
 
+ echo 'Determining whether or not we are on an EBCDIC system...'
Determining whether or not we are on an EBCDIC system...
+ /bin/cat
+ val=undef
+ set try
+ eval 'mc_file=$1;' 'shift;' '$cc' -o '${mc_file}' '$optimize' '$ccflags' '$ldflags' '$*' '${mc_file}.c' '$libs;'
++ mc_file=try
++ shift
++ gcc -o try -O3 -fno-unit-at-a-time -s -mtune=pentium -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s try.c -lgdbm -lcrypt -lgdbm_compat
+ ./try
+ echo 'Nope, no EBCDIC, probably ASCII or some ISO Latin. Or UTF-8.'
Nope, no EBCDIC, probably ASCII or some ISO Latin. Or UTF-8.
+ /bin/rm -f try try.c try.exe
+ set ebcdic
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=ebcdic
++ eval 'was=$ebcdic'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval ebcdic=undef
+++ ebcdic=undef
+ echo ' '
 
+ /bin/cat
Checking how to flush all pending stdio output...
+ case "$osname" in
+ /bin/cat
+ : first we have to find out how _not_ to flush
+ : try.c
+ test X = X -o X = X
+ output=
+ set try -DTRY_FPUTC
+ eval 'mc_file=$1;' 'shift;' '$cc' -o '${mc_file}' '$optimize' '$ccflags' '$ldflags' '$*' '${mc_file}.c' '$libs' '>' /dev/null '2>&1;'
++ mc_file=try
++ shift
++ gcc -o try -O3 -fno-unit-at-a-time -s -mtune=pentium -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s -DTRY_FPUTC try.c -lgdbm -lcrypt -lgdbm_compat
+ ./try
+ code=42
+ : try.out
+ test '!' -s try.out -a X42 = X42
+ output=-DTRY_FPUTC
+ case "$output" in
+ : check for fflush NULL behaviour
+ case "$fflushNULL" in
+ set try -DTRY_FFLUSH_NULL -DTRY_FPUTC
+ eval 'mc_file=$1;' 'shift;' '$cc' -o '${mc_file}' '$optimize' '$ccflags' '$ldflags' '$*' '${mc_file}.c' '$libs' '>' /dev/null '2>&1;'
++ mc_file=try
++ shift
++ gcc -o try -O3 -fno-unit-at-a-time -s -mtune=pentium -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s -DTRY_FFLUSH_NULL -DTRY_FPUTC try.c -lgdbm -lcrypt -lgdbm_compat
+ ./try
+ code=42
+ : try.out
+ test -s try.out -a X42 = X42
++ /bin/cat try.out
+ fflushNULL=x
+ /bin/rm -f core try.core 'core.try.*'
+ case "$fflushNULL" in
+ /bin/cat
Your fflush(NULL) works okay for output streams.
Let's see if it clobbers input pipes...
+ /bin/cat
+ fflushNULL=define
+ set tryp
+ eval 'mc_file=$1;' 'shift;' '$cc' -o '${mc_file}' '$optimize' '$ccflags' '$ldflags' '$*' '${mc_file}.c' '$libs' '>' /dev/null '2>&1;'
++ mc_file=tryp
++ shift
++ gcc -o tryp -O3 -fno-unit-at-a-time -s -mtune=pentium -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s tryp.c -lgdbm -lcrypt -lgdbm_compat
+ /bin/rm -f tryp.out
+ /bin/cat tryp.c
+ ./tryp
+ cmp tryp.c tryp.out
+ /bin/cat
fflush(NULL) seems to behave okay with input streams.
+ fflushNULL=define
+ /bin/rm -f core tryp.c tryp.core 'core.tryp.*'
+ : check explicit looping only if NULL did not work, and if the pipe
+ : bug does not show up on an explicit flush too
+ case "$fflushNULL" in
+ fflushall=undef
+ case "$fflushNULL$fflushall" in
+ /bin/rm -f try.c try.exe try.out try.exe
+ : Store the full pathname to the ar program for use in the C program
+ : Respect a hint or command line value for full_ar.
+ case "$full_ar" in
+ full_ar=/bin/ar
+ : Store the full pathname to the sed program for use in the C program
+ full_sed=/bin/sed
+ : see what type gids are declared as in the kernel
+ echo ' '
 
+ echo 'Looking for the type for group ids returned by getgid().'
Looking for the type for group ids returned by getgid().
+ set gid_t gidtype xxx stdio.h sys/types.h
+ eval 'type=$1;' 'var=$2;' 'def=$3;' 'shift;' 'shift;' 'shift;' 'inclist=$@;' case '"$inclist"' in '"")' 'inclist="sys/types.h";;' 'esac;' eval '"varval=\$$var";' case '"$varval"' in '"")' '$rm' -f 'temp.c;' for inc in '$inclist;' do echo '"#include' '<$inc>"' '>>temp.c;' 'done;' echo '"#ifdef' '$type"' '>>' 'temp.c;' echo '"printf(\"We' have '$type\");"' '>>' 'temp.c;' echo '"#endif"' '>>' 'temp.c;' '$cppstdin' '$cppflags' '$cppminus' '<' temp.c '>temp.E' '2>/dev/null;' if '$contains' '$type' temp.E '>/dev/null' '2>&1;' then eval '"$var=\$type";' else eval '"$var=\$def";' 'fi;' '$rm' -f 'temp.?;;' '*)' eval '"$var=\$varval";;' esac
++ type=gid_t
++ var=gidtype
++ def=xxx
++ shift
++ shift
++ shift
++ inclist='stdio.h sys/types.h'
++ case "$inclist" in
++ eval 'varval=$gidtype'
+++ varval=
++ case "$varval" in
++ /bin/rm -f temp.c
++ for inc in '$inclist'
++ echo '#include <stdio.h>'
++ for inc in '$inclist'
++ echo '#include <sys/types.h>'
++ echo '#ifdef gid_t'
++ echo 'printf("We have gid_t");'
++ echo '#endif'
++ gcc -E -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -
++ grep gid_t temp.E
++ eval 'gidtype=$type'
+++ gidtype=gid_t
++ /bin/rm -f temp.E temp.c
+ case "$gidtype" in
+ dflt=gid_t
+ case "$gidtype" in
+ echo 'gid_t found.'
gid_t found.
+ echo ' '
 
+ case "$gidtype" in
+ zzz=gid_t
+ echo 'Checking the size of gid_t...'
Checking the size of gid_t...
+ cat
+ set try
+ eval 'mc_file=$1;' 'shift;' '$cc' -o '${mc_file}' '$optimize' '$ccflags' '$ldflags' '$*' '${mc_file}.c' '$libs;'
++ mc_file=try
++ shift
++ gcc -o try -O3 -fno-unit-at-a-time -s -mtune=pentium -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s try.c -lgdbm -lcrypt -lgdbm_compat
++ ./try
+ yyy=2
+ case "$yyy" in
+ gidsize=2
+ echo 'Your gid_t is 2 bytes long.'
Your gid_t is 2 bytes long.
+ echo ' '
 
+ case "$gidtype" in
+ zzz=gid_t
+ echo 'Checking the sign of gid_t...'
Checking the sign of gid_t...
+ cat
+ set try
+ eval 'mc_file=$1;' 'shift;' '$cc' -o '${mc_file}' '$optimize' '$ccflags' '$ldflags' '$*' '${mc_file}.c' '$libs' '>' /dev/null '2>&1;'
++ mc_file=try
++ shift
++ gcc -o try -O3 -fno-unit-at-a-time -s -mtune=pentium -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s try.c -lgdbm -lcrypt -lgdbm_compat
++ ./try
+ yyy=1
+ case "$yyy" in
+ gidsign=1
+ case "$gidsign" in
+ echo 'Your gid_t is unsigned.'
Your gid_t is unsigned.
+ echo ' '
 
+ test 'Xlong long' '!=' X
+ echo 'Checking how to print 64-bit integers...'
Checking how to print 64-bit integers...
+ test X = X -a 'Xlong long' = Xint
+ test X = X -a 'Xlong long' = Xlong
+ test X = X -a Xundef = Xdefine -a 'Xlong long' = Xint64_t
+ test X = X -a 'Xlong long' '!=' X
+ /bin/cat
+ set try
+ eval 'mc_file=$1;' 'shift;' '$cc' -o '${mc_file}' '$optimize' '$ccflags' '$ldflags' '$*' '${mc_file}.c' '$libs' '>' /dev/null '2>&1;'
++ mc_file=try
++ shift
++ gcc -o try -O3 -fno-unit-at-a-time -s -mtune=pentium -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s try.c -lgdbm -lcrypt -lgdbm_compat
++ ./try
+ yyy=-539222987
+ case "$yyy" in
+ test X = X -a 'Xlong long' = 'Xlong long'
+ /bin/cat
+ set try
+ eval 'mc_file=$1;' 'shift;' '$cc' -o '${mc_file}' '$optimize' '$ccflags' '$ldflags' '$*' '${mc_file}.c' '$libs' '>' /dev/null '2>&1;'
++ mc_file=try
++ shift
++ gcc -o try -O3 -fno-unit-at-a-time -s -mtune=pentium -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s try.c -lgdbm -lcrypt -lgdbm_compat
++ ./try
+ yyy=12345678901
+ case "$yyy" in
+ sPRId64='"lld"'
+ sPRIi64='"lli"'
+ sPRIu64='"llu"'
+ sPRIo64='"llo"'
+ sPRIx64='"llx"'
+ sPRIXU64='"llX"'
+ echo 'We will use the %lld style.'
We will use the %lld style.
+ test 'X"lld"' = X -a 'Xlong long' '!=' X
+ test 'X"lld"' = X
+ /bin/rm -f try try.c try.exe
+ case "$sPRId64" in
+ d_PRId64=define
+ d_PRIi64=define
+ d_PRIu64=define
+ d_PRIo64=define
+ d_PRIx64=define
+ d_PRIXU64=define
+ echo ' '
 
+ /bin/echo 'Checking the format strings to be used for Perl'\''s internal types...'
Checking the format strings to be used for Perl's internal types...
+ test X8 = X8
+ ivdformat='"lld"'
+ uvuformat='"llu"'
+ uvoformat='"llo"'
+ uvxformat='"llx"'
+ uvXUformat='"llX"'
+ test Xundef = Xdefine -a Xdefine = Xdefine -a Xdefine = Xdefine
+ nveformat='"e"'
+ nvfformat='"f"'
+ nvgformat='"g"'
+ nvEUformat='"E"'
+ nvFUformat='"F"'
+ nvGUformat='"G"'
+ case "$ivdformat" in
+ echo ' '
 
+ /bin/echo 'Checking the format string to be used for gids...'
Checking the format string to be used for gids...
+ case "$gidsign" in
+ test X2 = X8
+ test X2 = X4
+ test X2 = X4
+ test X2 = X2
+ gidformat='"hu"'
+ : see if getgroups exists
+ set getgroups d_getgrps
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=getgroups
++ var=d_getgrps
++ eval 'was=$d_getgrps'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set getgroups tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=getgroups
+++ case "$3" in
+++ tlook='^getgroups$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^getgroups$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'getgroups() found.'
getgroups() found.
++ case "$was" in
++ eval 'd_getgrps=$td'
+++ d_getgrps=define
+ : see if setgroups exists
+ set setgroups d_setgrps
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=setgroups
++ var=d_setgrps
++ eval 'was=$d_setgrps'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set setgroups tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=setgroups
+++ case "$3" in
+++ tlook='^setgroups$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^setgroups$' libc.list
+++ test '' = compile -o '' = run
+++ eval tres=false
++++ tres=false
++ case "$tres" in
++ echo 'setgroups() NOT found.'
setgroups() NOT found.
++ case "$was" in
++ eval 'd_setgrps=$tu'
+++ d_setgrps=undef
+ : Find type of 2nd arg to 'getgroups()' and 'setgroups()'
+ echo ' '
 
+ case "$d_getgrps$d_setgrps" in
+ case "$groupstype" in
+ dflt=gid_t
+ /bin/cat
What type of pointer is the second argument to getgroups() and setgroups()?
Usually this is the same as group ids, gid_t, but not always.

+ rp='What type pointer is the second argument to getgroups() and setgroups()?'
+ . ./myread
++ xxxm=gid_t
++ case "$xxxm" in
++ case "$rp" in
+++ echo 'What type pointer is the second argument to getgroups() and setgroups()? [gid_t]  '
+++ wc -c
++ test 83 -ge 80
++ echo 'What type pointer is the second argument to getgroups() and setgroups()?'
What type pointer is the second argument to getgroups() and setgroups()?
++ echo -n '[gid_t] '
[gid_t] ++ ans='!'
++ case "$fastread" in
++ case "$dflt" in
++ ans=
++ case "$silent-$rp" in
++ echo ' '
 
++ expr X : 'X!'
++ case "$ans" in
++ ans=gid_t
+ groupstype=gid_t
+ echo ' '
 
+ echo 'Checking if your /bin/make program sets $(MAKE)...'
Checking if your /bin/make program sets $(MAKE)...
+ case "$make_set_make" in
+ /bin/sed 's/^X //'
+ case "`$make -f testmake.mak 2>/dev/null`" in
++ /bin/make -f testmake.mak
+ make_set_make='#'
+ /bin/rm -f testmake.mak
+ case "$make_set_make" in
+ echo 'Yup, it does.'
Yup, it does.
+ : see what type is used for mode_t
+ rp='What is the type used for file modes for system calls (e.g. fchmod())?'
+ set mode_t modetype int stdio.h sys/types.h
+ eval 'type=$1;' 'var=$2;' 'def=$3;' 'shift;' 'shift;' 'shift;' 'inclist=$@;' case '"$inclist"' in '"")' 'inclist="sys/types.h";;' 'esac;' eval '"varval=\$$var";' case '"$varval"' in '"")' '$rm' -f 'temp.c;' for inc in '$inclist;' do echo '"#include' '<$inc>"' '>>temp.c;' 'done;' echo '"#ifdef' '$type"' '>>' 'temp.c;' echo '"printf(\"We' have '$type\");"' '>>' 'temp.c;' echo '"#endif"' '>>' 'temp.c;' '$cppstdin' '$cppflags' '$cppminus' '<' temp.c '>temp.E' '2>/dev/null;' echo '"' '"' ';' echo '"$rp"' '|' '$sed' -e '"s/What' is/Looking 'for/"' -e '"s/?/./";' if '$contains' '$type' temp.E '>/dev/null' '2>&1;' then echo '"$type' 'found."' '>&4;' eval '"$var=\$type";' else echo '"$type' NOT 'found."' '>&4;' 'dflt="$def";' . ./myread ';' eval '"$var=\$ans";' 'fi;' '$rm' -f 'temp.?;;' '*)' eval '"$var=\$varval";;' esac
++ type=mode_t
++ var=modetype
++ def=int
++ shift
++ shift
++ shift
++ inclist='stdio.h sys/types.h'
++ case "$inclist" in
++ eval 'varval=$modetype'
+++ varval=
++ case "$varval" in
++ /bin/rm -f temp.c
++ for inc in '$inclist'
++ echo '#include <stdio.h>'
++ for inc in '$inclist'
++ echo '#include <sys/types.h>'
++ echo '#ifdef mode_t'
++ echo 'printf("We have mode_t");'
++ echo '#endif'
++ gcc -E -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -
++ echo ' '
 
++ echo 'What is the type used for file modes for system calls (e.g. fchmod())?'
++ /bin/sed -e 's/What is/Looking for/' -e 's/?/./'
Looking for the type used for file modes for system calls (e.g. fchmod()).
++ grep mode_t temp.E
++ echo 'mode_t found.'
mode_t found.
++ eval 'modetype=$type'
+++ modetype=mode_t
++ /bin/rm -f temp.E temp.c
+ : see if stdarg is available
+ echo ' '
 
++ ./findhdr stdarg.h
+ test /usr/lib/gcc/i686-pc-msys/3.4.4/include/stdarg.h
+ echo '<stdarg.h> found.'
<stdarg.h> found.
+ valstd=define
+ : see if varags is available
+ echo ' '
 
++ ./findhdr varargs.h
+ test /usr/lib/gcc/i686-pc-msys/3.4.4/include/varargs.h
+ echo '<varargs.h> found.'
<varargs.h> found.
+ : set up the varargs testing programs
+ /bin/cat
+ /bin/cat
+ chmod +x varargs
+ : now check which varargs header should be included
+ echo ' '
 
+ i_varhdr=
+ case "$valstd" in
++ ./varargs I_STDARG
+ true
+ val=stdarg.h
+ case "$val" in
+ set i_varhdr
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=i_varhdr
++ eval 'was=$i_varhdr'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval i_varhdr=stdarg.h
+++ i_varhdr=stdarg.h
+ case "$i_varhdr" in
+ val=define
+ set i_stdarg
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=i_stdarg
++ eval 'was=$i_stdarg'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval i_stdarg=define
+++ i_stdarg=define
+ val=undef
+ set i_varargs
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=i_varargs
++ eval 'was=$i_varargs'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval i_varargs=undef
+++ i_varargs=undef
+ echo 'We'\''ll include <stdarg.h> to get va_dcl definition.'
We'll include <stdarg.h> to get va_dcl definition.
+ /bin/rm -f varargs varargs.c
+ : see if we need va_copy
+ echo ' '
 
+ case "$i_stdarg" in
+ /bin/cat
+ set try
+ eval 'mc_file=$1;' 'shift;' '$cc' -o '${mc_file}' '$optimize' '$ccflags' '$ldflags' '$*' '${mc_file}.c' '$libs' '>' /dev/null '2>&1;'
++ mc_file=try
++ shift
++ gcc -o try -O3 -fno-unit-at-a-time -s -mtune=pentium -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s try.c -lgdbm -lcrypt -lgdbm_compat
+ ./try
+ case "`$run ./try`" in
++ ./try
+ okay=yes
+ case "$okay" in
+ echo 'It seems that you don'\''t need va_copy().'
It seems that you don't need va_copy().
+ need_va_copy=undef
+ /bin/rm -f try.c try.exe core 'core.*' '*.core' '*.core.*'
+ : see what type is used for size_t
+ rp='What is the type used for the length parameter for string functions?'
+ set size_t sizetype 'unsigned int' stdio.h sys/types.h
+ eval 'type=$1;' 'var=$2;' 'def=$3;' 'shift;' 'shift;' 'shift;' 'inclist=$@;' case '"$inclist"' in '"")' 'inclist="sys/types.h";;' 'esac;' eval '"varval=\$$var";' case '"$varval"' in '"")' '$rm' -f 'temp.c;' for inc in '$inclist;' do echo '"#include' '<$inc>"' '>>temp.c;' 'done;' echo '"#ifdef' '$type"' '>>' 'temp.c;' echo '"printf(\"We' have '$type\");"' '>>' 'temp.c;' echo '"#endif"' '>>' 'temp.c;' '$cppstdin' '$cppflags' '$cppminus' '<' temp.c '>temp.E' '2>/dev/null;' echo '"' '"' ';' echo '"$rp"' '|' '$sed' -e '"s/What' is/Looking 'for/"' -e '"s/?/./";' if '$contains' '$type' temp.E '>/dev/null' '2>&1;' then echo '"$type' 'found."' '>&4;' eval '"$var=\$type";' else echo '"$type' NOT 'found."' '>&4;' 'dflt="$def";' . ./myread ';' eval '"$var=\$ans";' 'fi;' '$rm' -f 'temp.?;;' '*)' eval '"$var=\$varval";;' esac
++ type=size_t
++ var=sizetype
++ def='unsigned int'
++ shift
++ shift
++ shift
++ inclist='stdio.h sys/types.h'
++ case "$inclist" in
++ eval 'varval=$sizetype'
+++ varval=
++ case "$varval" in
++ /bin/rm -f temp.c
++ for inc in '$inclist'
++ echo '#include <stdio.h>'
++ for inc in '$inclist'
++ echo '#include <sys/types.h>'
++ echo '#ifdef size_t'
++ echo 'printf("We have size_t");'
++ echo '#endif'
++ gcc -E -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -
++ echo ' '
 
++ echo 'What is the type used for the length parameter for string functions?'
++ /bin/sed -e 's/What is/Looking for/' -e 's/?/./'
Looking for the type used for the length parameter for string functions.
++ grep size_t temp.E
++ echo 'size_t found.'
size_t found.
++ eval 'sizetype=$type'
+++ sizetype=size_t
++ /bin/rm -f temp.E temp.c
+ : check for type of arguments to gethostbyaddr.
+ test X = X -o X = X
+ case "$d_gethbyaddr" in
+ /bin/cat

Checking to see what type of arguments are accepted by gethostbyaddr().
+ hdrs='define sys/types.h
			define sys/socket.h 
			define netinet/in.h 
			define netdb.h
			define unistd.h'
+ : The first arg can 'char *' or 'void *'
+ : The second arg is some of integral type
+ for xxx in in_addr_t ''\''const void *'\''' ''\''const char *'\''' ''\''void *'\''' ''\''char *'\'''
+ for yyy in size_t long int
+ case "$netdb_host_type" in
+ try='extern struct hostent *gethostbyaddr(in_addr_t, size_t, int);'
+ ./protochk 'extern struct hostent *gethostbyaddr(in_addr_t, size_t, int);' define sys/types.h define sys/socket.h define netinet/in.h define netdb.h define unistd.h
+ for yyy in size_t long int
+ case "$netdb_host_type" in
+ try='extern struct hostent *gethostbyaddr(in_addr_t, long, int);'
+ ./protochk 'extern struct hostent *gethostbyaddr(in_addr_t, long, int);' define sys/types.h define sys/socket.h define netinet/in.h define netdb.h define unistd.h
+ for yyy in size_t long int
+ case "$netdb_host_type" in
+ try='extern struct hostent *gethostbyaddr(in_addr_t, int, int);'
+ ./protochk 'extern struct hostent *gethostbyaddr(in_addr_t, int, int);' define sys/types.h define sys/socket.h define netinet/in.h define netdb.h define unistd.h
+ for xxx in in_addr_t ''\''const void *'\''' ''\''const char *'\''' ''\''void *'\''' ''\''char *'\'''
+ for yyy in size_t long int
+ case "$netdb_host_type" in
+ try='extern struct hostent *gethostbyaddr(const void *, size_t, int);'
+ ./protochk 'extern struct hostent *gethostbyaddr(const void *, size_t, int);' define sys/types.h define sys/socket.h define netinet/in.h define netdb.h define unistd.h
+ for yyy in size_t long int
+ case "$netdb_host_type" in
+ try='extern struct hostent *gethostbyaddr(const void *, long, int);'
+ ./protochk 'extern struct hostent *gethostbyaddr(const void *, long, int);' define sys/types.h define sys/socket.h define netinet/in.h define netdb.h define unistd.h
+ for yyy in size_t long int
+ case "$netdb_host_type" in
+ try='extern struct hostent *gethostbyaddr(const void *, int, int);'
+ ./protochk 'extern struct hostent *gethostbyaddr(const void *, int, int);' define sys/types.h define sys/socket.h define netinet/in.h define netdb.h define unistd.h
+ for xxx in in_addr_t ''\''const void *'\''' ''\''const char *'\''' ''\''void *'\''' ''\''char *'\'''
+ for yyy in size_t long int
+ case "$netdb_host_type" in
+ try='extern struct hostent *gethostbyaddr(const char *, size_t, int);'
+ ./protochk 'extern struct hostent *gethostbyaddr(const char *, size_t, int);' define sys/types.h define sys/socket.h define netinet/in.h define netdb.h define unistd.h
+ for yyy in size_t long int
+ case "$netdb_host_type" in
+ try='extern struct hostent *gethostbyaddr(const char *, long, int);'
+ ./protochk 'extern struct hostent *gethostbyaddr(const char *, long, int);' define sys/types.h define sys/socket.h define netinet/in.h define netdb.h define unistd.h
+ for yyy in size_t long int
+ case "$netdb_host_type" in
+ try='extern struct hostent *gethostbyaddr(const char *, int, int);'
+ ./protochk 'extern struct hostent *gethostbyaddr(const char *, int, int);' define sys/types.h define sys/socket.h define netinet/in.h define netdb.h define unistd.h
+ echo 'Your system accepts const char * for the first arg.'
Your system accepts const char * for the first arg.
+ echo '...and int for the second arg.'
...and int for the second arg.
+ netdb_host_type='const char *'
+ netdb_hlen_type=int
+ for xxx in in_addr_t ''\''const void *'\''' ''\''const char *'\''' ''\''void *'\''' ''\''char *'\'''
+ for yyy in size_t long int
+ case "$netdb_host_type" in
+ for yyy in size_t long int
+ case "$netdb_host_type" in
+ for yyy in size_t long int
+ case "$netdb_host_type" in
+ for xxx in in_addr_t ''\''const void *'\''' ''\''const char *'\''' ''\''void *'\''' ''\''char *'\'''
+ for yyy in size_t long int
+ case "$netdb_host_type" in
+ for yyy in size_t long int
+ case "$netdb_host_type" in
+ for yyy in size_t long int
+ case "$netdb_host_type" in
+ : In case none of those worked, prompt the user.
+ case "$netdb_host_type" in
+ : check for type of argument to gethostbyname.
+ test X = X
+ case "$d_gethbyname" in
+ /bin/cat

Checking to see what type of argument is accepted by gethostbyname().
+ hdrs='define sys/types.h
			define sys/socket.h 
			define netinet/in.h 
			define netdb.h
			define unistd.h'
+ for xxx in '"const char *"' '"char *"'
+ case "$netdb_name_type" in
+ try='extern struct hostent *gethostbyname(const char *);'
+ ./protochk 'extern struct hostent *gethostbyname(const char *);' define sys/types.h define sys/socket.h define netinet/in.h define netdb.h define unistd.h
+ echo 'Your system accepts const char *.'
Your system accepts const char *.
+ netdb_name_type='const char *'
+ for xxx in '"const char *"' '"char *"'
+ case "$netdb_name_type" in
+ : In case none of those worked, prompt the user.
+ case "$netdb_name_type" in
+ : check for type of 1st argument to getnetbyaddr.
+ test X = X
+ case "$d_getnbyaddr" in
+ : no getnetbyaddr, so pick harmless default
+ netdb_net_type=long
+ : locate the preferred pager for this system
+ fn=f/
+ case "$pager" in
+ dflt=
+ case "$pg" in
+ case "$more" in
+ case "$less" in
+ dflt=/bin/less
+ case "$dflt" in
+ echo ' '
 
+ rp='What pager is used on your system?'
+ . ./getfile
++ tilde=
++ fullpath=
++ already=
++ skip=
++ none_ok=
++ exp_file=
++ nopath_ok=
++ orig_rp='What pager is used on your system?'
++ orig_dflt=/bin/less
++ case "$gfpth" in
++ gfpth=.
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ fullpath=true
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ case "$fn" in
++ type=File
++ what=File
++ case "$what" in
++ case "$exp_file" in
++ case "$d_portable" in
++ cd ..
++ test File
++ redo=
++ rp='What pager is used on your system?'
++ dflt=/bin/less
++ case "$tilde" in
++ . UU/myread
+++ xxxm=/bin/less
+++ case "$xxxm" in
+++ case "$rp" in
++++ echo 'What pager is used on your system? [/bin/less]  '
++++ wc -c
+++ test 49 -ge 80
+++ echo -n 'What pager is used on your system? [/bin/less] '
What pager is used on your system? [/bin/less] +++ ans='!'
+++ case "$fastread" in
+++ case "$dflt" in
+++ ans=
+++ case "$silent-$rp" in
+++ echo ' '
 
+++ expr X : 'X!'
+++ case "$ans" in
+++ ans=/bin/less
++ test -f UU/getfile.ok
++ case "$ans" in
++ case "$tilde" in
++ value=/bin/less
++ ansexp=/bin/less
++ case "$fullpath" in
++ case "$ansexp" in
++ value=/bin/less
++ case "$redo" in
++ case "$type" in
++ for fp in '$gfpth'
++ test X. = X.
++ pf=/bin/less
++ test -f /bin/less
++ type=
++ test X = X
++ value=/bin/less
++ break
++ case "$skip" in
++ case "$type" in
++ test ''
++ cd UU
++ ans=/bin/less
++ rp='What pager is used on your system?'
++ dflt=/bin/less
++ rm -f getfile.ok
++ test X '!=' Xy
++ gfpth=
+ pager=/bin/less
+ : see what type pids are declared as in the kernel
+ rp='What is the type of process ids on this system?'
+ set pid_t pidtype int stdio.h sys/types.h
+ eval 'type=$1;' 'var=$2;' 'def=$3;' 'shift;' 'shift;' 'shift;' 'inclist=$@;' case '"$inclist"' in '"")' 'inclist="sys/types.h";;' 'esac;' eval '"varval=\$$var";' case '"$varval"' in '"")' '$rm' -f 'temp.c;' for inc in '$inclist;' do echo '"#include' '<$inc>"' '>>temp.c;' 'done;' echo '"#ifdef' '$type"' '>>' 'temp.c;' echo '"printf(\"We' have '$type\");"' '>>' 'temp.c;' echo '"#endif"' '>>' 'temp.c;' '$cppstdin' '$cppflags' '$cppminus' '<' temp.c '>temp.E' '2>/dev/null;' echo '"' '"' ';' echo '"$rp"' '|' '$sed' -e '"s/What' is/Looking 'for/"' -e '"s/?/./";' if '$contains' '$type' temp.E '>/dev/null' '2>&1;' then echo '"$type' 'found."' '>&4;' eval '"$var=\$type";' else echo '"$type' NOT 'found."' '>&4;' 'dflt="$def";' . ./myread ';' eval '"$var=\$ans";' 'fi;' '$rm' -f 'temp.?;;' '*)' eval '"$var=\$varval";;' esac
++ type=pid_t
++ var=pidtype
++ def=int
++ shift
++ shift
++ shift
++ inclist='stdio.h sys/types.h'
++ case "$inclist" in
++ eval 'varval=$pidtype'
+++ varval=
++ case "$varval" in
++ /bin/rm -f temp.c
++ for inc in '$inclist'
++ echo '#include <stdio.h>'
++ for inc in '$inclist'
++ echo '#include <sys/types.h>'
++ echo '#ifdef pid_t'
++ echo 'printf("We have pid_t");'
++ echo '#endif'
++ gcc -E -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -
++ echo ' '
 
++ echo 'What is the type of process ids on this system?'
++ /bin/sed -e 's/What is/Looking for/' -e 's/?/./'
Looking for the type of process ids on this system.
++ grep pid_t temp.E
++ echo 'pid_t found.'
pid_t found.
++ eval 'pidtype=$type'
+++ pidtype=pid_t
++ /bin/rm -f temp.E temp.c
+ : see if ar generates random libraries by itself
+ echo ' '
 
+ echo 'Checking how to generate random libraries on your machine...'
Checking how to generate random libraries on your machine...
+ echo 'int bar1() { return bar2(); }'
+ echo 'int bar2() { return 2; }'
+ /bin/cat
+ gcc -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -c bar1.c
+ gcc -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -c bar2.c
+ gcc -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -c foo.c
+ /bin/ar rc bar.a bar2.o bar1.o
+ gcc -o foobar -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s foo.o bar.a -lgdbm -lcrypt -lgdbm_compat
+ ./foobar
+ echo '/bin/ar appears to generate random libraries itself.'
/bin/ar appears to generate random libraries itself.
+ orderlib=false
+ '[' X = X ']'
+ ranlib=:
+ /bin/rm -f foo.c foo.o foobar.exe bar.a bar1.c bar1.o bar2.c bar2.o
+ : check for type of arguments to select.
+ case "$selecttype" in
+ case "$d_select" in
+ echo ' '
 
+ /bin/cat
Checking to see what type of arguments are accepted by select().
+ hdrs='define sys/types.h
			define sys/time.h 
			define sys/select.h
			define sys/socket.h'
+ : The first arg can be int, unsigned, or size_t
+ : The last arg may or may not be const
+ val=
+ : void pointer has been seen but using that
+ : breaks the selectminbits test
+ for xxx in ''\''fd_set *'\''' ''\''int *'\'''
+ for nfd in ''\''int'\''' ''\''size_t'\''' ''\''unsigned long'\''' ''\''unsigned'\'''
+ for tmo in ''\''struct timeval *'\''' ''\''const struct timeval *'\'''
+ case "$val" in
+ try='extern select _((int, fd_set *, fd_set *, fd_set *, struct timeval *));'
+ ./protochk 'extern select _((int, fd_set *, fd_set *, fd_set *, struct timeval *));' define sys/types.h define sys/time.h define sys/select.h define sys/socket.h
+ echo 'Your system accepts fd_set *.'
Your system accepts fd_set *.
+ val='fd_set *'
+ for tmo in ''\''struct timeval *'\''' ''\''const struct timeval *'\'''
+ case "$val" in
+ for nfd in ''\''int'\''' ''\''size_t'\''' ''\''unsigned long'\''' ''\''unsigned'\'''
+ for tmo in ''\''struct timeval *'\''' ''\''const struct timeval *'\'''
+ case "$val" in
+ for tmo in ''\''struct timeval *'\''' ''\''const struct timeval *'\'''
+ case "$val" in
+ for nfd in ''\''int'\''' ''\''size_t'\''' ''\''unsigned long'\''' ''\''unsigned'\'''
+ for tmo in ''\''struct timeval *'\''' ''\''const struct timeval *'\'''
+ case "$val" in
+ for tmo in ''\''struct timeval *'\''' ''\''const struct timeval *'\'''
+ case "$val" in
+ for nfd in ''\''int'\''' ''\''size_t'\''' ''\''unsigned long'\''' ''\''unsigned'\'''
+ for tmo in ''\''struct timeval *'\''' ''\''const struct timeval *'\'''
+ case "$val" in
+ for tmo in ''\''struct timeval *'\''' ''\''const struct timeval *'\'''
+ case "$val" in
+ for xxx in ''\''fd_set *'\''' ''\''int *'\'''
+ for nfd in ''\''int'\''' ''\''size_t'\''' ''\''unsigned long'\''' ''\''unsigned'\'''
+ for tmo in ''\''struct timeval *'\''' ''\''const struct timeval *'\'''
+ case "$val" in
+ for tmo in ''\''struct timeval *'\''' ''\''const struct timeval *'\'''
+ case "$val" in
+ for nfd in ''\''int'\''' ''\''size_t'\''' ''\''unsigned long'\''' ''\''unsigned'\'''
+ for tmo in ''\''struct timeval *'\''' ''\''const struct timeval *'\'''
+ case "$val" in
+ for tmo in ''\''struct timeval *'\''' ''\''const struct timeval *'\'''
+ case "$val" in
+ for nfd in ''\''int'\''' ''\''size_t'\''' ''\''unsigned long'\''' ''\''unsigned'\'''
+ for tmo in ''\''struct timeval *'\''' ''\''const struct timeval *'\'''
+ case "$val" in
+ for tmo in ''\''struct timeval *'\''' ''\''const struct timeval *'\'''
+ case "$val" in
+ for nfd in ''\''int'\''' ''\''size_t'\''' ''\''unsigned long'\''' ''\''unsigned'\'''
+ for tmo in ''\''struct timeval *'\''' ''\''const struct timeval *'\'''
+ case "$val" in
+ for tmo in ''\''struct timeval *'\''' ''\''const struct timeval *'\'''
+ case "$val" in
+ case "$val" in
+ selecttype='fd_set *'
+ : check for the select width
+ case "$selectminbits" in
++ expr 4 '*' 8
+ safebits=32
+ case "$d_select" in
+ /bin/cat

Checking to see on how many bits at a time your select() operates...
+ /bin/cat
+ set try
+ eval 'mc_file=$1;' 'shift;' '$cc' -o '${mc_file}' '$optimize' '$ccflags' '$ldflags' '$*' '${mc_file}.c' '$libs;'
++ mc_file=try
++ shift
++ gcc -o try -O3 -fno-unit-at-a-time -s -mtune=pentium -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s try.c -lgdbm -lcrypt -lgdbm_compat
++ ./try
+ selectminbits=32
+ case "$selectminbits" in
+ bits='32 bits'
+ echo 'Your select() operates on 32 bits at a time.'
Your select() operates on 32 bits at a time.
+ /bin/rm -f try.c try.exe try
+ : Trace out the files included by signal.h, then look for SIGxxx names.
+ : Remove SIGARRAYSIZE used by HPUX.
+ : Remove SIGSTKSIZE used by Linux.
+ : Remove SIGSTKSZ used by Posix.
+ : Remove SIGTYP void lines used by OS2.
+ : Some cpps, like os390, dont give the file name anywhere
+ '[' X3 = X ']'
++ echo '#include <signal.h>'
++ gcc -E - -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement
++ /bin/grep '^[ 	]*#.*include'
++ /bin/awk '{print $3}'
++ /bin/sed 's!"!!g'
++ /bin/sed 's!\\\\!/!g'
++ /bin/sort
++ /bin/uniq
+ xxx='/usr/include/_ansi.h
/usr/include/cygwin/types.h
/usr/include/machine/types.h
/usr/include/signal.h
/usr/include/sys/config.h
/usr/include/sys/features.h
/usr/include/sys/signal.h
/usr/include/sys/types.h
/usr/lib/gcc/i686-pc-msys/3.4.4/include/stddef.h'
+ : Check this list of files to be sure we have parsed the cpp output ok.
+ : This will also avoid potentially non-existent files, such
+ : as ../foo/bar.h
+ xxxfiles=
+ for xx in '$xxx' /dev/null
+ test -f /usr/include/_ansi.h
+ xxxfiles=' /usr/include/_ansi.h'
+ for xx in '$xxx' /dev/null
+ test -f /usr/include/cygwin/types.h
+ xxxfiles=' /usr/include/_ansi.h /usr/include/cygwin/types.h'
+ for xx in '$xxx' /dev/null
+ test -f /usr/include/machine/types.h
+ xxxfiles=' /usr/include/_ansi.h /usr/include/cygwin/types.h /usr/include/machine/types.h'
+ for xx in '$xxx' /dev/null
+ test -f /usr/include/signal.h
+ xxxfiles=' /usr/include/_ansi.h /usr/include/cygwin/types.h /usr/include/machine/types.h /usr/include/signal.h'
+ for xx in '$xxx' /dev/null
+ test -f /usr/include/sys/config.h
+ xxxfiles=' /usr/include/_ansi.h /usr/include/cygwin/types.h /usr/include/machine/types.h /usr/include/signal.h /usr/include/sys/config.h'
+ for xx in '$xxx' /dev/null
+ test -f /usr/include/sys/features.h
+ xxxfiles=' /usr/include/_ansi.h /usr/include/cygwin/types.h /usr/include/machine/types.h /usr/include/signal.h /usr/include/sys/config.h /usr/include/sys/features.h'
+ for xx in '$xxx' /dev/null
+ test -f /usr/include/sys/signal.h
+ xxxfiles=' /usr/include/_ansi.h /usr/include/cygwin/types.h /usr/include/machine/types.h /usr/include/signal.h /usr/include/sys/config.h /usr/include/sys/features.h /usr/include/sys/signal.h'
+ for xx in '$xxx' /dev/null
+ test -f /usr/include/sys/types.h
+ xxxfiles=' /usr/include/_ansi.h /usr/include/cygwin/types.h /usr/include/machine/types.h /usr/include/signal.h /usr/include/sys/config.h /usr/include/sys/features.h /usr/include/sys/signal.h /usr/include/sys/types.h'
+ for xx in '$xxx' /dev/null
+ test -f /usr/lib/gcc/i686-pc-msys/3.4.4/include/stddef.h
+ xxxfiles=' /usr/include/_ansi.h /usr/include/cygwin/types.h /usr/include/machine/types.h /usr/include/signal.h /usr/include/sys/config.h /usr/include/sys/features.h /usr/include/sys/signal.h /usr/include/sys/types.h /usr/lib/gcc/i686-pc-msys/3.4.4/include/stddef.h'
+ for xx in '$xxx' /dev/null
+ test -f /dev/null
+ : If we have found no files, at least try signal.h
+ case "$xxxfiles" in
++ awk '
$1 ~ /^#define$/ && $2 ~ /^SIG[A-Z0-9]*$/ && $2 !~ /SIGARRAYSIZE/ && $2 !~ /SIGSTKSIZE/ && $2 !~ /SIGSTKSZ/ && $3 !~ /void/ {
	print substr($2, 4, 20)
}
$1 == "#" && $2 ~ /^define$/ && $3 ~ /^SIG[A-Z0-9]*$/ && $3 !~ /SIGARRAYSIZE/ && $4 !~ /void/ {
	print substr($3, 4, 20)
}' /usr/include/_ansi.h /usr/include/cygwin/types.h /usr/include/machine/types.h /usr/include/signal.h /usr/include/sys/config.h /usr/include/sys/features.h /usr/include/sys/signal.h /usr/include/sys/types.h /usr/lib/gcc/i686-pc-msys/3.4.4/include/stddef.h
+ xxx='ABRT
FPE
ILL
INT
SEGV
TERM
HUP
QUIT
INT
KILL
PIPE
FPE
HUP
TERM
SEGV
TSTP
QUIT
TRAP
ILL
EMT
ALRM
BUS
LOST
STOP
ABRT
USR1
USR2
HUP
INT
QUIT
ILL
TRAP
ABRT
EMT
FPE
KILL
BUS
SEGV
SYS
PIPE
ALRM
TERM
URG
STOP
TSTP
CONT
CHLD
CLD
TTIN
TTOU
IO
POLL
XCPU
XFSZ
VTALRM
PROF
WINCH
LOST
USR1
USR2
HUP
INT
QUIT
ILL
TRAP
IOT
ABRT
EMT
FPE
KILL
BUS
SEGV
SYS
PIPE
ALRM
TERM
USR1
USR2
RTMIN
RTMAX
USR1
USR2
CLD
PWR
WINCH
POLL
STOP
TSTP
CONT
TTIN
TTOU
URG
STOP
TSTP
CONT
CHLD
CLD
TTIN
TTOU
IO
POLL
XCPU
XFSZ
VTALRM
PROF
WINCH
LOST
USR1
USR2'
+ : Append some common names just in case the awk scan failed.
+ xxx='ABRT
FPE
ILL
INT
SEGV
TERM
HUP
QUIT
INT
KILL
PIPE
FPE
HUP
TERM
SEGV
TSTP
QUIT
TRAP
ILL
EMT
ALRM
BUS
LOST
STOP
ABRT
USR1
USR2
HUP
INT
QUIT
ILL
TRAP
ABRT
EMT
FPE
KILL
BUS
SEGV
SYS
PIPE
ALRM
TERM
URG
STOP
TSTP
CONT
CHLD
CLD
TTIN
TTOU
IO
POLL
XCPU
XFSZ
VTALRM
PROF
WINCH
LOST
USR1
USR2
HUP
INT
QUIT
ILL
TRAP
IOT
ABRT
EMT
FPE
KILL
BUS
SEGV
SYS
PIPE
ALRM
TERM
USR1
USR2
RTMIN
RTMAX
USR1
USR2
CLD
PWR
WINCH
POLL
STOP
TSTP
CONT
TTIN
TTOU
URG
STOP
TSTP
CONT
CHLD
CLD
TTIN
TTOU
IO
POLL
XCPU
XFSZ
VTALRM
PROF
WINCH
LOST
USR1
USR2 ABRT ALRM BUS CANCEL CHLD CLD CONT DIL EMT FPE'
+ xxx='ABRT
FPE
ILL
INT
SEGV
TERM
HUP
QUIT
INT
KILL
PIPE
FPE
HUP
TERM
SEGV
TSTP
QUIT
TRAP
ILL
EMT
ALRM
BUS
LOST
STOP
ABRT
USR1
USR2
HUP
INT
QUIT
ILL
TRAP
ABRT
EMT
FPE
KILL
BUS
SEGV
SYS
PIPE
ALRM
TERM
URG
STOP
TSTP
CONT
CHLD
CLD
TTIN
TTOU
IO
POLL
XCPU
XFSZ
VTALRM
PROF
WINCH
LOST
USR1
USR2
HUP
INT
QUIT
ILL
TRAP
IOT
ABRT
EMT
FPE
KILL
BUS
SEGV
SYS
PIPE
ALRM
TERM
USR1
USR2
RTMIN
RTMAX
USR1
USR2
CLD
PWR
WINCH
POLL
STOP
TSTP
CONT
TTIN
TTOU
URG
STOP
TSTP
CONT
CHLD
CLD
TTIN
TTOU
IO
POLL
XCPU
XFSZ
VTALRM
PROF
WINCH
LOST
USR1
USR2 ABRT ALRM BUS CANCEL CHLD CLD CONT DIL EMT FPE FREEZE HUP ILL INT IO IOT KILL LOST LWP PHONE'
+ xxx='ABRT
FPE
ILL
INT
SEGV
TERM
HUP
QUIT
INT
KILL
PIPE
FPE
HUP
TERM
SEGV
TSTP
QUIT
TRAP
ILL
EMT
ALRM
BUS
LOST
STOP
ABRT
USR1
USR2
HUP
INT
QUIT
ILL
TRAP
ABRT
EMT
FPE
KILL
BUS
SEGV
SYS
PIPE
ALRM
TERM
URG
STOP
TSTP
CONT
CHLD
CLD
TTIN
TTOU
IO
POLL
XCPU
XFSZ
VTALRM
PROF
WINCH
LOST
USR1
USR2
HUP
INT
QUIT
ILL
TRAP
IOT
ABRT
EMT
FPE
KILL
BUS
SEGV
SYS
PIPE
ALRM
TERM
USR1
USR2
RTMIN
RTMAX
USR1
USR2
CLD
PWR
WINCH
POLL
STOP
TSTP
CONT
TTIN
TTOU
URG
STOP
TSTP
CONT
CHLD
CLD
TTIN
TTOU
IO
POLL
XCPU
XFSZ
VTALRM
PROF
WINCH
LOST
USR1
USR2 ABRT ALRM BUS CANCEL CHLD CLD CONT DIL EMT FPE FREEZE HUP ILL INT IO IOT KILL LOST LWP PHONE PIPE POLL PROF PWR QUIT RTMAX RTMIN SEGV STKFLT STOP'
+ xxx='ABRT
FPE
ILL
INT
SEGV
TERM
HUP
QUIT
INT
KILL
PIPE
FPE
HUP
TERM
SEGV
TSTP
QUIT
TRAP
ILL
EMT
ALRM
BUS
LOST
STOP
ABRT
USR1
USR2
HUP
INT
QUIT
ILL
TRAP
ABRT
EMT
FPE
KILL
BUS
SEGV
SYS
PIPE
ALRM
TERM
URG
STOP
TSTP
CONT
CHLD
CLD
TTIN
TTOU
IO
POLL
XCPU
XFSZ
VTALRM
PROF
WINCH
LOST
USR1
USR2
HUP
INT
QUIT
ILL
TRAP
IOT
ABRT
EMT
FPE
KILL
BUS
SEGV
SYS
PIPE
ALRM
TERM
USR1
USR2
RTMIN
RTMAX
USR1
USR2
CLD
PWR
WINCH
POLL
STOP
TSTP
CONT
TTIN
TTOU
URG
STOP
TSTP
CONT
CHLD
CLD
TTIN
TTOU
IO
POLL
XCPU
XFSZ
VTALRM
PROF
WINCH
LOST
USR1
USR2 ABRT ALRM BUS CANCEL CHLD CLD CONT DIL EMT FPE FREEZE HUP ILL INT IO IOT KILL LOST LWP PHONE PIPE POLL PROF PWR QUIT RTMAX RTMIN SEGV STKFLT STOP SYS TERM THAW TRAP TSTP TTIN TTOU URG USR1 USR2'
+ xxx='ABRT
FPE
ILL
INT
SEGV
TERM
HUP
QUIT
INT
KILL
PIPE
FPE
HUP
TERM
SEGV
TSTP
QUIT
TRAP
ILL
EMT
ALRM
BUS
LOST
STOP
ABRT
USR1
USR2
HUP
INT
QUIT
ILL
TRAP
ABRT
EMT
FPE
KILL
BUS
SEGV
SYS
PIPE
ALRM
TERM
URG
STOP
TSTP
CONT
CHLD
CLD
TTIN
TTOU
IO
POLL
XCPU
XFSZ
VTALRM
PROF
WINCH
LOST
USR1
USR2
HUP
INT
QUIT
ILL
TRAP
IOT
ABRT
EMT
FPE
KILL
BUS
SEGV
SYS
PIPE
ALRM
TERM
USR1
USR2
RTMIN
RTMAX
USR1
USR2
CLD
PWR
WINCH
POLL
STOP
TSTP
CONT
TTIN
TTOU
URG
STOP
TSTP
CONT
CHLD
CLD
TTIN
TTOU
IO
POLL
XCPU
XFSZ
VTALRM
PROF
WINCH
LOST
USR1
USR2 ABRT ALRM BUS CANCEL CHLD CLD CONT DIL EMT FPE FREEZE HUP ILL INT IO IOT KILL LOST LWP PHONE PIPE POLL PROF PWR QUIT RTMAX RTMIN SEGV STKFLT STOP SYS TERM THAW TRAP TSTP TTIN TTOU URG USR1 USR2 USR3 USR4 VTALRM WAITING WINCH WIND WINDOW XCPU XFSZ'
+ : generate a few handy files for later
+ /bin/cat
+ echo ABRT FPE ILL INT SEGV TERM HUP QUIT INT KILL PIPE FPE HUP TERM SEGV TSTP QUIT TRAP ILL EMT ALRM BUS LOST STOP ABRT USR1 USR2 HUP INT QUIT ILL TRAP ABRT EMT FPE KILL BUS SEGV SYS PIPE ALRM TERM URG STOP TSTP CONT CHLD CLD TTIN TTOU IO POLL XCPU XFSZ VTALRM PROF WINCH LOST USR1 USR2 HUP INT QUIT ILL TRAP IOT ABRT EMT FPE KILL BUS SEGV SYS PIPE ALRM TERM USR1 USR2 RTMIN RTMAX USR1 USR2 CLD PWR WINCH POLL STOP TSTP CONT TTIN TTOU URG STOP TSTP CONT CHLD CLD TTIN TTOU IO POLL XCPU XFSZ VTALRM PROF WINCH LOST USR1 USR2 ABRT ALRM BUS CANCEL CHLD CLD CONT DIL EMT FPE FREEZE HUP ILL INT IO IOT KILL LOST LWP PHONE PIPE POLL PROF PWR QUIT RTMAX RTMIN SEGV STKFLT STOP SYS TERM THAW TRAP TSTP TTIN TTOU URG USR1 USR2 USR3 USR4 VTALRM WAITING WINCH WIND WINDOW XCPU XFSZ
+ /bin/tr ' ' '\n'
+ /bin/sort
+ /bin/uniq
+ /bin/awk '
{
	printf "#ifdef SIG"; printf $1; printf "\n"
	printf "printf(\""; printf $1; printf " %%d\\n\",SIG";
	printf $1; printf ");\n"
	printf "#endif\n"
}
END {
	printf "#endif /* JUST_NSIG */\n";
	printf "exit(0);\n}\n";
}
'
+ /bin/cat
+ /bin/cat
+ /bin/cat
+ chmod a+x signal_cmd
+ : signal_cmd
+ : generate list of signal names
+ echo ' '
 
+ case "$sig_name_init" in
+ doinit=yes
+ case "$doinit" in
+ echo 'Generating a list of signal names and numbers...'
Generating a list of signal names and numbers...
+ . ./signal_cmd
++ test -s signal.lst
++ xxx='ABRT
FPE
ILL
INT
SEGV
TERM
HUP
QUIT
INT
KILL
PIPE
FPE
HUP
TERM
SEGV
TSTP
QUIT
TRAP
ILL
EMT
ALRM
BUS
LOST
STOP
ABRT
USR1
USR2
HUP
INT
QUIT
ILL
TRAP
ABRT
EMT
FPE
KILL
BUS
SEGV
SYS
PIPE
ALRM
TERM
URG
STOP
TSTP
CONT
CHLD
CLD
TTIN
TTOU
IO
POLL
XCPU
XFSZ
VTALRM
PROF
WINCH
LOST
USR1
USR2
HUP
INT
QUIT
ILL
TRAP
IOT
ABRT
EMT
FPE
KILL
BUS
SEGV
SYS
PIPE
ALRM
TERM
USR1
USR2
RTMIN
RTMAX
USR1
USR2
CLD
PWR
WINCH
POLL
STOP
TSTP
CONT
TTIN
TTOU
URG
STOP
TSTP
CONT
CHLD
CLD
TTIN
TTOU
IO
POLL
XCPU
XFSZ
VTALRM
PROF
WINCH
LOST
USR1
USR2 ABRT ALRM BUS CANCEL CHLD CLD CONT DIL EMT FPE FREEZE HUP ILL INT IO IOT KILL LOST LWP PHONE PIPE POLL PROF PWR QUIT RTMAX RTMIN SEGV STKFLT STOP SYS TERM THAW TRAP TSTP TTIN TTOU URG USR1 USR2 USR3 USR4 VTALRM WAITING WINCH WIND WINDOW XCPU XFSZ'
++ set signal
++ eval 'mc_file=$1;' 'shift;' '$cc' -o '${mc_file}' '$optimize' '$ccflags' '$ldflags' '$*' '${mc_file}.c' '$libs;'
+++ mc_file=signal
+++ shift
+++ gcc -o signal -O3 -fno-unit-at-a-time -s -mtune=pentium -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s signal.c -lgdbm -lcrypt -lgdbm_compat
++ ./signal.exe
++ /bin/sort -n -k 2
++ /bin/uniq
++ /bin/awk -f signal.awk
++ test -s signal.lst
++ :
++ /bin/rm -f signal.c signal.exe signal.o signal.nsg signal.ls1
++ /bin/awk '/^NSIG/ { printf "%d", $2 }' signal.lst
+ sig_count=32
++ /bin/awk 'BEGIN { printf "ZERO " }
 			!/^NSIG/ { printf "%s ", $1 }' signal.lst
+ sig_name='ZERO HUP INT QUIT ILL TRAP ABRT EMT FPE KILL BUS SEGV SYS PIPE ALRM TERM URG STOP TSTP CONT CHLD TTIN TTOU IO XCPU XFSZ VTALRM PROF WINCH LOST USR1 USR2 CLD POLL '
++ /bin/awk 'BEGIN { printf "0 " }
 			!/^NSIG/ { printf "%d ", $2 }' signal.lst
+ sig_num='0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 20 23 '
++ /bin/awk 'BEGIN	{ printf "\"ZERO\", " }
 			     !/^NSIG/	{ printf "\"%s\", ", $1 }
 			     END	{ printf "0\n" }' signal.lst
+ sig_name_init='"ZERO", "HUP", "INT", "QUIT", "ILL", "TRAP", "ABRT", "EMT", "FPE", "KILL", "BUS", "SEGV", "SYS", "PIPE", "ALRM", "TERM", "URG", "STOP", "TSTP", "CONT", "CHLD", "TTIN", "TTOU", "IO", "XCPU", "XFSZ", "VTALRM", "PROF", "WINCH", "LOST", "USR1", "USR2", "CLD", "POLL", 0'
++ /bin/awk 'BEGIN	{ printf "0, " }
 			     !/^NSIG/	{ printf "%d, ", $2}
 			     END	{ printf "0\n"}' signal.lst
+ sig_num_init='0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 20, 23, 0'
+ echo 'The following 32 signals are available:'
The following 32 signals are available:
+ echo ' '
 
+ echo ZERO HUP INT QUIT ILL TRAP ABRT EMT FPE KILL BUS SEGV SYS PIPE ALRM TERM URG STOP TSTP CONT CHLD TTIN TTOU IO XCPU XFSZ VTALRM PROF WINCH LOST USR1 USR2 CLD POLL
+ /bin/awk 'BEGIN { linelen = 0 }
{
	for (i = 1; i <= NF; i++) {
		name = "SIG" $i " "
		linelen = linelen + length(name)
		if (linelen > 70) {
			printf "\n"
			linelen = length(name)
		}
		printf "%s", name
	}
	printf "\n"
}'
SIGZERO SIGHUP SIGINT SIGQUIT SIGILL SIGTRAP SIGABRT SIGEMT SIGFPE 
SIGKILL SIGBUS SIGSEGV SIGSYS SIGPIPE SIGALRM SIGTERM SIGURG SIGSTOP 
SIGTSTP SIGCONT SIGCHLD SIGTTIN SIGTTOU SIGIO SIGXCPU SIGXFSZ 
SIGVTALRM SIGPROF SIGWINCH SIGLOST SIGUSR1 SIGUSR2 SIGCLD SIGPOLL 
++ echo ZERO HUP INT QUIT ILL TRAP ABRT EMT FPE KILL BUS SEGV SYS PIPE ALRM TERM URG STOP TSTP CONT CHLD TTIN TTOU IO XCPU XFSZ VTALRM PROF WINCH LOST USR1 USR2 CLD POLL
++ awk '{print NF}'
+ sig_size=34
+ /bin/rm -f signal signal.c signal.awk signal.lst signal_cmd
+ echo ' '
 
+ case "$sizetype" in
+ zzz=size_t
+ echo 'Checking the size of size_t...'
Checking the size of size_t...
+ cat
+ set try
+ eval 'mc_file=$1;' 'shift;' '$cc' -o '${mc_file}' '$optimize' '$ccflags' '$ldflags' '$*' '${mc_file}.c' '$libs;'
++ mc_file=try
++ shift
++ gcc -o try -O3 -fno-unit-at-a-time -s -mtune=pentium -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s try.c -lgdbm -lcrypt -lgdbm_compat
++ ./try
+ yyy=4
+ case "$yyy" in
+ sizesize=4
+ echo 'Your size_t size is 4 bytes.'
Your size_t size is 4 bytes.
+ : check for socklen_t
+ echo ' '
 
+ echo 'Checking to see if you have socklen_t...'
Checking to see if you have socklen_t...
+ /bin/cat
+ set try
+ eval 'mc_file=$1;' 'shift;' '$cc' -o '${mc_file}' '$optimize' '$ccflags' '$ldflags' '$*' '${mc_file}.c' '$libs' '>' /dev/null '2>&1;'
++ mc_file=try
++ shift
++ gcc -o try -O3 -fno-unit-at-a-time -s -mtune=pentium -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s try.c -lgdbm -lcrypt -lgdbm_compat
+ val=define
+ echo 'You have socklen_t.'
You have socklen_t.
+ /bin/rm -f try try.c try.exe
+ set d_socklen_t
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=d_socklen_t
++ eval 'was=$d_socklen_t'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval d_socklen_t=define
+++ d_socklen_t=define
+ : see if this is a socks.h system
+ set socks.h i_socks
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'yyy=$@;' 'cont=true;' 'xxf="echo' '\"<\$1>' 'found.\"' '>&4";' case '$#' in '2)' 'xxnf="echo' '\"<\$1>' NOT 'found.\"' '>&4";;' '*)' 'xxnf="echo' '\"<\$1>' NOT found, '...\"' '>&4";;' 'esac;' case '$#' in '4)' 'instead=instead;;' '*)' 'instead="at' 'last";;' 'esac;' while '$test' '"$cont";' do 'xxx=`./findhdr' '$1`' 'var=$2;' eval '"was=\$$2";' if '$test' '"$xxx"' '&&' '$test' -r '"$xxx";' then eval '$xxf;' eval '"case' '\"\$$var\"' in '$undef)' . './whoa;' 'esac";' eval '"$var=\$td";' 'cont="";' else eval '$xxnf;' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' 'fi;' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' case '$#' in '0)' 'cont="";;' '2)' 'xxf="echo' '\"but' I found '<\$1>' '$instead.\"' '>&4";' 'xxnf="echo' '\"and' I did not find '<\$1>' 'either.\"' '>&4";;' '*)' 'xxf="echo' '\"but' I found '<\$1\>' 'instead.\"' '>&4";' 'xxnf="echo' '\"there' is no '<\$1>,' '...\"' '>&4";;' 'esac;' 'done;' while '$test' '"$yyy";' do set '$yyy;' 'var=$2;' eval '"was=\$$2";' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' done
++ echo ' '
 
++ td=define
++ tu=undef
++ yyy='socks.h i_socks'
++ cont=true
++ xxf='echo "<$1> found." >&4'
++ case $# in
++ xxnf='echo "<$1> NOT found." >&4'
++ case $# in
++ instead='at last'
++ test true
+++ ./findhdr socks.h
++ xxx=
++ var=i_socks
++ eval 'was=$i_socks'
+++ was=
++ test ''
++ eval echo '"<$1>' NOT 'found."' '>&4'
+++ echo '<socks.h> NOT found.'
<socks.h> NOT found.
++ eval 'case "$i_socks" in define) . ./whoa; esac'
+++ case "$i_socks" in
++ eval 'i_socks=$tu'
+++ i_socks=undef
++ set socks.h i_socks
++ shift
++ shift
++ yyy=
++ case $# in
++ cont=
++ test ''
++ test ''
+ : check for type of the size argument to socket calls
+ case "$d_socket" in
+ /bin/cat

Checking to see what type is the last argument of accept().
+ yyy=
+ case "$d_socklen_t" in
+ yyy=' socklen_t'
+ yyy=' socklen_t size_t int long unsigned'
+ for xxx in '$yyy'
+ case "$socksizetype" in
+ try='extern int accept(int, struct sockaddr *, socklen_t *);'
+ case "$usesocks" in
+ ./protochk 'extern int accept(int, struct sockaddr *, socklen_t *);' define sys/types.h define sys/socket.h
+ echo 'Your system accepts '\''socklen_t *'\'' for the last argument of accept().'
Your system accepts 'socklen_t *' for the last argument of accept().
+ socksizetype=socklen_t
+ for xxx in '$yyy'
+ case "$socksizetype" in
+ for xxx in '$yyy'
+ case "$socksizetype" in
+ for xxx in '$yyy'
+ case "$socksizetype" in
+ for xxx in '$yyy'
+ case "$socksizetype" in
+ : In case none of those worked, prompt the user.
+ case "$socksizetype" in
+ : see what type is used for signed size_t
+ set ssize_t ssizetype int stdio.h sys/types.h
+ eval 'type=$1;' 'var=$2;' 'def=$3;' 'shift;' 'shift;' 'shift;' 'inclist=$@;' case '"$inclist"' in '"")' 'inclist="sys/types.h";;' 'esac;' eval '"varval=\$$var";' case '"$varval"' in '"")' '$rm' -f 'temp.c;' for inc in '$inclist;' do echo '"#include' '<$inc>"' '>>temp.c;' 'done;' echo '"#ifdef' '$type"' '>>' 'temp.c;' echo '"printf(\"We' have '$type\");"' '>>' 'temp.c;' echo '"#endif"' '>>' 'temp.c;' '$cppstdin' '$cppflags' '$cppminus' '<' temp.c '>temp.E' '2>/dev/null;' if '$contains' '$type' temp.E '>/dev/null' '2>&1;' then eval '"$var=\$type";' else eval '"$var=\$def";' 'fi;' '$rm' -f 'temp.?;;' '*)' eval '"$var=\$varval";;' esac
++ type=ssize_t
++ var=ssizetype
++ def=int
++ shift
++ shift
++ shift
++ inclist='stdio.h sys/types.h'
++ case "$inclist" in
++ eval 'varval=$ssizetype'
+++ varval=
++ case "$varval" in
++ /bin/rm -f temp.c
++ for inc in '$inclist'
++ echo '#include <stdio.h>'
++ for inc in '$inclist'
++ echo '#include <sys/types.h>'
++ echo '#ifdef ssize_t'
++ echo 'printf("We have ssize_t");'
++ echo '#endif'
++ gcc -E -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -
++ grep ssize_t temp.E
++ eval 'ssizetype=$type'
+++ ssizetype=ssize_t
++ /bin/rm -f temp.E temp.c
+ dflt=ssize_t
+ /bin/cat
+ echo ' '
 
+ set try
+ eval 'mc_file=$1;' 'shift;' '$cc' -o '${mc_file}' '$optimize' '$ccflags' '$ldflags' '$*' '${mc_file}.c' '$libs;'
++ mc_file=try
++ shift
++ gcc -o try -O3 -fno-unit-at-a-time -s -mtune=pentium -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s try.c -lgdbm -lcrypt -lgdbm_compat
+ ./try
++ ./try
+ ssizetype=ssize_t
+ echo 'I'\''ll be using ssize_t for functions returning a byte count.'
I'll be using ssize_t for functions returning a byte count.
+ /bin/rm -f try try.c try.exe
+ : see what type of char stdio uses.
+ echo ' '
 
+ echo '#include <stdio.h>'
+ gcc -E -
+ grep 'unsigned.*char.*_ptr;' stdioh
+ echo 'Your stdio uses signed chars.'
Your stdio uses signed chars.
+ stdchar=char
+ /bin/rm -f stdio.c stdioh
+ : see what type uids are declared as in the kernel
+ echo ' '
 
+ echo 'Looking for the type for user ids returned by getuid().'
Looking for the type for user ids returned by getuid().
+ set uid_t uidtype xxx stdio.h sys/types.h
+ eval 'type=$1;' 'var=$2;' 'def=$3;' 'shift;' 'shift;' 'shift;' 'inclist=$@;' case '"$inclist"' in '"")' 'inclist="sys/types.h";;' 'esac;' eval '"varval=\$$var";' case '"$varval"' in '"")' '$rm' -f 'temp.c;' for inc in '$inclist;' do echo '"#include' '<$inc>"' '>>temp.c;' 'done;' echo '"#ifdef' '$type"' '>>' 'temp.c;' echo '"printf(\"We' have '$type\");"' '>>' 'temp.c;' echo '"#endif"' '>>' 'temp.c;' '$cppstdin' '$cppflags' '$cppminus' '<' temp.c '>temp.E' '2>/dev/null;' if '$contains' '$type' temp.E '>/dev/null' '2>&1;' then eval '"$var=\$type";' else eval '"$var=\$def";' 'fi;' '$rm' -f 'temp.?;;' '*)' eval '"$var=\$varval";;' esac
++ type=uid_t
++ var=uidtype
++ def=xxx
++ shift
++ shift
++ shift
++ inclist='stdio.h sys/types.h'
++ case "$inclist" in
++ eval 'varval=$uidtype'
+++ varval=
++ case "$varval" in
++ /bin/rm -f temp.c
++ for inc in '$inclist'
++ echo '#include <stdio.h>'
++ for inc in '$inclist'
++ echo '#include <sys/types.h>'
++ echo '#ifdef uid_t'
++ echo 'printf("We have uid_t");'
++ echo '#endif'
++ gcc -E -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -
++ grep uid_t temp.E
++ eval 'uidtype=$type'
+++ uidtype=uid_t
++ /bin/rm -f temp.E temp.c
+ case "$uidtype" in
+ dflt=uid_t
+ case "$uidtype" in
+ echo 'uid_t found.'
uid_t found.
+ echo ' '
 
+ case "$uidtype" in
+ zzz=uid_t
+ echo 'Checking the size of uid_t...'
Checking the size of uid_t...
+ cat
+ set try
+ eval 'mc_file=$1;' 'shift;' '$cc' -o '${mc_file}' '$optimize' '$ccflags' '$ldflags' '$*' '${mc_file}.c' '$libs;'
++ mc_file=try
++ shift
++ gcc -o try -O3 -fno-unit-at-a-time -s -mtune=pentium -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s try.c -lgdbm -lcrypt -lgdbm_compat
++ ./try
+ yyy=2
+ case "$yyy" in
+ uidsize=2
+ echo 'Your uid_t is 2 bytes long.'
Your uid_t is 2 bytes long.
+ echo ' '
 
+ case "$uidtype" in
+ zzz=uid_t
+ echo 'Checking the sign of uid_t...'
Checking the sign of uid_t...
+ cat
+ set try
+ eval 'mc_file=$1;' 'shift;' '$cc' -o '${mc_file}' '$optimize' '$ccflags' '$ldflags' '$*' '${mc_file}.c' '$libs' '>' /dev/null '2>&1;'
++ mc_file=try
++ shift
++ gcc -o try -O3 -fno-unit-at-a-time -s -mtune=pentium -DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement -s try.c -lgdbm -lcrypt -lgdbm_compat
++ ./try
+ yyy=1
+ case "$yyy" in
+ uidsign=1
+ case "$uidsign" in
+ echo 'Your uid_t is unsigned.'
Your uid_t is unsigned.
+ echo ' '
 
+ /bin/echo 'Checking the format string to be used for uids...'
Checking the format string to be used for uids...
+ case "$uidsign" in
+ test X2 = X8
+ test X2 = X4
+ test X2 = X4
+ test X2 = X2
+ uidformat='"hu"'
+ case "$usesitecustomize" in
+ usesitecustomize=define
+ : determine compiler compiler
+ case "$yacc" in
+ dflt=yacc
+ echo ' '
 
+ comp=yacc
+ test -f byacc.exe
+ test -f /bin/bison.exe
+ comp='yacc or bison -y'
+ rp='Which compiler compiler (yacc or bison -y) shall I use?'
+ . ./myread
++ xxxm=yacc
++ case "$xxxm" in
++ case "$rp" in
+++ echo 'Which compiler compiler (yacc or bison -y) shall I use? [yacc]  '
+++ wc -c
++ test 65 -ge 80
++ echo -n 'Which compiler compiler (yacc or bison -y) shall I use? [yacc] '
Which compiler compiler (yacc or bison -y) shall I use? [yacc] ++ ans='!'
++ case "$fastread" in
++ case "$dflt" in
++ ans=
++ case "$silent-$rp" in
++ echo ' '
 
++ expr X : 'X!'
++ case "$ans" in
++ ans=yacc
+ yacc=yacc
+ case "$yacc" in
+ : see if this is a fp.h system
+ set fp.h i_fp
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'yyy=$@;' 'cont=true;' 'xxf="echo' '\"<\$1>' 'found.\"' '>&4";' case '$#' in '2)' 'xxnf="echo' '\"<\$1>' NOT 'found.\"' '>&4";;' '*)' 'xxnf="echo' '\"<\$1>' NOT found, '...\"' '>&4";;' 'esac;' case '$#' in '4)' 'instead=instead;;' '*)' 'instead="at' 'last";;' 'esac;' while '$test' '"$cont";' do 'xxx=`./findhdr' '$1`' 'var=$2;' eval '"was=\$$2";' if '$test' '"$xxx"' '&&' '$test' -r '"$xxx";' then eval '$xxf;' eval '"case' '\"\$$var\"' in '$undef)' . './whoa;' 'esac";' eval '"$var=\$td";' 'cont="";' else eval '$xxnf;' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' 'fi;' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' case '$#' in '0)' 'cont="";;' '2)' 'xxf="echo' '\"but' I found '<\$1>' '$instead.\"' '>&4";' 'xxnf="echo' '\"and' I did not find '<\$1>' 'either.\"' '>&4";;' '*)' 'xxf="echo' '\"but' I found '<\$1\>' 'instead.\"' '>&4";' 'xxnf="echo' '\"there' is no '<\$1>,' '...\"' '>&4";;' 'esac;' 'done;' while '$test' '"$yyy";' do set '$yyy;' 'var=$2;' eval '"was=\$$2";' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' done
++ echo ' '
 
++ td=define
++ tu=undef
++ yyy='fp.h i_fp'
++ cont=true
++ xxf='echo "<$1> found." >&4'
++ case $# in
++ xxnf='echo "<$1> NOT found." >&4'
++ case $# in
++ instead='at last'
++ test true
+++ ./findhdr fp.h
++ xxx=
++ var=i_fp
++ eval 'was=$i_fp'
+++ was=
++ test ''
++ eval echo '"<$1>' NOT 'found."' '>&4'
+++ echo '<fp.h> NOT found.'
<fp.h> NOT found.
++ eval 'case "$i_fp" in define) . ./whoa; esac'
+++ case "$i_fp" in
++ eval 'i_fp=$tu'
+++ i_fp=undef
++ set fp.h i_fp
++ shift
++ shift
++ yyy=
++ case $# in
++ cont=
++ test ''
++ test ''
+ : see if this is a fp_class.h system
+ set fp_class.h i_fp_class
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'yyy=$@;' 'cont=true;' 'xxf="echo' '\"<\$1>' 'found.\"' '>&4";' case '$#' in '2)' 'xxnf="echo' '\"<\$1>' NOT 'found.\"' '>&4";;' '*)' 'xxnf="echo' '\"<\$1>' NOT found, '...\"' '>&4";;' 'esac;' case '$#' in '4)' 'instead=instead;;' '*)' 'instead="at' 'last";;' 'esac;' while '$test' '"$cont";' do 'xxx=`./findhdr' '$1`' 'var=$2;' eval '"was=\$$2";' if '$test' '"$xxx"' '&&' '$test' -r '"$xxx";' then eval '$xxf;' eval '"case' '\"\$$var\"' in '$undef)' . './whoa;' 'esac";' eval '"$var=\$td";' 'cont="";' else eval '$xxnf;' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' 'fi;' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' case '$#' in '0)' 'cont="";;' '2)' 'xxf="echo' '\"but' I found '<\$1>' '$instead.\"' '>&4";' 'xxnf="echo' '\"and' I did not find '<\$1>' 'either.\"' '>&4";;' '*)' 'xxf="echo' '\"but' I found '<\$1\>' 'instead.\"' '>&4";' 'xxnf="echo' '\"there' is no '<\$1>,' '...\"' '>&4";;' 'esac;' 'done;' while '$test' '"$yyy";' do set '$yyy;' 'var=$2;' eval '"was=\$$2";' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' done
++ echo ' '
 
++ td=define
++ tu=undef
++ yyy='fp_class.h i_fp_class'
++ cont=true
++ xxf='echo "<$1> found." >&4'
++ case $# in
++ xxnf='echo "<$1> NOT found." >&4'
++ case $# in
++ instead='at last'
++ test true
+++ ./findhdr fp_class.h
++ xxx=
++ var=i_fp_class
++ eval 'was=$i_fp_class'
+++ was=
++ test ''
++ eval echo '"<$1>' NOT 'found."' '>&4'
+++ echo '<fp_class.h> NOT found.'
<fp_class.h> NOT found.
++ eval 'case "$i_fp_class" in define) . ./whoa; esac'
+++ case "$i_fp_class" in
++ eval 'i_fp_class=$tu'
+++ i_fp_class=undef
++ set fp_class.h i_fp_class
++ shift
++ shift
++ yyy=
++ case $# in
++ cont=
++ test ''
++ test ''
+ : see if this is a ieeefp.h system
+ case "$i_ieeefp" in
+ set ieeefp.h i_ieeefp
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'yyy=$@;' 'cont=true;' 'xxf="echo' '\"<\$1>' 'found.\"' '>&4";' case '$#' in '2)' 'xxnf="echo' '\"<\$1>' NOT 'found.\"' '>&4";;' '*)' 'xxnf="echo' '\"<\$1>' NOT found, '...\"' '>&4";;' 'esac;' case '$#' in '4)' 'instead=instead;;' '*)' 'instead="at' 'last";;' 'esac;' while '$test' '"$cont";' do 'xxx=`./findhdr' '$1`' 'var=$2;' eval '"was=\$$2";' if '$test' '"$xxx"' '&&' '$test' -r '"$xxx";' then eval '$xxf;' eval '"case' '\"\$$var\"' in '$undef)' . './whoa;' 'esac";' eval '"$var=\$td";' 'cont="";' else eval '$xxnf;' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' 'fi;' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' case '$#' in '0)' 'cont="";;' '2)' 'xxf="echo' '\"but' I found '<\$1>' '$instead.\"' '>&4";' 'xxnf="echo' '\"and' I did not find '<\$1>' 'either.\"' '>&4";;' '*)' 'xxf="echo' '\"but' I found '<\$1\>' 'instead.\"' '>&4";' 'xxnf="echo' '\"there' is no '<\$1>,' '...\"' '>&4";;' 'esac;' 'done;' while '$test' '"$yyy";' do set '$yyy;' 'var=$2;' eval '"was=\$$2";' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' done
++ echo ' '
 
++ td=define
++ tu=undef
++ yyy='ieeefp.h i_ieeefp'
++ cont=true
++ xxf='echo "<$1> found." >&4'
++ case $# in
++ xxnf='echo "<$1> NOT found." >&4'
++ case $# in
++ instead='at last'
++ test true
+++ ./findhdr ieeefp.h
++ xxx=/usr/include/ieeefp.h
++ var=i_ieeefp
++ eval 'was=$i_ieeefp'
+++ was=
++ test /usr/include/ieeefp.h
++ test -r /usr/include/ieeefp.h
++ eval echo '"<$1>' 'found."' '>&4'
+++ echo '<ieeefp.h> found.'
<ieeefp.h> found.
++ eval 'case "$i_ieeefp" in undef) . ./whoa; esac'
+++ case "$i_ieeefp" in
++ eval 'i_ieeefp=$td'
+++ i_ieeefp=define
++ cont=
++ set ieeefp.h i_ieeefp
++ shift
++ shift
++ yyy=
++ case $# in
++ cont=
++ test ''
++ test ''
+ : see if this is a libutil.h system
+ set libutil.h i_libutil
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'yyy=$@;' 'cont=true;' 'xxf="echo' '\"<\$1>' 'found.\"' '>&4";' case '$#' in '2)' 'xxnf="echo' '\"<\$1>' NOT 'found.\"' '>&4";;' '*)' 'xxnf="echo' '\"<\$1>' NOT found, '...\"' '>&4";;' 'esac;' case '$#' in '4)' 'instead=instead;;' '*)' 'instead="at' 'last";;' 'esac;' while '$test' '"$cont";' do 'xxx=`./findhdr' '$1`' 'var=$2;' eval '"was=\$$2";' if '$test' '"$xxx"' '&&' '$test' -r '"$xxx";' then eval '$xxf;' eval '"case' '\"\$$var\"' in '$undef)' . './whoa;' 'esac";' eval '"$var=\$td";' 'cont="";' else eval '$xxnf;' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' 'fi;' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' case '$#' in '0)' 'cont="";;' '2)' 'xxf="echo' '\"but' I found '<\$1>' '$instead.\"' '>&4";' 'xxnf="echo' '\"and' I did not find '<\$1>' 'either.\"' '>&4";;' '*)' 'xxf="echo' '\"but' I found '<\$1\>' 'instead.\"' '>&4";' 'xxnf="echo' '\"there' is no '<\$1>,' '...\"' '>&4";;' 'esac;' 'done;' while '$test' '"$yyy";' do set '$yyy;' 'var=$2;' eval '"was=\$$2";' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' done
++ echo ' '
 
++ td=define
++ tu=undef
++ yyy='libutil.h i_libutil'
++ cont=true
++ xxf='echo "<$1> found." >&4'
++ case $# in
++ xxnf='echo "<$1> NOT found." >&4'
++ case $# in
++ instead='at last'
++ test true
+++ ./findhdr libutil.h
++ xxx=
++ var=i_libutil
++ eval 'was=$i_libutil'
+++ was=
++ test ''
++ eval echo '"<$1>' NOT 'found."' '>&4'
+++ echo '<libutil.h> NOT found.'
<libutil.h> NOT found.
++ eval 'case "$i_libutil" in define) . ./whoa; esac'
+++ case "$i_libutil" in
++ eval 'i_libutil=$tu'
+++ i_libutil=undef
++ set libutil.h i_libutil
++ shift
++ shift
++ yyy=
++ case $# in
++ cont=
++ test ''
++ test ''
+ : see if mach cthreads are available
+ test Xundef = Xdefine
+ i_machcthr=undef
+ : see if this is a mntent.h system
+ set mntent.h i_mntent
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'yyy=$@;' 'cont=true;' 'xxf="echo' '\"<\$1>' 'found.\"' '>&4";' case '$#' in '2)' 'xxnf="echo' '\"<\$1>' NOT 'found.\"' '>&4";;' '*)' 'xxnf="echo' '\"<\$1>' NOT found, '...\"' '>&4";;' 'esac;' case '$#' in '4)' 'instead=instead;;' '*)' 'instead="at' 'last";;' 'esac;' while '$test' '"$cont";' do 'xxx=`./findhdr' '$1`' 'var=$2;' eval '"was=\$$2";' if '$test' '"$xxx"' '&&' '$test' -r '"$xxx";' then eval '$xxf;' eval '"case' '\"\$$var\"' in '$undef)' . './whoa;' 'esac";' eval '"$var=\$td";' 'cont="";' else eval '$xxnf;' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' 'fi;' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' case '$#' in '0)' 'cont="";;' '2)' 'xxf="echo' '\"but' I found '<\$1>' '$instead.\"' '>&4";' 'xxnf="echo' '\"and' I did not find '<\$1>' 'either.\"' '>&4";;' '*)' 'xxf="echo' '\"but' I found '<\$1\>' 'instead.\"' '>&4";' 'xxnf="echo' '\"there' is no '<\$1>,' '...\"' '>&4";;' 'esac;' 'done;' while '$test' '"$yyy";' do set '$yyy;' 'var=$2;' eval '"was=\$$2";' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' done
++ echo ' '
 
++ td=define
++ tu=undef
++ yyy='mntent.h i_mntent'
++ cont=true
++ xxf='echo "<$1> found." >&4'
++ case $# in
++ xxnf='echo "<$1> NOT found." >&4'
++ case $# in
++ instead='at last'
++ test true
+++ ./findhdr mntent.h
++ xxx=/usr/include/mntent.h
++ var=i_mntent
++ eval 'was=$i_mntent'
+++ was=
++ test /usr/include/mntent.h
++ test -r /usr/include/mntent.h
++ eval echo '"<$1>' 'found."' '>&4'
+++ echo '<mntent.h> found.'
<mntent.h> found.
++ eval 'case "$i_mntent" in undef) . ./whoa; esac'
+++ case "$i_mntent" in
++ eval 'i_mntent=$td'
+++ i_mntent=define
++ cont=
++ set mntent.h i_mntent
++ shift
++ shift
++ yyy=
++ case $# in
++ cont=
++ test ''
++ test ''
+ : see if ndbm.h is available
+ set ndbm.h t_ndbm
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'yyy=$@;' 'cont=true;' 'xxf="echo' '\"<\$1>' 'found.\"' '>&4";' case '$#' in '2)' 'xxnf="echo' '\"<\$1>' NOT 'found.\"' '>&4";;' '*)' 'xxnf="echo' '\"<\$1>' NOT found, '...\"' '>&4";;' 'esac;' case '$#' in '4)' 'instead=instead;;' '*)' 'instead="at' 'last";;' 'esac;' while '$test' '"$cont";' do 'xxx=`./findhdr' '$1`' 'var=$2;' eval '"was=\$$2";' if '$test' '"$xxx"' '&&' '$test' -r '"$xxx";' then eval '$xxf;' eval '"case' '\"\$$var\"' in '$undef)' . './whoa;' 'esac";' eval '"$var=\$td";' 'cont="";' else eval '$xxnf;' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' 'fi;' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' case '$#' in '0)' 'cont="";;' '2)' 'xxf="echo' '\"but' I found '<\$1>' '$instead.\"' '>&4";' 'xxnf="echo' '\"and' I did not find '<\$1>' 'either.\"' '>&4";;' '*)' 'xxf="echo' '\"but' I found '<\$1\>' 'instead.\"' '>&4";' 'xxnf="echo' '\"there' is no '<\$1>,' '...\"' '>&4";;' 'esac;' 'done;' while '$test' '"$yyy";' do set '$yyy;' 'var=$2;' eval '"was=\$$2";' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' done
++ echo ' '
 
++ td=define
++ tu=undef
++ yyy='ndbm.h t_ndbm'
++ cont=true
++ xxf='echo "<$1> found." >&4'
++ case $# in
++ xxnf='echo "<$1> NOT found." >&4'
++ case $# in
++ instead='at last'
++ test true
+++ ./findhdr ndbm.h
++ xxx=/usr/include/ndbm.h
++ var=t_ndbm
++ eval 'was=$t_ndbm'
+++ was=
++ test /usr/include/ndbm.h
++ test -r /usr/include/ndbm.h
++ eval echo '"<$1>' 'found."' '>&4'
+++ echo '<ndbm.h> found.'
<ndbm.h> found.
++ eval 'case "$t_ndbm" in undef) . ./whoa; esac'
+++ case "$t_ndbm" in
++ eval 't_ndbm=$td'
+++ t_ndbm=define
++ cont=
++ set ndbm.h t_ndbm
++ shift
++ shift
++ yyy=
++ case $# in
++ cont=
++ test ''
++ test ''
+ case "$t_ndbm" in
+ case "$t_ndbm" in
+ : see if dbm_open exists
+ set dbm_open d_dbm_open
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=dbm_open
++ var=d_dbm_open
++ eval 'was=$d_dbm_open'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set dbm_open tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=dbm_open
+++ case "$3" in
+++ tlook='^dbm_open$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^dbm_open$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'dbm_open() found.'
dbm_open() found.
++ case "$was" in
++ eval 'd_dbm_open=$td'
+++ d_dbm_open=define
+ case "$d_dbm_open" in
+ val=define
+ set i_ndbm
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=i_ndbm
++ eval 'was=$i_ndbm'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval i_ndbm=define
+++ i_ndbm=define
+ : see if net/errno.h is available
+ val=
+ set net/errno.h val
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'yyy=$@;' 'cont=true;' 'xxf="echo' '\"<\$1>' 'found.\"' '>&4";' case '$#' in '2)' 'xxnf="echo' '\"<\$1>' NOT 'found.\"' '>&4";;' '*)' 'xxnf="echo' '\"<\$1>' NOT found, '...\"' '>&4";;' 'esac;' case '$#' in '4)' 'instead=instead;;' '*)' 'instead="at' 'last";;' 'esac;' while '$test' '"$cont";' do 'xxx=`./findhdr' '$1`' 'var=$2;' eval '"was=\$$2";' if '$test' '"$xxx"' '&&' '$test' -r '"$xxx";' then eval '$xxf;' eval '"case' '\"\$$var\"' in '$undef)' . './whoa;' 'esac";' eval '"$var=\$td";' 'cont="";' else eval '$xxnf;' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' 'fi;' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' case '$#' in '0)' 'cont="";;' '2)' 'xxf="echo' '\"but' I found '<\$1>' '$instead.\"' '>&4";' 'xxnf="echo' '\"and' I did not find '<\$1>' 'either.\"' '>&4";;' '*)' 'xxf="echo' '\"but' I found '<\$1\>' 'instead.\"' '>&4";' 'xxnf="echo' '\"there' is no '<\$1>,' '...\"' '>&4";;' 'esac;' 'done;' while '$test' '"$yyy";' do set '$yyy;' 'var=$2;' eval '"was=\$$2";' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' done
++ echo ' '
 
++ td=define
++ tu=undef
++ yyy='net/errno.h val'
++ cont=true
++ xxf='echo "<$1> found." >&4'
++ case $# in
++ xxnf='echo "<$1> NOT found." >&4'
++ case $# in
++ instead='at last'
++ test true
+++ ./findhdr net/errno.h
++ xxx=
++ var=val
++ eval 'was=$val'
+++ was=
++ test ''
++ eval echo '"<$1>' NOT 'found."' '>&4'
+++ echo '<net/errno.h> NOT found.'
<net/errno.h> NOT found.
++ eval 'case "$val" in define) . ./whoa; esac'
+++ case "$val" in
++ eval 'val=$tu'
+++ val=undef
++ set net/errno.h val
++ shift
++ shift
++ yyy=
++ case $# in
++ cont=
++ test ''
++ test ''
+ : Unfortunately, it causes problems on some systems. Arrgh.
+ case "$val" in
+ set i_neterrno
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=i_neterrno
++ eval 'was=$i_neterrno'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval i_neterrno=undef
+++ i_neterrno=undef
+ : see if netinet/tcp.h is available
+ set netinet/tcp.h i_netinettcp
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'yyy=$@;' 'cont=true;' 'xxf="echo' '\"<\$1>' 'found.\"' '>&4";' case '$#' in '2)' 'xxnf="echo' '\"<\$1>' NOT 'found.\"' '>&4";;' '*)' 'xxnf="echo' '\"<\$1>' NOT found, '...\"' '>&4";;' 'esac;' case '$#' in '4)' 'instead=instead;;' '*)' 'instead="at' 'last";;' 'esac;' while '$test' '"$cont";' do 'xxx=`./findhdr' '$1`' 'var=$2;' eval '"was=\$$2";' if '$test' '"$xxx"' '&&' '$test' -r '"$xxx";' then eval '$xxf;' eval '"case' '\"\$$var\"' in '$undef)' . './whoa;' 'esac";' eval '"$var=\$td";' 'cont="";' else eval '$xxnf;' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' 'fi;' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' case '$#' in '0)' 'cont="";;' '2)' 'xxf="echo' '\"but' I found '<\$1>' '$instead.\"' '>&4";' 'xxnf="echo' '\"and' I did not find '<\$1>' 'either.\"' '>&4";;' '*)' 'xxf="echo' '\"but' I found '<\$1\>' 'instead.\"' '>&4";' 'xxnf="echo' '\"there' is no '<\$1>,' '...\"' '>&4";;' 'esac;' 'done;' while '$test' '"$yyy";' do set '$yyy;' 'var=$2;' eval '"was=\$$2";' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' done
++ echo ' '
 
++ td=define
++ tu=undef
++ yyy='netinet/tcp.h i_netinettcp'
++ cont=true
++ xxf='echo "<$1> found." >&4'
++ case $# in
++ xxnf='echo "<$1> NOT found." >&4'
++ case $# in
++ instead='at last'
++ test true
+++ ./findhdr netinet/tcp.h
++ xxx=/usr/include/netinet/tcp.h
++ var=i_netinettcp
++ eval 'was=$i_netinettcp'
+++ was=
++ test /usr/include/netinet/tcp.h
++ test -r /usr/include/netinet/tcp.h
++ eval echo '"<$1>' 'found."' '>&4'
+++ echo '<netinet/tcp.h> found.'
<netinet/tcp.h> found.
++ eval 'case "$i_netinettcp" in undef) . ./whoa; esac'
+++ case "$i_netinettcp" in
++ eval 'i_netinettcp=$td'
+++ i_netinettcp=define
++ cont=
++ set netinet/tcp.h i_netinettcp
++ shift
++ shift
++ yyy=
++ case $# in
++ cont=
++ test ''
++ test ''
+ : see if this is a poll.h system
+ set poll.h i_poll
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'yyy=$@;' 'cont=true;' 'xxf="echo' '\"<\$1>' 'found.\"' '>&4";' case '$#' in '2)' 'xxnf="echo' '\"<\$1>' NOT 'found.\"' '>&4";;' '*)' 'xxnf="echo' '\"<\$1>' NOT found, '...\"' '>&4";;' 'esac;' case '$#' in '4)' 'instead=instead;;' '*)' 'instead="at' 'last";;' 'esac;' while '$test' '"$cont";' do 'xxx=`./findhdr' '$1`' 'var=$2;' eval '"was=\$$2";' if '$test' '"$xxx"' '&&' '$test' -r '"$xxx";' then eval '$xxf;' eval '"case' '\"\$$var\"' in '$undef)' . './whoa;' 'esac";' eval '"$var=\$td";' 'cont="";' else eval '$xxnf;' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' 'fi;' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' case '$#' in '0)' 'cont="";;' '2)' 'xxf="echo' '\"but' I found '<\$1>' '$instead.\"' '>&4";' 'xxnf="echo' '\"and' I did not find '<\$1>' 'either.\"' '>&4";;' '*)' 'xxf="echo' '\"but' I found '<\$1\>' 'instead.\"' '>&4";' 'xxnf="echo' '\"there' is no '<\$1>,' '...\"' '>&4";;' 'esac;' 'done;' while '$test' '"$yyy";' do set '$yyy;' 'var=$2;' eval '"was=\$$2";' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' done
++ echo ' '
 
++ td=define
++ tu=undef
++ yyy='poll.h i_poll'
++ cont=true
++ xxf='echo "<$1> found." >&4'
++ case $# in
++ xxnf='echo "<$1> NOT found." >&4'
++ case $# in
++ instead='at last'
++ test true
+++ ./findhdr poll.h
++ xxx=/usr/include/poll.h
++ var=i_poll
++ eval 'was=$i_poll'
+++ was=
++ test /usr/include/poll.h
++ test -r /usr/include/poll.h
++ eval echo '"<$1>' 'found."' '>&4'
+++ echo '<poll.h> found.'
<poll.h> found.
++ eval 'case "$i_poll" in undef) . ./whoa; esac'
+++ case "$i_poll" in
++ eval 'i_poll=$td'
+++ i_poll=define
++ cont=
++ set poll.h i_poll
++ shift
++ shift
++ yyy=
++ case $# in
++ cont=
++ test ''
++ test ''
+ : see if this is a prot.h system
+ set prot.h i_prot
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'yyy=$@;' 'cont=true;' 'xxf="echo' '\"<\$1>' 'found.\"' '>&4";' case '$#' in '2)' 'xxnf="echo' '\"<\$1>' NOT 'found.\"' '>&4";;' '*)' 'xxnf="echo' '\"<\$1>' NOT found, '...\"' '>&4";;' 'esac;' case '$#' in '4)' 'instead=instead;;' '*)' 'instead="at' 'last";;' 'esac;' while '$test' '"$cont";' do 'xxx=`./findhdr' '$1`' 'var=$2;' eval '"was=\$$2";' if '$test' '"$xxx"' '&&' '$test' -r '"$xxx";' then eval '$xxf;' eval '"case' '\"\$$var\"' in '$undef)' . './whoa;' 'esac";' eval '"$var=\$td";' 'cont="";' else eval '$xxnf;' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' 'fi;' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' case '$#' in '0)' 'cont="";;' '2)' 'xxf="echo' '\"but' I found '<\$1>' '$instead.\"' '>&4";' 'xxnf="echo' '\"and' I did not find '<\$1>' 'either.\"' '>&4";;' '*)' 'xxf="echo' '\"but' I found '<\$1\>' 'instead.\"' '>&4";' 'xxnf="echo' '\"there' is no '<\$1>,' '...\"' '>&4";;' 'esac;' 'done;' while '$test' '"$yyy";' do set '$yyy;' 'var=$2;' eval '"was=\$$2";' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' done
++ echo ' '
 
++ td=define
++ tu=undef
++ yyy='prot.h i_prot'
++ cont=true
++ xxf='echo "<$1> found." >&4'
++ case $# in
++ xxnf='echo "<$1> NOT found." >&4'
++ case $# in
++ instead='at last'
++ test true
+++ ./findhdr prot.h
++ xxx=
++ var=i_prot
++ eval 'was=$i_prot'
+++ was=
++ test ''
++ eval echo '"<$1>' NOT 'found."' '>&4'
+++ echo '<prot.h> NOT found.'
<prot.h> NOT found.
++ eval 'case "$i_prot" in define) . ./whoa; esac'
+++ case "$i_prot" in
++ eval 'i_prot=$tu'
+++ i_prot=undef
++ set prot.h i_prot
++ shift
++ shift
++ yyy=
++ case $# in
++ cont=
++ test ''
++ test ''
+ echo ' '
 
+ /bin/echo 'Guessing which symbols your C compiler and preprocessor define...'
Guessing which symbols your C compiler and preprocessor define...
+ /bin/cat
+ cat
+ ./tr '[a-z]' '[A-Z]'
+ ./tr '[A-Z]' '[a-z]'
+ /bin/cat Cppsym.know
+ /bin/cat Cppsym.a Cppsym.b Cppsym.c
+ /bin/tr ' ' '\n'
+ /bin/sort
+ /bin/uniq
+ /bin/rm -f Cppsym.a Cppsym.b Cppsym.c
+ cat
+ chmod +x Cppsym
+ : Cppsym
+ cat
+ cat
+ cat
+ chmod +x Cppsym.try
+ : Cppsym.try
+ ./Cppsym
+ : now check the C compiler for additional symbols
+ postprocess_cc_v=
+ case "$osname" in
+ /bin/cat
+ postprocess_cc_v=
+ chmod +x ccsym
+ : ccsym
+ ./ccsym
+ test -s ccsym1.raw
+ /bin/sort ccsym1.raw
+ /bin/uniq
+ /bin/awk '/\=/ { print $0; next }
	{ print $0"=1" }' ccsym.raw
+ /bin/comm -13 Cppsym.true ccsym.list
+ /bin/comm -12 Cppsym.true ccsym.list
+ /bin/comm -23 Cppsym.true ccsym.list
+ also=
+ test -z ccsym.raw
+ test -s ccsym.com
+ echo 'Your C compiler and pre-processor define these symbols:'
Your C compiler and pre-processor define these symbols:
+ /bin/sed -e 's/\(..*\)=.*/\1/' ccsym.com
__CYGWIN__
__MSYS__
unix
+ also='also '
+ symbols=ones
++ /bin/cat ccsym.com
+ cppccsymbols='__CYGWIN__=1
__MSYS__=1
unix=1'
++ echo __CYGWIN__=1 __MSYS__=1 unix=1
+ cppccsymbols='__CYGWIN__=1 __MSYS__=1 unix=1'
+ test ''
+ sleep 1
+ test -s ccsym.cpp
+ test 'also '
+ echo ' '
 
+ echo 'Your C pre-processor also defines the following symbols:'
Your C pre-processor also defines the following symbols:
+ /bin/sed -e 's/\(..*\)=.*/\1/' ccsym.cpp
__GNUC__
__GNUC_MINOR__
_LONG_DOUBLE
__STDC__
i386
__i386
__i386__
__unix
__unix__
+ also='further '
++ /bin/cat ccsym.cpp
+ cppsymbols='__GNUC__=3
__GNUC_MINOR__=4
_LONG_DOUBLE=long\ double
__STDC__=1
i386=1
__i386=1
__i386__=1
__unix=1
__unix__=1'
++ echo __GNUC__=3 __GNUC_MINOR__=4 '_LONG_DOUBLE=long\' double __STDC__=1 i386=1 __i386=1 __i386__=1 __unix=1 __unix__=1
+ cppsymbols='__GNUC__=3 __GNUC_MINOR__=4 _LONG_DOUBLE=long\ double __STDC__=1 i386=1 __i386=1 __i386__=1 __unix=1 __unix__=1'
+ test ''
+ sleep 1
+ test -s ccsym.own
+ test 'further '
+ echo ' '
 
+ echo 'Your C compiler further defines the following cpp symbols:'
Your C compiler further defines the following cpp symbols:
+ /bin/sed -e 's/\(..*\)=1/\1/' ccsym.own
__CYGWIN32__
__unix
__unix__
+ /bin/sed -e 's/\(..*\)=.*/\1/' ccsym.own
+ /bin/uniq
++ /bin/cat ccsym.own
+ ccsymbols='__CYGWIN32__=1
__unix=1
__unix__=1'
++ echo __CYGWIN32__=1 __unix=1 __unix__=1
+ ccsymbols='__CYGWIN32__=1 __unix=1 __unix__=1'
+ test ''
+ sleep 1
+ : see if this is a termio system
+ val=undef
+ val2=undef
+ val3=undef
++ ./findhdr termios.h
+ test /usr/include/termios.h
+ set tcsetattr i_termios
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=tcsetattr
++ var=i_termios
++ eval 'was=$i_termios'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set tcsetattr tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=tcsetattr
+++ case "$3" in
+++ tlook='^tcsetattr$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^tcsetattr$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'tcsetattr() found.'
tcsetattr() found.
++ case "$was" in
++ eval 'i_termios=$td'
+++ i_termios=define
+ val3=define
+ echo ' '
 
+ case "$val3" in
+ echo 'You have POSIX termios.h... good!'
You have POSIX termios.h... good!
+ set i_termio
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=i_termio
++ eval 'was=$i_termio'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval i_termio=undef
+++ i_termio=undef
+ val=undef
+ set i_sgtty
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=i_sgtty
++ eval 'was=$i_sgtty'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval i_sgtty=undef
+++ i_sgtty=undef
+ val=define
+ set i_termios
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=i_termios
++ eval 'was=$i_termios'
+++ was=define
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval i_termios=define
+++ i_termios=define
+ : see if stddef is available
+ set stddef.h i_stddef
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'yyy=$@;' 'cont=true;' 'xxf="echo' '\"<\$1>' 'found.\"' '>&4";' case '$#' in '2)' 'xxnf="echo' '\"<\$1>' NOT 'found.\"' '>&4";;' '*)' 'xxnf="echo' '\"<\$1>' NOT found, '...\"' '>&4";;' 'esac;' case '$#' in '4)' 'instead=instead;;' '*)' 'instead="at' 'last";;' 'esac;' while '$test' '"$cont";' do 'xxx=`./findhdr' '$1`' 'var=$2;' eval '"was=\$$2";' if '$test' '"$xxx"' '&&' '$test' -r '"$xxx";' then eval '$xxf;' eval '"case' '\"\$$var\"' in '$undef)' . './whoa;' 'esac";' eval '"$var=\$td";' 'cont="";' else eval '$xxnf;' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' 'fi;' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' case '$#' in '0)' 'cont="";;' '2)' 'xxf="echo' '\"but' I found '<\$1>' '$instead.\"' '>&4";' 'xxnf="echo' '\"and' I did not find '<\$1>' 'either.\"' '>&4";;' '*)' 'xxf="echo' '\"but' I found '<\$1\>' 'instead.\"' '>&4";' 'xxnf="echo' '\"there' is no '<\$1>,' '...\"' '>&4";;' 'esac;' 'done;' while '$test' '"$yyy";' do set '$yyy;' 'var=$2;' eval '"was=\$$2";' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' done
++ echo ' '
 
++ td=define
++ tu=undef
++ yyy='stddef.h i_stddef'
++ cont=true
++ xxf='echo "<$1> found." >&4'
++ case $# in
++ xxnf='echo "<$1> NOT found." >&4'
++ case $# in
++ instead='at last'
++ test true
+++ ./findhdr stddef.h
++ xxx=/usr/lib/gcc/i686-pc-msys/3.4.4/include/stddef.h
++ var=i_stddef
++ eval 'was=$i_stddef'
+++ was=
++ test /usr/lib/gcc/i686-pc-msys/3.4.4/include/stddef.h
++ test -r /usr/lib/gcc/i686-pc-msys/3.4.4/include/stddef.h
++ eval echo '"<$1>' 'found."' '>&4'
+++ echo '<stddef.h> found.'
<stddef.h> found.
++ eval 'case "$i_stddef" in undef) . ./whoa; esac'
+++ case "$i_stddef" in
++ eval 'i_stddef=$td'
+++ i_stddef=define
++ cont=
++ set stddef.h i_stddef
++ shift
++ shift
++ yyy=
++ case $# in
++ cont=
++ test ''
++ test ''
+ : see if this is a sunmath.h system
+ set sunmath.h i_sunmath
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'yyy=$@;' 'cont=true;' 'xxf="echo' '\"<\$1>' 'found.\"' '>&4";' case '$#' in '2)' 'xxnf="echo' '\"<\$1>' NOT 'found.\"' '>&4";;' '*)' 'xxnf="echo' '\"<\$1>' NOT found, '...\"' '>&4";;' 'esac;' case '$#' in '4)' 'instead=instead;;' '*)' 'instead="at' 'last";;' 'esac;' while '$test' '"$cont";' do 'xxx=`./findhdr' '$1`' 'var=$2;' eval '"was=\$$2";' if '$test' '"$xxx"' '&&' '$test' -r '"$xxx";' then eval '$xxf;' eval '"case' '\"\$$var\"' in '$undef)' . './whoa;' 'esac";' eval '"$var=\$td";' 'cont="";' else eval '$xxnf;' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' 'fi;' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' case '$#' in '0)' 'cont="";;' '2)' 'xxf="echo' '\"but' I found '<\$1>' '$instead.\"' '>&4";' 'xxnf="echo' '\"and' I did not find '<\$1>' 'either.\"' '>&4";;' '*)' 'xxf="echo' '\"but' I found '<\$1\>' 'instead.\"' '>&4";' 'xxnf="echo' '\"there' is no '<\$1>,' '...\"' '>&4";;' 'esac;' 'done;' while '$test' '"$yyy";' do set '$yyy;' 'var=$2;' eval '"was=\$$2";' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' done
++ echo ' '
 
++ td=define
++ tu=undef
++ yyy='sunmath.h i_sunmath'
++ cont=true
++ xxf='echo "<$1> found." >&4'
++ case $# in
++ xxnf='echo "<$1> NOT found." >&4'
++ case $# in
++ instead='at last'
++ test true
+++ ./findhdr sunmath.h
++ xxx=
++ var=i_sunmath
++ eval 'was=$i_sunmath'
+++ was=
++ test ''
++ eval echo '"<$1>' NOT 'found."' '>&4'
+++ echo '<sunmath.h> NOT found.'
<sunmath.h> NOT found.
++ eval 'case "$i_sunmath" in define) . ./whoa; esac'
+++ case "$i_sunmath" in
++ eval 'i_sunmath=$tu'
+++ i_sunmath=undef
++ set sunmath.h i_sunmath
++ shift
++ shift
++ yyy=
++ case $# in
++ cont=
++ test ''
++ test ''
+ : see if sys/access.h is available
+ set sys/access.h i_sysaccess
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'yyy=$@;' 'cont=true;' 'xxf="echo' '\"<\$1>' 'found.\"' '>&4";' case '$#' in '2)' 'xxnf="echo' '\"<\$1>' NOT 'found.\"' '>&4";;' '*)' 'xxnf="echo' '\"<\$1>' NOT found, '...\"' '>&4";;' 'esac;' case '$#' in '4)' 'instead=instead;;' '*)' 'instead="at' 'last";;' 'esac;' while '$test' '"$cont";' do 'xxx=`./findhdr' '$1`' 'var=$2;' eval '"was=\$$2";' if '$test' '"$xxx"' '&&' '$test' -r '"$xxx";' then eval '$xxf;' eval '"case' '\"\$$var\"' in '$undef)' . './whoa;' 'esac";' eval '"$var=\$td";' 'cont="";' else eval '$xxnf;' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' 'fi;' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' case '$#' in '0)' 'cont="";;' '2)' 'xxf="echo' '\"but' I found '<\$1>' '$instead.\"' '>&4";' 'xxnf="echo' '\"and' I did not find '<\$1>' 'either.\"' '>&4";;' '*)' 'xxf="echo' '\"but' I found '<\$1\>' 'instead.\"' '>&4";' 'xxnf="echo' '\"there' is no '<\$1>,' '...\"' '>&4";;' 'esac;' 'done;' while '$test' '"$yyy";' do set '$yyy;' 'var=$2;' eval '"was=\$$2";' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' done
++ echo ' '
 
++ td=define
++ tu=undef
++ yyy='sys/access.h i_sysaccess'
++ cont=true
++ xxf='echo "<$1> found." >&4'
++ case $# in
++ xxnf='echo "<$1> NOT found." >&4'
++ case $# in
++ instead='at last'
++ test true
+++ ./findhdr sys/access.h
++ xxx=
++ var=i_sysaccess
++ eval 'was=$i_sysaccess'
+++ was=
++ test ''
++ eval echo '"<$1>' NOT 'found."' '>&4'
+++ echo '<sys/access.h> NOT found.'
<sys/access.h> NOT found.
++ eval 'case "$i_sysaccess" in define) . ./whoa; esac'
+++ case "$i_sysaccess" in
++ eval 'i_sysaccess=$tu'
+++ i_sysaccess=undef
++ set sys/access.h i_sysaccess
++ shift
++ shift
++ yyy=
++ case $# in
++ cont=
++ test ''
++ test ''
+ : see if ioctl defs are in sgtty, termio, sys/filio or sys/ioctl
+ set sys/filio.h i_sysfilio
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'yyy=$@;' 'cont=true;' 'xxf="echo' '\"<\$1>' 'found.\"' '>&4";' case '$#' in '2)' 'xxnf="echo' '\"<\$1>' NOT 'found.\"' '>&4";;' '*)' 'xxnf="echo' '\"<\$1>' NOT found, '...\"' '>&4";;' 'esac;' case '$#' in '4)' 'instead=instead;;' '*)' 'instead="at' 'last";;' 'esac;' while '$test' '"$cont";' do 'xxx=`./findhdr' '$1`' 'var=$2;' eval '"was=\$$2";' if '$test' '"$xxx"' '&&' '$test' -r '"$xxx";' then eval '$xxf;' eval '"case' '\"\$$var\"' in '$undef)' . './whoa;' 'esac";' eval '"$var=\$td";' 'cont="";' else eval '$xxnf;' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' 'fi;' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' case '$#' in '0)' 'cont="";;' '2)' 'xxf="echo' '\"but' I found '<\$1>' '$instead.\"' '>&4";' 'xxnf="echo' '\"and' I did not find '<\$1>' 'either.\"' '>&4";;' '*)' 'xxf="echo' '\"but' I found '<\$1\>' 'instead.\"' '>&4";' 'xxnf="echo' '\"there' is no '<\$1>,' '...\"' '>&4";;' 'esac;' 'done;' while '$test' '"$yyy";' do set '$yyy;' 'var=$2;' eval '"was=\$$2";' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' done
++ echo ' '
 
++ td=define
++ tu=undef
++ yyy='sys/filio.h i_sysfilio'
++ cont=true
++ xxf='echo "<$1> found." >&4'
++ case $# in
++ xxnf='echo "<$1> NOT found." >&4'
++ case $# in
++ instead='at last'
++ test true
+++ ./findhdr sys/filio.h
++ xxx=
++ var=i_sysfilio
++ eval 'was=$i_sysfilio'
+++ was=
++ test ''
++ eval echo '"<$1>' NOT 'found."' '>&4'
+++ echo '<sys/filio.h> NOT found.'
<sys/filio.h> NOT found.
++ eval 'case "$i_sysfilio" in define) . ./whoa; esac'
+++ case "$i_sysfilio" in
++ eval 'i_sysfilio=$tu'
+++ i_sysfilio=undef
++ set sys/filio.h i_sysfilio
++ shift
++ shift
++ yyy=
++ case $# in
++ cont=
++ test ''
++ test ''
+ echo ' '
 
++ ./findhdr sys/ioctl.h
+ test /usr/include/sys/ioctl.h
+ val=define
+ echo '<sys/ioctl.h> found.'
<sys/ioctl.h> found.
+ set i_sysioctl
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=i_sysioctl
++ eval 'was=$i_sysioctl'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval i_sysioctl=define
+++ i_sysioctl=define
+ : see if socket ioctl defs are in sys/sockio.h
+ echo ' '
 
++ ./findhdr sys/sockio.h
+ xxx=
+ test ''
+ val=undef
+ /bin/cat
<sys/sockio.h> not found, assuming socket ioctls are in <sys/ioctl.h>.
+ set i_syssockio
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=i_syssockio
++ eval 'was=$i_syssockio'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval i_syssockio=undef
+++ i_syssockio=undef
+ : see if this is a syslog.h system
+ set syslog.h i_syslog
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'yyy=$@;' 'cont=true;' 'xxf="echo' '\"<\$1>' 'found.\"' '>&4";' case '$#' in '2)' 'xxnf="echo' '\"<\$1>' NOT 'found.\"' '>&4";;' '*)' 'xxnf="echo' '\"<\$1>' NOT found, '...\"' '>&4";;' 'esac;' case '$#' in '4)' 'instead=instead;;' '*)' 'instead="at' 'last";;' 'esac;' while '$test' '"$cont";' do 'xxx=`./findhdr' '$1`' 'var=$2;' eval '"was=\$$2";' if '$test' '"$xxx"' '&&' '$test' -r '"$xxx";' then eval '$xxf;' eval '"case' '\"\$$var\"' in '$undef)' . './whoa;' 'esac";' eval '"$var=\$td";' 'cont="";' else eval '$xxnf;' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' 'fi;' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' case '$#' in '0)' 'cont="";;' '2)' 'xxf="echo' '\"but' I found '<\$1>' '$instead.\"' '>&4";' 'xxnf="echo' '\"and' I did not find '<\$1>' 'either.\"' '>&4";;' '*)' 'xxf="echo' '\"but' I found '<\$1\>' 'instead.\"' '>&4";' 'xxnf="echo' '\"there' is no '<\$1>,' '...\"' '>&4";;' 'esac;' 'done;' while '$test' '"$yyy";' do set '$yyy;' 'var=$2;' eval '"was=\$$2";' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' done
++ echo ' '
 
++ td=define
++ tu=undef
++ yyy='syslog.h i_syslog'
++ cont=true
++ xxf='echo "<$1> found." >&4'
++ case $# in
++ xxnf='echo "<$1> NOT found." >&4'
++ case $# in
++ instead='at last'
++ test true
+++ ./findhdr syslog.h
++ xxx=/usr/include/syslog.h
++ var=i_syslog
++ eval 'was=$i_syslog'
+++ was=
++ test /usr/include/syslog.h
++ test -r /usr/include/syslog.h
++ eval echo '"<$1>' 'found."' '>&4'
+++ echo '<syslog.h> found.'
<syslog.h> found.
++ eval 'case "$i_syslog" in undef) . ./whoa; esac'
+++ case "$i_syslog" in
++ eval 'i_syslog=$td'
+++ i_syslog=define
++ cont=
++ set syslog.h i_syslog
++ shift
++ shift
++ yyy=
++ case $# in
++ cont=
++ test ''
++ test ''
+ : see if this is a sys/mode.h system
+ set sys/mode.h i_sysmode
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'yyy=$@;' 'cont=true;' 'xxf="echo' '\"<\$1>' 'found.\"' '>&4";' case '$#' in '2)' 'xxnf="echo' '\"<\$1>' NOT 'found.\"' '>&4";;' '*)' 'xxnf="echo' '\"<\$1>' NOT found, '...\"' '>&4";;' 'esac;' case '$#' in '4)' 'instead=instead;;' '*)' 'instead="at' 'last";;' 'esac;' while '$test' '"$cont";' do 'xxx=`./findhdr' '$1`' 'var=$2;' eval '"was=\$$2";' if '$test' '"$xxx"' '&&' '$test' -r '"$xxx";' then eval '$xxf;' eval '"case' '\"\$$var\"' in '$undef)' . './whoa;' 'esac";' eval '"$var=\$td";' 'cont="";' else eval '$xxnf;' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' 'fi;' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' case '$#' in '0)' 'cont="";;' '2)' 'xxf="echo' '\"but' I found '<\$1>' '$instead.\"' '>&4";' 'xxnf="echo' '\"and' I did not find '<\$1>' 'either.\"' '>&4";;' '*)' 'xxf="echo' '\"but' I found '<\$1\>' 'instead.\"' '>&4";' 'xxnf="echo' '\"there' is no '<\$1>,' '...\"' '>&4";;' 'esac;' 'done;' while '$test' '"$yyy";' do set '$yyy;' 'var=$2;' eval '"was=\$$2";' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' done
++ echo ' '
 
++ td=define
++ tu=undef
++ yyy='sys/mode.h i_sysmode'
++ cont=true
++ xxf='echo "<$1> found." >&4'
++ case $# in
++ xxnf='echo "<$1> NOT found." >&4'
++ case $# in
++ instead='at last'
++ test true
+++ ./findhdr sys/mode.h
++ xxx=
++ var=i_sysmode
++ eval 'was=$i_sysmode'
+++ was=
++ test ''
++ eval echo '"<$1>' NOT 'found."' '>&4'
+++ echo '<sys/mode.h> NOT found.'
<sys/mode.h> NOT found.
++ eval 'case "$i_sysmode" in define) . ./whoa; esac'
+++ case "$i_sysmode" in
++ eval 'i_sysmode=$tu'
+++ i_sysmode=undef
++ set sys/mode.h i_sysmode
++ shift
++ shift
++ yyy=
++ case $# in
++ cont=
++ test ''
++ test ''
+ : see if sys/resource.h has to be included
+ set sys/resource.h i_sysresrc
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'yyy=$@;' 'cont=true;' 'xxf="echo' '\"<\$1>' 'found.\"' '>&4";' case '$#' in '2)' 'xxnf="echo' '\"<\$1>' NOT 'found.\"' '>&4";;' '*)' 'xxnf="echo' '\"<\$1>' NOT found, '...\"' '>&4";;' 'esac;' case '$#' in '4)' 'instead=instead;;' '*)' 'instead="at' 'last";;' 'esac;' while '$test' '"$cont";' do 'xxx=`./findhdr' '$1`' 'var=$2;' eval '"was=\$$2";' if '$test' '"$xxx"' '&&' '$test' -r '"$xxx";' then eval '$xxf;' eval '"case' '\"\$$var\"' in '$undef)' . './whoa;' 'esac";' eval '"$var=\$td";' 'cont="";' else eval '$xxnf;' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' 'fi;' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' case '$#' in '0)' 'cont="";;' '2)' 'xxf="echo' '\"but' I found '<\$1>' '$instead.\"' '>&4";' 'xxnf="echo' '\"and' I did not find '<\$1>' 'either.\"' '>&4";;' '*)' 'xxf="echo' '\"but' I found '<\$1\>' 'instead.\"' '>&4";' 'xxnf="echo' '\"there' is no '<\$1>,' '...\"' '>&4";;' 'esac;' 'done;' while '$test' '"$yyy";' do set '$yyy;' 'var=$2;' eval '"was=\$$2";' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' done
++ echo ' '
 
++ td=define
++ tu=undef
++ yyy='sys/resource.h i_sysresrc'
++ cont=true
++ xxf='echo "<$1> found." >&4'
++ case $# in
++ xxnf='echo "<$1> NOT found." >&4'
++ case $# in
++ instead='at last'
++ test true
+++ ./findhdr sys/resource.h
++ xxx=/usr/include/sys/resource.h
++ var=i_sysresrc
++ eval 'was=$i_sysresrc'
+++ was=
++ test /usr/include/sys/resource.h
++ test -r /usr/include/sys/resource.h
++ eval echo '"<$1>' 'found."' '>&4'
+++ echo '<sys/resource.h> found.'
<sys/resource.h> found.
++ eval 'case "$i_sysresrc" in undef) . ./whoa; esac'
+++ case "$i_sysresrc" in
++ eval 'i_sysresrc=$td'
+++ i_sysresrc=define
++ cont=
++ set sys/resource.h i_sysresrc
++ shift
++ shift
++ yyy=
++ case $# in
++ cont=
++ test ''
++ test ''
+ : see if sys/security.h is available
+ set sys/security.h i_syssecrt
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'yyy=$@;' 'cont=true;' 'xxf="echo' '\"<\$1>' 'found.\"' '>&4";' case '$#' in '2)' 'xxnf="echo' '\"<\$1>' NOT 'found.\"' '>&4";;' '*)' 'xxnf="echo' '\"<\$1>' NOT found, '...\"' '>&4";;' 'esac;' case '$#' in '4)' 'instead=instead;;' '*)' 'instead="at' 'last";;' 'esac;' while '$test' '"$cont";' do 'xxx=`./findhdr' '$1`' 'var=$2;' eval '"was=\$$2";' if '$test' '"$xxx"' '&&' '$test' -r '"$xxx";' then eval '$xxf;' eval '"case' '\"\$$var\"' in '$undef)' . './whoa;' 'esac";' eval '"$var=\$td";' 'cont="";' else eval '$xxnf;' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' 'fi;' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' case '$#' in '0)' 'cont="";;' '2)' 'xxf="echo' '\"but' I found '<\$1>' '$instead.\"' '>&4";' 'xxnf="echo' '\"and' I did not find '<\$1>' 'either.\"' '>&4";;' '*)' 'xxf="echo' '\"but' I found '<\$1\>' 'instead.\"' '>&4";' 'xxnf="echo' '\"there' is no '<\$1>,' '...\"' '>&4";;' 'esac;' 'done;' while '$test' '"$yyy";' do set '$yyy;' 'var=$2;' eval '"was=\$$2";' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' done
++ echo ' '
 
++ td=define
++ tu=undef
++ yyy='sys/security.h i_syssecrt'
++ cont=true
++ xxf='echo "<$1> found." >&4'
++ case $# in
++ xxnf='echo "<$1> NOT found." >&4'
++ case $# in
++ instead='at last'
++ test true
+++ ./findhdr sys/security.h
++ xxx=
++ var=i_syssecrt
++ eval 'was=$i_syssecrt'
+++ was=
++ test ''
++ eval echo '"<$1>' NOT 'found."' '>&4'
+++ echo '<sys/security.h> NOT found.'
<sys/security.h> NOT found.
++ eval 'case "$i_syssecrt" in define) . ./whoa; esac'
+++ case "$i_syssecrt" in
++ eval 'i_syssecrt=$tu'
+++ i_syssecrt=undef
++ set sys/security.h i_syssecrt
++ shift
++ shift
++ yyy=
++ case $# in
++ cont=
++ test ''
++ test ''
+ : see if this is a sys/statvfs.h system
+ set sys/statvfs.h i_sysstatvfs
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'yyy=$@;' 'cont=true;' 'xxf="echo' '\"<\$1>' 'found.\"' '>&4";' case '$#' in '2)' 'xxnf="echo' '\"<\$1>' NOT 'found.\"' '>&4";;' '*)' 'xxnf="echo' '\"<\$1>' NOT found, '...\"' '>&4";;' 'esac;' case '$#' in '4)' 'instead=instead;;' '*)' 'instead="at' 'last";;' 'esac;' while '$test' '"$cont";' do 'xxx=`./findhdr' '$1`' 'var=$2;' eval '"was=\$$2";' if '$test' '"$xxx"' '&&' '$test' -r '"$xxx";' then eval '$xxf;' eval '"case' '\"\$$var\"' in '$undef)' . './whoa;' 'esac";' eval '"$var=\$td";' 'cont="";' else eval '$xxnf;' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' 'fi;' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' case '$#' in '0)' 'cont="";;' '2)' 'xxf="echo' '\"but' I found '<\$1>' '$instead.\"' '>&4";' 'xxnf="echo' '\"and' I did not find '<\$1>' 'either.\"' '>&4";;' '*)' 'xxf="echo' '\"but' I found '<\$1\>' 'instead.\"' '>&4";' 'xxnf="echo' '\"there' is no '<\$1>,' '...\"' '>&4";;' 'esac;' 'done;' while '$test' '"$yyy";' do set '$yyy;' 'var=$2;' eval '"was=\$$2";' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' done
++ echo ' '
 
++ td=define
++ tu=undef
++ yyy='sys/statvfs.h i_sysstatvfs'
++ cont=true
++ xxf='echo "<$1> found." >&4'
++ case $# in
++ xxnf='echo "<$1> NOT found." >&4'
++ case $# in
++ instead='at last'
++ test true
+++ ./findhdr sys/statvfs.h
++ xxx=
++ var=i_sysstatvfs
++ eval 'was=$i_sysstatvfs'
+++ was=
++ test ''
++ eval echo '"<$1>' NOT 'found."' '>&4'
+++ echo '<sys/statvfs.h> NOT found.'
<sys/statvfs.h> NOT found.
++ eval 'case "$i_sysstatvfs" in define) . ./whoa; esac'
+++ case "$i_sysstatvfs" in
++ eval 'i_sysstatvfs=$tu'
+++ i_sysstatvfs=undef
++ set sys/statvfs.h i_sysstatvfs
++ shift
++ shift
++ yyy=
++ case $# in
++ cont=
++ test ''
++ test ''
+ : see if this is a sys/un.h system
+ set sys/un.h i_sysun
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'yyy=$@;' 'cont=true;' 'xxf="echo' '\"<\$1>' 'found.\"' '>&4";' case '$#' in '2)' 'xxnf="echo' '\"<\$1>' NOT 'found.\"' '>&4";;' '*)' 'xxnf="echo' '\"<\$1>' NOT found, '...\"' '>&4";;' 'esac;' case '$#' in '4)' 'instead=instead;;' '*)' 'instead="at' 'last";;' 'esac;' while '$test' '"$cont";' do 'xxx=`./findhdr' '$1`' 'var=$2;' eval '"was=\$$2";' if '$test' '"$xxx"' '&&' '$test' -r '"$xxx";' then eval '$xxf;' eval '"case' '\"\$$var\"' in '$undef)' . './whoa;' 'esac";' eval '"$var=\$td";' 'cont="";' else eval '$xxnf;' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' 'fi;' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' case '$#' in '0)' 'cont="";;' '2)' 'xxf="echo' '\"but' I found '<\$1>' '$instead.\"' '>&4";' 'xxnf="echo' '\"and' I did not find '<\$1>' 'either.\"' '>&4";;' '*)' 'xxf="echo' '\"but' I found '<\$1\>' 'instead.\"' '>&4";' 'xxnf="echo' '\"there' is no '<\$1>,' '...\"' '>&4";;' 'esac;' 'done;' while '$test' '"$yyy";' do set '$yyy;' 'var=$2;' eval '"was=\$$2";' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' done
++ echo ' '
 
++ td=define
++ tu=undef
++ yyy='sys/un.h i_sysun'
++ cont=true
++ xxf='echo "<$1> found." >&4'
++ case $# in
++ xxnf='echo "<$1> NOT found." >&4'
++ case $# in
++ instead='at last'
++ test true
+++ ./findhdr sys/un.h
++ xxx=/usr/include/sys/un.h
++ var=i_sysun
++ eval 'was=$i_sysun'
+++ was=
++ test /usr/include/sys/un.h
++ test -r /usr/include/sys/un.h
++ eval echo '"<$1>' 'found."' '>&4'
+++ echo '<sys/un.h> found.'
<sys/un.h> found.
++ eval 'case "$i_sysun" in undef) . ./whoa; esac'
+++ case "$i_sysun" in
++ eval 'i_sysun=$td'
+++ i_sysun=define
++ cont=
++ set sys/un.h i_sysun
++ shift
++ shift
++ yyy=
++ case $# in
++ cont=
++ test ''
++ test ''
+ : see if this is a sys/utsname.h system
+ set sys/utsname.h i_sysutsname
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'yyy=$@;' 'cont=true;' 'xxf="echo' '\"<\$1>' 'found.\"' '>&4";' case '$#' in '2)' 'xxnf="echo' '\"<\$1>' NOT 'found.\"' '>&4";;' '*)' 'xxnf="echo' '\"<\$1>' NOT found, '...\"' '>&4";;' 'esac;' case '$#' in '4)' 'instead=instead;;' '*)' 'instead="at' 'last";;' 'esac;' while '$test' '"$cont";' do 'xxx=`./findhdr' '$1`' 'var=$2;' eval '"was=\$$2";' if '$test' '"$xxx"' '&&' '$test' -r '"$xxx";' then eval '$xxf;' eval '"case' '\"\$$var\"' in '$undef)' . './whoa;' 'esac";' eval '"$var=\$td";' 'cont="";' else eval '$xxnf;' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' 'fi;' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' case '$#' in '0)' 'cont="";;' '2)' 'xxf="echo' '\"but' I found '<\$1>' '$instead.\"' '>&4";' 'xxnf="echo' '\"and' I did not find '<\$1>' 'either.\"' '>&4";;' '*)' 'xxf="echo' '\"but' I found '<\$1\>' 'instead.\"' '>&4";' 'xxnf="echo' '\"there' is no '<\$1>,' '...\"' '>&4";;' 'esac;' 'done;' while '$test' '"$yyy";' do set '$yyy;' 'var=$2;' eval '"was=\$$2";' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' done
++ echo ' '
 
++ td=define
++ tu=undef
++ yyy='sys/utsname.h i_sysutsname'
++ cont=true
++ xxf='echo "<$1> found." >&4'
++ case $# in
++ xxnf='echo "<$1> NOT found." >&4'
++ case $# in
++ instead='at last'
++ test true
+++ ./findhdr sys/utsname.h
++ xxx=/usr/include/sys/utsname.h
++ var=i_sysutsname
++ eval 'was=$i_sysutsname'
+++ was=
++ test /usr/include/sys/utsname.h
++ test -r /usr/include/sys/utsname.h
++ eval echo '"<$1>' 'found."' '>&4'
+++ echo '<sys/utsname.h> found.'
<sys/utsname.h> found.
++ eval 'case "$i_sysutsname" in undef) . ./whoa; esac'
+++ case "$i_sysutsname" in
++ eval 'i_sysutsname=$td'
+++ i_sysutsname=define
++ cont=
++ set sys/utsname.h i_sysutsname
++ shift
++ shift
++ yyy=
++ case $# in
++ cont=
++ test ''
++ test ''
+ : see if this is a syswait system
+ set sys/wait.h i_syswait
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'yyy=$@;' 'cont=true;' 'xxf="echo' '\"<\$1>' 'found.\"' '>&4";' case '$#' in '2)' 'xxnf="echo' '\"<\$1>' NOT 'found.\"' '>&4";;' '*)' 'xxnf="echo' '\"<\$1>' NOT found, '...\"' '>&4";;' 'esac;' case '$#' in '4)' 'instead=instead;;' '*)' 'instead="at' 'last";;' 'esac;' while '$test' '"$cont";' do 'xxx=`./findhdr' '$1`' 'var=$2;' eval '"was=\$$2";' if '$test' '"$xxx"' '&&' '$test' -r '"$xxx";' then eval '$xxf;' eval '"case' '\"\$$var\"' in '$undef)' . './whoa;' 'esac";' eval '"$var=\$td";' 'cont="";' else eval '$xxnf;' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' 'fi;' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' case '$#' in '0)' 'cont="";;' '2)' 'xxf="echo' '\"but' I found '<\$1>' '$instead.\"' '>&4";' 'xxnf="echo' '\"and' I did not find '<\$1>' 'either.\"' '>&4";;' '*)' 'xxf="echo' '\"but' I found '<\$1\>' 'instead.\"' '>&4";' 'xxnf="echo' '\"there' is no '<\$1>,' '...\"' '>&4";;' 'esac;' 'done;' while '$test' '"$yyy";' do set '$yyy;' 'var=$2;' eval '"was=\$$2";' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' done
++ echo ' '
 
++ td=define
++ tu=undef
++ yyy='sys/wait.h i_syswait'
++ cont=true
++ xxf='echo "<$1> found." >&4'
++ case $# in
++ xxnf='echo "<$1> NOT found." >&4'
++ case $# in
++ instead='at last'
++ test true
+++ ./findhdr sys/wait.h
++ xxx=/usr/include/sys/wait.h
++ var=i_syswait
++ eval 'was=$i_syswait'
+++ was=
++ test /usr/include/sys/wait.h
++ test -r /usr/include/sys/wait.h
++ eval echo '"<$1>' 'found."' '>&4'
+++ echo '<sys/wait.h> found.'
<sys/wait.h> found.
++ eval 'case "$i_syswait" in undef) . ./whoa; esac'
+++ case "$i_syswait" in
++ eval 'i_syswait=$td'
+++ i_syswait=define
++ cont=
++ set sys/wait.h i_syswait
++ shift
++ shift
++ yyy=
++ case $# in
++ cont=
++ test ''
++ test ''
+ : see if this is a ustat.h system
+ set ustat.h i_ustat
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'yyy=$@;' 'cont=true;' 'xxf="echo' '\"<\$1>' 'found.\"' '>&4";' case '$#' in '2)' 'xxnf="echo' '\"<\$1>' NOT 'found.\"' '>&4";;' '*)' 'xxnf="echo' '\"<\$1>' NOT found, '...\"' '>&4";;' 'esac;' case '$#' in '4)' 'instead=instead;;' '*)' 'instead="at' 'last";;' 'esac;' while '$test' '"$cont";' do 'xxx=`./findhdr' '$1`' 'var=$2;' eval '"was=\$$2";' if '$test' '"$xxx"' '&&' '$test' -r '"$xxx";' then eval '$xxf;' eval '"case' '\"\$$var\"' in '$undef)' . './whoa;' 'esac";' eval '"$var=\$td";' 'cont="";' else eval '$xxnf;' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' 'fi;' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' case '$#' in '0)' 'cont="";;' '2)' 'xxf="echo' '\"but' I found '<\$1>' '$instead.\"' '>&4";' 'xxnf="echo' '\"and' I did not find '<\$1>' 'either.\"' '>&4";;' '*)' 'xxf="echo' '\"but' I found '<\$1\>' 'instead.\"' '>&4";' 'xxnf="echo' '\"there' is no '<\$1>,' '...\"' '>&4";;' 'esac;' 'done;' while '$test' '"$yyy";' do set '$yyy;' 'var=$2;' eval '"was=\$$2";' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' done
++ echo ' '
 
++ td=define
++ tu=undef
++ yyy='ustat.h i_ustat'
++ cont=true
++ xxf='echo "<$1> found." >&4'
++ case $# in
++ xxnf='echo "<$1> NOT found." >&4'
++ case $# in
++ instead='at last'
++ test true
+++ ./findhdr ustat.h
++ xxx=
++ var=i_ustat
++ eval 'was=$i_ustat'
+++ was=
++ test ''
++ eval echo '"<$1>' NOT 'found."' '>&4'
+++ echo '<ustat.h> NOT found.'
<ustat.h> NOT found.
++ eval 'case "$i_ustat" in define) . ./whoa; esac'
+++ case "$i_ustat" in
++ eval 'i_ustat=$tu'
+++ i_ustat=undef
++ set ustat.h i_ustat
++ shift
++ shift
++ yyy=
++ case $# in
++ cont=
++ test ''
++ test ''
+ : see if this is an utime system
+ set utime.h i_utime
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'yyy=$@;' 'cont=true;' 'xxf="echo' '\"<\$1>' 'found.\"' '>&4";' case '$#' in '2)' 'xxnf="echo' '\"<\$1>' NOT 'found.\"' '>&4";;' '*)' 'xxnf="echo' '\"<\$1>' NOT found, '...\"' '>&4";;' 'esac;' case '$#' in '4)' 'instead=instead;;' '*)' 'instead="at' 'last";;' 'esac;' while '$test' '"$cont";' do 'xxx=`./findhdr' '$1`' 'var=$2;' eval '"was=\$$2";' if '$test' '"$xxx"' '&&' '$test' -r '"$xxx";' then eval '$xxf;' eval '"case' '\"\$$var\"' in '$undef)' . './whoa;' 'esac";' eval '"$var=\$td";' 'cont="";' else eval '$xxnf;' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' 'fi;' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' case '$#' in '0)' 'cont="";;' '2)' 'xxf="echo' '\"but' I found '<\$1>' '$instead.\"' '>&4";' 'xxnf="echo' '\"and' I did not find '<\$1>' 'either.\"' '>&4";;' '*)' 'xxf="echo' '\"but' I found '<\$1\>' 'instead.\"' '>&4";' 'xxnf="echo' '\"there' is no '<\$1>,' '...\"' '>&4";;' 'esac;' 'done;' while '$test' '"$yyy";' do set '$yyy;' 'var=$2;' eval '"was=\$$2";' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' done
++ echo ' '
 
++ td=define
++ tu=undef
++ yyy='utime.h i_utime'
++ cont=true
++ xxf='echo "<$1> found." >&4'
++ case $# in
++ xxnf='echo "<$1> NOT found." >&4'
++ case $# in
++ instead='at last'
++ test true
+++ ./findhdr utime.h
++ xxx=/usr/include/utime.h
++ var=i_utime
++ eval 'was=$i_utime'
+++ was=
++ test /usr/include/utime.h
++ test -r /usr/include/utime.h
++ eval echo '"<$1>' 'found."' '>&4'
+++ echo '<utime.h> found.'
<utime.h> found.
++ eval 'case "$i_utime" in undef) . ./whoa; esac'
+++ case "$i_utime" in
++ eval 'i_utime=$td'
+++ i_utime=define
++ cont=
++ set utime.h i_utime
++ shift
++ shift
++ yyy=
++ case $# in
++ cont=
++ test ''
++ test ''
+ : see if this is a values.h system
+ set values.h i_values
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'yyy=$@;' 'cont=true;' 'xxf="echo' '\"<\$1>' 'found.\"' '>&4";' case '$#' in '2)' 'xxnf="echo' '\"<\$1>' NOT 'found.\"' '>&4";;' '*)' 'xxnf="echo' '\"<\$1>' NOT found, '...\"' '>&4";;' 'esac;' case '$#' in '4)' 'instead=instead;;' '*)' 'instead="at' 'last";;' 'esac;' while '$test' '"$cont";' do 'xxx=`./findhdr' '$1`' 'var=$2;' eval '"was=\$$2";' if '$test' '"$xxx"' '&&' '$test' -r '"$xxx";' then eval '$xxf;' eval '"case' '\"\$$var\"' in '$undef)' . './whoa;' 'esac";' eval '"$var=\$td";' 'cont="";' else eval '$xxnf;' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' 'fi;' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' case '$#' in '0)' 'cont="";;' '2)' 'xxf="echo' '\"but' I found '<\$1>' '$instead.\"' '>&4";' 'xxnf="echo' '\"and' I did not find '<\$1>' 'either.\"' '>&4";;' '*)' 'xxf="echo' '\"but' I found '<\$1\>' 'instead.\"' '>&4";' 'xxnf="echo' '\"there' is no '<\$1>,' '...\"' '>&4";;' 'esac;' 'done;' while '$test' '"$yyy";' do set '$yyy;' 'var=$2;' eval '"was=\$$2";' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' done
++ echo ' '
 
++ td=define
++ tu=undef
++ yyy='values.h i_values'
++ cont=true
++ xxf='echo "<$1> found." >&4'
++ case $# in
++ xxnf='echo "<$1> NOT found." >&4'
++ case $# in
++ instead='at last'
++ test true
+++ ./findhdr values.h
++ xxx=
++ var=i_values
++ eval 'was=$i_values'
+++ was=
++ test ''
++ eval echo '"<$1>' NOT 'found."' '>&4'
+++ echo '<values.h> NOT found.'
<values.h> NOT found.
++ eval 'case "$i_values" in define) . ./whoa; esac'
+++ case "$i_values" in
++ eval 'i_values=$tu'
+++ i_values=undef
++ set values.h i_values
++ shift
++ shift
++ yyy=
++ case $# in
++ cont=
++ test ''
++ test ''
+ : see if this is a vfork system
+ case "$d_vfork" in
+ i_vfork=undef
+ : see if gdbm.h is available
+ set gdbm.h t_gdbm
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'yyy=$@;' 'cont=true;' 'xxf="echo' '\"<\$1>' 'found.\"' '>&4";' case '$#' in '2)' 'xxnf="echo' '\"<\$1>' NOT 'found.\"' '>&4";;' '*)' 'xxnf="echo' '\"<\$1>' NOT found, '...\"' '>&4";;' 'esac;' case '$#' in '4)' 'instead=instead;;' '*)' 'instead="at' 'last";;' 'esac;' while '$test' '"$cont";' do 'xxx=`./findhdr' '$1`' 'var=$2;' eval '"was=\$$2";' if '$test' '"$xxx"' '&&' '$test' -r '"$xxx";' then eval '$xxf;' eval '"case' '\"\$$var\"' in '$undef)' . './whoa;' 'esac";' eval '"$var=\$td";' 'cont="";' else eval '$xxnf;' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' 'fi;' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' case '$#' in '0)' 'cont="";;' '2)' 'xxf="echo' '\"but' I found '<\$1>' '$instead.\"' '>&4";' 'xxnf="echo' '\"and' I did not find '<\$1>' 'either.\"' '>&4";;' '*)' 'xxf="echo' '\"but' I found '<\$1\>' 'instead.\"' '>&4";' 'xxnf="echo' '\"there' is no '<\$1>,' '...\"' '>&4";;' 'esac;' 'done;' while '$test' '"$yyy";' do set '$yyy;' 'var=$2;' eval '"was=\$$2";' eval '"case' '\"\$$var\"' in '$define)' . './whoa;' 'esac";' eval '"$var=\$tu";' set '$yyy;' 'shift;' 'shift;' 'yyy=$@;' done
++ echo ' '
 
++ td=define
++ tu=undef
++ yyy='gdbm.h t_gdbm'
++ cont=true
++ xxf='echo "<$1> found." >&4'
++ case $# in
++ xxnf='echo "<$1> NOT found." >&4'
++ case $# in
++ instead='at last'
++ test true
+++ ./findhdr gdbm.h
++ xxx=/usr/include/gdbm.h
++ var=t_gdbm
++ eval 'was=$t_gdbm'
+++ was=
++ test /usr/include/gdbm.h
++ test -r /usr/include/gdbm.h
++ eval echo '"<$1>' 'found."' '>&4'
+++ echo '<gdbm.h> found.'
<gdbm.h> found.
++ eval 'case "$t_gdbm" in undef) . ./whoa; esac'
+++ case "$t_gdbm" in
++ eval 't_gdbm=$td'
+++ t_gdbm=define
++ cont=
++ set gdbm.h t_gdbm
++ shift
++ shift
++ yyy=
++ case $# in
++ cont=
++ test ''
++ test ''
+ case "$t_gdbm" in
+ : see if gdbm_open exists
+ set gdbm_open d_gdbm_open
+ eval echo '"' '";' 'td=$define;' 'tu=$undef;' 'sym=$1;' 'var=$2;' eval '"was=\$$2";' 'tx=yes;' case '"$reuseval$was"' in 'true)' ';;' 'true*)' 'tx=no;;' 'esac;' case '"$tx"' in 'yes)' set '$sym' tres '-f;' eval '$csym;' case '"$tres"' in 'true)' echo '"$sym()' 'found."' '>&4;' case '"$was"' in '$undef)' . './whoa;' 'esac;' eval '"$var=\$td";;' '*)' echo '"$sym()' NOT 'found."' '>&4;' case '"$was"' in '$define)' . './whoa;' 'esac;' eval '"$var=\$tu";;' 'esac;;' '*)' case '"$was"' in '$define)' echo '"$sym()' 'found."' '>&4;;' '*)' echo '"$sym()' NOT 'found."' '>&4;;' 'esac;;' esac
++ echo ' '
 
++ td=define
++ tu=undef
++ sym=gdbm_open
++ var=d_gdbm_open
++ eval 'was=$d_gdbm_open'
+++ was=
++ tx=yes
++ case "$reuseval$was" in
++ case "$tx" in
++ set gdbm_open tres -f
++ eval 'tlook=$1;' case '"$3"' in '-v)' 'tf=libc.tmp;' 'tdc="";;' '-a)' 'tf=libc.tmp;' 'tdc="[]";;' '*)' 'tlook="^$1\$";' 'tf=libc.list;' 'tdc="()";;' 'esac;' 'tx=yes;' case '"$reuseval-$4"' in 'true-)' ';;' 'true-*)' 'tx=no;' eval '"tval=\$$4";' case '"$tval"' in '"")' 'tx=yes;;' 'esac;;' 'esac;' case '"$tx"' in 'yes)' 'tval=false;' if '$test' '"$runnm"' = 'true;' then if '$contains' '$tlook' '$tf' '>/dev/null' '2>&1;' then 'tval=true;' elif '$test' '"$mistrustnm"' = compile -o '"$mistrustnm"' = 'run;' then echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '>/dev/null' '2>&1' '$libs' '&&' 'tval=true;' '$test' '"$mistrustnm"' = run -a -x try '&&' '{' '$run' './try$_exe' '>/dev/null' '2>&1' '||' 'tval=false;' '};' '$rm' -f 'try$_exe' try.c core 'core.*' 'try.core;' 'fi;' else echo '"void' '*(*(p()))$tdc' '{' extern void '*$1$tdc;' return '&$1;' '}' int 'main()' '{' 'if(p())' 'return(0);' else 'return(1);' '}">' 'try.c;' '$cc' -o try '$optimize' '$ccflags' '$ldflags' try.c '$libs' '>/dev/null' '2>&1' '&&' 'tval=true;' '$rm' -f 'try$_exe' 'try.c;' 'fi;' ';;' '*)' case '"$tval"' in '$define)' 'tval=true;;' '*)' 'tval=false;;' 'esac;' ';;' 'esac;' eval '"$2=$tval"'
+++ tlook=gdbm_open
+++ case "$3" in
+++ tlook='^gdbm_open$'
+++ tf=libc.list
+++ tdc='()'
+++ tx=yes
+++ case "$reuseval-$4" in
+++ case "$tx" in
+++ tval=false
+++ test true = true
+++ grep '^gdbm_open$' libc.list
+++ tval=true
+++ eval tres=true
++++ tres=true
++ case "$tres" in
++ echo 'gdbm_open() found.'
gdbm_open() found.
++ case "$was" in
++ eval 'd_gdbm_open=$td'
+++ d_gdbm_open=define
+ case "$d_gdbm_open" in
+ val=define
+ set i_gdbm
+ eval 'var=$1;' eval '"was=\$$1";' 'td=$define;' 'tu=$undef;' case '"$val$was"' in '$define$undef)' . './whoa;' eval '"$var=\$td";;' '$undef$define)' . './whoa;' eval '"$var=\$tu";;' '*)' eval '"$var=$val";;' esac
++ var=i_gdbm
++ eval 'was=$i_gdbm'
+++ was=
++ td=define
++ tu=undef
++ case "$val$was" in
++ eval i_gdbm=define
+++ i_gdbm=define
+ echo ' '
 
+ echo 'Looking for extensions...'
Looking for extensions...
+ : If we are using the old config.sh, known_extensions may contain
+ : old or inaccurate or duplicate values.
+ known_extensions=
+ nonxs_extensions=
+ : We do not use find because it might not be available.
+ : We do not just use MANIFEST because the user may have dropped
+ : some additional extensions into the source tree and expect them
+ : to be built.
+ : Function to recursively find available extensions, ignoring DynaLoader
+ : NOTE: recursion limit of 10 to prevent runaway in case of symlink madness
+ find_extensions='
    for xxx in *; do
       case "$xxx" in
           DynaLoader|dynaload) ;;
           Win32CORE) known_extensions="$known_extensions $1$xxx";;
           *)
           if $test -f $xxx/$xxx.xs; then
               known_extensions="$known_extensions $1$xxx";
           elif $test -f $xxx/Makefile.PL; then
               nonxs_extensions="$nonxs_extensions $1$xxx";
           else
               if $test -d $xxx -a $# -lt 10; then
                   set $1$xxx/ $*;
                   cd "$xxx";
                   eval $find_extensions;
                   cd ..;
                   shift;
               fi;
           fi
           ;;
       esac;
    done'
++ pwd
+ tdir=/usr/src/perl/perl-5.8.8/UU
+ cd ../ext
+ set X
+ shift
+ eval for xxx in '*;' do case '"$xxx"' in 'DynaLoader|dynaload)' ';;' 'Win32CORE)' 'known_extensions="$known_extensions' '$1$xxx";;' '*)' if '$test' -f '$xxx/$xxx.xs;' then 'known_extensions="$known_extensions' '$1$xxx";' elif '$test' -f '$xxx/Makefile.PL;' then 'nonxs_extensions="$nonxs_extensions' '$1$xxx";' else if '$test' -d '$xxx' -a '$#' -lt '10;' then set '$1$xxx/' '$*;' cd '"$xxx";' eval '$find_extensions;' cd '..;' 'shift;' 'fi;' fi ';;' 'esac;' done
++ for xxx in '*'
++ case "$xxx" in
++ test -f B/B.xs
++ known_extensions=' B'
++ for xxx in '*'
++ case "$xxx" in
++ test -f ByteLoader/ByteLoader.xs
++ known_extensions=' B ByteLoader'
++ for xxx in '*'
++ case "$xxx" in
++ test -f Cwd/Cwd.xs
++ known_extensions=' B ByteLoader Cwd'
++ for xxx in '*'
++ case "$xxx" in
++ test -f DB_File/DB_File.xs
++ known_extensions=' B ByteLoader Cwd DB_File'
++ for xxx in '*'
++ case "$xxx" in
++ test -f Data/Data.xs
++ test -f Data/Makefile.PL
++ test -d Data -a 0 -lt 10
++ set Data/
++ cd Data
++ eval for xxx in '*;' do case '"$xxx"' in 'DynaLoader|dynaload)' ';;' 'Win32CORE)' 'known_extensions="$known_extensions' '$1$xxx";;' '*)' if '$test' -f '$xxx/$xxx.xs;' then 'known_extensions="$known_extensions' '$1$xxx";' elif '$test' -f '$xxx/Makefile.PL;' then 'nonxs_extensions="$nonxs_extensions' '$1$xxx";' else if '$test' -d '$xxx' -a '$#' -lt '10;' then set '$1$xxx/' '$*;' cd '"$xxx";' eval '$find_extensions;' cd '..;' 'shift;' 'fi;' fi ';;' 'esac;' done
+++ for xxx in '*'
+++ case "$xxx" in
+++ test -f Dumper/Dumper.xs
+++ known_extensions=' B ByteLoader Cwd DB_File Data/Dumper'
++ cd ..
++ shift
++ for xxx in '*'
++ case "$xxx" in
++ test -f Devel/Devel.xs
++ test -f Devel/Makefile.PL
++ test -d Devel -a 0 -lt 10
++ set Devel/
++ cd Devel
++ eval for xxx in '*;' do case '"$xxx"' in 'DynaLoader|dynaload)' ';;' 'Win32CORE)' 'known_extensions="$known_extensions' '$1$xxx";;' '*)' if '$test' -f '$xxx/$xxx.xs;' then 'known_extensions="$known_extensions' '$1$xxx";' elif '$test' -f '$xxx/Makefile.PL;' then 'nonxs_extensions="$nonxs_extensions' '$1$xxx";' else if '$test' -d '$xxx' -a '$#' -lt '10;' then set '$1$xxx/' '$*;' cd '"$xxx";' eval '$find_extensions;' cd '..;' 'shift;' 'fi;' fi ';;' 'esac;' done
+++ for xxx in '*'
+++ case "$xxx" in
+++ test -f DProf/DProf.xs
+++ known_extensions=' B ByteLoader Cwd DB_File Data/Dumper Devel/DProf'
+++ for xxx in '*'
+++ case "$xxx" in
+++ test -f PPPort/PPPort.xs
+++ known_extensions=' B ByteLoader Cwd DB_File Data/Dumper Devel/DProf Devel/PPPort'
+++ for xxx in '*'
+++ case "$xxx" in
+++ test -f Peek/Peek.xs
+++ known_extensions=' B ByteLoader Cwd DB_File Data/Dumper Devel/DProf Devel/PPPort Devel/Peek'
++ cd ..
++ shift
++ for xxx in '*'
++ case "$xxx" in
++ test -f Digest/Digest.xs
++ test -f Digest/Makefile.PL
++ test -d Digest -a 0 -lt 10
++ set Digest/
++ cd Digest
++ eval for xxx in '*;' do case '"$xxx"' in 'DynaLoader|dynaload)' ';;' 'Win32CORE)' 'known_extensions="$known_extensions' '$1$xxx";;' '*)' if '$test' -f '$xxx/$xxx.xs;' then 'known_extensions="$known_extensions' '$1$xxx";' elif '$test' -f '$xxx/Makefile.PL;' then 'nonxs_extensions="$nonxs_extensions' '$1$xxx";' else if '$test' -d '$xxx' -a '$#' -lt '10;' then set '$1$xxx/' '$*;' cd '"$xxx";' eval '$find_extensions;' cd '..;' 'shift;' 'fi;' fi ';;' 'esac;' done
+++ for xxx in '*'
+++ case "$xxx" in
+++ test -f MD5/MD5.xs
+++ known_extensions=' B ByteLoader Cwd DB_File Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5'
++ cd ..
++ shift
++ for xxx in '*'
++ case "$xxx" in
++ for xxx in '*'
++ case "$xxx" in
++ test -f Encode/Encode.xs
++ known_extensions=' B ByteLoader Cwd DB_File Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode'
++ for xxx in '*'
++ case "$xxx" in
++ test -f Errno/Errno.xs
++ test -f Errno/Makefile.PL
++ nonxs_extensions=' Errno'
++ for xxx in '*'
++ case "$xxx" in
++ test -f Fcntl/Fcntl.xs
++ known_extensions=' B ByteLoader Cwd DB_File Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl'
++ for xxx in '*'
++ case "$xxx" in
++ test -f File/File.xs
++ test -f File/Makefile.PL
++ test -d File -a 0 -lt 10
++ set File/
++ cd File
++ eval for xxx in '*;' do case '"$xxx"' in 'DynaLoader|dynaload)' ';;' 'Win32CORE)' 'known_extensions="$known_extensions' '$1$xxx";;' '*)' if '$test' -f '$xxx/$xxx.xs;' then 'known_extensions="$known_extensions' '$1$xxx";' elif '$test' -f '$xxx/Makefile.PL;' then 'nonxs_extensions="$nonxs_extensions' '$1$xxx";' else if '$test' -d '$xxx' -a '$#' -lt '10;' then set '$1$xxx/' '$*;' cd '"$xxx";' eval '$find_extensions;' cd '..;' 'shift;' 'fi;' fi ';;' 'esac;' done
+++ for xxx in '*'
+++ case "$xxx" in
+++ test -f Glob/Glob.xs
+++ known_extensions=' B ByteLoader Cwd DB_File Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob'
++ cd ..
++ shift
++ for xxx in '*'
++ case "$xxx" in
++ test -f Filter/Filter.xs
++ test -f Filter/Makefile.PL
++ test -d Filter -a 0 -lt 10
++ set Filter/
++ cd Filter
++ eval for xxx in '*;' do case '"$xxx"' in 'DynaLoader|dynaload)' ';;' 'Win32CORE)' 'known_extensions="$known_extensions' '$1$xxx";;' '*)' if '$test' -f '$xxx/$xxx.xs;' then 'known_extensions="$known_extensions' '$1$xxx";' elif '$test' -f '$xxx/Makefile.PL;' then 'nonxs_extensions="$nonxs_extensions' '$1$xxx";' else if '$test' -d '$xxx' -a '$#' -lt '10;' then set '$1$xxx/' '$*;' cd '"$xxx";' eval '$find_extensions;' cd '..;' 'shift;' 'fi;' fi ';;' 'esac;' done
+++ for xxx in '*'
+++ case "$xxx" in
+++ test -f Util/Util.xs
+++ test -f Util/Makefile.PL
+++ test -d Util -a 1 -lt 10
+++ set Filter/Util/ Filter/
+++ cd Util
+++ eval for xxx in '*;' do case '"$xxx"' in 'DynaLoader|dynaload)' ';;' 'Win32CORE)' 'known_extensions="$known_extensions' '$1$xxx";;' '*)' if '$test' -f '$xxx/$xxx.xs;' then 'known_extensions="$known_extensions' '$1$xxx";' elif '$test' -f '$xxx/Makefile.PL;' then 'nonxs_extensions="$nonxs_extensions' '$1$xxx";' else if '$test' -d '$xxx' -a '$#' -lt '10;' then set '$1$xxx/' '$*;' cd '"$xxx";' eval '$find_extensions;' cd '..;' 'shift;' 'fi;' fi ';;' 'esac;' done
++++ for xxx in '*'
++++ case "$xxx" in
++++ test -f Call/Call.xs
++++ known_extensions=' B ByteLoader Cwd DB_File Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call'
+++ cd ..
+++ shift
+++ for xxx in '*'
+++ case "$xxx" in
+++ test -f t/t.xs
+++ test -f t/Makefile.PL
+++ test -d t -a 1 -lt 10
+++ set Filter/t/ Filter/
+++ cd t
+++ eval for xxx in '*;' do case '"$xxx"' in 'DynaLoader|dynaload)' ';;' 'Win32CORE)' 'known_extensions="$known_extensions' '$1$xxx";;' '*)' if '$test' -f '$xxx/$xxx.xs;' then 'known_extensions="$known_extensions' '$1$xxx";' elif '$test' -f '$xxx/Makefile.PL;' then 'nonxs_extensions="$nonxs_extensions' '$1$xxx";' else if '$test' -d '$xxx' -a '$#' -lt '10;' then set '$1$xxx/' '$*;' cd '"$xxx";' eval '$find_extensions;' cd '..;' 'shift;' 'fi;' fi ';;' 'esac;' done
++++ for xxx in '*'
++++ case "$xxx" in
++++ test -f call.t/call.t.xs
++++ test -f call.t/Makefile.PL
++++ test -d call.t -a 2 -lt 10
+++ cd ..
+++ shift
++ cd ..
++ shift
++ for xxx in '*'
++ case "$xxx" in
++ test -f GDBM_File/GDBM_File.xs
++ known_extensions=' B ByteLoader Cwd DB_File Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File'
++ for xxx in '*'
++ case "$xxx" in
++ test -f I18N/I18N.xs
++ test -f I18N/Makefile.PL
++ test -d I18N -a 0 -lt 10
++ set I18N/
++ cd I18N
++ eval for xxx in '*;' do case '"$xxx"' in 'DynaLoader|dynaload)' ';;' 'Win32CORE)' 'known_extensions="$known_extensions' '$1$xxx";;' '*)' if '$test' -f '$xxx/$xxx.xs;' then 'known_extensions="$known_extensions' '$1$xxx";' elif '$test' -f '$xxx/Makefile.PL;' then 'nonxs_extensions="$nonxs_extensions' '$1$xxx";' else if '$test' -d '$xxx' -a '$#' -lt '10;' then set '$1$xxx/' '$*;' cd '"$xxx";' eval '$find_extensions;' cd '..;' 'shift;' 'fi;' fi ';;' 'esac;' done
+++ for xxx in '*'
+++ case "$xxx" in
+++ test -f Langinfo/Langinfo.xs
+++ known_extensions=' B ByteLoader Cwd DB_File Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File I18N/Langinfo'
++ cd ..
++ shift
++ for xxx in '*'
++ case "$xxx" in
++ test -f IO/IO.xs
++ known_extensions=' B ByteLoader Cwd DB_File Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File I18N/Langinfo IO'
++ for xxx in '*'
++ case "$xxx" in
++ test -f IPC/IPC.xs
++ test -f IPC/Makefile.PL
++ test -d IPC -a 0 -lt 10
++ set IPC/
++ cd IPC
++ eval for xxx in '*;' do case '"$xxx"' in 'DynaLoader|dynaload)' ';;' 'Win32CORE)' 'known_extensions="$known_extensions' '$1$xxx";;' '*)' if '$test' -f '$xxx/$xxx.xs;' then 'known_extensions="$known_extensions' '$1$xxx";' elif '$test' -f '$xxx/Makefile.PL;' then 'nonxs_extensions="$nonxs_extensions' '$1$xxx";' else if '$test' -d '$xxx' -a '$#' -lt '10;' then set '$1$xxx/' '$*;' cd '"$xxx";' eval '$find_extensions;' cd '..;' 'shift;' 'fi;' fi ';;' 'esac;' done
+++ for xxx in '*'
+++ case "$xxx" in
+++ test -f SysV/SysV.xs
+++ known_extensions=' B ByteLoader Cwd DB_File Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File I18N/Langinfo IO IPC/SysV'
++ cd ..
++ shift
++ for xxx in '*'
++ case "$xxx" in
++ test -f List/List.xs
++ test -f List/Makefile.PL
++ test -d List -a 0 -lt 10
++ set List/
++ cd List
++ eval for xxx in '*;' do case '"$xxx"' in 'DynaLoader|dynaload)' ';;' 'Win32CORE)' 'known_extensions="$known_extensions' '$1$xxx";;' '*)' if '$test' -f '$xxx/$xxx.xs;' then 'known_extensions="$known_extensions' '$1$xxx";' elif '$test' -f '$xxx/Makefile.PL;' then 'nonxs_extensions="$nonxs_extensions' '$1$xxx";' else if '$test' -d '$xxx' -a '$#' -lt '10;' then set '$1$xxx/' '$*;' cd '"$xxx";' eval '$find_extensions;' cd '..;' 'shift;' 'fi;' fi ';;' 'esac;' done
+++ for xxx in '*'
+++ case "$xxx" in
+++ test -f Util/Util.xs
+++ known_extensions=' B ByteLoader Cwd DB_File Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File I18N/Langinfo IO IPC/SysV List/Util'
++ cd ..
++ shift
++ for xxx in '*'
++ case "$xxx" in
++ test -f MIME/MIME.xs
++ test -f MIME/Makefile.PL
++ test -d MIME -a 0 -lt 10
++ set MIME/
++ cd MIME
++ eval for xxx in '*;' do case '"$xxx"' in 'DynaLoader|dynaload)' ';;' 'Win32CORE)' 'known_extensions="$known_extensions' '$1$xxx";;' '*)' if '$test' -f '$xxx/$xxx.xs;' then 'known_extensions="$known_extensions' '$1$xxx";' elif '$test' -f '$xxx/Makefile.PL;' then 'nonxs_extensions="$nonxs_extensions' '$1$xxx";' else if '$test' -d '$xxx' -a '$#' -lt '10;' then set '$1$xxx/' '$*;' cd '"$xxx";' eval '$find_extensions;' cd '..;' 'shift;' 'fi;' fi ';;' 'esac;' done
+++ for xxx in '*'
+++ case "$xxx" in
+++ test -f Base64/Base64.xs
+++ known_extensions=' B ByteLoader Cwd DB_File Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File I18N/Langinfo IO IPC/SysV List/Util MIME/Base64'
++ cd ..
++ shift
++ for xxx in '*'
++ case "$xxx" in
++ test -f NDBM_File/NDBM_File.xs
++ known_extensions=' B ByteLoader Cwd DB_File Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File I18N/Langinfo IO IPC/SysV List/Util MIME/Base64 NDBM_File'
++ for xxx in '*'
++ case "$xxx" in
++ test -f ODBM_File/ODBM_File.xs
++ known_extensions=' B ByteLoader Cwd DB_File Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File I18N/Langinfo IO IPC/SysV List/Util MIME/Base64 NDBM_File ODBM_File'
++ for xxx in '*'
++ case "$xxx" in
++ test -f Opcode/Opcode.xs
++ known_extensions=' B ByteLoader Cwd DB_File Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File I18N/Langinfo IO IPC/SysV List/Util MIME/Base64 NDBM_File ODBM_File Opcode'
++ for xxx in '*'
++ case "$xxx" in
++ test -f POSIX/POSIX.xs
++ known_extensions=' B ByteLoader Cwd DB_File Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File I18N/Langinfo IO IPC/SysV List/Util MIME/Base64 NDBM_File ODBM_File Opcode POSIX'
++ for xxx in '*'
++ case "$xxx" in
++ test -f PerlIO/PerlIO.xs
++ test -f PerlIO/Makefile.PL
++ test -d PerlIO -a 0 -lt 10
++ set PerlIO/
++ cd PerlIO
++ eval for xxx in '*;' do case '"$xxx"' in 'DynaLoader|dynaload)' ';;' 'Win32CORE)' 'known_extensions="$known_extensions' '$1$xxx";;' '*)' if '$test' -f '$xxx/$xxx.xs;' then 'known_extensions="$known_extensions' '$1$xxx";' elif '$test' -f '$xxx/Makefile.PL;' then 'nonxs_extensions="$nonxs_extensions' '$1$xxx";' else if '$test' -d '$xxx' -a '$#' -lt '10;' then set '$1$xxx/' '$*;' cd '"$xxx";' eval '$find_extensions;' cd '..;' 'shift;' 'fi;' fi ';;' 'esac;' done
+++ for xxx in '*'
+++ case "$xxx" in
+++ test -f encoding/encoding.xs
+++ known_extensions=' B ByteLoader Cwd DB_File Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File I18N/Langinfo IO IPC/SysV List/Util MIME/Base64 NDBM_File ODBM_File Opcode POSIX PerlIO/encoding'
+++ for xxx in '*'
+++ case "$xxx" in
+++ test -f scalar/scalar.xs
+++ known_extensions=' B ByteLoader Cwd DB_File Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File I18N/Langinfo IO IPC/SysV List/Util MIME/Base64 NDBM_File ODBM_File Opcode POSIX PerlIO/encoding PerlIO/scalar'
+++ for xxx in '*'
+++ case "$xxx" in
+++ test -f t/t.xs
+++ test -f t/Makefile.PL
+++ test -d t -a 1 -lt 10
+++ set PerlIO/t/ PerlIO/
+++ cd t
+++ eval for xxx in '*;' do case '"$xxx"' in 'DynaLoader|dynaload)' ';;' 'Win32CORE)' 'known_extensions="$known_extensions' '$1$xxx";;' '*)' if '$test' -f '$xxx/$xxx.xs;' then 'known_extensions="$known_extensions' '$1$xxx";' elif '$test' -f '$xxx/Makefile.PL;' then 'nonxs_extensions="$nonxs_extensions' '$1$xxx";' else if '$test' -d '$xxx' -a '$#' -lt '10;' then set '$1$xxx/' '$*;' cd '"$xxx";' eval '$find_extensions;' cd '..;' 'shift;' 'fi;' fi ';;' 'esac;' done
++++ for xxx in '*'
++++ case "$xxx" in
++++ test -f PerlIO.t/PerlIO.t.xs
++++ test -f PerlIO.t/Makefile.PL
++++ test -d PerlIO.t -a 2 -lt 10
++++ for xxx in '*'
++++ case "$xxx" in
++++ test -f encoding.t/encoding.t.xs
++++ test -f encoding.t/Makefile.PL
++++ test -d encoding.t -a 2 -lt 10
++++ for xxx in '*'
++++ case "$xxx" in
++++ test -f fail.t/fail.t.xs
++++ test -f fail.t/Makefile.PL
++++ test -d fail.t -a 2 -lt 10
++++ for xxx in '*'
++++ case "$xxx" in
++++ test -f fallback.t/fallback.t.xs
++++ test -f fallback.t/Makefile.PL
++++ test -d fallback.t -a 2 -lt 10
++++ for xxx in '*'
++++ case "$xxx" in
++++ test -f open.t/open.t.xs
++++ test -f open.t/Makefile.PL
++++ test -d open.t -a 2 -lt 10
++++ for xxx in '*'
++++ case "$xxx" in
++++ test -f scalar.t/scalar.t.xs
++++ test -f scalar.t/Makefile.PL
++++ test -d scalar.t -a 2 -lt 10
++++ for xxx in '*'
++++ case "$xxx" in
++++ test -f via.t/via.t.xs
++++ test -f via.t/Makefile.PL
++++ test -d via.t -a 2 -lt 10
+++ cd ..
+++ shift
+++ for xxx in '*'
+++ case "$xxx" in
+++ test -f via/via.xs
+++ known_extensions=' B ByteLoader Cwd DB_File Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File I18N/Langinfo IO IPC/SysV List/Util MIME/Base64 NDBM_File ODBM_File Opcode POSIX PerlIO/encoding PerlIO/scalar PerlIO/via'
++ cd ..
++ shift
++ for xxx in '*'
++ case "$xxx" in
++ test -f SDBM_File/SDBM_File.xs
++ known_extensions=' B ByteLoader Cwd DB_File Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File I18N/Langinfo IO IPC/SysV List/Util MIME/Base64 NDBM_File ODBM_File Opcode POSIX PerlIO/encoding PerlIO/scalar PerlIO/via SDBM_File'
++ for xxx in '*'
++ case "$xxx" in
++ test -f Safe/Safe.xs
++ test -f Safe/Makefile.PL
++ test -d Safe -a 0 -lt 10
++ set Safe/
++ cd Safe
++ eval for xxx in '*;' do case '"$xxx"' in 'DynaLoader|dynaload)' ';;' 'Win32CORE)' 'known_extensions="$known_extensions' '$1$xxx";;' '*)' if '$test' -f '$xxx/$xxx.xs;' then 'known_extensions="$known_extensions' '$1$xxx";' elif '$test' -f '$xxx/Makefile.PL;' then 'nonxs_extensions="$nonxs_extensions' '$1$xxx";' else if '$test' -d '$xxx' -a '$#' -lt '10;' then set '$1$xxx/' '$*;' cd '"$xxx";' eval '$find_extensions;' cd '..;' 'shift;' 'fi;' fi ';;' 'esac;' done
+++ for xxx in '*'
+++ case "$xxx" in
+++ test -f t/t.xs
+++ test -f t/Makefile.PL
+++ test -d t -a 1 -lt 10
+++ set Safe/t/ Safe/
+++ cd t
+++ eval for xxx in '*;' do case '"$xxx"' in 'DynaLoader|dynaload)' ';;' 'Win32CORE)' 'known_extensions="$known_extensions' '$1$xxx";;' '*)' if '$test' -f '$xxx/$xxx.xs;' then 'known_extensions="$known_extensions' '$1$xxx";' elif '$test' -f '$xxx/Makefile.PL;' then 'nonxs_extensions="$nonxs_extensions' '$1$xxx";' else if '$test' -d '$xxx' -a '$#' -lt '10;' then set '$1$xxx/' '$*;' cd '"$xxx";' eval '$find_extensions;' cd '..;' 'shift;' 'fi;' fi ';;' 'esac;' done
++++ for xxx in '*'
++++ case "$xxx" in
++++ test -f safe1.t/safe1.t.xs
++++ test -f safe1.t/Makefile.PL
++++ test -d safe1.t -a 2 -lt 10
++++ for xxx in '*'
++++ case "$xxx" in
++++ test -f safe2.t/safe2.t.xs
++++ test -f safe2.t/Makefile.PL
++++ test -d safe2.t -a 2 -lt 10
++++ for xxx in '*'
++++ case "$xxx" in
++++ test -f safe3.t/safe3.t.xs
++++ test -f safe3.t/Makefile.PL
++++ test -d safe3.t -a 2 -lt 10
+++ cd ..
+++ shift
++ cd ..
++ shift
++ for xxx in '*'
++ case "$xxx" in
++ test -f Socket/Socket.xs
++ known_extensions=' B ByteLoader Cwd DB_File Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File I18N/Langinfo IO IPC/SysV List/Util MIME/Base64 NDBM_File ODBM_File Opcode POSIX PerlIO/encoding PerlIO/scalar PerlIO/via SDBM_File Socket'
++ for xxx in '*'
++ case "$xxx" in
++ test -f Storable/Storable.xs
++ known_extensions=' B ByteLoader Cwd DB_File Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File I18N/Langinfo IO IPC/SysV List/Util MIME/Base64 NDBM_File ODBM_File Opcode POSIX PerlIO/encoding PerlIO/scalar PerlIO/via SDBM_File Socket Storable'
++ for xxx in '*'
++ case "$xxx" in
++ test -f Sys/Sys.xs
++ test -f Sys/Makefile.PL
++ test -d Sys -a 0 -lt 10
++ set Sys/
++ cd Sys
++ eval for xxx in '*;' do case '"$xxx"' in 'DynaLoader|dynaload)' ';;' 'Win32CORE)' 'known_extensions="$known_extensions' '$1$xxx";;' '*)' if '$test' -f '$xxx/$xxx.xs;' then 'known_extensions="$known_extensions' '$1$xxx";' elif '$test' -f '$xxx/Makefile.PL;' then 'nonxs_extensions="$nonxs_extensions' '$1$xxx";' else if '$test' -d '$xxx' -a '$#' -lt '10;' then set '$1$xxx/' '$*;' cd '"$xxx";' eval '$find_extensions;' cd '..;' 'shift;' 'fi;' fi ';;' 'esac;' done
+++ for xxx in '*'
+++ case "$xxx" in
+++ test -f Hostname/Hostname.xs
+++ known_extensions=' B ByteLoader Cwd DB_File Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File I18N/Langinfo IO IPC/SysV List/Util MIME/Base64 NDBM_File ODBM_File Opcode POSIX PerlIO/encoding PerlIO/scalar PerlIO/via SDBM_File Socket Storable Sys/Hostname'
+++ for xxx in '*'
+++ case "$xxx" in
+++ test -f Syslog/Syslog.xs
+++ known_extensions=' B ByteLoader Cwd DB_File Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File I18N/Langinfo IO IPC/SysV List/Util MIME/Base64 NDBM_File ODBM_File Opcode POSIX PerlIO/encoding PerlIO/scalar PerlIO/via SDBM_File Socket Storable Sys/Hostname Sys/Syslog'
++ cd ..
++ shift
++ for xxx in '*'
++ case "$xxx" in
++ test -f Thread/Thread.xs
++ known_extensions=' B ByteLoader Cwd DB_File Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File I18N/Langinfo IO IPC/SysV List/Util MIME/Base64 NDBM_File ODBM_File Opcode POSIX PerlIO/encoding PerlIO/scalar PerlIO/via SDBM_File Socket Storable Sys/Hostname Sys/Syslog Thread'
++ for xxx in '*'
++ case "$xxx" in
++ test -f Time/Time.xs
++ test -f Time/Makefile.PL
++ test -d Time -a 0 -lt 10
++ set Time/
++ cd Time
++ eval for xxx in '*;' do case '"$xxx"' in 'DynaLoader|dynaload)' ';;' 'Win32CORE)' 'known_extensions="$known_extensions' '$1$xxx";;' '*)' if '$test' -f '$xxx/$xxx.xs;' then 'known_extensions="$known_extensions' '$1$xxx";' elif '$test' -f '$xxx/Makefile.PL;' then 'nonxs_extensions="$nonxs_extensions' '$1$xxx";' else if '$test' -d '$xxx' -a '$#' -lt '10;' then set '$1$xxx/' '$*;' cd '"$xxx";' eval '$find_extensions;' cd '..;' 'shift;' 'fi;' fi ';;' 'esac;' done
+++ for xxx in '*'
+++ case "$xxx" in
+++ test -f HiRes/HiRes.xs
+++ known_extensions=' B ByteLoader Cwd DB_File Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File I18N/Langinfo IO IPC/SysV List/Util MIME/Base64 NDBM_File ODBM_File Opcode POSIX PerlIO/encoding PerlIO/scalar PerlIO/via SDBM_File Socket Storable Sys/Hostname Sys/Syslog Thread Time/HiRes'
++ cd ..
++ shift
++ for xxx in '*'
++ case "$xxx" in
++ test -f Unicode/Unicode.xs
++ test -f Unicode/Makefile.PL
++ test -d Unicode -a 0 -lt 10
++ set Unicode/
++ cd Unicode
++ eval for xxx in '*;' do case '"$xxx"' in 'DynaLoader|dynaload)' ';;' 'Win32CORE)' 'known_extensions="$known_extensions' '$1$xxx";;' '*)' if '$test' -f '$xxx/$xxx.xs;' then 'known_extensions="$known_extensions' '$1$xxx";' elif '$test' -f '$xxx/Makefile.PL;' then 'nonxs_extensions="$nonxs_extensions' '$1$xxx";' else if '$test' -d '$xxx' -a '$#' -lt '10;' then set '$1$xxx/' '$*;' cd '"$xxx";' eval '$find_extensions;' cd '..;' 'shift;' 'fi;' fi ';;' 'esac;' done
+++ for xxx in '*'
+++ case "$xxx" in
+++ test -f Normalize/Normalize.xs
+++ known_extensions=' B ByteLoader Cwd DB_File Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File I18N/Langinfo IO IPC/SysV List/Util MIME/Base64 NDBM_File ODBM_File Opcode POSIX PerlIO/encoding PerlIO/scalar PerlIO/via SDBM_File Socket Storable Sys/Hostname Sys/Syslog Thread Time/HiRes Unicode/Normalize'
++ cd ..
++ shift
++ for xxx in '*'
++ case "$xxx" in
++ known_extensions=' B ByteLoader Cwd DB_File Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File I18N/Langinfo IO IPC/SysV List/Util MIME/Base64 NDBM_File ODBM_File Opcode POSIX PerlIO/encoding PerlIO/scalar PerlIO/via SDBM_File Socket Storable Sys/Hostname Sys/Syslog Thread Time/HiRes Unicode/Normalize Win32CORE'
++ for xxx in '*'
++ case "$xxx" in
++ test -f XS/XS.xs
++ test -f XS/Makefile.PL
++ test -d XS -a 0 -lt 10
++ set XS/
++ cd XS
++ eval for xxx in '*;' do case '"$xxx"' in 'DynaLoader|dynaload)' ';;' 'Win32CORE)' 'known_extensions="$known_extensions' '$1$xxx";;' '*)' if '$test' -f '$xxx/$xxx.xs;' then 'known_extensions="$known_extensions' '$1$xxx";' elif '$test' -f '$xxx/Makefile.PL;' then 'nonxs_extensions="$nonxs_extensions' '$1$xxx";' else if '$test' -d '$xxx' -a '$#' -lt '10;' then set '$1$xxx/' '$*;' cd '"$xxx";' eval '$find_extensions;' cd '..;' 'shift;' 'fi;' fi ';;' 'esac;' done
+++ for xxx in '*'
+++ case "$xxx" in
+++ test -f APItest/APItest.xs
+++ known_extensions=' B ByteLoader Cwd DB_File Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File I18N/Langinfo IO IPC/SysV List/Util MIME/Base64 NDBM_File ODBM_File Opcode POSIX PerlIO/encoding PerlIO/scalar PerlIO/via SDBM_File Socket Storable Sys/Hostname Sys/Syslog Thread Time/HiRes Unicode/Normalize Win32CORE XS/APItest'
+++ for xxx in '*'
+++ case "$xxx" in
+++ test -f Typemap/Typemap.xs
+++ known_extensions=' B ByteLoader Cwd DB_File Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File I18N/Langinfo IO IPC/SysV List/Util MIME/Base64 NDBM_File ODBM_File Opcode POSIX PerlIO/encoding PerlIO/scalar PerlIO/via SDBM_File Socket Storable Sys/Hostname Sys/Syslog Thread Time/HiRes Unicode/Normalize Win32CORE XS/APItest XS/Typemap'
++ cd ..
++ shift
++ for xxx in '*'
++ case "$xxx" in
++ test -f attrs/attrs.xs
++ known_extensions=' B ByteLoader Cwd DB_File Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File I18N/Langinfo IO IPC/SysV List/Util MIME/Base64 NDBM_File ODBM_File Opcode POSIX PerlIO/encoding PerlIO/scalar PerlIO/via SDBM_File Socket Storable Sys/Hostname Sys/Syslog Thread Time/HiRes Unicode/Normalize Win32CORE XS/APItest XS/Typemap attrs'
++ for xxx in '*'
++ case "$xxx" in
++ test -f re/re.xs
++ known_extensions=' B ByteLoader Cwd DB_File Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File I18N/Langinfo IO IPC/SysV List/Util MIME/Base64 NDBM_File ODBM_File Opcode POSIX PerlIO/encoding PerlIO/scalar PerlIO/via SDBM_File Socket Storable Sys/Hostname Sys/Syslog Thread Time/HiRes Unicode/Normalize Win32CORE XS/APItest XS/Typemap attrs re'
++ for xxx in '*'
++ case "$xxx" in
++ test -f threads/threads.xs
++ known_extensions=' B ByteLoader Cwd DB_File Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File I18N/Langinfo IO IPC/SysV List/Util MIME/Base64 NDBM_File ODBM_File Opcode POSIX PerlIO/encoding PerlIO/scalar PerlIO/via SDBM_File Socket Storable Sys/Hostname Sys/Syslog Thread Time/HiRes Unicode/Normalize Win32CORE XS/APItest XS/Typemap attrs re threads'
++ for xxx in '*'
++ case "$xxx" in
++ test -f util/util.xs
++ test -f util/Makefile.PL
++ test -d util -a 0 -lt 10
++ set util/
++ cd util
++ eval for xxx in '*;' do case '"$xxx"' in 'DynaLoader|dynaload)' ';;' 'Win32CORE)' 'known_extensions="$known_extensions' '$1$xxx";;' '*)' if '$test' -f '$xxx/$xxx.xs;' then 'known_extensions="$known_extensions' '$1$xxx";' elif '$test' -f '$xxx/Makefile.PL;' then 'nonxs_extensions="$nonxs_extensions' '$1$xxx";' else if '$test' -d '$xxx' -a '$#' -lt '10;' then set '$1$xxx/' '$*;' cd '"$xxx";' eval '$find_extensions;' cd '..;' 'shift;' 'fi;' fi ';;' 'esac;' done
+++ for xxx in '*'
+++ case "$xxx" in
+++ test -f make_ext/make_ext.xs
+++ test -f make_ext/Makefile.PL
+++ test -d make_ext -a 1 -lt 10
++ cd ..
++ shift
+ known_extensions=' B ByteLoader Cwd DB_File Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File I18N/Langinfo IO IPC/SysV List/Util MIME/Base64 NDBM_File ODBM_File Opcode POSIX PerlIO/encoding PerlIO/scalar PerlIO/via SDBM_File Socket Storable Sys/Hostname Sys/Syslog Thread Time/HiRes Unicode/Normalize Win32CORE XS/APItest XS/Typemap attrs re threads threads/shared'
+ set X Errno
+ shift
+ nonxs_extensions=Errno
+ set X B ByteLoader Cwd DB_File Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File I18N/Langinfo IO IPC/SysV List/Util MIME/Base64 NDBM_File ODBM_File Opcode POSIX PerlIO/encoding PerlIO/scalar PerlIO/via SDBM_File Socket Storable Sys/Hostname Sys/Syslog Thread Time/HiRes Unicode/Normalize Win32CORE XS/APItest XS/Typemap attrs re threads threads/shared
+ shift
+ known_extensions='B ByteLoader Cwd DB_File Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File I18N/Langinfo IO IPC/SysV List/Util MIME/Base64 NDBM_File ODBM_File Opcode POSIX PerlIO/encoding PerlIO/scalar PerlIO/via SDBM_File Socket Storable Sys/Hostname Sys/Syslog Thread Time/HiRes Unicode/Normalize Win32CORE XS/APItest XS/Typemap attrs re threads threads/shared'
+ cd /usr/src/perl/perl-5.8.8/UU
+ : Now see which are supported on this system.
+ avail_ext=
+ for xxx in '$known_extensions'
+ case "$xxx" in
+ avail_ext=' B'
+ for xxx in '$known_extensions'
+ case "$xxx" in
+ avail_ext=' B ByteLoader'
+ for xxx in '$known_extensions'
+ case "$xxx" in
+ avail_ext=' B ByteLoader Cwd'
+ for xxx in '$known_extensions'
+ case "$xxx" in
+ case "$i_db" in
+ for xxx in '$known_extensions'
+ case "$xxx" in
+ avail_ext=' B ByteLoader Cwd Data/Dumper'
+ for xxx in '$known_extensions'
+ case "$xxx" in
+ avail_ext=' B ByteLoader Cwd Data/Dumper Devel/DProf'
+ for xxx in '$known_extensions'
+ case "$xxx" in
+ avail_ext=' B ByteLoader Cwd Data/Dumper Devel/DProf Devel/PPPort'
+ for xxx in '$known_extensions'
+ case "$xxx" in
+ avail_ext=' B ByteLoader Cwd Data/Dumper Devel/DProf Devel/PPPort Devel/Peek'
+ for xxx in '$known_extensions'
+ case "$xxx" in
+ avail_ext=' B ByteLoader Cwd Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5'
+ for xxx in '$known_extensions'
+ case "$xxx" in
+ avail_ext=' B ByteLoader Cwd Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode'
+ for xxx in '$known_extensions'
+ case "$xxx" in
+ avail_ext=' B ByteLoader Cwd Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl'
+ for xxx in '$known_extensions'
+ case "$xxx" in
+ avail_ext=' B ByteLoader Cwd Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob'
+ for xxx in '$known_extensions'
+ case "$xxx" in
+ avail_ext=' B ByteLoader Cwd Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call'
+ for xxx in '$known_extensions'
+ case "$xxx" in
+ case "$i_gdbm" in
+ avail_ext=' B ByteLoader Cwd Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File'
+ for xxx in '$known_extensions'
+ case "$xxx" in
+ case "$i_langinfo$d_nl_langinfo" in
+ for xxx in '$known_extensions'
+ case "$xxx" in
+ avail_ext=' B ByteLoader Cwd Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File IO'
+ for xxx in '$known_extensions'
+ case "$xxx" in
+ : XXX Do we need a useipcsysv variable here
+ case "${d_msg}${d_sem}${d_shm}" in
+ for xxx in '$known_extensions'
+ case "$xxx" in
+ avail_ext=' B ByteLoader Cwd Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File IO List/Util'
+ for xxx in '$known_extensions'
+ case "$xxx" in
+ avail_ext=' B ByteLoader Cwd Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File IO List/Util MIME/Base64'
+ for xxx in '$known_extensions'
+ case "$xxx" in
+ case "$i_ndbm" in
+ case "$osname-$use64bitint" in
+ avail_ext=' B ByteLoader Cwd Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File IO List/Util MIME/Base64 NDBM_File'
+ for xxx in '$known_extensions'
+ case "$xxx" in
+ case "${i_dbm}${i_rpcsvcdbm}" in
+ case "$osname-$use64bitint" in
+ avail_ext=' B ByteLoader Cwd Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File IO List/Util MIME/Base64 NDBM_File ODBM_File'
+ for xxx in '$known_extensions'
+ case "$xxx" in
+ case "$useopcode" in
+ avail_ext=' B ByteLoader Cwd Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File IO List/Util MIME/Base64 NDBM_File ODBM_File Opcode'
+ for xxx in '$known_extensions'
+ case "$xxx" in
+ case "$useposix" in
+ avail_ext=' B ByteLoader Cwd Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File IO List/Util MIME/Base64 NDBM_File ODBM_File Opcode POSIX'
+ for xxx in '$known_extensions'
+ case "$xxx" in
+ avail_ext=' B ByteLoader Cwd Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File IO List/Util MIME/Base64 NDBM_File ODBM_File Opcode POSIX PerlIO/encoding'
+ for xxx in '$known_extensions'
+ case "$xxx" in
+ avail_ext=' B ByteLoader Cwd Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File IO List/Util MIME/Base64 NDBM_File ODBM_File Opcode POSIX PerlIO/encoding PerlIO/scalar'
+ for xxx in '$known_extensions'
+ case "$xxx" in
+ avail_ext=' B ByteLoader Cwd Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File IO List/Util MIME/Base64 NDBM_File ODBM_File Opcode POSIX PerlIO/encoding PerlIO/scalar PerlIO/via'
+ for xxx in '$known_extensions'
+ case "$xxx" in
+ avail_ext=' B ByteLoader Cwd Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File IO List/Util MIME/Base64 NDBM_File ODBM_File Opcode POSIX PerlIO/encoding PerlIO/scalar PerlIO/via SDBM_File'
+ for xxx in '$known_extensions'
+ case "$xxx" in
+ case "$d_socket" in
+ case "$osname" in
+ avail_ext=' B ByteLoader Cwd Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File IO List/Util MIME/Base64 NDBM_File ODBM_File Opcode POSIX PerlIO/encoding PerlIO/scalar PerlIO/via SDBM_File Socket'
+ for xxx in '$known_extensions'
+ case "$xxx" in
+ avail_ext=' B ByteLoader Cwd Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File IO List/Util MIME/Base64 NDBM_File ODBM_File Opcode POSIX PerlIO/encoding PerlIO/scalar PerlIO/via SDBM_File Socket Storable'
+ for xxx in '$known_extensions'
+ case "$xxx" in
+ avail_ext=' B ByteLoader Cwd Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File IO List/Util MIME/Base64 NDBM_File ODBM_File Opcode POSIX PerlIO/encoding PerlIO/scalar PerlIO/via SDBM_File Socket Storable Sys/Hostname'
+ for xxx in '$known_extensions'
+ case "$xxx" in
+ : XXX syslog requires socket
+ case "$d_socket" in
+ avail_ext=' B ByteLoader Cwd Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File IO List/Util MIME/Base64 NDBM_File ODBM_File Opcode POSIX PerlIO/encoding PerlIO/scalar PerlIO/via SDBM_File Socket Storable Sys/Hostname Sys/Syslog'
+ for xxx in '$known_extensions'
+ case "$xxx" in
+ case "$usethreads" in
+ for xxx in '$known_extensions'
+ case "$xxx" in
+ avail_ext=' B ByteLoader Cwd Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File IO List/Util MIME/Base64 NDBM_File ODBM_File Opcode POSIX PerlIO/encoding PerlIO/scalar PerlIO/via SDBM_File Socket Storable Sys/Hostname Sys/Syslog Time/HiRes'
+ for xxx in '$known_extensions'
+ case "$xxx" in
+ avail_ext=' B ByteLoader Cwd Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File IO List/Util MIME/Base64 NDBM_File ODBM_File Opcode POSIX PerlIO/encoding PerlIO/scalar PerlIO/via SDBM_File Socket Storable Sys/Hostname Sys/Syslog Time/HiRes Unicode/Normalize'
+ for xxx in '$known_extensions'
+ case "$xxx" in
+ avail_ext=' B ByteLoader Cwd Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File IO List/Util MIME/Base64 NDBM_File ODBM_File Opcode POSIX PerlIO/encoding PerlIO/scalar PerlIO/via SDBM_File Socket Storable Sys/Hostname Sys/Syslog Time/HiRes Unicode/Normalize Win32CORE'
+ for xxx in '$known_extensions'
+ case "$xxx" in
+ case "$usedl" in
+ avail_ext=' B ByteLoader Cwd Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File IO List/Util MIME/Base64 NDBM_File ODBM_File Opcode POSIX PerlIO/encoding PerlIO/scalar PerlIO/via SDBM_File Socket Storable Sys/Hostname Sys/Syslog Time/HiRes Unicode/Normalize Win32CORE XS/APItest'
+ for xxx in '$known_extensions'
+ case "$xxx" in
+ case "$usedl" in
+ avail_ext=' B ByteLoader Cwd Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File IO List/Util MIME/Base64 NDBM_File ODBM_File Opcode POSIX PerlIO/encoding PerlIO/scalar PerlIO/via SDBM_File Socket Storable Sys/Hostname Sys/Syslog Time/HiRes Unicode/Normalize Win32CORE XS/APItest XS/Typemap'
+ for xxx in '$known_extensions'
+ case "$xxx" in
+ avail_ext=' B ByteLoader Cwd Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File IO List/Util MIME/Base64 NDBM_File ODBM_File Opcode POSIX PerlIO/encoding PerlIO/scalar PerlIO/via SDBM_File Socket Storable Sys/Hostname Sys/Syslog Time/HiRes Unicode/Normalize Win32CORE XS/APItest XS/Typemap attrs'
+ for xxx in '$known_extensions'
+ case "$xxx" in
+ avail_ext=' B ByteLoader Cwd Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File IO List/Util MIME/Base64 NDBM_File ODBM_File Opcode POSIX PerlIO/encoding PerlIO/scalar PerlIO/via SDBM_File Socket Storable Sys/Hostname Sys/Syslog Time/HiRes Unicode/Normalize Win32CORE XS/APItest XS/Typemap attrs re'
+ for xxx in '$known_extensions'
+ case "$xxx" in
+ avail_ext=' B ByteLoader Cwd Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File IO List/Util MIME/Base64 NDBM_File ODBM_File Opcode POSIX PerlIO/encoding PerlIO/scalar PerlIO/via SDBM_File Socket Storable Sys/Hostname Sys/Syslog Time/HiRes Unicode/Normalize Win32CORE XS/APItest XS/Typemap attrs re threads'
+ for xxx in '$known_extensions'
+ case "$xxx" in
+ avail_ext=' B ByteLoader Cwd Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File IO List/Util MIME/Base64 NDBM_File ODBM_File Opcode POSIX PerlIO/encoding PerlIO/scalar PerlIO/via SDBM_File Socket Storable Sys/Hostname Sys/Syslog Time/HiRes Unicode/Normalize Win32CORE XS/APItest XS/Typemap attrs re threads threads/shared'
+ set X B ByteLoader Cwd Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File IO List/Util MIME/Base64 NDBM_File ODBM_File Opcode POSIX PerlIO/encoding PerlIO/scalar PerlIO/via SDBM_File Socket Storable Sys/Hostname Sys/Syslog Time/HiRes Unicode/Normalize Win32CORE XS/APItest XS/Typemap attrs re threads threads/shared
+ shift
+ avail_ext='B ByteLoader Cwd Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File IO List/Util MIME/Base64 NDBM_File ODBM_File Opcode POSIX PerlIO/encoding PerlIO/scalar PerlIO/via SDBM_File Socket Storable Sys/Hostname Sys/Syslog Time/HiRes Unicode/Normalize Win32CORE XS/APItest XS/Typemap attrs re threads threads/shared'
+ case "$onlyextensions" in
+ case "$noextensions" in
+ : Now see which nonxs extensions are supported on this system.
+ : For now assume all are.
+ nonxs_ext=
+ for xxx in '$nonxs_extensions'
+ case "$xxx" in
+ nonxs_ext=' Errno'
+ set X Errno
+ shift
+ nonxs_ext=Errno
+ case $usedl in
+ /bin/cat
A number of extensions are supplied with perl5.  You may choose to
compile these extensions for dynamic loading (the default), compile
them into the perl5 executable (static loading), or not include
them at all.  Answer "none" to include no extensions.
Note that DynaLoader is always built and need not be mentioned here.

+ case "$dynamic_ext" in
+ : Exclude those listed in static_ext
+ dflt=
+ for xxx in '$avail_ext'
+ case " $static_ext " in
+ dflt=' B'
+ for xxx in '$avail_ext'
+ case " $static_ext " in
+ dflt=' B ByteLoader'
+ for xxx in '$avail_ext'
+ case " $static_ext " in
+ dflt=' B ByteLoader Cwd'
+ for xxx in '$avail_ext'
+ case " $static_ext " in
+ dflt=' B ByteLoader Cwd Data/Dumper'
+ for xxx in '$avail_ext'
+ case " $static_ext " in
+ dflt=' B ByteLoader Cwd Data/Dumper Devel/DProf'
+ for xxx in '$avail_ext'
+ case " $static_ext " in
+ dflt=' B ByteLoader Cwd Data/Dumper Devel/DProf Devel/PPPort'
+ for xxx in '$avail_ext'
+ case " $static_ext " in
+ dflt=' B ByteLoader Cwd Data/Dumper Devel/DProf Devel/PPPort Devel/Peek'
+ for xxx in '$avail_ext'
+ case " $static_ext " in
+ dflt=' B ByteLoader Cwd Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5'
+ for xxx in '$avail_ext'
+ case " $static_ext " in
+ dflt=' B ByteLoader Cwd Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode'
+ for xxx in '$avail_ext'
+ case " $static_ext " in
+ dflt=' B ByteLoader Cwd Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl'
+ for xxx in '$avail_ext'
+ case " $static_ext " in
+ dflt=' B ByteLoader Cwd Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob'
+ for xxx in '$avail_ext'
+ case " $static_ext " in
+ dflt=' B ByteLoader Cwd Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call'
+ for xxx in '$avail_ext'
+ case " $static_ext " in
+ dflt=' B ByteLoader Cwd Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File'
+ for xxx in '$avail_ext'
+ case " $static_ext " in
+ dflt=' B ByteLoader Cwd Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File IO'
+ for xxx in '$avail_ext'
+ case " $static_ext " in
+ dflt=' B ByteLoader Cwd Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File IO List/Util'
+ for xxx in '$avail_ext'
+ case " $static_ext " in
+ dflt=' B ByteLoader Cwd Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File IO List/Util MIME/Base64'
+ for xxx in '$avail_ext'
+ case " $static_ext " in
+ dflt=' B ByteLoader Cwd Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File IO List/Util MIME/Base64 NDBM_File'
+ for xxx in '$avail_ext'
+ case " $static_ext " in
+ dflt=' B ByteLoader Cwd Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File IO List/Util MIME/Base64 NDBM_File ODBM_File'
+ for xxx in '$avail_ext'
+ case " $static_ext " in
+ dflt=' B ByteLoader Cwd Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File IO List/Util MIME/Base64 NDBM_File ODBM_File Opcode'
+ for xxx in '$avail_ext'
+ case " $static_ext " in
+ dflt=' B ByteLoader Cwd Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File IO List/Util MIME/Base64 NDBM_File ODBM_File Opcode POSIX'
+ for xxx in '$avail_ext'
+ case " $static_ext " in
+ dflt=' B ByteLoader Cwd Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File IO List/Util MIME/Base64 NDBM_File ODBM_File Opcode POSIX PerlIO/encoding'
+ for xxx in '$avail_ext'
+ case " $static_ext " in
+ dflt=' B ByteLoader Cwd Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File IO List/Util MIME/Base64 NDBM_File ODBM_File Opcode POSIX PerlIO/encoding PerlIO/scalar'
+ for xxx in '$avail_ext'
+ case " $static_ext " in
+ dflt=' B ByteLoader Cwd Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File IO List/Util MIME/Base64 NDBM_File ODBM_File Opcode POSIX PerlIO/encoding PerlIO/scalar PerlIO/via'
+ for xxx in '$avail_ext'
+ case " $static_ext " in
+ dflt=' B ByteLoader Cwd Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File IO List/Util MIME/Base64 NDBM_File ODBM_File Opcode POSIX PerlIO/encoding PerlIO/scalar PerlIO/via SDBM_File'
+ for xxx in '$avail_ext'
+ case " $static_ext " in
+ dflt=' B ByteLoader Cwd Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File IO List/Util MIME/Base64 NDBM_File ODBM_File Opcode POSIX PerlIO/encoding PerlIO/scalar PerlIO/via SDBM_File Socket'
+ for xxx in '$avail_ext'
+ case " $static_ext " in
+ dflt=' B ByteLoader Cwd Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File IO List/Util MIME/Base64 NDBM_File ODBM_File Opcode POSIX PerlIO/encoding PerlIO/scalar PerlIO/via SDBM_File Socket Storable'
+ for xxx in '$avail_ext'
+ case " $static_ext " in
+ dflt=' B ByteLoader Cwd Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File IO List/Util MIME/Base64 NDBM_File ODBM_File Opcode POSIX PerlIO/encoding PerlIO/scalar PerlIO/via SDBM_File Socket Storable Sys/Hostname'
+ for xxx in '$avail_ext'
+ case " $static_ext " in
+ dflt=' B ByteLoader Cwd Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File IO List/Util MIME/Base64 NDBM_File ODBM_File Opcode POSIX PerlIO/encoding PerlIO/scalar PerlIO/via SDBM_File Socket Storable Sys/Hostname Sys/Syslog'
+ for xxx in '$avail_ext'
+ case " $static_ext " in
+ dflt=' B ByteLoader Cwd Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File IO List/Util MIME/Base64 NDBM_File ODBM_File Opcode POSIX PerlIO/encoding PerlIO/scalar PerlIO/via SDBM_File Socket Storable Sys/Hostname Sys/Syslog Time/HiRes'
+ for xxx in '$avail_ext'
+ case " $static_ext " in
+ dflt=' B ByteLoader Cwd Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File IO List/Util MIME/Base64 NDBM_File ODBM_File Opcode POSIX PerlIO/encoding PerlIO/scalar PerlIO/via SDBM_File Socket Storable Sys/Hostname Sys/Syslog Time/HiRes Unicode/Normalize'
+ for xxx in '$avail_ext'
+ case " $static_ext " in
+ for xxx in '$avail_ext'
+ case " $static_ext " in
+ dflt=' B ByteLoader Cwd Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File IO List/Util MIME/Base64 NDBM_File ODBM_File Opcode POSIX PerlIO/encoding PerlIO/scalar PerlIO/via SDBM_File Socket Storable Sys/Hostname Sys/Syslog Time/HiRes Unicode/Normalize XS/APItest'
+ for xxx in '$avail_ext'
+ case " $static_ext " in
+ dflt=' B ByteLoader Cwd Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File IO List/Util MIME/Base64 NDBM_File ODBM_File Opcode POSIX PerlIO/encoding PerlIO/scalar PerlIO/via SDBM_File Socket Storable Sys/Hostname Sys/Syslog Time/HiRes Unicode/Normalize XS/APItest XS/Typemap'
+ for xxx in '$avail_ext'
+ case " $static_ext " in
+ dflt=' B ByteLoader Cwd Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File IO List/Util MIME/Base64 NDBM_File ODBM_File Opcode POSIX PerlIO/encoding PerlIO/scalar PerlIO/via SDBM_File Socket Storable Sys/Hostname Sys/Syslog Time/HiRes Unicode/Normalize XS/APItest XS/Typemap attrs'
+ for xxx in '$avail_ext'
+ case " $static_ext " in
+ dflt=' B ByteLoader Cwd Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File IO List/Util MIME/Base64 NDBM_File ODBM_File Opcode POSIX PerlIO/encoding PerlIO/scalar PerlIO/via SDBM_File Socket Storable Sys/Hostname Sys/Syslog Time/HiRes Unicode/Normalize XS/APItest XS/Typemap attrs re'
+ for xxx in '$avail_ext'
+ case " $static_ext " in
+ dflt=' B ByteLoader Cwd Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File IO List/Util MIME/Base64 NDBM_File ODBM_File Opcode POSIX PerlIO/encoding PerlIO/scalar PerlIO/via SDBM_File Socket Storable Sys/Hostname Sys/Syslog Time/HiRes Unicode/Normalize XS/APItest XS/Typemap attrs re threads'
+ for xxx in '$avail_ext'
+ case " $static_ext " in
+ dflt=' B ByteLoader Cwd Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File IO List/Util MIME/Base64 NDBM_File ODBM_File Opcode POSIX PerlIO/encoding PerlIO/scalar PerlIO/via SDBM_File Socket Storable Sys/Hostname Sys/Syslog Time/HiRes Unicode/Normalize XS/APItest XS/Typemap attrs re threads threads/shared'
+ set X B ByteLoader Cwd Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File IO List/Util MIME/Base64 NDBM_File ODBM_File Opcode POSIX PerlIO/encoding PerlIO/scalar PerlIO/via SDBM_File Socket Storable Sys/Hostname Sys/Syslog Time/HiRes Unicode/Normalize XS/APItest XS/Typemap attrs re threads threads/shared
+ shift
+ dflt='B ByteLoader Cwd Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File IO List/Util MIME/Base64 NDBM_File ODBM_File Opcode POSIX PerlIO/encoding PerlIO/scalar PerlIO/via SDBM_File Socket Storable Sys/Hostname Sys/Syslog Time/HiRes Unicode/Normalize XS/APItest XS/Typemap attrs re threads threads/shared'
+ case "$dflt" in
+ rp='What extensions do you wish to load dynamically?'
+ . ./myread
++ xxxm='B ByteLoader Cwd Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File IO List/Util MIME/Base64 NDBM_File ODBM_File Opcode POSIX PerlIO/encoding PerlIO/scalar PerlIO/via SDBM_File Socket Storable Sys/Hostname Sys/Syslog Time/HiRes Unicode/Normalize XS/APItest XS/Typemap attrs re threads threads/shared'
++ case "$xxxm" in
++ case "$rp" in
+++ echo 'What extensions do you wish to load dynamically? [B ByteLoader Cwd Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File IO List/Util MIME/Base64 NDBM_File ODBM_File Opcode POSIX PerlIO/encoding PerlIO/scalar PerlIO/via SDBM_File Socket Storable Sys/Hostname Sys/Syslog Time/HiRes Unicode/Normalize XS/APItest XS/Typemap attrs re threads threads/shared]  '
+++ wc -c
++ test 411 -ge 80
++ echo 'What extensions do you wish to load dynamically?'
What extensions do you wish to load dynamically?
++ echo -n '[B ByteLoader Cwd Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File IO List/Util MIME/Base64 NDBM_File ODBM_File Opcode POSIX PerlIO/encoding PerlIO/scalar PerlIO/via SDBM_File Socket Storable Sys/Hostname Sys/Syslog Time/HiRes Unicode/Normalize XS/APItest XS/Typemap attrs re threads threads/shared] '
[B ByteLoader Cwd Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File IO List/Util MIME/Base64 NDBM_File ODBM_File Opcode POSIX PerlIO/encoding PerlIO/scalar PerlIO/via SDBM_File Socket Storable Sys/Hostname Sys/Syslog Time/HiRes Unicode/Normalize XS/APItest XS/Typemap attrs re threads threads/shared] ++ ans='!'
++ case "$fastread" in
++ case "$dflt" in
++ ans=
++ case "$silent-$rp" in
++ echo ' '
 
++ expr X : 'X!'
++ case "$ans" in
++ ans='B ByteLoader Cwd Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File IO List/Util MIME/Base64 NDBM_File ODBM_File Opcode POSIX PerlIO/encoding PerlIO/scalar PerlIO/via SDBM_File Socket Storable Sys/Hostname Sys/Syslog Time/HiRes Unicode/Normalize XS/APItest XS/Typemap attrs re threads threads/shared'
+ case "$ans" in
+ dynamic_ext='B ByteLoader Cwd Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File IO List/Util MIME/Base64 NDBM_File ODBM_File Opcode POSIX PerlIO/encoding PerlIO/scalar PerlIO/via SDBM_File Socket Storable Sys/Hostname Sys/Syslog Time/HiRes Unicode/Normalize XS/APItest XS/Typemap attrs re threads threads/shared'
+ case "$static_ext" in
+ dflt=' Win32CORE'
+ case "$dflt" in
+ rp='What extensions do you wish to load statically?'
+ . ./myread
++ xxxm=' Win32CORE'
++ case "$xxxm" in
++ case "$rp" in
+++ echo 'What extensions do you wish to load statically? [ Win32CORE]  '
+++ wc -c
++ test 63 -ge 80
++ echo -n 'What extensions do you wish to load statically? [ Win32CORE] '
What extensions do you wish to load statically? [ Win32CORE] ++ ans='!'
++ case "$fastread" in
++ case "$dflt" in
++ ans=
++ case "$silent-$rp" in
++ echo ' '
 
++ expr X : 'X!'
++ case "$ans" in
++ ans=' Win32CORE'
+ case "$ans" in
+ static_ext=' Win32CORE'
+ case " $static_ext " in
+ set X B ByteLoader Cwd Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File IO List/Util MIME/Base64 NDBM_File ODBM_File Opcode POSIX PerlIO/encoding PerlIO/scalar PerlIO/via SDBM_File Socket Storable Sys/Hostname Sys/Syslog Time/HiRes Unicode/Normalize XS/APItest XS/Typemap attrs re threads threads/shared Win32CORE Errno
+ shift
+ extensions='B ByteLoader Cwd Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File IO List/Util MIME/Base64 NDBM_File ODBM_File Opcode POSIX PerlIO/encoding PerlIO/scalar PerlIO/via SDBM_File Socket Storable Sys/Hostname Sys/Syslog Time/HiRes Unicode/Normalize XS/APItest XS/Typemap attrs re threads threads/shared Win32CORE Errno'
+ case " $extensions" in
+ : Remove libraries needed only for extensions
+ : The appropriate ext/Foo/Makefile.PL will add them back in, if necessary.
+ : The exception is SunOS 4.x, which needs them.
+ case "${osname}X${osvers}" in
+ case "$usedl" in
++ echo ' -lgdbm -lcrypt -lgdbm_compat '
++ sed -e 's@ -lndbm @ @' -e 's@ -lgdbm @ @' -e 's@ -ldbm @ @' -e 's@ -ldb @ @'
+ set X -lcrypt -lgdbm_compat
+ shift
+ perllibs='-lcrypt -lgdbm_compat'
+ : Remove build directory name from cppstdin so it can be used from
+ : either the present location or the final installed location.
+ echo ' '
 
+ : Get out of the UU directory to get correct path name.
+ cd ..
+ case "$cppstdin" in
++ pwd
+ cd UU
+ : end of configuration questions
+ echo ' '
 
+ echo 'End of configuration questions.'
End of configuration questions.
+ echo ' '
 
+ : back to where it started
+ test -d ../UU
+ cd ..
+ : configuration may be patched via a config.arch file
+ test -f config.arch
+ : configuration may be patched via a config.over file
+ test -f config.over
+ : in case they want portability, strip down executable paths
+ case "$d_portable" in
+ echo ' '
 
+ echo 'Stripping down executable paths...'
Stripping down executable paths...
+ for file in '$loclist' '$trylist'
+ eval 'temp=$awk'
++ temp=/bin/awk
++ basename /bin/awk
+ eval awk=awk
++ awk=awk
+ for file in '$loclist' '$trylist'
+ eval 'temp=$cat'
++ temp=/bin/cat
++ basename /bin/cat
+ eval cat=cat
++ cat=cat
+ for file in '$loclist' '$trylist'
+ eval 'temp=$chmod'
++ temp=/bin/chmod
++ basename /bin/chmod
+ eval chmod=chmod
++ chmod=chmod
+ for file in '$loclist' '$trylist'
+ eval 'temp=$comm'
++ temp=/bin/comm
++ basename /bin/comm
+ eval comm=comm
++ comm=comm
+ for file in '$loclist' '$trylist'
+ eval 'temp=$cp'
++ temp=/bin/cp
++ basename /bin/cp
+ eval cp=cp
++ cp=cp
+ for file in '$loclist' '$trylist'
+ eval 'temp=$echo'
++ temp=/bin/echo
++ basename /bin/echo
+ eval echo=echo
++ echo=echo
+ for file in '$loclist' '$trylist'
+ eval 'temp=$expr'
++ temp=/bin/expr
++ basename /bin/expr
+ eval expr=expr
++ expr=expr
+ for file in '$loclist' '$trylist'
+ eval 'temp=$grep'
++ temp=/bin/grep
++ basename /bin/grep
+ eval grep=grep
++ grep=grep
+ for file in '$loclist' '$trylist'
+ eval 'temp=$ls'
++ temp=/bin/ls
++ basename /bin/ls
+ eval ls=ls
++ ls=ls
+ for file in '$loclist' '$trylist'
+ eval 'temp=$mkdir'
++ temp=/bin/mkdir
++ basename /bin/mkdir
+ eval mkdir=mkdir
++ mkdir=mkdir
+ for file in '$loclist' '$trylist'
+ eval 'temp=$rm'
++ temp=/bin/rm
++ basename /bin/rm
+ eval rm=rm
++ rm=rm
+ for file in '$loclist' '$trylist'
+ eval 'temp=$sed'
++ temp=/bin/sed
++ basename /bin/sed
+ eval sed=sed
++ sed=sed
+ for file in '$loclist' '$trylist'
+ eval 'temp=$sort'
++ temp=/bin/sort
++ basename /bin/sort
+ eval sort=sort
++ sort=sort
+ for file in '$loclist' '$trylist'
+ eval 'temp=$touch'
++ temp=/bin/touch
++ basename /bin/touch
+ eval touch=touch
++ touch=touch
+ for file in '$loclist' '$trylist'
+ eval 'temp=$tr'
++ temp=/bin/tr
++ basename /bin/tr
+ eval tr=tr
++ tr=tr
+ for file in '$loclist' '$trylist'
+ eval 'temp=$uniq'
++ temp=/bin/uniq
++ basename /bin/uniq
+ eval uniq=uniq
++ uniq=uniq
+ for file in '$loclist' '$trylist'
+ eval 'temp=$Mcc'
++ temp=Mcc
++ basename Mcc
+ eval Mcc=Mcc
++ Mcc=Mcc
+ for file in '$loclist' '$trylist'
+ eval 'temp=$ar'
++ temp=/bin/ar
++ basename /bin/ar
+ eval ar=ar
++ ar=ar
+ for file in '$loclist' '$trylist'
+ eval 'temp=$bison'
++ temp=/bin/bison
++ basename /bin/bison
+ eval bison=bison
++ bison=bison
+ for file in '$loclist' '$trylist'
+ eval 'temp=$byacc'
++ temp=byacc
++ basename byacc
+ eval byacc=byacc
++ byacc=byacc
+ for file in '$loclist' '$trylist'
+ eval 'temp=$cpp'
++ temp=/bin/cpp
++ basename /bin/cpp
+ eval cpp=cpp
++ cpp=cpp
+ for file in '$loclist' '$trylist'
+ eval 'temp=$csh'
++ temp=csh
++ basename csh
+ eval csh=csh
++ csh=csh
+ for file in '$loclist' '$trylist'
+ eval 'temp=$date'
++ temp=/bin/date
++ basename /bin/date
+ eval date=date
++ date=date
+ for file in '$loclist' '$trylist'
+ eval 'temp=$egrep'
++ temp=/bin/egrep
++ basename /bin/egrep
+ eval egrep=egrep
++ egrep=egrep
+ for file in '$loclist' '$trylist'
+ eval 'temp=$gmake'
++ temp=gmake
++ basename gmake
+ eval gmake=gmake
++ gmake=gmake
+ for file in '$loclist' '$trylist'
+ eval 'temp=$gzip'
++ temp=/bin/gzip
++ basename /bin/gzip
+ eval gzip=gzip
++ gzip=gzip
+ for file in '$loclist' '$trylist'
+ eval 'temp=$less'
++ temp=/bin/less
++ basename /bin/less
+ eval less=less
++ less=less
+ for file in '$loclist' '$trylist'
+ eval 'temp=$ln'
++ temp=/bin/ln
++ basename /bin/ln
+ eval ln=ln
++ ln=ln
+ for file in '$loclist' '$trylist'
+ eval 'temp=$make'
++ temp=/bin/make
++ basename /bin/make
+ eval make=make
++ make=make
+ for file in '$loclist' '$trylist'
+ eval 'temp=$more'
++ temp=more
++ basename more
+ eval more=more
++ more=more
+ for file in '$loclist' '$trylist'
+ eval 'temp=$nm'
++ temp=/bin/nm
++ basename /bin/nm
+ eval nm=nm
++ nm=nm
+ for file in '$loclist' '$trylist'
+ eval 'temp=$nroff'
++ temp=/bin/nroff
++ basename /bin/nroff
+ eval nroff=nroff
++ nroff=nroff
+ for file in '$loclist' '$trylist'
+ eval 'temp=$pg'
++ temp=pg
++ basename pg
+ eval pg=pg
++ pg=pg
+ for file in '$loclist' '$trylist'
+ eval 'temp=$test'
++ temp=test
++ basename test
+ eval test=test
++ test=test
+ for file in '$loclist' '$trylist'
+ eval 'temp=$uname'
++ temp=/bin/uname
++ basename /bin/uname
+ eval uname=uname
++ uname=uname
+ for file in '$loclist' '$trylist'
+ eval 'temp=$zip'
++ temp=/bin/zip
++ basename /bin/zip
+ eval zip=zip
++ zip=zip
+ : create config.sh file
+ echo ' '
 
+ echo 'Creating config.sh...'
Creating config.sh...
+ cat
+ : Add in command line options if available
+ test -f UU/cmdline.opt
+ cat UU/cmdline.opt
+ : add special variables
+ test -f ./patchlevel.h
+ awk '/^#define[ 	]+PERL_/ {printf "%s=%s\n",$2,$3}' ./patchlevel.h
+ echo PERL_PATCHLEVEL=
+ echo PERL_CONFIG_SH=true
+ : propagate old symbols
+ test -f UU/config.sh
+ sort
+ uniq
+ sed -n 's/^\([a-zA-Z_0-9]*\)=.*/\1/p' config.sh config.sh UU/oldconfig.sh
+ sort
+ uniq -u
++ cat UU/oldsyms
+ set X bincompat5005
+ shift
+ case $# in
+ cat
Hmm...You had some extra variables I don't know about...I'll try to keep 'em...
+ echo '# Variables propagated from previous config.sh file.'
++ cat UU/oldsyms
+ for sym in '`cat UU/oldsyms`'
+ echo '    Propagating recommended variable $bincompat5005...'
    Propagating recommended variable $bincompat5005...
+ eval 'tmp="$bincompat5005"'
++ tmp=undef
+ echo undef
+ sed -e 's/'\''/'\''"'\''"'\''/g' -e 's/^/bincompat5005='\''/' -e 's/$/'\''/'
+ : Finish up by extracting the .SH files
+ case "$alldone" in
+ : if this fails, just run all the .SH files by hand
+ . ./config.sh
++ Author=
++ Date='$Date'
++ Header=
++ Id='$Id'
++ Locker=
++ Log='$Log'
++ Mcc=Mcc
++ RCSfile='$RCSfile'
++ Revision='$Revision'
++ Source=
++ State=
++ _a=.a
++ _exe=.exe
++ _o=.o
++ afs=false
++ afsroot=/afs
++ alignbytes=8
++ ansi2knr=
++ aphostname=/bin/hostname
++ api_revision=5
++ api_subversion=0
++ api_version=8
++ api_versionstring=5.8.0
++ ar=ar
++ archlib=/usr/lib/perl5/5.8/msys
++ archlibexp=/usr/lib/perl5/5.8/msys
++ archname64=64int
++ archname=msys-64int
++ archobjs=msys.o
++ asctime_r_proto=0
++ awk=awk
++ baserev=5.0
++ bash=
++ bin=/usr/bin
++ binexp=/usr/bin
++ bison=bison
++ byacc=byacc
++ byteorder=12345678
++ c=
++ castflags=0
++ cat=cat
++ cc=gcc
++ cccdlflags=' '
++ ccdlflags=' -s '
++ ccflags='-DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement'
++ ccflags_uselargefiles=
++ ccname=gcc
++ ccsymbols='__CYGWIN32__=1 __unix=1 __unix__=1'
++ ccversion=
++ cf_by=cwilson
++ cf_email=cwilson@kheldar.nonet
++ cf_time='Tue Apr 26 22:16:11 EDT 2011'
++ charsize=1
++ chgrp=
++ chmod=chmod
++ chown=
++ clocktype=clock_t
++ comm=comm
++ compress=
++ contains=grep
++ cp=cp
++ cpio=
++ cpp=cpp
++ cpp_stuff=42
++ cppccsymbols='__CYGWIN__=1 __MSYS__=1 unix=1'
++ cppflags='-DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement'
++ cpplast=-
++ cppminus=-
++ cpprun='gcc -E'
++ cppstdin='gcc -E'
++ cppsymbols='__GNUC__=3 __GNUC_MINOR__=4 _LONG_DOUBLE=long\ double __STDC__=1 i386=1 __i386=1 __i386__=1 __unix=1 __unix__=1'
++ crypt_r_proto=0
++ cryptlib=
++ csh=csh
++ ctermid_r_proto=0
++ ctime_r_proto=0
++ d_Gconvert='sprintf((b),"%.*g",(n),(x))'
++ d_PRIEUldbl=define
++ d_PRIFUldbl=define
++ d_PRIGUldbl=define
++ d_PRIXU64=define
++ d_PRId64=define
++ d_PRIeldbl=define
++ d_PRIfldbl=define
++ d_PRIgldbl=define
++ d_PRIi64=define
++ d_PRIo64=define
++ d_PRIu64=define
++ d_PRIx64=define
++ d_SCNfldbl=define
++ d__fwalk=undef
++ d_access=define
++ d_accessx=undef
++ d_aintl=undef
++ d_alarm=define
++ d_archlib=define
++ d_asctime_r=undef
++ d_atolf=undef
++ d_atoll=undef
++ d_attribute_format=define
++ d_attribute_malloc=define
++ d_attribute_nonnull=define
++ d_attribute_noreturn=define
++ d_attribute_pure=define
++ d_attribute_unused=define
++ d_attribute_warn_unused_result=define
++ d_bcmp=define
++ d_bcopy=define
++ d_bsd=define
++ d_bsdgetpgrp=undef
++ d_bsdsetpgrp=undef
++ d_bzero=define
++ d_casti32=undef
++ d_castneg=define
++ d_charvspr=define
++ d_chown=define
++ d_chroot=define
++ d_chsize=undef
++ d_class=undef
++ d_clearenv=undef
++ d_closedir=define
++ d_cmsghdr_s=undef
++ d_const=define
++ d_copysignl=undef
++ d_crypt=define
++ d_crypt_r=undef
++ d_csh=undef
++ d_ctermid_r=undef
++ d_ctime_r=undef
++ d_cuserid=define
++ d_dbl_dig=define
++ d_dbminitproto=define
++ d_difftime=define
++ d_dirfd=define
++ d_dirnamlen=undef
++ d_dlerror=define
++ d_dlopen=define
++ d_dlsymun=undef
++ d_dosuid=undef
++ d_drand48_r=undef
++ d_drand48proto=define
++ d_dup2=define
++ d_eaccess=undef
++ d_endgrent=define
++ d_endgrent_r=undef
++ d_endhent=define
++ d_endhostent_r=undef
++ d_endnent=undef
++ d_endnetent_r=undef
++ d_endpent=undef
++ d_endprotoent_r=undef
++ d_endpwent=define
++ d_endpwent_r=undef
++ d_endsent=undef
++ d_endservent_r=undef
++ d_eofnblk=define
++ d_eunice=undef
++ d_faststdio=define
++ d_fchdir=define
++ d_fchmod=define
++ d_fchown=define
++ d_fcntl=define
++ d_fcntl_can_lock=define
++ d_fd_macros=define
++ d_fd_set=define
++ d_fds_bits=define
++ d_fgetpos=define
++ d_finite=define
++ d_finitel=undef
++ d_flexfnam=define
++ d_flock=undef
++ d_flockproto=undef
++ d_fork=define
++ d_fp_class=undef
++ d_fpathconf=define
++ d_fpclass=undef
++ d_fpclassify=undef
++ d_fpclassl=undef
++ d_fpos64_t=undef
++ d_frexpl=undef
++ d_fs_data_s=undef
++ d_fseeko=undef
++ d_fsetpos=define
++ d_fstatfs=define
++ d_fstatvfs=undef
++ d_fsync=define
++ d_ftello=undef
++ d_ftime=undef
++ d_futimes=undef
++ d_getcwd=define
++ d_getespwnam=undef
++ d_getfsstat=undef
++ d_getgrent=define
++ d_getgrent_r=undef
++ d_getgrgid_r=undef
++ d_getgrnam_r=undef
++ d_getgrps=define
++ d_gethbyaddr=define
++ d_gethbyname=define
++ d_gethent=undef
++ d_gethname=define
++ d_gethostbyaddr_r=undef
++ d_gethostbyname_r=undef
++ d_gethostent_r=undef
++ d_gethostprotos=define
++ d_getitimer=define
++ d_getlogin=define
++ d_getlogin_r=undef
++ d_getmnt=undef
++ d_getmntent=define
++ d_getnbyaddr=undef
++ d_getnbyname=undef
++ d_getnent=undef
++ d_getnetbyaddr_r=undef
++ d_getnetbyname_r=undef
++ d_getnetent_r=undef
++ d_getnetprotos=define
++ d_getpagsz=define
++ d_getpbyname=define
++ d_getpbynumber=define
++ d_getpent=undef
++ d_getpgid=define
++ d_getpgrp2=undef
++ d_getpgrp=define
++ d_getppid=define
++ d_getprior=undef
++ d_getprotobyname_r=undef
++ d_getprotobynumber_r=undef
++ d_getprotoent_r=undef
++ d_getprotoprotos=define
++ d_getprpwnam=undef
++ d_getpwent=define
++ d_getpwent_r=undef
++ d_getpwnam_r=undef
++ d_getpwuid_r=undef
++ d_getsbyname=define
++ d_getsbyport=define
++ d_getsent=undef
++ d_getservbyname_r=undef
++ d_getservbyport_r=undef
++ d_getservent_r=undef
++ d_getservprotos=define
++ d_getspnam=undef
++ d_getspnam_r=undef
++ d_gettimeod=define
++ d_gmtime_r=undef
++ d_gnulibc=undef
++ d_grpasswd=define
++ d_hasmntopt=undef
++ d_htonl=define
++ d_ilogbl=undef
++ d_index=undef
++ d_inetaton=define
++ d_int64_t=define
++ d_isascii=define
++ d_isfinite=undef
++ d_isinf=define
++ d_isnan=define
++ d_isnanl=undef
++ d_killpg=define
++ d_lchown=define
++ d_ldbl_dig=define
++ d_libm_lib_version=undef
++ d_link=define
++ d_localtime_r=undef
++ d_locconv=define
++ d_lockf=undef
++ d_longdbl=define
++ d_longlong=define
++ d_lseekproto=define
++ d_lstat=define
++ d_madvise=undef
++ d_malloc_good_size=undef
++ d_malloc_size=undef
++ d_mblen=define
++ d_mbstowcs=define
++ d_mbtowc=define
++ d_memchr=define
++ d_memcmp=define
++ d_memcpy=define
++ d_memmove=define
++ d_memset=define
++ d_mkdir=define
++ d_mkdtemp=undef
++ d_mkfifo=define
++ d_mkstemp=define
++ d_mkstemps=undef
++ d_mktime=define
++ d_mmap=define
++ d_modfl=undef
++ d_modfl_pow32_bug=undef
++ d_modflproto=undef
++ d_mprotect=define
++ d_msg=undef
++ d_msg_ctrunc=undef
++ d_msg_dontroute=define
++ d_msg_oob=define
++ d_msg_peek=define
++ d_msg_proxy=undef
++ d_msgctl=undef
++ d_msgget=undef
++ d_msghdr_s=define
++ d_msgrcv=undef
++ d_msgsnd=undef
++ d_msync=define
++ d_munmap=define
++ d_mymalloc=define
++ d_nice=define
++ d_nl_langinfo=undef
++ d_nv_preserves_uv=undef
++ d_nv_zero_is_allbits_zero=define
++ d_off64_t=undef
++ d_old_pthread_create_joinable=undef
++ d_oldpthreads=undef
++ d_oldsock=undef
++ d_open3=define
++ d_pathconf=define
++ d_pause=define
++ d_perl_otherlibdirs=undef
++ d_phostname=undef
++ d_pipe=define
++ d_poll=define
++ d_portable=define
++ d_procselfexe=undef
++ d_pthread_atfork=define
++ d_pthread_attr_setscope=define
++ d_pthread_yield=undef
++ d_pwage=undef
++ d_pwchange=undef
++ d_pwclass=undef
++ d_pwcomment=define
++ d_pwexpire=undef
++ d_pwgecos=define
++ d_pwpasswd=define
++ d_pwquota=undef
++ d_qgcvt=undef
++ d_quad=define
++ d_random_r=undef
++ d_readdir64_r=undef
++ d_readdir=define
++ d_readdir_r=undef
++ d_readlink=define
++ d_readv=define
++ d_recvmsg=undef
++ d_rename=define
++ d_rewinddir=define
++ d_rmdir=define
++ d_safebcpy=undef
++ d_safemcpy=undef
++ d_sanemcmp=define
++ d_sbrkproto=define
++ d_scalbnl=undef
++ d_sched_yield=define
++ d_scm_rights=undef
++ d_seekdir=define
++ d_select=define
++ d_sem=undef
++ d_semctl=undef
++ d_semctl_semid_ds=undef
++ d_semctl_semun=undef
++ d_semget=undef
++ d_semop=undef
++ d_sendmsg=undef
++ d_setegid=define
++ d_seteuid=define
++ d_setgrent=define
++ d_setgrent_r=undef
++ d_setgrps=undef
++ d_sethent=define
++ d_sethostent_r=undef
++ d_setitimer=define
++ d_setlinebuf=undef
++ d_setlocale=define
++ d_setlocale_r=undef
++ d_setnent=undef
++ d_setnetent_r=undef
++ d_setpent=undef
++ d_setpgid=define
++ d_setpgrp2=undef
++ d_setpgrp=define
++ d_setprior=undef
++ d_setproctitle=undef
++ d_setprotoent_r=undef
++ d_setpwent=define
++ d_setpwent_r=undef
++ d_setregid=undef
++ d_setresgid=undef
++ d_setresuid=undef
++ d_setreuid=undef
++ d_setrgid=undef
++ d_setruid=undef
++ d_setsent=undef
++ d_setservent_r=undef
++ d_setsid=define
++ d_setvbuf=define
++ d_sfio=undef
++ d_shm=undef
++ d_shmat=undef
++ d_shmatprototype=undef
++ d_shmctl=undef
++ d_shmdt=undef
++ d_shmget=undef
++ d_sigaction=define
++ d_sigprocmask=define
++ d_sigsetjmp=define
++ d_sockatmark=undef
++ d_sockatmarkproto=undef
++ d_socket=define
++ d_socklen_t=define
++ d_sockpair=define
++ d_socks5_init=undef
++ d_sprintf_returns_strlen=define
++ d_sqrtl=undef
++ d_srand48_r=undef
++ d_srandom_r=undef
++ d_sresgproto=undef
++ d_sresuproto=undef
++ d_statblks=define
++ d_statfs_f_flags=undef
++ d_statfs_s=define
++ d_statvfs=undef
++ d_stdio_cnt_lval=define
++ d_stdio_ptr_lval=define
++ d_stdio_ptr_lval_nochange_cnt=define
++ d_stdio_ptr_lval_sets_cnt=undef
++ d_stdio_stream_array=undef
++ d_stdiobase=define
++ d_stdstdio=define
++ d_strchr=define
++ d_strcoll=define
++ d_strctcpy=define
++ d_strerrm='strerror(e)'
++ d_strerror=define
++ d_strerror_r=undef
++ d_strftime=define
++ d_strlcat=undef
++ d_strlcpy=undef
++ d_strtod=define
++ d_strtol=define
++ d_strtold=undef
++ d_strtoll=undef
++ d_strtoq=undef
++ d_strtoul=define
++ d_strtoull=undef
++ d_strtouq=undef
++ d_strxfrm=define
++ d_suidsafe=undef
++ d_symlink=define
++ d_syscall=undef
++ d_syscallproto=undef
++ d_sysconf=define
++ d_sysernlst=
++ d_syserrlst=define
++ d_system=define
++ d_tcgetpgrp=define
++ d_tcsetpgrp=define
++ d_telldir=define
++ d_telldirproto=define
++ d_time=define
++ d_times=define
++ d_tm_tm_gmtoff=undef
++ d_tm_tm_zone=undef
++ d_tmpnam_r=undef
++ d_truncate=define
++ d_ttyname_r=undef
++ d_tzname=define
++ d_u32align=define
++ d_ualarm=undef
++ d_umask=define
++ d_uname=define
++ d_union_semun=undef
++ d_unordered=undef
++ d_unsetenv=define
++ d_usleep=define
++ d_usleepproto=define
++ d_ustat=undef
++ d_vendorarch=define
++ d_vendorbin=define
++ d_vendorlib=define
++ d_vendorscript=define
++ d_vfork=undef
++ d_void_closedir=undef
++ d_voidsig=define
++ d_voidtty=
++ d_volatile=define
++ d_vprintf=define
++ d_wait4=define
++ d_waitpid=define
++ d_wcstombs=define
++ d_wctomb=define
++ d_writev=define
++ d_xenix=undef
++ date=date
++ db_hashtype=u_int32_t
++ db_prefixtype=size_t
++ db_version_major=
++ db_version_minor=
++ db_version_patch=
++ defvoidused=15
++ direntrytype='struct dirent'
++ dlext=dll
++ dlsrc=dl_dlopen.xs
++ doublesize=8
++ drand01='drand48()'
++ drand48_r_proto=0
++ dynamic_ext='B ByteLoader Cwd Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File IO List/Util MIME/Base64 NDBM_File ODBM_File Opcode POSIX PerlIO/encoding PerlIO/scalar PerlIO/via SDBM_File Socket Storable Sys/Hostname Sys/Syslog Time/HiRes Unicode/Normalize XS/APItest XS/Typemap attrs re threads threads/shared'
++ eagain=EAGAIN
++ ebcdic=undef
++ echo=echo
++ egrep=egrep
++ emacs=
++ endgrent_r_proto=0
++ endhostent_r_proto=0
++ endnetent_r_proto=0
++ endprotoent_r_proto=0
++ endpwent_r_proto=0
++ endservent_r_proto=0
++ eunicefix=:
++ exe_ext=.exe
++ expr=expr
++ extensions='B ByteLoader Cwd Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File IO List/Util MIME/Base64 NDBM_File ODBM_File Opcode POSIX PerlIO/encoding PerlIO/scalar PerlIO/via SDBM_File Socket Storable Sys/Hostname Sys/Syslog Time/HiRes Unicode/Normalize XS/APItest XS/Typemap attrs re threads threads/shared Win32CORE Errno'
++ extras=
++ fflushNULL=define
++ fflushall=undef
++ find=
++ firstmakefile=GNUmakefile
++ flex=
++ fpossize=4
++ fpostype=fpos_t
++ freetype=void
++ from=:
++ full_ar=/bin/ar
++ full_csh=csh
++ full_sed=/bin/sed
++ gccansipedantic=
++ gccosandvers=
++ gccversion='3.4.4 (msys special)'
++ getgrent_r_proto=0
++ getgrgid_r_proto=0
++ getgrnam_r_proto=0
++ gethostbyaddr_r_proto=0
++ gethostbyname_r_proto=0
++ gethostent_r_proto=0
++ getlogin_r_proto=0
++ getnetbyaddr_r_proto=0
++ getnetbyname_r_proto=0
++ getnetent_r_proto=0
++ getprotobyname_r_proto=0
++ getprotobynumber_r_proto=0
++ getprotoent_r_proto=0
++ getpwent_r_proto=0
++ getpwnam_r_proto=0
++ getpwuid_r_proto=0
++ getservbyname_r_proto=0
++ getservbyport_r_proto=0
++ getservent_r_proto=0
++ getspnam_r_proto=0
++ gidformat='"hu"'
++ gidsign=1
++ gidsize=2
++ gidtype=gid_t
++ glibpth='/usr/shlib  /lib /usr/lib /usr/lib/386 /lib/386 /usr/ccs/lib /usr/ucblib /usr/local/lib '
++ gmake=gmake
++ gmtime_r_proto=0
++ gnulibc_version=
++ grep=grep
++ groupcat=
++ groupstype=gid_t
++ gzip=gzip
++ h_fcntl=false
++ h_sysfile=true
++ hint=recommended
++ hostcat=
++ html1dir=' '
++ html1direxp=
++ html3dir=' '
++ html3direxp=
++ i16size=2
++ i16type=short
++ i32size=4
++ i32type=long
++ i64size=8
++ i64type='long long'
++ i8size=1
++ i8type=char
++ i_arpainet=define
++ i_bsdioctl=
++ i_crypt=define
++ i_db=undef
++ i_dbm=define
++ i_dirent=define
++ i_dld=undef
++ i_dlfcn=define
++ i_fcntl=undef
++ i_float=define
++ i_fp=undef
++ i_fp_class=undef
++ i_gdbm=define
++ i_grp=define
++ i_ieeefp=define
++ i_inttypes=undef
++ i_langinfo=undef
++ i_libutil=undef
++ i_limits=define
++ i_locale=define
++ i_machcthr=undef
++ i_malloc=define
++ i_math=define
++ i_memory=undef
++ i_mntent=define
++ i_ndbm=define
++ i_netdb=define
++ i_neterrno=undef
++ i_netinettcp=define
++ i_niin=define
++ i_poll=define
++ i_prot=undef
++ i_pthread=define
++ i_pwd=define
++ i_rpcsvcdbm=undef
++ i_sfio=undef
++ i_sgtty=undef
++ i_shadow=undef
++ i_socks=undef
++ i_stdarg=define
++ i_stddef=define
++ i_stdlib=define
++ i_string=define
++ i_sunmath=undef
++ i_sysaccess=undef
++ i_sysdir=undef
++ i_sysfile=define
++ i_sysfilio=undef
++ i_sysin=undef
++ i_sysioctl=define
++ i_syslog=define
++ i_sysmman=define
++ i_sysmode=undef
++ i_sysmount=define
++ i_sysndir=undef
++ i_sysparam=define
++ i_sysresrc=define
++ i_syssecrt=undef
++ i_sysselct=define
++ i_syssockio=undef
++ i_sysstat=define
++ i_sysstatfs=undef
++ i_sysstatvfs=undef
++ i_systime=define
++ i_systimek=undef
++ i_systimes=define
++ i_systypes=define
++ i_sysuio=define
++ i_sysun=define
++ i_sysutsname=define
++ i_sysvfs=define
++ i_syswait=define
++ i_termio=undef
++ i_termios=define
++ i_time=undef
++ i_unistd=define
++ i_ustat=undef
++ i_utime=define
++ i_values=undef
++ i_varargs=undef
++ i_varhdr=stdarg.h
++ i_vfork=undef
++ ignore_versioned_solibs=
++ inc_version_list=' '
++ inc_version_list_init=0
++ incpath=
++ inews=
++ installarchlib=/usr/lib/perl5/5.8/msys
++ installbin=/usr/bin
++ installhtml1dir=
++ installhtml3dir=
++ installman1dir=/usr/share/man/man1
++ installman3dir=/usr/share/man/man3
++ installprefix=/usr
++ installprefixexp=/usr
++ installprivlib=/usr/lib/perl5/5.8
++ installscript=/usr/bin
++ installsitearch=/usr/lib/perl5/site_perl/5.8/msys
++ installsitebin=/usr/bin
++ installsitehtml1dir=
++ installsitehtml3dir=
++ installsitelib=/usr/lib/perl5/site_perl/5.8
++ installsiteman1dir=/usr/share/man/man1
++ installsiteman3dir=/usr/share/man/man3
++ installsitescript=/usr/bin
++ installstyle=lib/perl5
++ installusrbinperl=undef
++ installvendorarch=/usr/lib/perl5/vendor_perl/5.8/msys
++ installvendorbin=/usr/bin
++ installvendorhtml1dir=
++ installvendorhtml3dir=
++ installvendorlib=/usr/lib/perl5/vendor_perl/5.8
++ installvendorman1dir=/usr/share/man/man1
++ installvendorman3dir=/usr/share/man/man3
++ installvendorscript=/usr/bin
++ intsize=4
++ issymlink=
++ ivdformat='"lld"'
++ ivsize=8
++ ivtype='long long'
++ known_extensions='B ByteLoader Cwd DB_File Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File I18N/Langinfo IO IPC/SysV List/Util MIME/Base64 NDBM_File ODBM_File Opcode POSIX PerlIO/encoding PerlIO/scalar PerlIO/via SDBM_File Socket Storable Sys/Hostname Sys/Syslog Thread Time/HiRes Unicode/Normalize Win32CORE XS/APItest XS/Typemap attrs re threads threads/shared'
++ ksh=
++ ld=ld2
++ lddlflags=' -s '
++ ldflags=' -s '
++ ldflags_uselargefiles=
++ ldlibpthname=PATH
++ less=less
++ lib_ext=.a
++ libc=/usr/lib/libmsys-1.0.dll.a
++ libperl=libperl.a
++ libpth='/usr/lib /lib'
++ libs='-lgdbm -lcrypt -lgdbm_compat'
++ libsdirs=' /usr/lib'
++ libsfiles=' libgdbm.a libcrypt.a libgdbm_compat.a'
++ libsfound=' /usr/lib/libgdbm.a /usr/lib/libcrypt.a /usr/lib/libgdbm_compat.a'
++ libspath=' /usr/lib /lib'
++ libswanted='  sfio socket bind inet nsl nm ndbm gdbm dbm db malloc dl dld ld sun crypt sec util cposix posix ucb bsd BSD   gdbm_compat'
++ libswanted_uselargefiles=
++ line=
++ lint=
++ lkflags=
++ ln=ln
++ lns='/bin/ln.exe -s'
++ localtime_r_proto=0
++ locincpth=
++ loclibpth='/usr/local/lib /opt/local/lib /usr/gnu/lib /opt/gnu/lib /usr/GNU/lib /opt/GNU/lib'
++ longdblsize=12
++ longlongsize=8
++ longsize=4
++ lp=
++ lpr=
++ ls=ls
++ lseeksize=4
++ lseektype=off_t
++ mail=
++ mailx=
++ make=make
++ make_set_make='#'
++ mallocobj=malloc.o
++ mallocsrc=malloc.c
++ malloctype='void *'
++ man1dir=/usr/share/man/man1
++ man1direxp=/usr/share/man/man1
++ man1ext=1
++ man3dir=/usr/share/man/man3
++ man3direxp=/usr/share/man/man3
++ man3ext=3pm
++ mips_type=
++ mistrustnm=
++ mkdir=mkdir
++ mmaptype=caddr_t
++ modetype=mode_t
++ more=more
++ multiarch=undef
++ mv=
++ myarchname=i686-msys
++ mydomain=.nonet
++ myhostname=kheldar
++ myuname='msys_nt-6.0 kheldar 1.0.17(0.4832) 2011-04-24 23:39 i686 msys '
++ n=-n
++ need_va_copy=undef
++ netdb_hlen_type=int
++ netdb_host_type='const char *'
++ netdb_name_type='const char *'
++ netdb_net_type=long
++ nm=nm
++ nm_opt=-p
++ nm_so_opt=
++ nonxs_ext=Errno
++ nroff=nroff
++ nvEUformat='"E"'
++ nvFUformat='"F"'
++ nvGUformat='"G"'
++ nv_preserves_uv_bits=53
++ nveformat='"e"'
++ nvfformat='"f"'
++ nvgformat='"g"'
++ nvsize=8
++ nvtype=double
++ o_nonblock=O_NONBLOCK
++ obj_ext=.o
++ old_pthread_create_joinable=
++ optimize='-O3 -fno-unit-at-a-time -s -mtune=pentium'
++ orderlib=false
++ osname=msys
++ osvers='1.0.17(0.4832)'
++ otherlibdirs=' '
++ package=perl5
++ pager=/bin/less
++ passcat=
++ patchlevel=8
++ path_sep=:
++ perl5=/usr/bin/perl
++ perl=
++ perl_patchlevel=
++ perladmin=mingw-dvlpr@lists.sourceforge.net
++ perllibs='-lcrypt -lgdbm_compat'
++ perlpath=/usr/bin/perl
++ pg=pg
++ phostname=hostname
++ pidtype=pid_t
++ plibpth=/usr/lib
++ pmake=
++ pr=
++ prefix=/usr
++ prefixexp=/usr
++ privlib=/usr/lib/perl5/5.8
++ privlibexp=/usr/lib/perl5/5.8
++ procselfexe=
++ prototype=define
++ ptrsize=4
++ quadkind=3
++ quadtype='long long'
++ randbits=48
++ randfunc=drand48
++ random_r_proto=0
++ randseedtype=long
++ ranlib=:
++ rd_nodata=-1
++ readdir64_r_proto=0
++ readdir_r_proto=0
++ revision=5
++ rm=rm
++ rmail=
++ run=
++ runnm=true
++ sPRIEUldbl='"LE"'
++ sPRIFUldbl='"LF"'
++ sPRIGUldbl='"LG"'
++ sPRIXU64='"llX"'
++ sPRId64='"lld"'
++ sPRIeldbl='"Le"'
++ sPRIfldbl='"Lf"'
++ sPRIgldbl='"Lg"'
++ sPRIi64='"lli"'
++ sPRIo64='"llo"'
++ sPRIu64='"llu"'
++ sPRIx64='"llx"'
++ sSCNfldbl='"Lf"'
++ sched_yield='sched_yield()'
++ scriptdir=/usr/bin
++ scriptdirexp=/usr/bin
++ sed=sed
++ seedfunc=srand48
++ selectminbits=32
++ selecttype='fd_set *'
++ sendmail=
++ setgrent_r_proto=0
++ sethostent_r_proto=0
++ setlocale_r_proto=0
++ setnetent_r_proto=0
++ setprotoent_r_proto=0
++ setpwent_r_proto=0
++ setservent_r_proto=0
++ sh=/bin/sh
++ shar=
++ sharpbang='#!'
++ shmattype=
++ shortsize=2
++ shrpenv='env LD_RUN_PATH=/usr/lib/perl5/5.8/msys/CORE'
++ shsharp=true
++ sig_count=32
++ sig_name='ZERO HUP INT QUIT ILL TRAP ABRT EMT FPE KILL BUS SEGV SYS PIPE ALRM TERM URG STOP TSTP CONT CHLD TTIN TTOU IO XCPU XFSZ VTALRM PROF WINCH LOST USR1 USR2 CLD POLL '
++ sig_name_init='"ZERO", "HUP", "INT", "QUIT", "ILL", "TRAP", "ABRT", "EMT", "FPE", "KILL", "BUS", "SEGV", "SYS", "PIPE", "ALRM", "TERM", "URG", "STOP", "TSTP", "CONT", "CHLD", "TTIN", "TTOU", "IO", "XCPU", "XFSZ", "VTALRM", "PROF", "WINCH", "LOST", "USR1", "USR2", "CLD", "POLL", 0'
++ sig_num='0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 20 23 '
++ sig_num_init='0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 20, 23, 0'
++ sig_size=34
++ signal_t=void
++ sitearch=/usr/lib/perl5/site_perl/5.8/msys
++ sitearchexp=/usr/lib/perl5/site_perl/5.8/msys
++ sitebin=/usr/bin
++ sitebinexp=/usr/bin
++ sitehtml1dir=
++ sitehtml1direxp=
++ sitehtml3dir=
++ sitehtml3direxp=
++ sitelib=/usr/lib/perl5/site_perl/5.8
++ sitelib_stem=/usr/lib/perl5/site_perl/5.8
++ sitelibexp=/usr/lib/perl5/site_perl/5.8
++ siteman1dir=/usr/share/man/man1
++ siteman1direxp=/usr/share/man/man1
++ siteman3dir=/usr/share/man/man3
++ siteman3direxp=/usr/share/man/man3
++ siteprefix=/usr
++ siteprefixexp=/usr
++ sitescript=/usr/bin
++ sitescriptexp=/usr/bin
++ sizesize=4
++ sizetype=size_t
++ sleep=
++ smail=
++ so=dll
++ sockethdr=
++ socketlib=
++ socksizetype=socklen_t
++ sort=sort
++ spackage=Perl5
++ spitshell=cat
++ srand48_r_proto=0
++ srandom_r_proto=0
++ src=.
++ ssizetype=ssize_t
++ startperl='#!/usr/bin/perl'
++ startsh='#!/bin/sh'
++ static_ext=' Win32CORE'
++ stdchar=char
++ stdio_base='((fp)->_ub._base ? (fp)->_ub._base : (fp)->_bf._base)'
++ stdio_bufsiz='((fp)->_ub._base ? (fp)->_ub._size : (fp)->_bf._size)'
++ stdio_cnt='((fp)->_r)'
++ stdio_filbuf=
++ stdio_ptr='((fp)->_p)'
++ stdio_stream_array=
++ strerror_r_proto=0
++ strings=/usr/include/string.h
++ submit=
++ subversion=8
++ sysman=/usr/share/man/man1
++ tail=
++ tar=
++ targetarch=
++ tbl=
++ tee=
++ test=test
++ timeincl='/usr/include/sys/time.h '
++ timetype=time_t
++ tmpnam_r_proto=0
++ to=:
++ touch=touch
++ tr=tr
++ trnl='\n'
++ troff=
++ ttyname_r_proto=0
++ u16size=2
++ u16type='unsigned short'
++ u32size=4
++ u32type='unsigned long'
++ u64size=8
++ u64type='unsigned long long'
++ u8size=1
++ u8type='unsigned char'
++ uidformat='"hu"'
++ uidsign=1
++ uidsize=2
++ uidtype=uid_t
++ uname=uname
++ uniq=uniq
++ uquadtype='unsigned long long'
++ use5005threads=undef
++ use64bitall=undef
++ use64bitint=define
++ usecrosscompile=undef
++ usedl=define
++ usefaststdio=define
++ useithreads=undef
++ uselargefiles=define
++ uselongdouble=undef
++ usemallocwrap=undef
++ usemorebits=undef
++ usemultiplicity=undef
++ usemymalloc=y
++ usenm=true
++ useopcode=true
++ useperlio=define
++ useposix=true
++ usereentrant=undef
++ usesfio=false
++ useshrplib=true
++ usesitecustomize=define
++ usesocks=undef
++ usethreads=undef
++ usevendorprefix=define
++ usevfork=false
++ usrinc=/usr/include
++ uuname=
++ uvXUformat='"llX"'
++ uvoformat='"llo"'
++ uvsize=8
++ uvtype='unsigned long long'
++ uvuformat='"llu"'
++ uvxformat='"llx"'
++ vendorarch=/usr/lib/perl5/vendor_perl/5.8/msys
++ vendorarchexp=/usr/lib/perl5/vendor_perl/5.8/msys
++ vendorbin=/usr/bin
++ vendorbinexp=/usr/bin
++ vendorhtml1dir=' '
++ vendorhtml1direxp=
++ vendorhtml3dir=' '
++ vendorhtml3direxp=
++ vendorlib=/usr/lib/perl5/vendor_perl/5.8
++ vendorlib_stem=/usr/lib/perl5/vendor_perl/5.8
++ vendorlibexp=/usr/lib/perl5/vendor_perl/5.8
++ vendorman1dir=/usr/share/man/man1
++ vendorman1direxp=/usr/share/man/man1
++ vendorman3dir=/usr/share/man/man3
++ vendorman3direxp=/usr/share/man/man3
++ vendorprefix=/usr
++ vendorprefixexp=/usr
++ vendorscript=/usr/bin
++ vendorscriptexp=/usr/bin
++ version=5.8.8
++ version_patchlevel_string='version 8 subversion 8'
++ versiononly=undef
++ vi=
++ voidflags=15
++ xlibpth='/usr/lib/386 /lib/386'
++ yacc=yacc
++ yaccflags=
++ zcat=
++ zip=zip
++ config_arg0=./Configure
++ config_args='-de -Duse64bitint -Dusesitecustomize'
++ config_argc=3
++ config_arg1=-de
++ config_arg2=-Duse64bitint
++ config_arg3=-Dusesitecustomize
++ PERL_REVISION=5
++ PERL_VERSION=8
++ PERL_SUBVERSION=8
++ PERL_API_REVISION=5
++ PERL_API_VERSION=8
++ PERL_API_SUBVERSION=0
++ PERL_PATCHLEVEL=
++ PERL_CONFIG_SH=true
++ bincompat5005=undef
+ echo ' '
 
+ exec
++ pwd
+ pwd=/usr/src/perl/perl-5.8.8
+ . ./UU/extract
++ PERL_CONFIG_SH=true
++ echo 'Doing variable substitutions on .SH files...'
Doing variable substitutions on .SH files...
++ test -f MANIFEST
+++ awk '{print $1}'
+++ grep '\.SH$'
++ set x cflags.SH config_h.SH makeaperl.SH makedepend.SH makedir.SH Makefile.SH myconfig.SH pod/Makefile.SH Policy_sh.SH writemain.SH x2p/cflags.SH x2p/Makefile.SH
++ shift
++ case $# in
++ test '!' -f ./cflags.SH
++ mkdir_p='
name=$1;
create="";
while test $name; do
	if test ! -d "$name"; then
		create="$name $create";
		name=`echo $name | sed -e "s|^[^/]*$||"`;
		name=`echo $name | sed -e "s|\(.*\)/.*|\1|"`;
	else
		name="";
	fi;
done;
for file in $create; do
	mkdir $file;
done
'
++ for file in '$*'
++ case "$src" in
++ case "$file" in
++ . ./cflags.SH
+++ case $PERL_CONFIG_SH in
+++ : This forces SH files to create target in same directory as SH file.
+++ : This is so that make depend always knows where to find SH derivatives.
+++ case "$0" in
++++ expr X./Configure : 'X\(.*\)/'
+++ cd .
+++ echo 'Extracting cflags (with variable substitutions)'
Extracting cflags (with variable substitutions)
+++ : This section of the file will have variable substitutions done on it.
+++ : Move anything that needs config subs from '!NO!SUBS!' section to '!GROK!THIS!.'
+++ : Protect any dollar signs and backticks that you do not want interpreted
+++ : by putting a backslash in front. You may delete these comments.
+++ rm -f cflags
+++ cat
+++ : In the following dollars and backticks do not need the extra backslash.
+++ cat
+++ chmod 755 cflags
+++ : cflags
++ for file in '$*'
++ case "$src" in
++ case "$file" in
++ . ./config_h.SH
+++ case "$CONFIG_SH" in
+++ CONFIG_SH=config.sh
+++ case "$CONFIG_H" in
+++ CONFIG_H=config.h
+++ case $PERL_CONFIG_SH in
+++ case "$0" in
++++ expr X./Configure : 'X\(.*\)/'
+++ cd .
+++ echo 'Extracting config.h (with variable substitutions)'
Extracting config.h (with variable substitutions)
+++ sed -e 's!^#undef\(.*/\)\*!/\*#define\1 \*!' -e 's!^#un-def!#undef!'
++ for file in '$*'
++ case "$src" in
++ case "$file" in
++ . ./makeaperl.SH
+++ case $PERL_CONFIG_SH in
+++ : This forces SH files to create target in same directory as SH file.
+++ : This is so that make depend always knows where to find SH derivatives.
+++ case "$0" in
++++ expr X./Configure : 'X\(.*\)/'
+++ cd .
+++ echo 'Extracting makeaperl (with variable substitutions)'
Extracting makeaperl (with variable substitutions)
+++ rm -f makeaperl
+++ cat
+++ cat
+++ chmod 755 makeaperl
+++ : makeaperl
++ for file in '$*'
++ case "$src" in
++ case "$file" in
++ . ./makedepend.SH
+++ case $PERL_CONFIG_SH in
+++ : This forces SH files to create target in same directory as SH file.
+++ : This is so that make depend always knows where to find SH derivatives.
+++ case "$0" in
++++ expr X./Configure : 'X\(.*\)/'
+++ cd .
+++ echo 'Extracting makedepend (with variable substitutions)'
Extracting makedepend (with variable substitutions)
+++ rm -f makedepend
+++ cat
+++ cat
+++ : makedepend
+++ chmod +x makedepend
+++ case `pwd` in
++++ pwd
++ for file in '$*'
++ case "$src" in
++ case "$file" in
++ . ./makedir.SH
+++ case $PERL_CONFIG_SH in
+++ case "$0" in
++++ expr X./Configure : 'X\(.*\)/'
+++ cd .
+++ echo 'Extracting makedir (with variable substitutions)'
Extracting makedir (with variable substitutions)
+++ rm -f makedir
+++ cat
+++ : makedir
+++ chmod +x makedir
++ for file in '$*'
++ case "$src" in
++ case "$file" in
++ . ./Makefile.SH
+++ case $PERL_CONFIG_SH in
+++ : This forces SH files to create target in same directory as SH file.
+++ : This is so that make depend always knows where to find SH derivatives.
+++ case "$0" in
++++ expr X./Configure : 'X\(.*\)/'
+++ cd .
+++ case "$d_dosuid" in
+++ suidperl=
+++ linklibperl='$(LIBPERL)'
+++ shrpldflags='$(LDDLFLAGS)'
+++ ldlibpth=
+++ DPERL_EXTERNAL_GLOB=-DPERL_EXTERNAL_GLOB
+++ case "$useshrplib" in
+++ case "$LD_LIBRARY_PATH" in
++++ pwd
+++ ldlibpth=LD_LIBRARY_PATH=/usr/src/perl/perl-5.8.8
+++ pldlflags=' '
+++ static_target=static_pic
+++ case "${osname}${osvers}" in
+++ linklibperl=-lperl
+++ case "$ldlibpthname" in
+++ case "$osname" in
++++ pwd
+++ eval 'ldlibpth="PATH=/usr/src/perl/perl-5.8.8:$PATH"'
++++ ldlibpth=PATH=/usr/src/perl/perl-5.8.8:.:/usr/src/perl:/bin:/mingw/bin:/C/Windows/system32:/C/Windows:/usr/bin:/etc:/usr/lib:/lib:/sbin:/usr/sbin
++++ echo PATH=/usr/src/perl/perl-5.8.8:.:/usr/src/perl:/bin:/mingw/bin:/C/Windows/system32:/C/Windows:/usr/bin:/etc:/usr/lib:/lib:/sbin:/usr/sbin
++++ sed 's/:*$//'
+++ ldlibpth=PATH=/usr/src/perl/perl-5.8.8:.:/usr/src/perl:/bin:/mingw/bin:/C/Windows/system32:/C/Windows:/usr/bin:/etc:/usr/lib:/lib:/sbin:/usr/sbin
+++ case "$ldlibpth" in
+++ case "$osname" in
++++ echo 'PATH=/usr/src/perl/perl-5.8.8:.:/usr/src/perl:/bin:/mingw/bin:/C/Windows/system32:/C/Windows:/usr/bin:/etc:/usr/lib:/lib:/sbin:/usr/sbin"'
++++ sed 's/=/="/'
+++ ldlibpth='PATH="/usr/src/perl/perl-5.8.8:.:/usr/src/perl:/bin:/mingw/bin:/C/Windows/system32:/C/Windows:/usr/bin:/etc:/usr/lib:/lib:/sbin:/usr/sbin"'
+++ : Prepare dependency lists for Makefile.
+++ dynamic_list=' '
+++ for f in '$dynamic_ext'
+++ : the dependency named here will never exist
++++ echo B
++++ sed 's/.*\///'
+++ base=B
+++ dynamic_list='  lib/auto/B/B.dll'
+++ for f in '$dynamic_ext'
+++ : the dependency named here will never exist
++++ echo ByteLoader
++++ sed 's/.*\///'
+++ base=ByteLoader
+++ dynamic_list='  lib/auto/B/B.dll lib/auto/ByteLoader/ByteLoader.dll'
+++ for f in '$dynamic_ext'
+++ : the dependency named here will never exist
++++ echo Cwd
++++ sed 's/.*\///'
+++ base=Cwd
+++ dynamic_list='  lib/auto/B/B.dll lib/auto/ByteLoader/ByteLoader.dll lib/auto/Cwd/Cwd.dll'
+++ for f in '$dynamic_ext'
+++ : the dependency named here will never exist
++++ echo Data/Dumper
++++ sed 's/.*\///'
+++ base=Dumper
+++ dynamic_list='  lib/auto/B/B.dll lib/auto/ByteLoader/ByteLoader.dll lib/auto/Cwd/Cwd.dll lib/auto/Data/Dumper/Dumper.dll'
+++ for f in '$dynamic_ext'
+++ : the dependency named here will never exist
++++ echo Devel/DProf
++++ sed 's/.*\///'
+++ base=DProf
+++ dynamic_list='  lib/auto/B/B.dll lib/auto/ByteLoader/ByteLoader.dll lib/auto/Cwd/Cwd.dll lib/auto/Data/Dumper/Dumper.dll lib/auto/Devel/DProf/DProf.dll'
+++ for f in '$dynamic_ext'
+++ : the dependency named here will never exist
++++ echo Devel/PPPort
++++ sed 's/.*\///'
+++ base=PPPort
+++ dynamic_list='  lib/auto/B/B.dll lib/auto/ByteLoader/ByteLoader.dll lib/auto/Cwd/Cwd.dll lib/auto/Data/Dumper/Dumper.dll lib/auto/Devel/DProf/DProf.dll lib/auto/Devel/PPPort/PPPort.dll'
+++ for f in '$dynamic_ext'
+++ : the dependency named here will never exist
++++ echo Devel/Peek
++++ sed 's/.*\///'
+++ base=Peek
+++ dynamic_list='  lib/auto/B/B.dll lib/auto/ByteLoader/ByteLoader.dll lib/auto/Cwd/Cwd.dll lib/auto/Data/Dumper/Dumper.dll lib/auto/Devel/DProf/DProf.dll lib/auto/Devel/PPPort/PPPort.dll lib/auto/Devel/Peek/Peek.dll'
+++ for f in '$dynamic_ext'
+++ : the dependency named here will never exist
++++ echo Digest/MD5
++++ sed 's/.*\///'
+++ base=MD5
+++ dynamic_list='  lib/auto/B/B.dll lib/auto/ByteLoader/ByteLoader.dll lib/auto/Cwd/Cwd.dll lib/auto/Data/Dumper/Dumper.dll lib/auto/Devel/DProf/DProf.dll lib/auto/Devel/PPPort/PPPort.dll lib/auto/Devel/Peek/Peek.dll lib/auto/Digest/MD5/MD5.dll'
+++ for f in '$dynamic_ext'
+++ : the dependency named here will never exist
++++ echo Encode
++++ sed 's/.*\///'
+++ base=Encode
+++ dynamic_list='  lib/auto/B/B.dll lib/auto/ByteLoader/ByteLoader.dll lib/auto/Cwd/Cwd.dll lib/auto/Data/Dumper/Dumper.dll lib/auto/Devel/DProf/DProf.dll lib/auto/Devel/PPPort/PPPort.dll lib/auto/Devel/Peek/Peek.dll lib/auto/Digest/MD5/MD5.dll lib/auto/Encode/Encode.dll'
+++ for f in '$dynamic_ext'
+++ : the dependency named here will never exist
++++ echo Fcntl
++++ sed 's/.*\///'
+++ base=Fcntl
+++ dynamic_list='  lib/auto/B/B.dll lib/auto/ByteLoader/ByteLoader.dll lib/auto/Cwd/Cwd.dll lib/auto/Data/Dumper/Dumper.dll lib/auto/Devel/DProf/DProf.dll lib/auto/Devel/PPPort/PPPort.dll lib/auto/Devel/Peek/Peek.dll lib/auto/Digest/MD5/MD5.dll lib/auto/Encode/Encode.dll lib/auto/Fcntl/Fcntl.dll'
+++ for f in '$dynamic_ext'
+++ : the dependency named here will never exist
++++ echo File/Glob
++++ sed 's/.*\///'
+++ base=Glob
+++ dynamic_list='  lib/auto/B/B.dll lib/auto/ByteLoader/ByteLoader.dll lib/auto/Cwd/Cwd.dll lib/auto/Data/Dumper/Dumper.dll lib/auto/Devel/DProf/DProf.dll lib/auto/Devel/PPPort/PPPort.dll lib/auto/Devel/Peek/Peek.dll lib/auto/Digest/MD5/MD5.dll lib/auto/Encode/Encode.dll lib/auto/Fcntl/Fcntl.dll lib/auto/File/Glob/Glob.dll'
+++ for f in '$dynamic_ext'
+++ : the dependency named here will never exist
++++ echo Filter/Util/Call
++++ sed 's/.*\///'
+++ base=Call
+++ dynamic_list='  lib/auto/B/B.dll lib/auto/ByteLoader/ByteLoader.dll lib/auto/Cwd/Cwd.dll lib/auto/Data/Dumper/Dumper.dll lib/auto/Devel/DProf/DProf.dll lib/auto/Devel/PPPort/PPPort.dll lib/auto/Devel/Peek/Peek.dll lib/auto/Digest/MD5/MD5.dll lib/auto/Encode/Encode.dll lib/auto/Fcntl/Fcntl.dll lib/auto/File/Glob/Glob.dll lib/auto/Filter/Util/Call/Call.dll'
+++ for f in '$dynamic_ext'
+++ : the dependency named here will never exist
++++ echo GDBM_File
++++ sed 's/.*\///'
+++ base=GDBM_File
+++ dynamic_list='  lib/auto/B/B.dll lib/auto/ByteLoader/ByteLoader.dll lib/auto/Cwd/Cwd.dll lib/auto/Data/Dumper/Dumper.dll lib/auto/Devel/DProf/DProf.dll lib/auto/Devel/PPPort/PPPort.dll lib/auto/Devel/Peek/Peek.dll lib/auto/Digest/MD5/MD5.dll lib/auto/Encode/Encode.dll lib/auto/Fcntl/Fcntl.dll lib/auto/File/Glob/Glob.dll lib/auto/Filter/Util/Call/Call.dll lib/auto/GDBM_File/GDBM_File.dll'
+++ for f in '$dynamic_ext'
+++ : the dependency named here will never exist
++++ echo IO
++++ sed 's/.*\///'
+++ base=IO
+++ dynamic_list='  lib/auto/B/B.dll lib/auto/ByteLoader/ByteLoader.dll lib/auto/Cwd/Cwd.dll lib/auto/Data/Dumper/Dumper.dll lib/auto/Devel/DProf/DProf.dll lib/auto/Devel/PPPort/PPPort.dll lib/auto/Devel/Peek/Peek.dll lib/auto/Digest/MD5/MD5.dll lib/auto/Encode/Encode.dll lib/auto/Fcntl/Fcntl.dll lib/auto/File/Glob/Glob.dll lib/auto/Filter/Util/Call/Call.dll lib/auto/GDBM_File/GDBM_File.dll lib/auto/IO/IO.dll'
+++ for f in '$dynamic_ext'
+++ : the dependency named here will never exist
++++ echo List/Util
++++ sed 's/.*\///'
+++ base=Util
+++ dynamic_list='  lib/auto/B/B.dll lib/auto/ByteLoader/ByteLoader.dll lib/auto/Cwd/Cwd.dll lib/auto/Data/Dumper/Dumper.dll lib/auto/Devel/DProf/DProf.dll lib/auto/Devel/PPPort/PPPort.dll lib/auto/Devel/Peek/Peek.dll lib/auto/Digest/MD5/MD5.dll lib/auto/Encode/Encode.dll lib/auto/Fcntl/Fcntl.dll lib/auto/File/Glob/Glob.dll lib/auto/Filter/Util/Call/Call.dll lib/auto/GDBM_File/GDBM_File.dll lib/auto/IO/IO.dll lib/auto/List/Util/Util.dll'
+++ for f in '$dynamic_ext'
+++ : the dependency named here will never exist
++++ echo MIME/Base64
++++ sed 's/.*\///'
+++ base=Base64
+++ dynamic_list='  lib/auto/B/B.dll lib/auto/ByteLoader/ByteLoader.dll lib/auto/Cwd/Cwd.dll lib/auto/Data/Dumper/Dumper.dll lib/auto/Devel/DProf/DProf.dll lib/auto/Devel/PPPort/PPPort.dll lib/auto/Devel/Peek/Peek.dll lib/auto/Digest/MD5/MD5.dll lib/auto/Encode/Encode.dll lib/auto/Fcntl/Fcntl.dll lib/auto/File/Glob/Glob.dll lib/auto/Filter/Util/Call/Call.dll lib/auto/GDBM_File/GDBM_File.dll lib/auto/IO/IO.dll lib/auto/List/Util/Util.dll lib/auto/MIME/Base64/Base64.dll'
+++ for f in '$dynamic_ext'
+++ : the dependency named here will never exist
++++ echo NDBM_File
++++ sed 's/.*\///'
+++ base=NDBM_File
+++ dynamic_list='  lib/auto/B/B.dll lib/auto/ByteLoader/ByteLoader.dll lib/auto/Cwd/Cwd.dll lib/auto/Data/Dumper/Dumper.dll lib/auto/Devel/DProf/DProf.dll lib/auto/Devel/PPPort/PPPort.dll lib/auto/Devel/Peek/Peek.dll lib/auto/Digest/MD5/MD5.dll lib/auto/Encode/Encode.dll lib/auto/Fcntl/Fcntl.dll lib/auto/File/Glob/Glob.dll lib/auto/Filter/Util/Call/Call.dll lib/auto/GDBM_File/GDBM_File.dll lib/auto/IO/IO.dll lib/auto/List/Util/Util.dll lib/auto/MIME/Base64/Base64.dll lib/auto/NDBM_File/NDBM_File.dll'
+++ for f in '$dynamic_ext'
+++ : the dependency named here will never exist
++++ echo ODBM_File
++++ sed 's/.*\///'
+++ base=ODBM_File
+++ dynamic_list='  lib/auto/B/B.dll lib/auto/ByteLoader/ByteLoader.dll lib/auto/Cwd/Cwd.dll lib/auto/Data/Dumper/Dumper.dll lib/auto/Devel/DProf/DProf.dll lib/auto/Devel/PPPort/PPPort.dll lib/auto/Devel/Peek/Peek.dll lib/auto/Digest/MD5/MD5.dll lib/auto/Encode/Encode.dll lib/auto/Fcntl/Fcntl.dll lib/auto/File/Glob/Glob.dll lib/auto/Filter/Util/Call/Call.dll lib/auto/GDBM_File/GDBM_File.dll lib/auto/IO/IO.dll lib/auto/List/Util/Util.dll lib/auto/MIME/Base64/Base64.dll lib/auto/NDBM_File/NDBM_File.dll lib/auto/ODBM_File/ODBM_File.dll'
+++ for f in '$dynamic_ext'
+++ : the dependency named here will never exist
++++ echo Opcode
++++ sed 's/.*\///'
+++ base=Opcode
+++ dynamic_list='  lib/auto/B/B.dll lib/auto/ByteLoader/ByteLoader.dll lib/auto/Cwd/Cwd.dll lib/auto/Data/Dumper/Dumper.dll lib/auto/Devel/DProf/DProf.dll lib/auto/Devel/PPPort/PPPort.dll lib/auto/Devel/Peek/Peek.dll lib/auto/Digest/MD5/MD5.dll lib/auto/Encode/Encode.dll lib/auto/Fcntl/Fcntl.dll lib/auto/File/Glob/Glob.dll lib/auto/Filter/Util/Call/Call.dll lib/auto/GDBM_File/GDBM_File.dll lib/auto/IO/IO.dll lib/auto/List/Util/Util.dll lib/auto/MIME/Base64/Base64.dll lib/auto/NDBM_File/NDBM_File.dll lib/auto/ODBM_File/ODBM_File.dll lib/auto/Opcode/Opcode.dll'
+++ for f in '$dynamic_ext'
+++ : the dependency named here will never exist
++++ echo POSIX
++++ sed 's/.*\///'
+++ base=POSIX
+++ dynamic_list='  lib/auto/B/B.dll lib/auto/ByteLoader/ByteLoader.dll lib/auto/Cwd/Cwd.dll lib/auto/Data/Dumper/Dumper.dll lib/auto/Devel/DProf/DProf.dll lib/auto/Devel/PPPort/PPPort.dll lib/auto/Devel/Peek/Peek.dll lib/auto/Digest/MD5/MD5.dll lib/auto/Encode/Encode.dll lib/auto/Fcntl/Fcntl.dll lib/auto/File/Glob/Glob.dll lib/auto/Filter/Util/Call/Call.dll lib/auto/GDBM_File/GDBM_File.dll lib/auto/IO/IO.dll lib/auto/List/Util/Util.dll lib/auto/MIME/Base64/Base64.dll lib/auto/NDBM_File/NDBM_File.dll lib/auto/ODBM_File/ODBM_File.dll lib/auto/Opcode/Opcode.dll lib/auto/POSIX/POSIX.dll'
+++ for f in '$dynamic_ext'
+++ : the dependency named here will never exist
++++ echo PerlIO/encoding
++++ sed 's/.*\///'
+++ base=encoding
+++ dynamic_list='  lib/auto/B/B.dll lib/auto/ByteLoader/ByteLoader.dll lib/auto/Cwd/Cwd.dll lib/auto/Data/Dumper/Dumper.dll lib/auto/Devel/DProf/DProf.dll lib/auto/Devel/PPPort/PPPort.dll lib/auto/Devel/Peek/Peek.dll lib/auto/Digest/MD5/MD5.dll lib/auto/Encode/Encode.dll lib/auto/Fcntl/Fcntl.dll lib/auto/File/Glob/Glob.dll lib/auto/Filter/Util/Call/Call.dll lib/auto/GDBM_File/GDBM_File.dll lib/auto/IO/IO.dll lib/auto/List/Util/Util.dll lib/auto/MIME/Base64/Base64.dll lib/auto/NDBM_File/NDBM_File.dll lib/auto/ODBM_File/ODBM_File.dll lib/auto/Opcode/Opcode.dll lib/auto/POSIX/POSIX.dll lib/auto/PerlIO/encoding/encoding.dll'
+++ for f in '$dynamic_ext'
+++ : the dependency named here will never exist
++++ echo PerlIO/scalar
++++ sed 's/.*\///'
+++ base=scalar
+++ dynamic_list='  lib/auto/B/B.dll lib/auto/ByteLoader/ByteLoader.dll lib/auto/Cwd/Cwd.dll lib/auto/Data/Dumper/Dumper.dll lib/auto/Devel/DProf/DProf.dll lib/auto/Devel/PPPort/PPPort.dll lib/auto/Devel/Peek/Peek.dll lib/auto/Digest/MD5/MD5.dll lib/auto/Encode/Encode.dll lib/auto/Fcntl/Fcntl.dll lib/auto/File/Glob/Glob.dll lib/auto/Filter/Util/Call/Call.dll lib/auto/GDBM_File/GDBM_File.dll lib/auto/IO/IO.dll lib/auto/List/Util/Util.dll lib/auto/MIME/Base64/Base64.dll lib/auto/NDBM_File/NDBM_File.dll lib/auto/ODBM_File/ODBM_File.dll lib/auto/Opcode/Opcode.dll lib/auto/POSIX/POSIX.dll lib/auto/PerlIO/encoding/encoding.dll lib/auto/PerlIO/scalar/scalar.dll'
+++ for f in '$dynamic_ext'
+++ : the dependency named here will never exist
++++ echo PerlIO/via
++++ sed 's/.*\///'
+++ base=via
+++ dynamic_list='  lib/auto/B/B.dll lib/auto/ByteLoader/ByteLoader.dll lib/auto/Cwd/Cwd.dll lib/auto/Data/Dumper/Dumper.dll lib/auto/Devel/DProf/DProf.dll lib/auto/Devel/PPPort/PPPort.dll lib/auto/Devel/Peek/Peek.dll lib/auto/Digest/MD5/MD5.dll lib/auto/Encode/Encode.dll lib/auto/Fcntl/Fcntl.dll lib/auto/File/Glob/Glob.dll lib/auto/Filter/Util/Call/Call.dll lib/auto/GDBM_File/GDBM_File.dll lib/auto/IO/IO.dll lib/auto/List/Util/Util.dll lib/auto/MIME/Base64/Base64.dll lib/auto/NDBM_File/NDBM_File.dll lib/auto/ODBM_File/ODBM_File.dll lib/auto/Opcode/Opcode.dll lib/auto/POSIX/POSIX.dll lib/auto/PerlIO/encoding/encoding.dll lib/auto/PerlIO/scalar/scalar.dll lib/auto/PerlIO/via/via.dll'
+++ for f in '$dynamic_ext'
+++ : the dependency named here will never exist
++++ echo SDBM_File
++++ sed 's/.*\///'
+++ base=SDBM_File
+++ dynamic_list='  lib/auto/B/B.dll lib/auto/ByteLoader/ByteLoader.dll lib/auto/Cwd/Cwd.dll lib/auto/Data/Dumper/Dumper.dll lib/auto/Devel/DProf/DProf.dll lib/auto/Devel/PPPort/PPPort.dll lib/auto/Devel/Peek/Peek.dll lib/auto/Digest/MD5/MD5.dll lib/auto/Encode/Encode.dll lib/auto/Fcntl/Fcntl.dll lib/auto/File/Glob/Glob.dll lib/auto/Filter/Util/Call/Call.dll lib/auto/GDBM_File/GDBM_File.dll lib/auto/IO/IO.dll lib/auto/List/Util/Util.dll lib/auto/MIME/Base64/Base64.dll lib/auto/NDBM_File/NDBM_File.dll lib/auto/ODBM_File/ODBM_File.dll lib/auto/Opcode/Opcode.dll lib/auto/POSIX/POSIX.dll lib/auto/PerlIO/encoding/encoding.dll lib/auto/PerlIO/scalar/scalar.dll lib/auto/PerlIO/via/via.dll lib/auto/SDBM_File/SDBM_File.dll'
+++ for f in '$dynamic_ext'
+++ : the dependency named here will never exist
++++ echo Socket
++++ sed 's/.*\///'
+++ base=Socket
+++ dynamic_list='  lib/auto/B/B.dll lib/auto/ByteLoader/ByteLoader.dll lib/auto/Cwd/Cwd.dll lib/auto/Data/Dumper/Dumper.dll lib/auto/Devel/DProf/DProf.dll lib/auto/Devel/PPPort/PPPort.dll lib/auto/Devel/Peek/Peek.dll lib/auto/Digest/MD5/MD5.dll lib/auto/Encode/Encode.dll lib/auto/Fcntl/Fcntl.dll lib/auto/File/Glob/Glob.dll lib/auto/Filter/Util/Call/Call.dll lib/auto/GDBM_File/GDBM_File.dll lib/auto/IO/IO.dll lib/auto/List/Util/Util.dll lib/auto/MIME/Base64/Base64.dll lib/auto/NDBM_File/NDBM_File.dll lib/auto/ODBM_File/ODBM_File.dll lib/auto/Opcode/Opcode.dll lib/auto/POSIX/POSIX.dll lib/auto/PerlIO/encoding/encoding.dll lib/auto/PerlIO/scalar/scalar.dll lib/auto/PerlIO/via/via.dll lib/auto/SDBM_File/SDBM_File.dll lib/auto/Socket/Socket.dll'
+++ for f in '$dynamic_ext'
+++ : the dependency named here will never exist
++++ echo Storable
++++ sed 's/.*\///'
+++ base=Storable
+++ dynamic_list='  lib/auto/B/B.dll lib/auto/ByteLoader/ByteLoader.dll lib/auto/Cwd/Cwd.dll lib/auto/Data/Dumper/Dumper.dll lib/auto/Devel/DProf/DProf.dll lib/auto/Devel/PPPort/PPPort.dll lib/auto/Devel/Peek/Peek.dll lib/auto/Digest/MD5/MD5.dll lib/auto/Encode/Encode.dll lib/auto/Fcntl/Fcntl.dll lib/auto/File/Glob/Glob.dll lib/auto/Filter/Util/Call/Call.dll lib/auto/GDBM_File/GDBM_File.dll lib/auto/IO/IO.dll lib/auto/List/Util/Util.dll lib/auto/MIME/Base64/Base64.dll lib/auto/NDBM_File/NDBM_File.dll lib/auto/ODBM_File/ODBM_File.dll lib/auto/Opcode/Opcode.dll lib/auto/POSIX/POSIX.dll lib/auto/PerlIO/encoding/encoding.dll lib/auto/PerlIO/scalar/scalar.dll lib/auto/PerlIO/via/via.dll lib/auto/SDBM_File/SDBM_File.dll lib/auto/Socket/Socket.dll lib/auto/Storable/Storable.dll'
+++ for f in '$dynamic_ext'
+++ : the dependency named here will never exist
++++ echo Sys/Hostname
++++ sed 's/.*\///'
+++ base=Hostname
+++ dynamic_list='  lib/auto/B/B.dll lib/auto/ByteLoader/ByteLoader.dll lib/auto/Cwd/Cwd.dll lib/auto/Data/Dumper/Dumper.dll lib/auto/Devel/DProf/DProf.dll lib/auto/Devel/PPPort/PPPort.dll lib/auto/Devel/Peek/Peek.dll lib/auto/Digest/MD5/MD5.dll lib/auto/Encode/Encode.dll lib/auto/Fcntl/Fcntl.dll lib/auto/File/Glob/Glob.dll lib/auto/Filter/Util/Call/Call.dll lib/auto/GDBM_File/GDBM_File.dll lib/auto/IO/IO.dll lib/auto/List/Util/Util.dll lib/auto/MIME/Base64/Base64.dll lib/auto/NDBM_File/NDBM_File.dll lib/auto/ODBM_File/ODBM_File.dll lib/auto/Opcode/Opcode.dll lib/auto/POSIX/POSIX.dll lib/auto/PerlIO/encoding/encoding.dll lib/auto/PerlIO/scalar/scalar.dll lib/auto/PerlIO/via/via.dll lib/auto/SDBM_File/SDBM_File.dll lib/auto/Socket/Socket.dll lib/auto/Storable/Storable.dll lib/auto/Sys/Hostname/Hostname.dll'
+++ for f in '$dynamic_ext'
+++ : the dependency named here will never exist
++++ echo Sys/Syslog
++++ sed 's/.*\///'
+++ base=Syslog
+++ dynamic_list='  lib/auto/B/B.dll lib/auto/ByteLoader/ByteLoader.dll lib/auto/Cwd/Cwd.dll lib/auto/Data/Dumper/Dumper.dll lib/auto/Devel/DProf/DProf.dll lib/auto/Devel/PPPort/PPPort.dll lib/auto/Devel/Peek/Peek.dll lib/auto/Digest/MD5/MD5.dll lib/auto/Encode/Encode.dll lib/auto/Fcntl/Fcntl.dll lib/auto/File/Glob/Glob.dll lib/auto/Filter/Util/Call/Call.dll lib/auto/GDBM_File/GDBM_File.dll lib/auto/IO/IO.dll lib/auto/List/Util/Util.dll lib/auto/MIME/Base64/Base64.dll lib/auto/NDBM_File/NDBM_File.dll lib/auto/ODBM_File/ODBM_File.dll lib/auto/Opcode/Opcode.dll lib/auto/POSIX/POSIX.dll lib/auto/PerlIO/encoding/encoding.dll lib/auto/PerlIO/scalar/scalar.dll lib/auto/PerlIO/via/via.dll lib/auto/SDBM_File/SDBM_File.dll lib/auto/Socket/Socket.dll lib/auto/Storable/Storable.dll lib/auto/Sys/Hostname/Hostname.dll lib/auto/Sys/Syslog/Syslog.dll'
+++ for f in '$dynamic_ext'
+++ : the dependency named here will never exist
++++ echo Time/HiRes
++++ sed 's/.*\///'
+++ base=HiRes
+++ dynamic_list='  lib/auto/B/B.dll lib/auto/ByteLoader/ByteLoader.dll lib/auto/Cwd/Cwd.dll lib/auto/Data/Dumper/Dumper.dll lib/auto/Devel/DProf/DProf.dll lib/auto/Devel/PPPort/PPPort.dll lib/auto/Devel/Peek/Peek.dll lib/auto/Digest/MD5/MD5.dll lib/auto/Encode/Encode.dll lib/auto/Fcntl/Fcntl.dll lib/auto/File/Glob/Glob.dll lib/auto/Filter/Util/Call/Call.dll lib/auto/GDBM_File/GDBM_File.dll lib/auto/IO/IO.dll lib/auto/List/Util/Util.dll lib/auto/MIME/Base64/Base64.dll lib/auto/NDBM_File/NDBM_File.dll lib/auto/ODBM_File/ODBM_File.dll lib/auto/Opcode/Opcode.dll lib/auto/POSIX/POSIX.dll lib/auto/PerlIO/encoding/encoding.dll lib/auto/PerlIO/scalar/scalar.dll lib/auto/PerlIO/via/via.dll lib/auto/SDBM_File/SDBM_File.dll lib/auto/Socket/Socket.dll lib/auto/Storable/Storable.dll lib/auto/Sys/Hostname/Hostname.dll lib/auto/Sys/Syslog/Syslog.dll lib/auto/Time/HiRes/HiRes.dll'
+++ for f in '$dynamic_ext'
+++ : the dependency named here will never exist
++++ echo Unicode/Normalize
++++ sed 's/.*\///'
+++ base=Normalize
+++ dynamic_list='  lib/auto/B/B.dll lib/auto/ByteLoader/ByteLoader.dll lib/auto/Cwd/Cwd.dll lib/auto/Data/Dumper/Dumper.dll lib/auto/Devel/DProf/DProf.dll lib/auto/Devel/PPPort/PPPort.dll lib/auto/Devel/Peek/Peek.dll lib/auto/Digest/MD5/MD5.dll lib/auto/Encode/Encode.dll lib/auto/Fcntl/Fcntl.dll lib/auto/File/Glob/Glob.dll lib/auto/Filter/Util/Call/Call.dll lib/auto/GDBM_File/GDBM_File.dll lib/auto/IO/IO.dll lib/auto/List/Util/Util.dll lib/auto/MIME/Base64/Base64.dll lib/auto/NDBM_File/NDBM_File.dll lib/auto/ODBM_File/ODBM_File.dll lib/auto/Opcode/Opcode.dll lib/auto/POSIX/POSIX.dll lib/auto/PerlIO/encoding/encoding.dll lib/auto/PerlIO/scalar/scalar.dll lib/auto/PerlIO/via/via.dll lib/auto/SDBM_File/SDBM_File.dll lib/auto/Socket/Socket.dll lib/auto/Storable/Storable.dll lib/auto/Sys/Hostname/Hostname.dll lib/auto/Sys/Syslog/Syslog.dll lib/auto/Time/HiRes/HiRes.dll lib/auto/Unicode/Normalize/Normalize.dll'
+++ for f in '$dynamic_ext'
+++ : the dependency named here will never exist
++++ echo XS/APItest
++++ sed 's/.*\///'
+++ base=APItest
+++ dynamic_list='  lib/auto/B/B.dll lib/auto/ByteLoader/ByteLoader.dll lib/auto/Cwd/Cwd.dll lib/auto/Data/Dumper/Dumper.dll lib/auto/Devel/DProf/DProf.dll lib/auto/Devel/PPPort/PPPort.dll lib/auto/Devel/Peek/Peek.dll lib/auto/Digest/MD5/MD5.dll lib/auto/Encode/Encode.dll lib/auto/Fcntl/Fcntl.dll lib/auto/File/Glob/Glob.dll lib/auto/Filter/Util/Call/Call.dll lib/auto/GDBM_File/GDBM_File.dll lib/auto/IO/IO.dll lib/auto/List/Util/Util.dll lib/auto/MIME/Base64/Base64.dll lib/auto/NDBM_File/NDBM_File.dll lib/auto/ODBM_File/ODBM_File.dll lib/auto/Opcode/Opcode.dll lib/auto/POSIX/POSIX.dll lib/auto/PerlIO/encoding/encoding.dll lib/auto/PerlIO/scalar/scalar.dll lib/auto/PerlIO/via/via.dll lib/auto/SDBM_File/SDBM_File.dll lib/auto/Socket/Socket.dll lib/auto/Storable/Storable.dll lib/auto/Sys/Hostname/Hostname.dll lib/auto/Sys/Syslog/Syslog.dll lib/auto/Time/HiRes/HiRes.dll lib/auto/Unicode/Normalize/Normalize.dll lib/auto/XS/APItest/APItest.dll'
+++ for f in '$dynamic_ext'
+++ : the dependency named here will never exist
++++ echo XS/Typemap
++++ sed 's/.*\///'
+++ base=Typemap
+++ dynamic_list='  lib/auto/B/B.dll lib/auto/ByteLoader/ByteLoader.dll lib/auto/Cwd/Cwd.dll lib/auto/Data/Dumper/Dumper.dll lib/auto/Devel/DProf/DProf.dll lib/auto/Devel/PPPort/PPPort.dll lib/auto/Devel/Peek/Peek.dll lib/auto/Digest/MD5/MD5.dll lib/auto/Encode/Encode.dll lib/auto/Fcntl/Fcntl.dll lib/auto/File/Glob/Glob.dll lib/auto/Filter/Util/Call/Call.dll lib/auto/GDBM_File/GDBM_File.dll lib/auto/IO/IO.dll lib/auto/List/Util/Util.dll lib/auto/MIME/Base64/Base64.dll lib/auto/NDBM_File/NDBM_File.dll lib/auto/ODBM_File/ODBM_File.dll lib/auto/Opcode/Opcode.dll lib/auto/POSIX/POSIX.dll lib/auto/PerlIO/encoding/encoding.dll lib/auto/PerlIO/scalar/scalar.dll lib/auto/PerlIO/via/via.dll lib/auto/SDBM_File/SDBM_File.dll lib/auto/Socket/Socket.dll lib/auto/Storable/Storable.dll lib/auto/Sys/Hostname/Hostname.dll lib/auto/Sys/Syslog/Syslog.dll lib/auto/Time/HiRes/HiRes.dll lib/auto/Unicode/Normalize/Normalize.dll lib/auto/XS/APItest/APItest.dll lib/auto/XS/Typemap/Typemap.dll'
+++ for f in '$dynamic_ext'
+++ : the dependency named here will never exist
++++ echo attrs
++++ sed 's/.*\///'
+++ base=attrs
+++ dynamic_list='  lib/auto/B/B.dll lib/auto/ByteLoader/ByteLoader.dll lib/auto/Cwd/Cwd.dll lib/auto/Data/Dumper/Dumper.dll lib/auto/Devel/DProf/DProf.dll lib/auto/Devel/PPPort/PPPort.dll lib/auto/Devel/Peek/Peek.dll lib/auto/Digest/MD5/MD5.dll lib/auto/Encode/Encode.dll lib/auto/Fcntl/Fcntl.dll lib/auto/File/Glob/Glob.dll lib/auto/Filter/Util/Call/Call.dll lib/auto/GDBM_File/GDBM_File.dll lib/auto/IO/IO.dll lib/auto/List/Util/Util.dll lib/auto/MIME/Base64/Base64.dll lib/auto/NDBM_File/NDBM_File.dll lib/auto/ODBM_File/ODBM_File.dll lib/auto/Opcode/Opcode.dll lib/auto/POSIX/POSIX.dll lib/auto/PerlIO/encoding/encoding.dll lib/auto/PerlIO/scalar/scalar.dll lib/auto/PerlIO/via/via.dll lib/auto/SDBM_File/SDBM_File.dll lib/auto/Socket/Socket.dll lib/auto/Storable/Storable.dll lib/auto/Sys/Hostname/Hostname.dll lib/auto/Sys/Syslog/Syslog.dll lib/auto/Time/HiRes/HiRes.dll lib/auto/Unicode/Normalize/Normalize.dll lib/auto/XS/APItest/APItest.dll lib/auto/XS/Typemap/Typemap.dll lib/auto/attrs/attrs.dll'
+++ for f in '$dynamic_ext'
+++ : the dependency named here will never exist
++++ echo re
++++ sed 's/.*\///'
+++ base=re
+++ dynamic_list='  lib/auto/B/B.dll lib/auto/ByteLoader/ByteLoader.dll lib/auto/Cwd/Cwd.dll lib/auto/Data/Dumper/Dumper.dll lib/auto/Devel/DProf/DProf.dll lib/auto/Devel/PPPort/PPPort.dll lib/auto/Devel/Peek/Peek.dll lib/auto/Digest/MD5/MD5.dll lib/auto/Encode/Encode.dll lib/auto/Fcntl/Fcntl.dll lib/auto/File/Glob/Glob.dll lib/auto/Filter/Util/Call/Call.dll lib/auto/GDBM_File/GDBM_File.dll lib/auto/IO/IO.dll lib/auto/List/Util/Util.dll lib/auto/MIME/Base64/Base64.dll lib/auto/NDBM_File/NDBM_File.dll lib/auto/ODBM_File/ODBM_File.dll lib/auto/Opcode/Opcode.dll lib/auto/POSIX/POSIX.dll lib/auto/PerlIO/encoding/encoding.dll lib/auto/PerlIO/scalar/scalar.dll lib/auto/PerlIO/via/via.dll lib/auto/SDBM_File/SDBM_File.dll lib/auto/Socket/Socket.dll lib/auto/Storable/Storable.dll lib/auto/Sys/Hostname/Hostname.dll lib/auto/Sys/Syslog/Syslog.dll lib/auto/Time/HiRes/HiRes.dll lib/auto/Unicode/Normalize/Normalize.dll lib/auto/XS/APItest/APItest.dll lib/auto/XS/Typemap/Typemap.dll lib/auto/attrs/attrs.dll lib/auto/re/re.dll'
+++ for f in '$dynamic_ext'
+++ : the dependency named here will never exist
++++ echo threads
++++ sed 's/.*\///'
+++ base=threads
+++ dynamic_list='  lib/auto/B/B.dll lib/auto/ByteLoader/ByteLoader.dll lib/auto/Cwd/Cwd.dll lib/auto/Data/Dumper/Dumper.dll lib/auto/Devel/DProf/DProf.dll lib/auto/Devel/PPPort/PPPort.dll lib/auto/Devel/Peek/Peek.dll lib/auto/Digest/MD5/MD5.dll lib/auto/Encode/Encode.dll lib/auto/Fcntl/Fcntl.dll lib/auto/File/Glob/Glob.dll lib/auto/Filter/Util/Call/Call.dll lib/auto/GDBM_File/GDBM_File.dll lib/auto/IO/IO.dll lib/auto/List/Util/Util.dll lib/auto/MIME/Base64/Base64.dll lib/auto/NDBM_File/NDBM_File.dll lib/auto/ODBM_File/ODBM_File.dll lib/auto/Opcode/Opcode.dll lib/auto/POSIX/POSIX.dll lib/auto/PerlIO/encoding/encoding.dll lib/auto/PerlIO/scalar/scalar.dll lib/auto/PerlIO/via/via.dll lib/auto/SDBM_File/SDBM_File.dll lib/auto/Socket/Socket.dll lib/auto/Storable/Storable.dll lib/auto/Sys/Hostname/Hostname.dll lib/auto/Sys/Syslog/Syslog.dll lib/auto/Time/HiRes/HiRes.dll lib/auto/Unicode/Normalize/Normalize.dll lib/auto/XS/APItest/APItest.dll lib/auto/XS/Typemap/Typemap.dll lib/auto/attrs/attrs.dll lib/auto/re/re.dll lib/auto/threads/threads.dll'
+++ for f in '$dynamic_ext'
+++ : the dependency named here will never exist
++++ echo threads/shared
++++ sed 's/.*\///'
+++ base=shared
+++ dynamic_list='  lib/auto/B/B.dll lib/auto/ByteLoader/ByteLoader.dll lib/auto/Cwd/Cwd.dll lib/auto/Data/Dumper/Dumper.dll lib/auto/Devel/DProf/DProf.dll lib/auto/Devel/PPPort/PPPort.dll lib/auto/Devel/Peek/Peek.dll lib/auto/Digest/MD5/MD5.dll lib/auto/Encode/Encode.dll lib/auto/Fcntl/Fcntl.dll lib/auto/File/Glob/Glob.dll lib/auto/Filter/Util/Call/Call.dll lib/auto/GDBM_File/GDBM_File.dll lib/auto/IO/IO.dll lib/auto/List/Util/Util.dll lib/auto/MIME/Base64/Base64.dll lib/auto/NDBM_File/NDBM_File.dll lib/auto/ODBM_File/ODBM_File.dll lib/auto/Opcode/Opcode.dll lib/auto/POSIX/POSIX.dll lib/auto/PerlIO/encoding/encoding.dll lib/auto/PerlIO/scalar/scalar.dll lib/auto/PerlIO/via/via.dll lib/auto/SDBM_File/SDBM_File.dll lib/auto/Socket/Socket.dll lib/auto/Storable/Storable.dll lib/auto/Sys/Hostname/Hostname.dll lib/auto/Sys/Syslog/Syslog.dll lib/auto/Time/HiRes/HiRes.dll lib/auto/Unicode/Normalize/Normalize.dll lib/auto/XS/APItest/APItest.dll lib/auto/XS/Typemap/Typemap.dll lib/auto/attrs/attrs.dll lib/auto/re/re.dll lib/auto/threads/threads.dll lib/auto/threads/shared/shared.dll'
+++ static_list=' '
+++ for f in '$static_ext'
++++ echo Win32CORE
++++ sed 's/.*\///'
+++ base=Win32CORE
+++ static_list='  lib/auto/Win32CORE/Win32CORE$(LIB_EXT)'
+++ nonxs_list=' '
+++ for f in '$nonxs_ext'
++++ echo Errno
++++ sed 's/.*\///'
+++ base=Errno
+++ nonxs_list='  ext/Errno/pm_to_blib'
+++ case "$osname" in
+++ echo 'Extracting Makefile (with variable substitutions)'
Extracting Makefile (with variable substitutions)
+++ cat
+++ case "${osname}:${osvers}" in
+++ cat
+++ cat
+++ cat
+++ case "$osname" in
+++ cat
+++ case "$osname" in
+++ Makefile_s=msys/Makefile.SHs
+++ case "$osname" in
+++ test -r msys/Makefile.SHs
+++ . msys/Makefile.SHs
++++ case $CONFIG in
++++ test -f config.sh
++++ TOP=.
++++ . ./config.sh
+++++ Author=
+++++ Date='$Date'
+++++ Header=
+++++ Id='$Id'
+++++ Locker=
+++++ Log='$Log'
+++++ Mcc=Mcc
+++++ RCSfile='$RCSfile'
+++++ Revision='$Revision'
+++++ Source=
+++++ State=
+++++ _a=.a
+++++ _exe=.exe
+++++ _o=.o
+++++ afs=false
+++++ afsroot=/afs
+++++ alignbytes=8
+++++ ansi2knr=
+++++ aphostname=/bin/hostname
+++++ api_revision=5
+++++ api_subversion=0
+++++ api_version=8
+++++ api_versionstring=5.8.0
+++++ ar=ar
+++++ archlib=/usr/lib/perl5/5.8/msys
+++++ archlibexp=/usr/lib/perl5/5.8/msys
+++++ archname64=64int
+++++ archname=msys-64int
+++++ archobjs=msys.o
+++++ asctime_r_proto=0
+++++ awk=awk
+++++ baserev=5.0
+++++ bash=
+++++ bin=/usr/bin
+++++ binexp=/usr/bin
+++++ bison=bison
+++++ byacc=byacc
+++++ byteorder=12345678
+++++ c=
+++++ castflags=0
+++++ cat=cat
+++++ cc=gcc
+++++ cccdlflags=' '
+++++ ccdlflags=' -s '
+++++ ccflags='-DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement'
+++++ ccflags_uselargefiles=
+++++ ccname=gcc
+++++ ccsymbols='__CYGWIN32__=1 __unix=1 __unix__=1'
+++++ ccversion=
+++++ cf_by=cwilson
+++++ cf_email=cwilson@kheldar.nonet
+++++ cf_time='Tue Apr 26 22:16:11 EDT 2011'
+++++ charsize=1
+++++ chgrp=
+++++ chmod=chmod
+++++ chown=
+++++ clocktype=clock_t
+++++ comm=comm
+++++ compress=
+++++ contains=grep
+++++ cp=cp
+++++ cpio=
+++++ cpp=cpp
+++++ cpp_stuff=42
+++++ cppccsymbols='__CYGWIN__=1 __MSYS__=1 unix=1'
+++++ cppflags='-DPERL_USE_SAFE_PUTENV -DDEBUGGING -fno-strict-aliasing -pipe -Wdeclaration-after-statement'
+++++ cpplast=-
+++++ cppminus=-
+++++ cpprun='gcc -E'
+++++ cppstdin='gcc -E'
+++++ cppsymbols='__GNUC__=3 __GNUC_MINOR__=4 _LONG_DOUBLE=long\ double __STDC__=1 i386=1 __i386=1 __i386__=1 __unix=1 __unix__=1'
+++++ crypt_r_proto=0
+++++ cryptlib=
+++++ csh=csh
+++++ ctermid_r_proto=0
+++++ ctime_r_proto=0
+++++ d_Gconvert='sprintf((b),"%.*g",(n),(x))'
+++++ d_PRIEUldbl=define
+++++ d_PRIFUldbl=define
+++++ d_PRIGUldbl=define
+++++ d_PRIXU64=define
+++++ d_PRId64=define
+++++ d_PRIeldbl=define
+++++ d_PRIfldbl=define
+++++ d_PRIgldbl=define
+++++ d_PRIi64=define
+++++ d_PRIo64=define
+++++ d_PRIu64=define
+++++ d_PRIx64=define
+++++ d_SCNfldbl=define
+++++ d__fwalk=undef
+++++ d_access=define
+++++ d_accessx=undef
+++++ d_aintl=undef
+++++ d_alarm=define
+++++ d_archlib=define
+++++ d_asctime_r=undef
+++++ d_atolf=undef
+++++ d_atoll=undef
+++++ d_attribute_format=define
+++++ d_attribute_malloc=define
+++++ d_attribute_nonnull=define
+++++ d_attribute_noreturn=define
+++++ d_attribute_pure=define
+++++ d_attribute_unused=define
+++++ d_attribute_warn_unused_result=define
+++++ d_bcmp=define
+++++ d_bcopy=define
+++++ d_bsd=define
+++++ d_bsdgetpgrp=undef
+++++ d_bsdsetpgrp=undef
+++++ d_bzero=define
+++++ d_casti32=undef
+++++ d_castneg=define
+++++ d_charvspr=define
+++++ d_chown=define
+++++ d_chroot=define
+++++ d_chsize=undef
+++++ d_class=undef
+++++ d_clearenv=undef
+++++ d_closedir=define
+++++ d_cmsghdr_s=undef
+++++ d_const=define
+++++ d_copysignl=undef
+++++ d_crypt=define
+++++ d_crypt_r=undef
+++++ d_csh=undef
+++++ d_ctermid_r=undef
+++++ d_ctime_r=undef
+++++ d_cuserid=define
+++++ d_dbl_dig=define
+++++ d_dbminitproto=define
+++++ d_difftime=define
+++++ d_dirfd=define
+++++ d_dirnamlen=undef
+++++ d_dlerror=define
+++++ d_dlopen=define
+++++ d_dlsymun=undef
+++++ d_dosuid=undef
+++++ d_drand48_r=undef
+++++ d_drand48proto=define
+++++ d_dup2=define
+++++ d_eaccess=undef
+++++ d_endgrent=define
+++++ d_endgrent_r=undef
+++++ d_endhent=define
+++++ d_endhostent_r=undef
+++++ d_endnent=undef
+++++ d_endnetent_r=undef
+++++ d_endpent=undef
+++++ d_endprotoent_r=undef
+++++ d_endpwent=define
+++++ d_endpwent_r=undef
+++++ d_endsent=undef
+++++ d_endservent_r=undef
+++++ d_eofnblk=define
+++++ d_eunice=undef
+++++ d_faststdio=define
+++++ d_fchdir=define
+++++ d_fchmod=define
+++++ d_fchown=define
+++++ d_fcntl=define
+++++ d_fcntl_can_lock=define
+++++ d_fd_macros=define
+++++ d_fd_set=define
+++++ d_fds_bits=define
+++++ d_fgetpos=define
+++++ d_finite=define
+++++ d_finitel=undef
+++++ d_flexfnam=define
+++++ d_flock=undef
+++++ d_flockproto=undef
+++++ d_fork=define
+++++ d_fp_class=undef
+++++ d_fpathconf=define
+++++ d_fpclass=undef
+++++ d_fpclassify=undef
+++++ d_fpclassl=undef
+++++ d_fpos64_t=undef
+++++ d_frexpl=undef
+++++ d_fs_data_s=undef
+++++ d_fseeko=undef
+++++ d_fsetpos=define
+++++ d_fstatfs=define
+++++ d_fstatvfs=undef
+++++ d_fsync=define
+++++ d_ftello=undef
+++++ d_ftime=undef
+++++ d_futimes=undef
+++++ d_getcwd=define
+++++ d_getespwnam=undef
+++++ d_getfsstat=undef
+++++ d_getgrent=define
+++++ d_getgrent_r=undef
+++++ d_getgrgid_r=undef
+++++ d_getgrnam_r=undef
+++++ d_getgrps=define
+++++ d_gethbyaddr=define
+++++ d_gethbyname=define
+++++ d_gethent=undef
+++++ d_gethname=define
+++++ d_gethostbyaddr_r=undef
+++++ d_gethostbyname_r=undef
+++++ d_gethostent_r=undef
+++++ d_gethostprotos=define
+++++ d_getitimer=define
+++++ d_getlogin=define
+++++ d_getlogin_r=undef
+++++ d_getmnt=undef
+++++ d_getmntent=define
+++++ d_getnbyaddr=undef
+++++ d_getnbyname=undef
+++++ d_getnent=undef
+++++ d_getnetbyaddr_r=undef
+++++ d_getnetbyname_r=undef
+++++ d_getnetent_r=undef
+++++ d_getnetprotos=define
+++++ d_getpagsz=define
+++++ d_getpbyname=define
+++++ d_getpbynumber=define
+++++ d_getpent=undef
+++++ d_getpgid=define
+++++ d_getpgrp2=undef
+++++ d_getpgrp=define
+++++ d_getppid=define
+++++ d_getprior=undef
+++++ d_getprotobyname_r=undef
+++++ d_getprotobynumber_r=undef
+++++ d_getprotoent_r=undef
+++++ d_getprotoprotos=define
+++++ d_getprpwnam=undef
+++++ d_getpwent=define
+++++ d_getpwent_r=undef
+++++ d_getpwnam_r=undef
+++++ d_getpwuid_r=undef
+++++ d_getsbyname=define
+++++ d_getsbyport=define
+++++ d_getsent=undef
+++++ d_getservbyname_r=undef
+++++ d_getservbyport_r=undef
+++++ d_getservent_r=undef
+++++ d_getservprotos=define
+++++ d_getspnam=undef
+++++ d_getspnam_r=undef
+++++ d_gettimeod=define
+++++ d_gmtime_r=undef
+++++ d_gnulibc=undef
+++++ d_grpasswd=define
+++++ d_hasmntopt=undef
+++++ d_htonl=define
+++++ d_ilogbl=undef
+++++ d_index=undef
+++++ d_inetaton=define
+++++ d_int64_t=define
+++++ d_isascii=define
+++++ d_isfinite=undef
+++++ d_isinf=define
+++++ d_isnan=define
+++++ d_isnanl=undef
+++++ d_killpg=define
+++++ d_lchown=define
+++++ d_ldbl_dig=define
+++++ d_libm_lib_version=undef
+++++ d_link=define
+++++ d_localtime_r=undef
+++++ d_locconv=define
+++++ d_lockf=undef
+++++ d_longdbl=define
+++++ d_longlong=define
+++++ d_lseekproto=define
+++++ d_lstat=define
+++++ d_madvise=undef
+++++ d_malloc_good_size=undef
+++++ d_malloc_size=undef
+++++ d_mblen=define
+++++ d_mbstowcs=define
+++++ d_mbtowc=define
+++++ d_memchr=define
+++++ d_memcmp=define
+++++ d_memcpy=define
+++++ d_memmove=define
+++++ d_memset=define
+++++ d_mkdir=define
+++++ d_mkdtemp=undef
+++++ d_mkfifo=define
+++++ d_mkstemp=define
+++++ d_mkstemps=undef
+++++ d_mktime=define
+++++ d_mmap=define
+++++ d_modfl=undef
+++++ d_modfl_pow32_bug=undef
+++++ d_modflproto=undef
+++++ d_mprotect=define
+++++ d_msg=undef
+++++ d_msg_ctrunc=undef
+++++ d_msg_dontroute=define
+++++ d_msg_oob=define
+++++ d_msg_peek=define
+++++ d_msg_proxy=undef
+++++ d_msgctl=undef
+++++ d_msgget=undef
+++++ d_msghdr_s=define
+++++ d_msgrcv=undef
+++++ d_msgsnd=undef
+++++ d_msync=define
+++++ d_munmap=define
+++++ d_mymalloc=define
+++++ d_nice=define
+++++ d_nl_langinfo=undef
+++++ d_nv_preserves_uv=undef
+++++ d_nv_zero_is_allbits_zero=define
+++++ d_off64_t=undef
+++++ d_old_pthread_create_joinable=undef
+++++ d_oldpthreads=undef
+++++ d_oldsock=undef
+++++ d_open3=define
+++++ d_pathconf=define
+++++ d_pause=define
+++++ d_perl_otherlibdirs=undef
+++++ d_phostname=undef
+++++ d_pipe=define
+++++ d_poll=define
+++++ d_portable=define
+++++ d_procselfexe=undef
+++++ d_pthread_atfork=define
+++++ d_pthread_attr_setscope=define
+++++ d_pthread_yield=undef
+++++ d_pwage=undef
+++++ d_pwchange=undef
+++++ d_pwclass=undef
+++++ d_pwcomment=define
+++++ d_pwexpire=undef
+++++ d_pwgecos=define
+++++ d_pwpasswd=define
+++++ d_pwquota=undef
+++++ d_qgcvt=undef
+++++ d_quad=define
+++++ d_random_r=undef
+++++ d_readdir64_r=undef
+++++ d_readdir=define
+++++ d_readdir_r=undef
+++++ d_readlink=define
+++++ d_readv=define
+++++ d_recvmsg=undef
+++++ d_rename=define
+++++ d_rewinddir=define
+++++ d_rmdir=define
+++++ d_safebcpy=undef
+++++ d_safemcpy=undef
+++++ d_sanemcmp=define
+++++ d_sbrkproto=define
+++++ d_scalbnl=undef
+++++ d_sched_yield=define
+++++ d_scm_rights=undef
+++++ d_seekdir=define
+++++ d_select=define
+++++ d_sem=undef
+++++ d_semctl=undef
+++++ d_semctl_semid_ds=undef
+++++ d_semctl_semun=undef
+++++ d_semget=undef
+++++ d_semop=undef
+++++ d_sendmsg=undef
+++++ d_setegid=define
+++++ d_seteuid=define
+++++ d_setgrent=define
+++++ d_setgrent_r=undef
+++++ d_setgrps=undef
+++++ d_sethent=define
+++++ d_sethostent_r=undef
+++++ d_setitimer=define
+++++ d_setlinebuf=undef
+++++ d_setlocale=define
+++++ d_setlocale_r=undef
+++++ d_setnent=undef
+++++ d_setnetent_r=undef
+++++ d_setpent=undef
+++++ d_setpgid=define
+++++ d_setpgrp2=undef
+++++ d_setpgrp=define
+++++ d_setprior=undef
+++++ d_setproctitle=undef
+++++ d_setprotoent_r=undef
+++++ d_setpwent=define
+++++ d_setpwent_r=undef
+++++ d_setregid=undef
+++++ d_setresgid=undef
+++++ d_setresuid=undef
+++++ d_setreuid=undef
+++++ d_setrgid=undef
+++++ d_setruid=undef
+++++ d_setsent=undef
+++++ d_setservent_r=undef
+++++ d_setsid=define
+++++ d_setvbuf=define
+++++ d_sfio=undef
+++++ d_shm=undef
+++++ d_shmat=undef
+++++ d_shmatprototype=undef
+++++ d_shmctl=undef
+++++ d_shmdt=undef
+++++ d_shmget=undef
+++++ d_sigaction=define
+++++ d_sigprocmask=define
+++++ d_sigsetjmp=define
+++++ d_sockatmark=undef
+++++ d_sockatmarkproto=undef
+++++ d_socket=define
+++++ d_socklen_t=define
+++++ d_sockpair=define
+++++ d_socks5_init=undef
+++++ d_sprintf_returns_strlen=define
+++++ d_sqrtl=undef
+++++ d_srand48_r=undef
+++++ d_srandom_r=undef
+++++ d_sresgproto=undef
+++++ d_sresuproto=undef
+++++ d_statblks=define
+++++ d_statfs_f_flags=undef
+++++ d_statfs_s=define
+++++ d_statvfs=undef
+++++ d_stdio_cnt_lval=define
+++++ d_stdio_ptr_lval=define
+++++ d_stdio_ptr_lval_nochange_cnt=define
+++++ d_stdio_ptr_lval_sets_cnt=undef
+++++ d_stdio_stream_array=undef
+++++ d_stdiobase=define
+++++ d_stdstdio=define
+++++ d_strchr=define
+++++ d_strcoll=define
+++++ d_strctcpy=define
+++++ d_strerrm='strerror(e)'
+++++ d_strerror=define
+++++ d_strerror_r=undef
+++++ d_strftime=define
+++++ d_strlcat=undef
+++++ d_strlcpy=undef
+++++ d_strtod=define
+++++ d_strtol=define
+++++ d_strtold=undef
+++++ d_strtoll=undef
+++++ d_strtoq=undef
+++++ d_strtoul=define
+++++ d_strtoull=undef
+++++ d_strtouq=undef
+++++ d_strxfrm=define
+++++ d_suidsafe=undef
+++++ d_symlink=define
+++++ d_syscall=undef
+++++ d_syscallproto=undef
+++++ d_sysconf=define
+++++ d_sysernlst=
+++++ d_syserrlst=define
+++++ d_system=define
+++++ d_tcgetpgrp=define
+++++ d_tcsetpgrp=define
+++++ d_telldir=define
+++++ d_telldirproto=define
+++++ d_time=define
+++++ d_times=define
+++++ d_tm_tm_gmtoff=undef
+++++ d_tm_tm_zone=undef
+++++ d_tmpnam_r=undef
+++++ d_truncate=define
+++++ d_ttyname_r=undef
+++++ d_tzname=define
+++++ d_u32align=define
+++++ d_ualarm=undef
+++++ d_umask=define
+++++ d_uname=define
+++++ d_union_semun=undef
+++++ d_unordered=undef
+++++ d_unsetenv=define
+++++ d_usleep=define
+++++ d_usleepproto=define
+++++ d_ustat=undef
+++++ d_vendorarch=define
+++++ d_vendorbin=define
+++++ d_vendorlib=define
+++++ d_vendorscript=define
+++++ d_vfork=undef
+++++ d_void_closedir=undef
+++++ d_voidsig=define
+++++ d_voidtty=
+++++ d_volatile=define
+++++ d_vprintf=define
+++++ d_wait4=define
+++++ d_waitpid=define
+++++ d_wcstombs=define
+++++ d_wctomb=define
+++++ d_writev=define
+++++ d_xenix=undef
+++++ date=date
+++++ db_hashtype=u_int32_t
+++++ db_prefixtype=size_t
+++++ db_version_major=
+++++ db_version_minor=
+++++ db_version_patch=
+++++ defvoidused=15
+++++ direntrytype='struct dirent'
+++++ dlext=dll
+++++ dlsrc=dl_dlopen.xs
+++++ doublesize=8
+++++ drand01='drand48()'
+++++ drand48_r_proto=0
+++++ dynamic_ext='B ByteLoader Cwd Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File IO List/Util MIME/Base64 NDBM_File ODBM_File Opcode POSIX PerlIO/encoding PerlIO/scalar PerlIO/via SDBM_File Socket Storable Sys/Hostname Sys/Syslog Time/HiRes Unicode/Normalize XS/APItest XS/Typemap attrs re threads threads/shared'
+++++ eagain=EAGAIN
+++++ ebcdic=undef
+++++ echo=echo
+++++ egrep=egrep
+++++ emacs=
+++++ endgrent_r_proto=0
+++++ endhostent_r_proto=0
+++++ endnetent_r_proto=0
+++++ endprotoent_r_proto=0
+++++ endpwent_r_proto=0
+++++ endservent_r_proto=0
+++++ eunicefix=:
+++++ exe_ext=.exe
+++++ expr=expr
+++++ extensions='B ByteLoader Cwd Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File IO List/Util MIME/Base64 NDBM_File ODBM_File Opcode POSIX PerlIO/encoding PerlIO/scalar PerlIO/via SDBM_File Socket Storable Sys/Hostname Sys/Syslog Time/HiRes Unicode/Normalize XS/APItest XS/Typemap attrs re threads threads/shared Win32CORE Errno'
+++++ extras=
+++++ fflushNULL=define
+++++ fflushall=undef
+++++ find=
+++++ firstmakefile=GNUmakefile
+++++ flex=
+++++ fpossize=4
+++++ fpostype=fpos_t
+++++ freetype=void
+++++ from=:
+++++ full_ar=/bin/ar
+++++ full_csh=csh
+++++ full_sed=/bin/sed
+++++ gccansipedantic=
+++++ gccosandvers=
+++++ gccversion='3.4.4 (msys special)'
+++++ getgrent_r_proto=0
+++++ getgrgid_r_proto=0
+++++ getgrnam_r_proto=0
+++++ gethostbyaddr_r_proto=0
+++++ gethostbyname_r_proto=0
+++++ gethostent_r_proto=0
+++++ getlogin_r_proto=0
+++++ getnetbyaddr_r_proto=0
+++++ getnetbyname_r_proto=0
+++++ getnetent_r_proto=0
+++++ getprotobyname_r_proto=0
+++++ getprotobynumber_r_proto=0
+++++ getprotoent_r_proto=0
+++++ getpwent_r_proto=0
+++++ getpwnam_r_proto=0
+++++ getpwuid_r_proto=0
+++++ getservbyname_r_proto=0
+++++ getservbyport_r_proto=0
+++++ getservent_r_proto=0
+++++ getspnam_r_proto=0
+++++ gidformat='"hu"'
+++++ gidsign=1
+++++ gidsize=2
+++++ gidtype=gid_t
+++++ glibpth='/usr/shlib  /lib /usr/lib /usr/lib/386 /lib/386 /usr/ccs/lib /usr/ucblib /usr/local/lib '
+++++ gmake=gmake
+++++ gmtime_r_proto=0
+++++ gnulibc_version=
+++++ grep=grep
+++++ groupcat=
+++++ groupstype=gid_t
+++++ gzip=gzip
+++++ h_fcntl=false
+++++ h_sysfile=true
+++++ hint=recommended
+++++ hostcat=
+++++ html1dir=' '
+++++ html1direxp=
+++++ html3dir=' '
+++++ html3direxp=
+++++ i16size=2
+++++ i16type=short
+++++ i32size=4
+++++ i32type=long
+++++ i64size=8
+++++ i64type='long long'
+++++ i8size=1
+++++ i8type=char
+++++ i_arpainet=define
+++++ i_bsdioctl=
+++++ i_crypt=define
+++++ i_db=undef
+++++ i_dbm=define
+++++ i_dirent=define
+++++ i_dld=undef
+++++ i_dlfcn=define
+++++ i_fcntl=undef
+++++ i_float=define
+++++ i_fp=undef
+++++ i_fp_class=undef
+++++ i_gdbm=define
+++++ i_grp=define
+++++ i_ieeefp=define
+++++ i_inttypes=undef
+++++ i_langinfo=undef
+++++ i_libutil=undef
+++++ i_limits=define
+++++ i_locale=define
+++++ i_machcthr=undef
+++++ i_malloc=define
+++++ i_math=define
+++++ i_memory=undef
+++++ i_mntent=define
+++++ i_ndbm=define
+++++ i_netdb=define
+++++ i_neterrno=undef
+++++ i_netinettcp=define
+++++ i_niin=define
+++++ i_poll=define
+++++ i_prot=undef
+++++ i_pthread=define
+++++ i_pwd=define
+++++ i_rpcsvcdbm=undef
+++++ i_sfio=undef
+++++ i_sgtty=undef
+++++ i_shadow=undef
+++++ i_socks=undef
+++++ i_stdarg=define
+++++ i_stddef=define
+++++ i_stdlib=define
+++++ i_string=define
+++++ i_sunmath=undef
+++++ i_sysaccess=undef
+++++ i_sysdir=undef
+++++ i_sysfile=define
+++++ i_sysfilio=undef
+++++ i_sysin=undef
+++++ i_sysioctl=define
+++++ i_syslog=define
+++++ i_sysmman=define
+++++ i_sysmode=undef
+++++ i_sysmount=define
+++++ i_sysndir=undef
+++++ i_sysparam=define
+++++ i_sysresrc=define
+++++ i_syssecrt=undef
+++++ i_sysselct=define
+++++ i_syssockio=undef
+++++ i_sysstat=define
+++++ i_sysstatfs=undef
+++++ i_sysstatvfs=undef
+++++ i_systime=define
+++++ i_systimek=undef
+++++ i_systimes=define
+++++ i_systypes=define
+++++ i_sysuio=define
+++++ i_sysun=define
+++++ i_sysutsname=define
+++++ i_sysvfs=define
+++++ i_syswait=define
+++++ i_termio=undef
+++++ i_termios=define
+++++ i_time=undef
+++++ i_unistd=define
+++++ i_ustat=undef
+++++ i_utime=define
+++++ i_values=undef
+++++ i_varargs=undef
+++++ i_varhdr=stdarg.h
+++++ i_vfork=undef
+++++ ignore_versioned_solibs=
+++++ inc_version_list=' '
+++++ inc_version_list_init=0
+++++ incpath=
+++++ inews=
+++++ installarchlib=/usr/lib/perl5/5.8/msys
+++++ installbin=/usr/bin
+++++ installhtml1dir=
+++++ installhtml3dir=
+++++ installman1dir=/usr/share/man/man1
+++++ installman3dir=/usr/share/man/man3
+++++ installprefix=/usr
+++++ installprefixexp=/usr
+++++ installprivlib=/usr/lib/perl5/5.8
+++++ installscript=/usr/bin
+++++ installsitearch=/usr/lib/perl5/site_perl/5.8/msys
+++++ installsitebin=/usr/bin
+++++ installsitehtml1dir=
+++++ installsitehtml3dir=
+++++ installsitelib=/usr/lib/perl5/site_perl/5.8
+++++ installsiteman1dir=/usr/share/man/man1
+++++ installsiteman3dir=/usr/share/man/man3
+++++ installsitescript=/usr/bin
+++++ installstyle=lib/perl5
+++++ installusrbinperl=undef
+++++ installvendorarch=/usr/lib/perl5/vendor_perl/5.8/msys
+++++ installvendorbin=/usr/bin
+++++ installvendorhtml1dir=
+++++ installvendorhtml3dir=
+++++ installvendorlib=/usr/lib/perl5/vendor_perl/5.8
+++++ installvendorman1dir=/usr/share/man/man1
+++++ installvendorman3dir=/usr/share/man/man3
+++++ installvendorscript=/usr/bin
+++++ intsize=4
+++++ issymlink=
+++++ ivdformat='"lld"'
+++++ ivsize=8
+++++ ivtype='long long'
+++++ known_extensions='B ByteLoader Cwd DB_File Data/Dumper Devel/DProf Devel/PPPort Devel/Peek Digest/MD5 Encode Fcntl File/Glob Filter/Util/Call GDBM_File I18N/Langinfo IO IPC/SysV List/Util MIME/Base64 NDBM_File ODBM_File Opcode POSIX PerlIO/encoding PerlIO/scalar PerlIO/via SDBM_File Socket Storable Sys/Hostname Sys/Syslog Thread Time/HiRes Unicode/Normalize Win32CORE XS/APItest XS/Typemap attrs re threads threads/shared'
+++++ ksh=
+++++ ld=ld2
+++++ lddlflags=' -s '
+++++ ldflags=' -s '
+++++ ldflags_uselargefiles=
+++++ ldlibpthname=PATH
+++++ less=less
+++++ lib_ext=.a
+++++ libc=/usr/lib/libmsys-1.0.dll.a
+++++ libperl=libperl.a
+++++ libpth='/usr/lib /lib'
+++++ libs='-lgdbm -lcrypt -lgdbm_compat'
+++++ libsdirs=' /usr/lib'
+++++ libsfiles=' libgdbm.a libcrypt.a libgdbm_compat.a'
+++++ libsfound=' /usr/lib/libgdbm.a /usr/lib/libcrypt.a /usr/lib/libgdbm_compat.a'
+++++ libspath=' /usr/lib /lib'
+++++ libswanted='  sfio socket bind inet nsl nm ndbm gdbm dbm db malloc dl dld ld sun crypt sec util cposix posix ucb bsd BSD   gdbm_compat'
+++++ libswanted_uselargefiles=
+++++ line=
+++++ lint=
+++++ lkflags=
+++++ ln=ln
+++++ lns='/bin/ln.exe -s'
+++++ localtime_r_proto=0
+++++ locincpth=
+++++ loclibpth='/usr/local/lib /opt/local/lib /usr/gnu/lib /opt/gnu/lib /usr/GNU/lib /opt/GNU/lib'
+++++ longdblsize=12
+++++ longlongsize=8
+++++ longsize=4
+++++ lp=
+++++ lpr=
+++++ ls=ls
+++++ lseeksize=4
+++++ lseektype=off_t
+++++ mail=
+++++ mailx=
+++++ make=make
+++++ make_set_make='#'
+++++ mallocobj=malloc.o
+++++ mallocsrc=malloc.c
+++++ malloctype='void *'
+++++ man1dir=/usr/share/man/man1
+++++ man1direxp=/usr/share/man/man1
+++++ man1ext=1
+++++ man3dir=/usr/share/man/man3
+++++ man3direxp=/usr/share/man/man3
+++++ man3ext=3pm
+++++ mips_type=
+++++ mistrustnm=
+++++ mkdir=mkdir
+++++ mmaptype=caddr_t
+++++ modetype=mode_t
+++++ more=more
+++++ multiarch=undef
+++++ mv=
+++++ myarchname=i686-msys
+++++ mydomain=.nonet
+++++ myhostname=kheldar
+++++ myuname='msys_nt-6.0 kheldar 1.0.17(0.4832) 2011-04-24 23:39 i686 msys '
+++++ n=-n
+++++ need_va_copy=undef
+++++ netdb_hlen_type=int
+++++ netdb_host_type='const char *'
+++++ netdb_name_type='const char *'
+++++ netdb_net_type=long
+++++ nm=nm
+++++ nm_opt=-p
+++++ nm_so_opt=
+++++ nonxs_ext=Errno
+++++ nroff=nroff
+++++ nvEUformat='"E"'
+++++ nvFUformat='"F"'
+++++ nvGUformat='"G"'
+++++ nv_preserves_uv_bits=53
+++++ nveformat='"e"'
+++++ nvfformat='"f"'
+++++ nvgformat='"g"'
+++++ nvsize=8
+++++ nvtype=double
+++++ o_nonblock=O_NONBLOCK
+++++ obj_ext=.o
+++++ old_pthread_create_joinable=
+++++ optimize='-O3 -fno-unit-at-a-time -s -mtune=pentium'
+++++ orderlib=false
+++++ osname=msys
+++++ osvers='1.0.17(0.4832)'
+++++ otherlibdirs=' '
+++++ package=perl5
+++++ pager=/bin/less
+++++ passcat=
+++++ patchlevel=8
+++++ path_sep=:
+++++ perl5=/usr/bin/perl
+++++ perl=
+++++ perl_patchlevel=
+++++ perladmin=mingw-dvlpr@lists.sourceforge.net
+++++ perllibs='-lcrypt -lgdbm_compat'
+++++ perlpath=/usr/bin/perl
+++++ pg=pg
+++++ phostname=hostname
+++++ pidtype=pid_t
+++++ plibpth=/usr/lib
+++++ pmake=
+++++ pr=
+++++ prefix=/usr
+++++ prefixexp=/usr
+++++ privlib=/usr/lib/perl5/5.8
+++++ privlibexp=/usr/lib/perl5/5.8
+++++ procselfexe=
+++++ prototype=define
+++++ ptrsize=4
+++++ quadkind=3
+++++ quadtype='long long'
+++++ randbits=48
+++++ randfunc=drand48
+++++ random_r_proto=0
+++++ randseedtype=long
+++++ ranlib=:
+++++ rd_nodata=-1
+++++ readdir64_r_proto=0
+++++ readdir_r_proto=0
+++++ revision=5
+++++ rm=rm
+++++ rmail=
+++++ run=
+++++ runnm=true
+++++ sPRIEUldbl='"LE"'
+++++ sPRIFUldbl='"LF"'
+++++ sPRIGUldbl='"LG"'
+++++ sPRIXU64='"llX"'
+++++ sPRId64='"lld"'
+++++ sPRIeldbl='"Le"'
+++++ sPRIfldbl='"Lf"'
+++++ sPRIgldbl='"Lg"'
+++++ sPRIi64='"lli"'
+++++ sPRIo64='"llo"'
+++++ sPRIu64='"llu"'
+++++ sPRIx64='"llx"'
+++++ sSCNfldbl='"Lf"'
+++++ sched_yield='sched_yield()'
+++++ scriptdir=/usr/bin
+++++ scriptdirexp=/usr/bin
+++++ sed=sed
+++++ seedfunc=srand48
+++++ selectminbits=32
+++++ selecttype='fd_set *'
+++++ sendmail=
+++++ setgrent_r_proto=0
+++++ sethostent_r_proto=0
+++++ setlocale_r_proto=0
+++++ setnetent_r_proto=0
+++++ setprotoent_r_proto=0
+++++ setpwent_r_proto=0
+++++ setservent_r_proto=0
+++++ sh=/bin/sh
+++++ shar=
+++++ sharpbang='#!'
+++++ shmattype=
+++++ shortsize=2
+++++ shrpenv='env LD_RUN_PATH=/usr/lib/perl5/5.8/msys/CORE'
+++++ shsharp=true
+++++ sig_count=32
+++++ sig_name='ZERO HUP INT QUIT ILL TRAP ABRT EMT FPE KILL BUS SEGV SYS PIPE ALRM TERM URG STOP TSTP CONT CHLD TTIN TTOU IO XCPU XFSZ VTALRM PROF WINCH LOST USR1 USR2 CLD POLL '
+++++ sig_name_init='"ZERO", "HUP", "INT", "QUIT", "ILL", "TRAP", "ABRT", "EMT", "FPE", "KILL", "BUS", "SEGV", "SYS", "PIPE", "ALRM", "TERM", "URG", "STOP", "TSTP", "CONT", "CHLD", "TTIN", "TTOU", "IO", "XCPU", "XFSZ", "VTALRM", "PROF", "WINCH", "LOST", "USR1", "USR2", "CLD", "POLL", 0'
+++++ sig_num='0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 20 23 '
+++++ sig_num_init='0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 20, 23, 0'
+++++ sig_size=34
+++++ signal_t=void
+++++ sitearch=/usr/lib/perl5/site_perl/5.8/msys
+++++ sitearchexp=/usr/lib/perl5/site_perl/5.8/msys
+++++ sitebin=/usr/bin
+++++ sitebinexp=/usr/bin
+++++ sitehtml1dir=
+++++ sitehtml1direxp=
+++++ sitehtml3dir=
+++++ sitehtml3direxp=
+++++ sitelib=/usr/lib/perl5/site_perl/5.8
+++++ sitelib_stem=/usr/lib/perl5/site_perl/5.8
+++++ sitelibexp=/usr/lib/perl5/site_perl/5.8
+++++ siteman1dir=/usr/share/man/man1
+++++ siteman1direxp=/usr/share/man/man1
+++++ siteman3dir=/usr/share/man/man3
+++++ siteman3direxp=/usr/share/man/man3
+++++ siteprefix=/usr
+++++ siteprefixexp=/usr
+++++ sitescript=/usr/bin
+++++ sitescriptexp=/usr/bin
+++++ sizesize=4
+++++ sizetype=size_t
+++++ sleep=
+++++ smail=
+++++ so=dll
+++++ sockethdr=
+++++ socketlib=
+++++ socksizetype=socklen_t
+++++ sort=sort
+++++ spackage=Perl5
+++++ spitshell=cat
+++++ srand48_r_proto=0
+++++ srandom_r_proto=0
+++++ src=.
+++++ ssizetype=ssize_t
+++++ startperl='#!/usr/bin/perl'
+++++ startsh='#!/bin/sh'
+++++ static_ext=' Win32CORE'
+++++ stdchar=char
+++++ stdio_base='((fp)->_ub._base ? (fp)->_ub._base : (fp)->_bf._base)'
+++++ stdio_bufsiz='((fp)->_ub._base ? (fp)->_ub._size : (fp)->_bf._size)'
+++++ stdio_cnt='((fp)->_r)'
+++++ stdio_filbuf=
+++++ stdio_ptr='((fp)->_p)'
+++++ stdio_stream_array=
+++++ strerror_r_proto=0
+++++ strings=/usr/include/string.h
+++++ submit=
+++++ subversion=8
+++++ sysman=/usr/share/man/man1
+++++ tail=
+++++ tar=
+++++ targetarch=
+++++ tbl=
+++++ tee=
+++++ test=test
+++++ timeincl='/usr/include/sys/time.h '
+++++ timetype=time_t
+++++ tmpnam_r_proto=0
+++++ to=:
+++++ touch=touch
+++++ tr=tr
+++++ trnl='\n'
+++++ troff=
+++++ ttyname_r_proto=0
+++++ u16size=2
+++++ u16type='unsigned short'
+++++ u32size=4
+++++ u32type='unsigned long'
+++++ u64size=8
+++++ u64type='unsigned long long'
+++++ u8size=1
+++++ u8type='unsigned char'
+++++ uidformat='"hu"'
+++++ uidsign=1
+++++ uidsize=2
+++++ uidtype=uid_t
+++++ uname=uname
+++++ uniq=uniq
+++++ uquadtype='unsigned long long'
+++++ use5005threads=undef
+++++ use64bitall=undef
+++++ use64bitint=define
+++++ usecrosscompile=undef
+++++ usedl=define
+++++ usefaststdio=define
+++++ useithreads=undef
+++++ uselargefiles=define
+++++ uselongdouble=undef
+++++ usemallocwrap=undef
+++++ usemorebits=undef
+++++ usemultiplicity=undef
+++++ usemymalloc=y
+++++ usenm=true
+++++ useopcode=true
+++++ useperlio=define
+++++ useposix=true
+++++ usereentrant=undef
+++++ usesfio=false
+++++ useshrplib=true
+++++ usesitecustomize=define
+++++ usesocks=undef
+++++ usethreads=undef
+++++ usevendorprefix=define
+++++ usevfork=false
+++++ usrinc=/usr/include
+++++ uuname=
+++++ uvXUformat='"llX"'
+++++ uvoformat='"llo"'
+++++ uvsize=8
+++++ uvtype='unsigned long long'
+++++ uvuformat='"llu"'
+++++ uvxformat='"llx"'
+++++ vendorarch=/usr/lib/perl5/vendor_perl/5.8/msys
+++++ vendorarchexp=/usr/lib/perl5/vendor_perl/5.8/msys
+++++ vendorbin=/usr/bin
+++++ vendorbinexp=/usr/bin
+++++ vendorhtml1dir=' '
+++++ vendorhtml1direxp=
+++++ vendorhtml3dir=' '
+++++ vendorhtml3direxp=
+++++ vendorlib=/usr/lib/perl5/vendor_perl/5.8
+++++ vendorlib_stem=/usr/lib/perl5/vendor_perl/5.8
+++++ vendorlibexp=/usr/lib/perl5/vendor_perl/5.8
+++++ vendorman1dir=/usr/share/man/man1
+++++ vendorman1direxp=/usr/share/man/man1
+++++ vendorman3dir=/usr/share/man/man3
+++++ vendorman3direxp=/usr/share/man/man3
+++++ vendorprefix=/usr
+++++ vendorprefixexp=/usr
+++++ vendorscript=/usr/bin
+++++ vendorscriptexp=/usr/bin
+++++ version=5.8.8
+++++ version_patchlevel_string='version 8 subversion 8'
+++++ versiononly=undef
+++++ vi=
+++++ voidflags=15
+++++ xlibpth='/usr/lib/386 /lib/386'
+++++ yacc=yacc
+++++ yaccflags=
+++++ zcat=
+++++ zip=zip
+++++ config_arg0=./Configure
+++++ config_args='-de -Duse64bitint -Dusesitecustomize'
+++++ config_argc=3
+++++ config_arg1=-de
+++++ config_arg2=-Duse64bitint
+++++ config_arg3=-Dusesitecustomize
+++++ PERL_REVISION=5
+++++ PERL_VERSION=8
+++++ PERL_SUBVERSION=8
+++++ PERL_API_REVISION=5
+++++ PERL_API_VERSION=8
+++++ PERL_API_SUBVERSION=0
+++++ PERL_PATCHLEVEL=
+++++ PERL_CONFIG_SH=true
+++++ bincompat5005=undef
+++++ pwd
++++ addtopath=/usr/src/perl/perl-5.8.8
++++ cat
++++ cat
+++++ echo libperl.a
+++++ sed -e 's,\..*,,'
++++ libperl=libperl
++++ echo libperl
++++ grep '^lib'
+++++ echo libperl
+++++ sed -e 's,^lib,,'
++++ linklibperl=-lperl
++++ cat
++++ case "$useshrplib" in
++++ cat
++++ cat
++++ cat
+++ cat
+++ cat
+++ : Makefile
+++ case `pwd` in
++++ pwd
+++ rm -f GNUmakefile
+++ case "$ebcdic" in
++ for file in '$*'
++ case "$src" in
++ case "$file" in
++ . ./myconfig.SH
+++ case $PERL_CONFIG_SH in
+++ : This forces SH files to create target in same directory as SH file.
+++ : This is so that make depend always knows where to find SH derivatives.
+++ case "$0" in
++++ expr X./Configure : 'X\(.*\)/'
+++ cd .
+++ echo 'Extracting myconfig (with variable substitutions)'
Extracting myconfig (with variable substitutions)
+++ cat
+++ chmod 755 myconfig
+++ : myconfig
++ for file in '$*'
++ case "$src" in
++ case "$file" in
+++ expr Xpod/Makefile.SH : 'X\(.*\)/'
++ dir=pod
+++ expr Xpod/Makefile.SH : 'X.*/\(.*\)'
++ file=Makefile.SH
++ cd pod
++ . ./Makefile.SH
+++ case $PERL_CONFIG_SH in
+++ : This forces SH files to create target in same directory as SH file.
+++ : This is so that make depend always knows where to find SH derivatives.
+++ case "$0" in
++++ expr X./Configure : 'X\(.*\)/'
+++ cd .
+++ test -d pod
++++ echo perl.pod perl5004delta.pod perl5005delta.pod perl561delta.pod perl56delta.pod perl570delta.pod perl571delta.pod perl572delta.pod perl573delta.pod perl581delta.pod perl582delta.pod perl583delta.pod perl584delta.pod perl585delta.pod perl586delta.pod perl587delta.pod perl588delta.pod perl58delta.pod perlapi.pod perlapio.pod perlartistic.pod perlbook.pod perlboot.pod perlbot.pod perlcall.pod perlcheat.pod perlclib.pod perlcompile.pod perldata.pod perldbmfilter.pod perldebguts.pod perldebtut.pod perldebug.pod perldiag.pod perldoc.pod perldsc.pod perlebcdic.pod perlembed.pod perlfaq.pod perlfaq1.pod perlfaq2.pod perlfaq3.pod perlfaq4.pod perlfaq5.pod perlfaq6.pod perlfaq7.pod perlfaq8.pod perlfaq9.pod perlfilter.pod perlfork.pod perlform.pod perlfunc.pod perlglossary.pod perlgpl.pod perlguts.pod perlhack.pod perlhist.pod perlintern.pod perlintro.pod perliol.pod perlipc.pod perllexwarn.pod perllocale.pod perllol.pod perlmod.pod perlmodinstall.pod perlmodlib.pod perlmodstyle.pod perlnewmod.pod perlnumber.pod perlobj.pod perlop.pod perlopentut.pod perlothrtut.pod perlpacktut.pod perlpod.pod perlpodspec.pod perlport.pod perlre.pod perlref.pod perlreftut.pod perlrequick.pod perlreref.pod perlretut.pod perlrun.pod perlsec.pod perlstyle.pod perlsub.pod perlsyn.pod perlthrtut.pod perltie.pod perltoc.pod perltodo.pod perltooc.pod perltoot.pod perltrap.pod perlunicode.pod perluniintro.pod perlutil.pod perlvar.pod perlxs.pod perlxstut.pod
+++ POD='perl.pod perl5004delta.pod perl5005delta.pod perl561delta.pod perl56delta.pod perl570delta.pod perl571delta.pod perl572delta.pod perl573delta.pod perl581delta.pod perl582delta.pod perl583delta.pod perl584delta.pod perl585delta.pod perl586delta.pod perl587delta.pod perl588delta.pod perl58delta.pod perlapi.pod perlapio.pod perlartistic.pod perlbook.pod perlboot.pod perlbot.pod perlcall.pod perlcheat.pod perlclib.pod perlcompile.pod perldata.pod perldbmfilter.pod perldebguts.pod perldebtut.pod perldebug.pod perldiag.pod perldoc.pod perldsc.pod perlebcdic.pod perlembed.pod perlfaq.pod perlfaq1.pod perlfaq2.pod perlfaq3.pod perlfaq4.pod perlfaq5.pod perlfaq6.pod perlfaq7.pod perlfaq8.pod perlfaq9.pod perlfilter.pod perlfork.pod perlform.pod perlfunc.pod perlglossary.pod perlgpl.pod perlguts.pod perlhack.pod perlhist.pod perlintern.pod perlintro.pod perliol.pod perlipc.pod perllexwarn.pod perllocale.pod perllol.pod perlmod.pod perlmodinstall.pod perlmodlib.pod perlmodstyle.pod perlnewmod.pod perlnumber.pod perlobj.pod perlop.pod perlopentut.pod perlothrtut.pod perlpacktut.pod perlpod.pod perlpodspec.pod perlport.pod perlre.pod perlref.pod perlreftut.pod perlrequick.pod perlreref.pod perlretut.pod perlrun.pod perlsec.pod perlstyle.pod perlsub.pod perlsyn.pod perlthrtut.pod perltie.pod perltoc.pod perltodo.pod perltooc.pod perltoot.pod perltrap.pod perlunicode.pod perluniintro.pod perlutil.pod perlvar.pod perlxs.pod perlxstut.pod'
++++ echo perl.pod perl5004delta.pod perl5005delta.pod perl561delta.pod perl56delta.pod perl570delta.pod perl571delta.pod perl572delta.pod perl573delta.pod perl581delta.pod perl582delta.pod perl583delta.pod perl584delta.pod perl585delta.pod perl586delta.pod perl587delta.pod perl588delta.pod perl58delta.pod perlapi.pod perlapio.pod perlartistic.pod perlbook.pod perlboot.pod perlbot.pod perlcall.pod perlcheat.pod perlclib.pod perlcompile.pod perldata.pod perldbmfilter.pod perldebguts.pod perldebtut.pod perldebug.pod perldiag.pod perldoc.pod perldsc.pod perlebcdic.pod perlembed.pod perlfaq.pod perlfaq1.pod perlfaq2.pod perlfaq3.pod perlfaq4.pod perlfaq5.pod perlfaq6.pod perlfaq7.pod perlfaq8.pod perlfaq9.pod perlfilter.pod perlfork.pod perlform.pod perlfunc.pod perlglossary.pod perlgpl.pod perlguts.pod perlhack.pod perlhist.pod perlintern.pod perlintro.pod perliol.pod perlipc.pod perllexwarn.pod perllocale.pod perllol.pod perlmod.pod perlmodinstall.pod perlmodlib.pod perlmodstyle.pod perlnewmod.pod perlnumber.pod perlobj.pod perlop.pod perlopentut.pod perlothrtut.pod perlpacktut.pod perlpod.pod perlpodspec.pod perlport.pod perlre.pod perlref.pod perlreftut.pod perlrequick.pod perlreref.pod perlretut.pod perlrun.pod perlsec.pod perlstyle.pod perlsub.pod perlsyn.pod perlthrtut.pod perltie.pod perltoc.pod perltodo.pod perltooc.pod perltoot.pod perltrap.pod perlunicode.pod perluniintro.pod perlutil.pod perlvar.pod perlxs.pod perlxstut.pod
++++ sed 's/\.pod/\.man/g'
+++ MAN='perl.man perl5004delta.man perl5005delta.man perl561delta.man perl56delta.man perl570delta.man perl571delta.man perl572delta.man perl573delta.man perl581delta.man perl582delta.man perl583delta.man perl584delta.man perl585delta.man perl586delta.man perl587delta.man perl588delta.man perl58delta.man perlapi.man perlapio.man perlartistic.man perlbook.man perlboot.man perlbot.man perlcall.man perlcheat.man perlclib.man perlcompile.man perldata.man perldbmfilter.man perldebguts.man perldebtut.man perldebug.man perldiag.man perldoc.man perldsc.man perlebcdic.man perlembed.man perlfaq.man perlfaq1.man perlfaq2.man perlfaq3.man perlfaq4.man perlfaq5.man perlfaq6.man perlfaq7.man perlfaq8.man perlfaq9.man perlfilter.man perlfork.man perlform.man perlfunc.man perlglossary.man perlgpl.man perlguts.man perlhack.man perlhist.man perlintern.man perlintro.man perliol.man perlipc.man perllexwarn.man perllocale.man perllol.man perlmod.man perlmodinstall.man perlmodlib.man perlmodstyle.man perlnewmod.man perlnumber.man perlobj.man perlop.man perlopentut.man perlothrtut.man perlpacktut.man perlpod.man perlpodspec.man perlport.man perlre.man perlref.man perlreftut.man perlrequick.man perlreref.man perlretut.man perlrun.man perlsec.man perlstyle.man perlsub.man perlsyn.man perlthrtut.man perltie.man perltoc.man perltodo.man perltooc.man perltoot.man perltrap.man perlunicode.man perluniintro.man perlutil.man perlvar.man perlxs.man perlxstut.man'
++++ echo perl.pod perl5004delta.pod perl5005delta.pod perl561delta.pod perl56delta.pod perl570delta.pod perl571delta.pod perl572delta.pod perl573delta.pod perl581delta.pod perl582delta.pod perl583delta.pod perl584delta.pod perl585delta.pod perl586delta.pod perl587delta.pod perl588delta.pod perl58delta.pod perlapi.pod perlapio.pod perlartistic.pod perlbook.pod perlboot.pod perlbot.pod perlcall.pod perlcheat.pod perlclib.pod perlcompile.pod perldata.pod perldbmfilter.pod perldebguts.pod perldebtut.pod perldebug.pod perldiag.pod perldoc.pod perldsc.pod perlebcdic.pod perlembed.pod perlfaq.pod perlfaq1.pod perlfaq2.pod perlfaq3.pod perlfaq4.pod perlfaq5.pod perlfaq6.pod perlfaq7.pod perlfaq8.pod perlfaq9.pod perlfilter.pod perlfork.pod perlform.pod perlfunc.pod perlglossary.pod perlgpl.pod perlguts.pod perlhack.pod perlhist.pod perlintern.pod perlintro.pod perliol.pod perlipc.pod perllexwarn.pod perllocale.pod perllol.pod perlmod.pod perlmodinstall.pod perlmodlib.pod perlmodstyle.pod perlnewmod.pod perlnumber.pod perlobj.pod perlop.pod perlopentut.pod perlothrtut.pod perlpacktut.pod perlpod.pod perlpodspec.pod perlport.pod perlre.pod perlref.pod perlreftut.pod perlrequick.pod perlreref.pod perlretut.pod perlrun.pod perlsec.pod perlstyle.pod perlsub.pod perlsyn.pod perlthrtut.pod perltie.pod perltoc.pod perltodo.pod perltooc.pod perltoot.pod perltrap.pod perlunicode.pod perluniintro.pod perlutil.pod perlvar.pod perlxs.pod perlxstut.pod
++++ sed s/perltoc.pod//
++++ sed 's/\.pod/\.html/g'
+++ HTML='perl.html perl5004delta.html perl5005delta.html perl561delta.html perl56delta.html perl570delta.html perl571delta.html perl572delta.html perl573delta.html perl581delta.html perl582delta.html perl583delta.html perl584delta.html perl585delta.html perl586delta.html perl587delta.html perl588delta.html perl58delta.html perlapi.html perlapio.html perlartistic.html perlbook.html perlboot.html perlbot.html perlcall.html perlcheat.html perlclib.html perlcompile.html perldata.html perldbmfilter.html perldebguts.html perldebtut.html perldebug.html perldiag.html perldoc.html perldsc.html perlebcdic.html perlembed.html perlfaq.html perlfaq1.html perlfaq2.html perlfaq3.html perlfaq4.html perlfaq5.html perlfaq6.html perlfaq7.html perlfaq8.html perlfaq9.html perlfilter.html perlfork.html perlform.html perlfunc.html perlglossary.html perlgpl.html perlguts.html perlhack.html perlhist.html perlintern.html perlintro.html perliol.html perlipc.html perllexwarn.html perllocale.html perllol.html perlmod.html perlmodinstall.html perlmodlib.html perlmodstyle.html perlnewmod.html perlnumber.html perlobj.html perlop.html perlopentut.html perlothrtut.html perlpacktut.html perlpod.html perlpodspec.html perlport.html perlre.html perlref.html perlreftut.html perlrequick.html perlreref.html perlretut.html perlrun.html perlsec.html perlstyle.html perlsub.html perlsyn.html perlthrtut.html perltie.html  perltodo.html perltooc.html perltoot.html perltrap.html perlunicode.html perluniintro.html perlutil.html perlvar.html perlxs.html perlxstut.html'
++++ echo perl.pod perl5004delta.pod perl5005delta.pod perl561delta.pod perl56delta.pod perl570delta.pod perl571delta.pod perl572delta.pod perl573delta.pod perl581delta.pod perl582delta.pod perl583delta.pod perl584delta.pod perl585delta.pod perl586delta.pod perl587delta.pod perl588delta.pod perl58delta.pod perlapi.pod perlapio.pod perlartistic.pod perlbook.pod perlboot.pod perlbot.pod perlcall.pod perlcheat.pod perlclib.pod perlcompile.pod perldata.pod perldbmfilter.pod perldebguts.pod perldebtut.pod perldebug.pod perldiag.pod perldoc.pod perldsc.pod perlebcdic.pod perlembed.pod perlfaq.pod perlfaq1.pod perlfaq2.pod perlfaq3.pod perlfaq4.pod perlfaq5.pod perlfaq6.pod perlfaq7.pod perlfaq8.pod perlfaq9.pod perlfilter.pod perlfork.pod perlform.pod perlfunc.pod perlglossary.pod perlgpl.pod perlguts.pod perlhack.pod perlhist.pod perlintern.pod perlintro.pod perliol.pod perlipc.pod perllexwarn.pod perllocale.pod perllol.pod perlmod.pod perlmodinstall.pod perlmodlib.pod perlmodstyle.pod perlnewmod.pod perlnumber.pod perlobj.pod perlop.pod perlopentut.pod perlothrtut.pod perlpacktut.pod perlpod.pod perlpodspec.pod perlport.pod perlre.pod perlref.pod perlreftut.pod perlrequick.pod perlreref.pod perlretut.pod perlrun.pod perlsec.pod perlstyle.pod perlsub.pod perlsyn.pod perlthrtut.pod perltie.pod perltoc.pod perltodo.pod perltooc.pod perltoot.pod perltrap.pod perlunicode.pod perluniintro.pod perlutil.pod perlvar.pod perlxs.pod perlxstut.pod
++++ sed 's/\.pod/\.tex/g'
+++ TEX='perl.tex perl5004delta.tex perl5005delta.tex perl561delta.tex perl56delta.tex perl570delta.tex perl571delta.tex perl572delta.tex perl573delta.tex perl581delta.tex perl582delta.tex perl583delta.tex perl584delta.tex perl585delta.tex perl586delta.tex perl587delta.tex perl588delta.tex perl58delta.tex perlapi.tex perlapio.tex perlartistic.tex perlbook.tex perlboot.tex perlbot.tex perlcall.tex perlcheat.tex perlclib.tex perlcompile.tex perldata.tex perldbmfilter.tex perldebguts.tex perldebtut.tex perldebug.tex perldiag.tex perldoc.tex perldsc.tex perlebcdic.tex perlembed.tex perlfaq.tex perlfaq1.tex perlfaq2.tex perlfaq3.tex perlfaq4.tex perlfaq5.tex perlfaq6.tex perlfaq7.tex perlfaq8.tex perlfaq9.tex perlfilter.tex perlfork.tex perlform.tex perlfunc.tex perlglossary.tex perlgpl.tex perlguts.tex perlhack.tex perlhist.tex perlintern.tex perlintro.tex perliol.tex perlipc.tex perllexwarn.tex perllocale.tex perllol.tex perlmod.tex perlmodinstall.tex perlmodlib.tex perlmodstyle.tex perlnewmod.tex perlnumber.tex perlobj.tex perlop.tex perlopentut.tex perlothrtut.tex perlpacktut.tex perlpod.tex perlpodspec.tex perlport.tex perlre.tex perlref.tex perlreftut.tex perlrequick.tex perlreref.tex perlretut.tex perlrun.tex perlsec.tex perlstyle.tex perlsub.tex perlsyn.tex perlthrtut.tex perltie.tex perltoc.tex perltodo.tex perltooc.tex perltoot.tex perltrap.tex perlunicode.tex perluniintro.tex perlutil.tex perlvar.tex perlxs.tex perlxstut.tex'
+++ echo 'Extracting pod/Makefile (with variable substitutions)'
Extracting pod/Makefile (with variable substitutions)
+++ : This section of the file will have variable substitutions done on it.
+++ : Move anything that needs config subs from '!NO!SUBS!' section to '!GROK!THIS!.'
+++ : Protect any dollar signs and backticks that you do not want interpreted
+++ : by putting a backslash in front. You may delete these comments.
+++ cat
+++ cat
++ for file in '$*'
++ case "$src" in
++ case "$file" in
++ . ./Policy_sh.SH
+++ case $PERL_CONFIG_SH in
+++ echo 'Extracting Policy.sh (with variable substitutions)'
Extracting Policy.sh (with variable substitutions)
+++ cat
+++ for var in bin scriptdir privlib archlib man1dir man3dir html1dir html3dir sitebin sitescript sitelib sitearch siteman1dir siteman3dir sitehtml1dir sitehtml3dir vendorbin vendorscript vendorlib vendorarch vendorman1dir vendorman3dir vendorhtml1dir vendorhtml3dir
+++ case "$var" in
+++ dflt=/usr/bin
+++ eval 'val=$bin'
++++ val=/usr/bin
+++ test X/usr/bin = X/usr/bin
+++ echo '# bin='\''/usr/bin'\'''
+++ for var in bin scriptdir privlib archlib man1dir man3dir html1dir html3dir sitebin sitescript sitelib sitearch siteman1dir siteman3dir sitehtml1dir sitehtml3dir vendorbin vendorscript vendorlib vendorarch vendorman1dir vendorman3dir vendorhtml1dir vendorhtml3dir
+++ case "$var" in
+++ test -d /usr/script
+++ dflt=/usr/bin
+++ eval 'val=$scriptdir'
++++ val=/usr/bin
+++ test X/usr/bin = X/usr/bin
+++ echo '# scriptdir='\''/usr/bin'\'''
+++ for var in bin scriptdir privlib archlib man1dir man3dir html1dir html3dir sitebin sitescript sitelib sitearch siteman1dir siteman3dir sitehtml1dir sitehtml3dir vendorbin vendorscript vendorlib vendorarch vendorman1dir vendorman3dir vendorhtml1dir vendorhtml3dir
+++ case "$var" in
+++ case "$prefix" in
+++ dflt=/usr/lib/perl5/5.8.8
+++ eval 'val=$privlib'
++++ val=/usr/lib/perl5/5.8
+++ test X/usr/lib/perl5/5.8 = X/usr/lib/perl5/5.8.8
+++ echo '# Preserving custom privlib'
+++ echo 'privlib='\''/usr/lib/perl5/5.8'\'''
+++ for var in bin scriptdir privlib archlib man1dir man3dir html1dir html3dir sitebin sitescript sitelib sitearch siteman1dir siteman3dir sitehtml1dir sitehtml3dir vendorbin vendorscript vendorlib vendorarch vendorman1dir vendorman3dir vendorhtml1dir vendorhtml3dir
+++ case "$var" in
+++ dflt=/usr/lib/perl5/5.8/msys-64int
+++ eval 'val=$archlib'
++++ val=/usr/lib/perl5/5.8/msys
+++ test X/usr/lib/perl5/5.8/msys = X/usr/lib/perl5/5.8/msys-64int
+++ echo '# Preserving custom archlib'
+++ echo 'archlib='\''/usr/lib/perl5/5.8/msys'\'''
+++ for var in bin scriptdir privlib archlib man1dir man3dir html1dir html3dir sitebin sitescript sitelib sitearch siteman1dir siteman3dir sitehtml1dir sitehtml3dir vendorbin vendorscript vendorlib vendorarch vendorman1dir vendorman3dir vendorhtml1dir vendorhtml3dir
+++ case "$var" in
+++ dflt=/usr/man/man1
+++ eval 'val=$man1dir'
++++ val=/usr/share/man/man1
+++ test X/usr/share/man/man1 = X/usr/man/man1
+++ echo '# Preserving custom man1dir'
+++ echo 'man1dir='\''/usr/share/man/man1'\'''
+++ for var in bin scriptdir privlib archlib man1dir man3dir html1dir html3dir sitebin sitescript sitelib sitearch siteman1dir siteman3dir sitehtml1dir sitehtml3dir vendorbin vendorscript vendorlib vendorarch vendorman1dir vendorman3dir vendorhtml1dir vendorhtml3dir
+++ case "$var" in
+++ dflt=/usr/man/man3
+++ eval 'val=$man3dir'
++++ val=/usr/share/man/man3
+++ test X/usr/share/man/man3 = X/usr/man/man3
+++ echo '# Preserving custom man3dir'
+++ echo 'man3dir='\''/usr/share/man/man3'\'''
+++ for var in bin scriptdir privlib archlib man1dir man3dir html1dir html3dir sitebin sitescript sitelib sitearch siteman1dir siteman3dir sitehtml1dir sitehtml3dir vendorbin vendorscript vendorlib vendorarch vendorman1dir vendorman3dir vendorhtml1dir vendorhtml3dir
+++ case "$var" in
+++ dflt=
+++ eval 'val=$html1dir'
++++ val=' '
+++ test 'X ' = X
+++ echo '# Preserving custom html1dir'
+++ echo 'html1dir='\'' '\'''
+++ for var in bin scriptdir privlib archlib man1dir man3dir html1dir html3dir sitebin sitescript sitelib sitearch siteman1dir siteman3dir sitehtml1dir sitehtml3dir vendorbin vendorscript vendorlib vendorarch vendorman1dir vendorman3dir vendorhtml1dir vendorhtml3dir
+++ case "$var" in
+++ eval 'val=$html3dir'
++++ val=' '
+++ test 'X ' = X
+++ echo '# Preserving custom html3dir'
+++ echo 'html3dir='\'' '\'''
+++ for var in bin scriptdir privlib archlib man1dir man3dir html1dir html3dir sitebin sitescript sitelib sitearch siteman1dir siteman3dir sitehtml1dir sitehtml3dir vendorbin vendorscript vendorlib vendorarch vendorman1dir vendorman3dir vendorhtml1dir vendorhtml3dir
+++ case "$var" in
+++ dflt=/usr/bin
+++ eval 'val=$sitebin'
++++ val=/usr/bin
+++ test X/usr/bin = X/usr/bin
+++ echo '# sitebin='\''/usr/bin'\'''
+++ for var in bin scriptdir privlib archlib man1dir man3dir html1dir html3dir sitebin sitescript sitelib sitearch siteman1dir siteman3dir sitehtml1dir sitehtml3dir vendorbin vendorscript vendorlib vendorarch vendorman1dir vendorman3dir vendorhtml1dir vendorhtml3dir
+++ case "$var" in
+++ test -d /usr/script
+++ dflt=/usr/bin
+++ eval 'val=$sitescript'
++++ val=/usr/bin
+++ test X/usr/bin = X/usr/bin
+++ echo '# sitescript='\''/usr/bin'\'''
+++ for var in bin scriptdir privlib archlib man1dir man3dir html1dir html3dir sitebin sitescript sitelib sitearch siteman1dir siteman3dir sitehtml1dir sitehtml3dir vendorbin vendorscript vendorlib vendorarch vendorman1dir vendorman3dir vendorhtml1dir vendorhtml3dir
+++ case "$var" in
+++ case "$siteprefix" in
+++ dflt=/usr/lib/perl5/site_perl/5.8.8
+++ eval 'val=$sitelib'
++++ val=/usr/lib/perl5/site_perl/5.8
+++ test X/usr/lib/perl5/site_perl/5.8 = X/usr/lib/perl5/site_perl/5.8.8
+++ echo '# Preserving custom sitelib'
+++ echo 'sitelib='\''/usr/lib/perl5/site_perl/5.8'\'''
+++ for var in bin scriptdir privlib archlib man1dir man3dir html1dir html3dir sitebin sitescript sitelib sitearch siteman1dir siteman3dir sitehtml1dir sitehtml3dir vendorbin vendorscript vendorlib vendorarch vendorman1dir vendorman3dir vendorhtml1dir vendorhtml3dir
+++ case "$var" in
+++ dflt=/usr/lib/perl5/site_perl/5.8/msys-64int
+++ eval 'val=$sitearch'
++++ val=/usr/lib/perl5/site_perl/5.8/msys
+++ test X/usr/lib/perl5/site_perl/5.8/msys = X/usr/lib/perl5/site_perl/5.8/msys-64int
+++ echo '# Preserving custom sitearch'
+++ echo 'sitearch='\''/usr/lib/perl5/site_perl/5.8/msys'\'''
+++ for var in bin scriptdir privlib archlib man1dir man3dir html1dir html3dir sitebin sitescript sitelib sitearch siteman1dir siteman3dir sitehtml1dir sitehtml3dir vendorbin vendorscript vendorlib vendorarch vendorman1dir vendorman3dir vendorhtml1dir vendorhtml3dir
+++ case "$var" in
+++ eval 'val=$siteman1dir'
++++ val=/usr/share/man/man1
+++ test X/usr/share/man/man1 = X/usr/lib/perl5/site_perl/5.8/msys-64int
+++ echo '# Preserving custom siteman1dir'
+++ echo 'siteman1dir='\''/usr/share/man/man1'\'''
+++ for var in bin scriptdir privlib archlib man1dir man3dir html1dir html3dir sitebin sitescript sitelib sitearch siteman1dir siteman3dir sitehtml1dir sitehtml3dir vendorbin vendorscript vendorlib vendorarch vendorman1dir vendorman3dir vendorhtml1dir vendorhtml3dir
+++ case "$var" in
+++ eval 'val=$siteman3dir'
++++ val=/usr/share/man/man3
+++ test X/usr/share/man/man3 = X/usr/lib/perl5/site_perl/5.8/msys-64int
+++ echo '# Preserving custom siteman3dir'
+++ echo 'siteman3dir='\''/usr/share/man/man3'\'''
+++ for var in bin scriptdir privlib archlib man1dir man3dir html1dir html3dir sitebin sitescript sitelib sitearch siteman1dir siteman3dir sitehtml1dir sitehtml3dir vendorbin vendorscript vendorlib vendorarch vendorman1dir vendorman3dir vendorhtml1dir vendorhtml3dir
+++ case "$var" in
+++ eval 'val=$sitehtml1dir'
++++ val=
+++ test X = X/usr/lib/perl5/site_perl/5.8/msys-64int
+++ echo '# Preserving custom sitehtml1dir'
+++ echo 'sitehtml1dir='\'''\'''
+++ for var in bin scriptdir privlib archlib man1dir man3dir html1dir html3dir sitebin sitescript sitelib sitearch siteman1dir siteman3dir sitehtml1dir sitehtml3dir vendorbin vendorscript vendorlib vendorarch vendorman1dir vendorman3dir vendorhtml1dir vendorhtml3dir
+++ case "$var" in
+++ eval 'val=$sitehtml3dir'
++++ val=
+++ test X = X/usr/lib/perl5/site_perl/5.8/msys-64int
+++ echo '# Preserving custom sitehtml3dir'
+++ echo 'sitehtml3dir='\'''\'''
+++ for var in bin scriptdir privlib archlib man1dir man3dir html1dir html3dir sitebin sitescript sitelib sitearch siteman1dir siteman3dir sitehtml1dir sitehtml3dir vendorbin vendorscript vendorlib vendorarch vendorman1dir vendorman3dir vendorhtml1dir vendorhtml3dir
+++ case "$var" in
+++ test X/usr = X
+++ case "$var" in
+++ dflt=/usr/bin
+++ eval 'val=$vendorbin'
++++ val=/usr/bin
+++ test X/usr/bin = X/usr/bin
+++ echo '# vendorbin='\''/usr/bin'\'''
+++ for var in bin scriptdir privlib archlib man1dir man3dir html1dir html3dir sitebin sitescript sitelib sitearch siteman1dir siteman3dir sitehtml1dir sitehtml3dir vendorbin vendorscript vendorlib vendorarch vendorman1dir vendorman3dir vendorhtml1dir vendorhtml3dir
+++ case "$var" in
+++ test X/usr = X
+++ case "$var" in
+++ test -d /usr/script
+++ dflt=/usr/bin
+++ eval 'val=$vendorscript'
++++ val=/usr/bin
+++ test X/usr/bin = X/usr/bin
+++ echo '# vendorscript='\''/usr/bin'\'''
+++ for var in bin scriptdir privlib archlib man1dir man3dir html1dir html3dir sitebin sitescript sitelib sitearch siteman1dir siteman3dir sitehtml1dir sitehtml3dir vendorbin vendorscript vendorlib vendorarch vendorman1dir vendorman3dir vendorhtml1dir vendorhtml3dir
+++ case "$var" in
+++ test X/usr = X
+++ case "$var" in
+++ case "$vendorprefix" in
+++ dflt=/usr/lib/perl5/vendor_perl/5.8.8
+++ eval 'val=$vendorlib'
++++ val=/usr/lib/perl5/vendor_perl/5.8
+++ test X/usr/lib/perl5/vendor_perl/5.8 = X/usr/lib/perl5/vendor_perl/5.8.8
+++ echo '# Preserving custom vendorlib'
+++ echo 'vendorlib='\''/usr/lib/perl5/vendor_perl/5.8'\'''
+++ for var in bin scriptdir privlib archlib man1dir man3dir html1dir html3dir sitebin sitescript sitelib sitearch siteman1dir siteman3dir sitehtml1dir sitehtml3dir vendorbin vendorscript vendorlib vendorarch vendorman1dir vendorman3dir vendorhtml1dir vendorhtml3dir
+++ case "$var" in
+++ test X/usr = X
+++ case "$var" in
+++ dflt=/usr/lib/perl5/vendor_perl/5.8/msys-64int
+++ eval 'val=$vendorarch'
++++ val=/usr/lib/perl5/vendor_perl/5.8/msys
+++ test X/usr/lib/perl5/vendor_perl/5.8/msys = X/usr/lib/perl5/vendor_perl/5.8/msys-64int
+++ echo '# Preserving custom vendorarch'
+++ echo 'vendorarch='\''/usr/lib/perl5/vendor_perl/5.8/msys'\'''
+++ for var in bin scriptdir privlib archlib man1dir man3dir html1dir html3dir sitebin sitescript sitelib sitearch siteman1dir siteman3dir sitehtml1dir sitehtml3dir vendorbin vendorscript vendorlib vendorarch vendorman1dir vendorman3dir vendorhtml1dir vendorhtml3dir
+++ case "$var" in
+++ test X/usr = X
+++ case "$var" in
+++ eval 'val=$vendorman1dir'
++++ val=/usr/share/man/man1
+++ test X/usr/share/man/man1 = X/usr/lib/perl5/vendor_perl/5.8/msys-64int
+++ echo '# Preserving custom vendorman1dir'
+++ echo 'vendorman1dir='\''/usr/share/man/man1'\'''
+++ for var in bin scriptdir privlib archlib man1dir man3dir html1dir html3dir sitebin sitescript sitelib sitearch siteman1dir siteman3dir sitehtml1dir sitehtml3dir vendorbin vendorscript vendorlib vendorarch vendorman1dir vendorman3dir vendorhtml1dir vendorhtml3dir
+++ case "$var" in
+++ test X/usr = X
+++ case "$var" in
+++ eval 'val=$vendorman3dir'
++++ val=/usr/share/man/man3
+++ test X/usr/share/man/man3 = X/usr/lib/perl5/vendor_perl/5.8/msys-64int
+++ echo '# Preserving custom vendorman3dir'
+++ echo 'vendorman3dir='\''/usr/share/man/man3'\'''
+++ for var in bin scriptdir privlib archlib man1dir man3dir html1dir html3dir sitebin sitescript sitelib sitearch siteman1dir siteman3dir sitehtml1dir sitehtml3dir vendorbin vendorscript vendorlib vendorarch vendorman1dir vendorman3dir vendorhtml1dir vendorhtml3dir
+++ case "$var" in
+++ test X/usr = X
+++ case "$var" in
+++ eval 'val=$vendorhtml1dir'
++++ val=' '
+++ test 'X ' = X/usr/lib/perl5/vendor_perl/5.8/msys-64int
+++ echo '# Preserving custom vendorhtml1dir'
+++ echo 'vendorhtml1dir='\'' '\'''
+++ for var in bin scriptdir privlib archlib man1dir man3dir html1dir html3dir sitebin sitescript sitelib sitearch siteman1dir siteman3dir sitehtml1dir sitehtml3dir vendorbin vendorscript vendorlib vendorarch vendorman1dir vendorman3dir vendorhtml1dir vendorhtml3dir
+++ case "$var" in
+++ test X/usr = X
+++ case "$var" in
+++ eval 'val=$vendorhtml3dir'
++++ val=' '
+++ test 'X ' = X/usr/lib/perl5/vendor_perl/5.8/msys-64int
+++ echo '# Preserving custom vendorhtml3dir'
+++ echo 'vendorhtml3dir='\'' '\'''
+++ cat
++ for file in '$*'
++ case "$src" in
++ case "$file" in
++ . ./writemain.SH
+++ case $PERL_CONFIG_SH in
+++ : This forces SH files to create target in same directory as SH file.
+++ : This is so that make depend always knows where to find SH derivatives.
+++ case "$0" in
++++ expr X./Configure : 'X\(.*\)/'
+++ cd .
+++ echo 'Extracting writemain (with variable substitutions)'
Extracting writemain (with variable substitutions)
+++ : This section of the file will have variable substitutions done on it.
+++ : Move anything that needs config subs from '!NO!SUBS!' section to '!GROK!THIS!.'
+++ : Protect any dollar signs and backticks that you do not want interpreted
+++ : by putting a backslash in front. You may delete these comments.
+++ rm -f writemain
+++ cat
+++ : In the following dollars and backticks do not need the extra backslash.
+++ cat
+++ chmod 755 writemain
+++ : writemain
++ for file in '$*'
++ case "$src" in
++ case "$file" in
+++ expr Xx2p/cflags.SH : 'X\(.*\)/'
++ dir=x2p
+++ expr Xx2p/cflags.SH : 'X.*/\(.*\)'
++ file=cflags.SH
++ cd x2p
++ . ./cflags.SH
+++ case $PERL_CONFIG_SH in
+++ : This forces SH files to create target in same directory as SH file.
+++ : This is so that make depend always knows where to find SH derivatives.
+++ case "$0" in
+++ case `pwd` in
++++ pwd
+++ echo 'Extracting x2p/cflags (with variable substitutions)'
Extracting x2p/cflags (with variable substitutions)
+++ : This section of the file will have variable substitutions done on it.
+++ : Move anything that needs config subs from '!NO!SUBS!' section to '!GROK!THIS!.'
+++ : Protect any dollar signs and backticks that you do not want interpreted
+++ : by putting a backslash in front. You may delete these comments.
+++ rm -f cflags
+++ cat
+++ : In the following dollars and backticks do not need the extra backslash.
+++ cat
+++ chmod 755 cflags
+++ : cflags
++ for file in '$*'
++ case "$src" in
++ case "$file" in
+++ expr Xx2p/Makefile.SH : 'X\(.*\)/'
++ dir=x2p
+++ expr Xx2p/Makefile.SH : 'X.*/\(.*\)'
++ file=Makefile.SH
++ cd x2p
++ . ./Makefile.SH
+++ case $PERL_CONFIG_SH in
+++ : This forces SH files to create target in same directory as SH file.
+++ : This is so that make depend always knows where to find SH derivatives.
+++ case "$0" in
+++ case `pwd` in
++++ pwd
+++ echo 'Extracting x2p/Makefile (with variable substitutions)'
Extracting x2p/Makefile (with variable substitutions)
+++ rm -f Makefile
+++ cat
+++ cat
+++ : Makefile
+++ case `pwd` in
++++ pwd
+++ rm -f GNUmakefile
++ test -f ./config_h.SH
++ test '!' -f config.h
+ cd /usr/src/perl/perl-5.8.8
+ grep '^depend:' Makefile
+ dflt=y
+ case "$silent" in
+ cat

Now you need to generate make dependencies by running "make depend".
You might prefer to run it in background: "make depend > makedepend.out &"
It can take a while, so you might not want to run it right now.

+ rp='Run make depend now?'
+ . UU/myread
++ xxxm=y
++ case "$xxxm" in
++ case "$rp" in
+++ echo 'Run make depend now? [y]  '
+++ wc -c
++ test 27 -ge 80
++ echo -n 'Run make depend now? [y] '
Run make depend now? [y] ++ ans='!'
++ case "$fastread" in
++ case "$dflt" in
++ ans=
++ case "$silent-$rp" in
++ echo ' '
 
++ expr X : 'X!'
++ case "$ans" in
++ ans=y
+ case "$ans" in
+ make depend
sh ./makedepend MAKE=make
make[1]: Entering directory `/usr/src/perl/perl-5.8.8'
sh writemain lib/auto/DynaLoader/DynaLoader.a lib/auto/Win32CORE/Win32CORE.a > perlmain.c
rm -f opmini.c
cp op.c opmini.c
echo malloc.c av.c scope.c op.c doop.c doio.c dump.c hv.c mg.c reentr.c perl.c perly.c pp.c pp_hot.c pp_ctl.c pp_sys.c regcomp.c regexec.c utf8.c gv.c sv.c taint.c toke.c util.c deb.c run.c universal.c xsutils.c pad.c globals.c perlio.c perlapi.c numeric.c locale.c pp_pack.c pp_sort.c miniperlmain.c perlmain.c opmini.c | tr ' ' '\n' >.clist
make[1]: Leaving directory `/usr/src/perl/perl-5.8.8'
Finding dependencies for malloc.o.
Finding dependencies for av.o.
Finding dependencies for scope.o.
Finding dependencies for op.o.
Finding dependencies for doop.o.
Finding dependencies for doio.o.
Finding dependencies for dump.o.
Finding dependencies for hv.o.
Finding dependencies for mg.o.
Finding dependencies for reentr.o.
Finding dependencies for perl.o.
Finding dependencies for perly.o.
Finding dependencies for pp.o.
Finding dependencies for pp_hot.o.
Finding dependencies for pp_ctl.o.
Finding dependencies for pp_sys.o.
Finding dependencies for regcomp.o.
Finding dependencies for regexec.o.
Finding dependencies for utf8.o.
Finding dependencies for gv.o.
Finding dependencies for sv.o.
Finding dependencies for taint.o.
Finding dependencies for toke.o.
Finding dependencies for util.o.
Finding dependencies for deb.o.
Finding dependencies for run.o.
Finding dependencies for universal.o.
Finding dependencies for xsutils.o.
Finding dependencies for pad.o.
Finding dependencies for globals.o.
Finding dependencies for perlio.o.
Finding dependencies for perlapi.o.
Finding dependencies for numeric.o.
Finding dependencies for locale.o.
Finding dependencies for pp_pack.o.
Finding dependencies for pp_sort.o.
Finding dependencies for miniperlmain.o.
Finding dependencies for perlmain.o.
Finding dependencies for opmini.o.
make[1]: Entering directory `/usr/src/perl/perl-5.8.8'
echo Makefile.SH cflags.SH config_h.SH makeaperl.SH makedepend.SH makedir.SH myconfig.SH writemain.SH pod/Makefile.SH | tr ' ' '\n' >.shlist
make[1]: Leaving directory `/usr/src/perl/perl-5.8.8'
Updating GNUmakefile...
test -s perlmain.c && touch perlmain.c
cd x2p; make depend
make[1]: Entering directory `/usr/src/perl/perl-5.8.8/x2p'
sh ../makedepend MAKE=make
make[2]: Entering directory `/usr/src/perl/perl-5.8.8/x2p'
echo hash.c  str.c util.c walk.c | tr ' ' '\n' >.clist
make[2]: Leaving directory `/usr/src/perl/perl-5.8.8/x2p'
Finding dependencies for hash.o.
Finding dependencies for str.o.
Finding dependencies for util.o.
Finding dependencies for walk.o.
make[2]: Entering directory `/usr/src/perl/perl-5.8.8/x2p'
echo Makefile.SH cflags.SH | tr ' ' '\n' >.shlist
make[2]: Leaving directory `/usr/src/perl/perl-5.8.8/x2p'
Updating GNUmakefile...
make[1]: Leaving directory `/usr/src/perl/perl-5.8.8/x2p'
+ echo 'Now you must run '\''make'\''.'
Now you must run 'make'.
+ test -f Policy.sh
+ cat

If you compile perl5 on a different machine or from a different object
directory, copy the Policy.sh file from this object directory to the
new one before you run Configure -- this will help you with most of
the policy defaults.

+ test -f config.msg
+ rm -f 'kit*isdone' 'ark*isdone'
+ rm -rf UU
+ : End of Configure
