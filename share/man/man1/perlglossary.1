.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLGLOSSARY 1"
.TH PERLGLOSSARY 1 "2006-01-07" "perl v5.8.8" "Perl Programmers Reference Guide"
.SH "NAME"
perlglossary \- Perl Glossary
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A glossary of terms (technical and otherwise) used in the Perl documentation.
Other useful sources include the Free On-Line Dictionary of Computing
<http://foldoc.doc.ic.ac.uk/foldoc/index.html>, the Jargon File
<http://catb.org/~esr/jargon/>, and Wikipedia <http://www.wikipedia.org/>.
.Sh "A"
.IX Subsection "A"
.IP "accessor methods" 4
.IX Item "accessor methods"
A \*(L"method\*(R" used to indirectly inspect or update an \*(L"object\*(R"'s
state (its instance variables).
.IP "actual arguments" 4
.IX Item "actual arguments"
The scalar values that you supply to a \*(L"function\*(R"
or \*(L"subroutine\*(R" when you call it.  For instance, when you call
\&\f(CW\*(C`power("puff")\*(C'\fR, the string \f(CW"puff"\fR is the actual argument.  See
also \*(L"argument\*(R" and \*(L"formal arguments\*(R".
.IP "address operator" 4
.IX Item "address operator"
Some languages work directly with the memory addresses of values, but
this can be like playing with fire.  Perl provides a set of asbestos
gloves for handling all memory management.  The closest to an address
operator in Perl is the backslash operator, but it gives you a \*(L"hard reference\*(R", which is much safer than a memory address.
.IP "algorithm" 4
.IX Item "algorithm"
A well-defined sequence of steps, clearly enough explained that even a
computer could do them.
.IP "alias" 4
.IX Item "alias"
A nickname for something, which behaves in all ways as though you'd
used the original name instead of the nickname.  Temporary aliases are
implicitly created in the loop variable for \f(CW\*(C`foreach\*(C'\fR loops, in the
\&\f(CW$_\fR variable for map or grep
operators, in \f(CW$a\fR and \f(CW$b\fR during sort's
comparison function, and in each element of \f(CW@_\fR for the \*(L"actual arguments\*(R" of a subroutine call.  Permanent aliases are explicitly
created in packages by importing symbols or by
assignment to typeglobs.  Lexically scoped aliases for
package variables are explicitly created by the our
declaration.
.IP "alternatives" 4
.IX Item "alternatives"
A list of possible choices from which you may select only one, as in
\&\*(L"Would you like door A, B, or C?\*(R"  Alternatives in regular expressions
are separated with a single vertical bar: \f(CW\*(C`|\*(C'\fR.  Alternatives in
normal Perl expressions are separated with a double vertical bar:
\&\f(CW\*(C`||\*(C'\fR.  Logical alternatives in \*(L"Boolean\*(R" expressions are separated
with either \f(CW\*(C`||\*(C'\fR or \f(CW\*(C`or\*(C'\fR.
.IP "anonymous" 4
.IX Item "anonymous"
Used to describe a \*(L"referent\*(R" that is not directly accessible
through a named \*(L"variable\*(R".  Such a referent must be indirectly
accessible through at least one \*(L"hard reference\*(R".  When the last
hard reference goes away, the anonymous referent is destroyed without
pity.
.IP "architecture" 4
.IX Item "architecture"
The kind of computer you're working on, where one \*(L"kind\*(R" of computer
means all those computers sharing a compatible machine language.
Since Perl programs are (typically) simple text files, not executable
images, a Perl program is much less sensitive to the architecture it's
running on than programs in other languages, such as C, that are
compiled into machine code.  See also \*(L"platform\*(R" and \*(L"operating system\*(R".
.IP "argument" 4
.IX Item "argument"
A piece of data supplied to a program,
\&\*(L"subroutine\*(R", \*(L"function\*(R", or \*(L"method\*(R" to tell it what it's
supposed to do.  Also called a \*(L"parameter\*(R".
.IP "\s-1ARGV\s0" 4
.IX Item "ARGV"
The name of the array containing the \*(L"argument\*(R" \*(L"vector\*(R" from the
command line.  If you use the empty \f(CW\*(C`<>\*(C'\fR operator, \*(L"\s-1ARGV\s0\*(R" is
the name of both the \*(L"filehandle\*(R" used to traverse the arguments and
the \*(L"scalar\*(R" containing the name of the current input file.
.IP "arithmetical operator" 4
.IX Item "arithmetical operator"
A \*(L"symbol\*(R" such as \f(CW\*(C`+\*(C'\fR or \f(CW\*(C`/\*(C'\fR that tells Perl to do the arithmetic
you were supposed to learn in grade school.
.IP "array" 4
.IX Item "array"
An ordered sequence of values, stored such that you can
easily access any of the values using an integer \*(L"subscript\*(R"
that specifies the value's \*(L"offset\*(R" in the sequence.
.IP "array context" 4
.IX Item "array context"
An archaic expression for what is more correctly referred to as
\&\*(L"list context\*(R".
.IP "\s-1ASCII\s0" 4
.IX Item "ASCII"
The American Standard Code for Information Interchange (a 7\-bit
character set adequate only for poorly representing English text).
Often used loosely to describe the lowest 128 values of the various
\&\s-1ISO\-8859\-X\s0 character sets, a bunch of mutually incompatible 8\-bit
codes best described as half \s-1ASCII\s0.  See also \*(L"Unicode\*(R".
.IP "assertion" 4
.IX Item "assertion"
A component of a \*(L"regular expression\*(R" that must be true for the
pattern to match but does not necessarily match any characters itself.
Often used specifically to mean a \*(L"zero width\*(R" assertion.
.IP "assignment" 4
.IX Item "assignment"
An \*(L"operator\*(R" whose assigned mission in life is to change the value
of a \*(L"variable\*(R".
.IP "assignment operator" 4
.IX Item "assignment operator"
Either a regular \*(L"assignment\*(R", or a compound \*(L"operator\*(R" composed
of an ordinary assignment and some other operator, that changes the
value of a variable in place, that is, relative to its old value.  For
example, \f(CW\*(C`$a += 2\*(C'\fR adds \f(CW2\fR to \f(CW$a\fR.
.IP "associative array" 4
.IX Item "associative array"
See \*(L"hash\*(R".  Please.
.IP "associativity" 4
.IX Item "associativity"
Determines whether you do the left \*(L"operator\*(R" first or the right
\&\*(L"operator\*(R" first when you have "A \*(L"operator\*(R" B \*(L"operator\*(R" C" and
the two operators are of the same precedence.  Operators like \f(CW\*(C`+\*(C'\fR are
left associative, while operators like \f(CW\*(C`**\*(C'\fR are right associative.
See perlop for a list of operators and their associativity.
.IP "asynchronous" 4
.IX Item "asynchronous"
Said of events or activities whose relative temporal ordering is
indeterminate because too many things are going on at once.  Hence, an
asynchronous event is one you didn't know when to expect.
.IP "atom" 4
.IX Item "atom"
A \*(L"regular expression\*(R" component potentially matching a
\&\*(L"substring\*(R" containing one or more characters and treated as an
indivisible syntactic unit by any following \*(L"quantifier\*(R".  (Contrast
with an \*(L"assertion\*(R" that matches something of \*(L"zero width\*(R" and may
not be quantified.)
.IP "atomic operation" 4
.IX Item "atomic operation"
When Democritus gave the word \*(L"atom\*(R" to the indivisible bits of
matter, he meant literally something that could not be cut: \fIa\-\fR
(not) + \fItomos\fR (cuttable).  An atomic operation is an action that
can't be interrupted, not one forbidden in a nuclear-free zone.
.IP "attribute" 4
.IX Item "attribute"
A new feature that allows the declaration of variables
and subroutines with modifiers as in \f(CW\*(C`sub foo : locked
method\*(C'\fR.  Also, another name for an \*(L"instance variable\*(R" of an
\&\*(L"object\*(R".
.IP "autogeneration" 4
.IX Item "autogeneration"
A feature of \*(L"operator overloading\*(R" of objects, whereby
the behavior of certain operators can be reasonably
deduced using more fundamental operators.  This assumes that the
overloaded operators will often have the same relationships as the
regular operators.  See perlop.
.IP "autoincrement" 4
.IX Item "autoincrement"
To add one to something automatically, hence the name of the \f(CW\*(C`++\*(C'\fR
operator.  To instead subtract one from something automatically is
known as an \*(L"autodecrement\*(R".
.IP "autoload" 4
.IX Item "autoload"
To load on demand.  (Also called \*(L"lazy\*(R" loading.)  Specifically, to
call an \s-1AUTOLOAD\s0 subroutine on behalf of an
undefined subroutine.
.IP "autosplit" 4
.IX Item "autosplit"
To split a string automatically, as the \fB\-a\fR \*(L"switch\*(R" does when
running under \fB\-p\fR or \fB\-n\fR in order to emulate \*(L"awk\*(R".  (See also
the AutoSplit module, which has nothing to do with the \fB\-a\fR
switch, but a lot to do with autoloading.)
.IP "autovivification" 4
.IX Item "autovivification"
A Greco-Roman word meaning \*(L"to bring oneself to life\*(R".  In Perl,
storage locations (lvalues) spontaneously generate
themselves as needed, including the creation of any \*(L"hard reference\*(R"
values to point to the next level of storage.  The assignment
\&\f(CW\*(C`$a[5][5][5][5][5] = "quintet"\*(C'\fR potentially creates five scalar
storage locations, plus four references (in the first four scalar
locations) pointing to four new anonymous arrays (to hold the last
four scalar locations).  But the point of autovivification is that you
don't have to worry about it.
.IP "\s-1AV\s0" 4
.IX Item "AV"
Short for \*(L"array value\*(R", which refers to one of Perl's internal data
types that holds an \*(L"array\*(R".  The \*(L"\s-1AV\s0\*(R" type is a subclass of
\&\*(L"\s-1SV\s0\*(R".
.IP "awk" 4
.IX Item "awk"
Descriptive editing term\*(--short for \*(L"awkward\*(R".  Also coincidentally
refers to a venerable text-processing language from which Perl derived
some of its high-level ideas.
.Sh "B"
.IX Subsection "B"
.IP "backreference" 4
.IX Item "backreference"
A substring captured by a subpattern within
unadorned parentheses in a \*(L"regex\*(R".  Backslashed decimal numbers
(\f(CW\*(C`\e1\*(C'\fR, \f(CW\*(C`\e2\*(C'\fR, etc.)  later in the same pattern refer back to the
corresponding subpattern in the current match.  Outside the pattern,
the numbered variables (\f(CW$1\fR, \f(CW$2\fR, etc.) continue to refer to these
same values, as long as the pattern was the last successful match of
the current dynamic scope.
.IP "backtracking" 4
.IX Item "backtracking"
The practice of saying, \*(L"If I had to do it all over, I'd do it
differently,\*(R" and then actually going back and doing it all over
differently.  Mathematically speaking, it's returning from an
unsuccessful recursion on a tree of possibilities.  Perl backtracks
when it attempts to match patterns with a \*(L"regular expression\*(R", and
its earlier attempts don't pan out.  See \*(L"Backtracking\*(R" in perlre.
.IP "backward compatibility" 4
.IX Item "backward compatibility"
Means you can still run your old program because we didn't break any
of the features or bugs it was relying on.
.IP "bareword" 4
.IX Item "bareword"
A word sufficiently ambiguous to be deemed illegal under use strict 'subs'.  In the absence of that stricture, a
bareword is treated as if quotes were around it.
.IP "base class" 4
.IX Item "base class"
A generic \*(L"object\*(R" type; that is, a \*(L"class\*(R" from which other, more
specific classes are derived genetically by \*(L"inheritance\*(R".  Also
called a \*(L"superclass\*(R" by people who respect their ancestors.
.IP "big-endian" 4
.IX Item "big-endian"
From Swift: someone who eats eggs big end first.  Also used of
computers that store the most significant \*(L"byte\*(R" of a word at a
lower byte address than the least significant byte.  Often considered
superior to little-endian machines.  See also \*(L"little\-endian\*(R".
.IP "binary" 4
.IX Item "binary"
Having to do with numbers represented in base 2.  That means there's
basically two numbers, 0 and 1.  Also used to describe a \*(L"non\-text
file\*(R", presumably because such a file makes full use of all the binary
bits in its bytes.  With the advent of \*(L"Unicode\*(R", this distinction,
already suspect, loses even more of its meaning.
.IP "binary operator" 4
.IX Item "binary operator"
An \*(L"operator\*(R" that takes two operands.
.IP "bind" 4
.IX Item "bind"
To assign a specific \*(L"network address\*(R" to a \*(L"socket\*(R".
.IP "bit" 4
.IX Item "bit"
An integer in the range from 0 to 1, inclusive.  The smallest possible
unit of information storage.  An eighth of a \*(L"byte\*(R" or of a dollar.
(The term \*(L"Pieces of Eight\*(R" comes from being able to split the old
Spanish dollar into 8 bits, each of which still counted for money.
That's why a 25\-cent piece today is still \*(L"two bits\*(R".)
.IP "bit shift" 4
.IX Item "bit shift"
The movement of bits left or right in a computer word, which has the
effect of multiplying or dividing by a power of 2.
.IP "bit string" 4
.IX Item "bit string"
A sequence of bits that is actually being thought of as a
sequence of bits, for once.
.IP "bless" 4
.IX Item "bless"
In corporate life, to grant official approval to a thing, as in, \*(L"The
\&\s-1VP\s0 of Engineering has blessed our WebCruncher project.\*(R" Similarly in
Perl, to grant official approval to a \*(L"referent\*(R" so that it can
function as an \*(L"object\*(R", such as a WebCruncher object.  See
\&\*(L"bless\*(R" in perlfunc.
.IP "block" 4
.IX Item "block"
What a \*(L"process\*(R" does when it has to wait for something: \*(L"My process
blocked waiting for the disk.\*(R"  As an unrelated noun, it refers to a
large chunk of data, of a size that the \*(L"operating system\*(R" likes to
deal with (normally a power of two such as 512 or 8192).  Typically
refers to a chunk of data that's coming from or going to a disk file.
.IP "\s-1BLOCK\s0" 4
.IX Item "BLOCK"
A syntactic construct consisting of a sequence of Perl
statements that is delimited by braces.  The \f(CW\*(C`if\*(C'\fR and
\&\f(CW\*(C`while\*(C'\fR statements are defined in terms of BLOCKs, for instance.
Sometimes we also say \*(L"block\*(R" to mean a lexical scope; that is, a
sequence of statements that act like a \*(L"\s-1BLOCK\s0\*(R", such as within an
eval or a file, even though the statements aren't
delimited by braces.
.IP "block buffering" 4
.IX Item "block buffering"
A method of making input and output efficient by passing one \*(L"block\*(R"
at a time.  By default, Perl does block buffering to disk files.  See
\&\*(L"buffer\*(R" and \*(L"command buffering\*(R".
.IP "Boolean" 4
.IX Item "Boolean"
A value that is either \*(L"true\*(R" or \*(L"false\*(R".
.IP "Boolean context" 4
.IX Item "Boolean context"
A special kind of \*(L"scalar context\*(R" used in conditionals to decide
whether the \*(L"scalar value\*(R" returned by an expression is \*(L"true\*(R" or
\&\*(L"false\*(R".  Does not evaluate as either a string or a number.  See
\&\*(L"context\*(R".
.IP "breakpoint" 4
.IX Item "breakpoint"
A spot in your program where you've told the debugger to stop
execution so you can poke around and see whether anything
is wrong yet.
.IP "broadcast" 4
.IX Item "broadcast"
To send a \*(L"datagram\*(R" to multiple destinations simultaneously.
.IP "\s-1BSD\s0" 4
.IX Item "BSD"
A psychoactive drug, popular in the 80s, probably developed at
U. C. Berkeley or thereabouts.  Similar in many ways to the
prescription-only medication called \*(L"System V\*(R", but infinitely more
useful.  (Or, at least, more fun.)  The full chemical name is
\&\*(L"Berkeley Standard Distribution\*(R".
.IP "bucket" 4
.IX Item "bucket"
A location in a \*(L"hash table\*(R" containing (potentially) multiple
entries whose keys \*(L"hash\*(R" to the same hash value according to its hash
function.  (As internal policy, you don't have to worry about it,
unless you're into internals, or policy.)
.IP "buffer" 4
.IX Item "buffer"
A temporary holding location for data.  Block buffering means that the data is passed on to its destination
whenever the buffer is full.  Line buffering means
that it's passed on whenever a complete line is received.  Command buffering means that it's passed every time you do
a print command (or equivalent).  If your output is
unbuffered, the system processes it one byte at a time without the use
of a holding area.  This can be rather inefficient.
.IP "built-in" 4
.IX Item "built-in"
A \*(L"function\*(R" that is predefined in the language.  Even when hidden
by \*(L"overriding\*(R", you can always get at a built-in function by
qualifying its name with the \f(CW\*(C`CORE::\*(C'\fR pseudo\-package.
.IP "bundle" 4
.IX Item "bundle"
A group of related modules on \*(L"\s-1CPAN\s0\*(R".  (Also, sometimes refers to a
group of command-line switches grouped into one \*(L"switch cluster\*(R".)
.IP "byte" 4
.IX Item "byte"
A piece of data worth eight bits in most places.
.IP "bytecode" 4
.IX Item "bytecode"
A pidgin-like language spoken among 'droids when they don't wish to
reveal their orientation (see \*(L"endian\*(R").  Named after some similar
languages spoken (for similar reasons) between compilers and
interpreters in the late 20th century.  These languages are
characterized by representing everything as a
non-architecture-dependent sequence of bytes.
.Sh "C"
.IX Subsection "C"
.IP "C" 4
.IX Item "C"
A language beloved by many for its inside-out \*(L"type\*(R" definitions,
inscrutable \*(L"precedence\*(R" rules, and heavy \*(L"overloading\*(R" of the
function-call mechanism.  (Well, actually, people first switched to C
because they found lowercase identifiers easier to read than upper.)
Perl is written in C, so it's not surprising that Perl borrowed a few
ideas from it.
.IP "C preprocessor" 4
.IX Item "C preprocessor"
The typical C compiler's first pass, which processes lines beginning
with \f(CW\*(C`#\*(C'\fR for conditional compilation and macro definition and does
various manipulations of the program text based on the current
definitions.  Also known as \fIcpp\fR(1).
.IP "call by reference" 4
.IX Item "call by reference"
An \*(L"argument\*(R"\-passing mechanism in which the \*(L"formal arguments\*(R"
refer directly to the \*(L"actual arguments\*(R", and the \*(L"subroutine\*(R" can
change the actual arguments by changing the formal arguments.  That
is, the formal argument is an \*(L"alias\*(R" for the actual argument.  See
also \*(L"call by value\*(R".
.IP "call by value" 4
.IX Item "call by value"
An \*(L"argument\*(R"\-passing mechanism in which the \*(L"formal arguments\*(R"
refer to a copy of the \*(L"actual arguments\*(R", and the \*(L"subroutine\*(R"
cannot change the actual arguments by changing the formal arguments.
See also \*(L"call by reference\*(R".
.IP "callback" 4
.IX Item "callback"
A \*(L"handler\*(R" that you register with some other part of your program
in the hope that the other part of your program will \*(L"trigger\*(R" your
handler when some event of interest transpires.
.IP "canonical" 4
.IX Item "canonical"
Reduced to a standard form to facilitate comparison.
.IP "capturing" 4
.IX Item "capturing"
The use of parentheses around a \*(L"subpattern\*(R" in a \*(L"regular expression\*(R" to store the matched \*(L"substring\*(R" as a \*(L"backreference\*(R".
(Captured strings are also returned as a list in \*(L"list context\*(R".)
.IP "character" 4
.IX Item "character"
A small integer representative of a unit of orthography.
Historically, characters were usually stored as fixed-width integers
(typically in a byte, or maybe two, depending on the character set),
but with the advent of \s-1UTF\-8\s0, characters are often stored in a
variable number of bytes depending on the size of the integer that
represents the character.  Perl manages this transparently for you,
for the most part.
.IP "character class" 4
.IX Item "character class"
A square-bracketed list of characters used in a \*(L"regular expression\*(R"
to indicate that any character of the set may occur at a given point.
Loosely, any predefined set of characters so used.
.IP "character property" 4
.IX Item "character property"
A predefined \*(L"character class\*(R" matchable by the \f(CW\*(C`\ep\*(C'\fR
\&\*(L"metasymbol\*(R".  Many standard properties are defined for \*(L"Unicode\*(R".
.IP "circumfix operator" 4
.IX Item "circumfix operator"
An \*(L"operator\*(R" that surrounds its \*(L"operand\*(R", like the angle
operator, or parentheses, or a hug.
.IP "class" 4
.IX Item "class"
A user-defined \*(L"type\*(R", implemented in Perl via a \*(L"package\*(R" that
provides (either directly or by inheritance) methods (that
is, subroutines) to handle instances of
the class (its objects).  See also \*(L"inheritance\*(R".
.IP "class method" 4
.IX Item "class method"
A \*(L"method\*(R" whose \*(L"invocant\*(R" is a \*(L"package\*(R" name, not an
\&\*(L"object\*(R" reference.  A method associated with the class as a whole.
.IP "client" 4
.IX Item "client"
In networking, a \*(L"process\*(R" that initiates contact with a \*(L"server\*(R"
process in order to exchange data and perhaps receive a service.
.IP "cloister" 4
.IX Item "cloister"
A \*(L"cluster\*(R" used to restrict the scope of a \*(L"regular expression modifier\*(R".
.IP "closure" 4
.IX Item "closure"
An \*(L"anonymous\*(R" subroutine that, when a reference to it is generated
at run time, keeps track of the identities of externally visible
lexical variables even after those lexical
variables have supposedly gone out of \*(L"scope\*(R".  They're called
\&\*(L"closures\*(R" because this sort of behavior gives mathematicians a sense
of closure.
.IP "cluster" 4
.IX Item "cluster"
A parenthesized \*(L"subpattern\*(R" used to group parts of a \*(L"regular expression\*(R" into a single \*(L"atom\*(R".
.IP "\s-1CODE\s0" 4
.IX Item "CODE"
The word returned by the ref function when you apply
it to a reference to a subroutine.  See also \*(L"\s-1CV\s0\*(R".
.IP "code generator" 4
.IX Item "code generator"
A system that writes code for you in a low-level language, such as
code to implement the backend of a compiler.  See \*(L"program generator\*(R".
.IP "code subpattern" 4
.IX Item "code subpattern"
A \*(L"regular expression\*(R" subpattern whose real purpose is to execute
some Perl code, for example, the \f(CW\*(C`(?{...})\*(C'\fR and \f(CW\*(C`(??{...})\*(C'\fR
subpatterns.
.IP "collating sequence" 4
.IX Item "collating sequence"
The order into which characters sort.  This is used by
\&\*(L"string\*(R" comparison routines to decide, for example, where in this
glossary to put \*(L"collating sequence\*(R".
.IP "command" 4
.IX Item "command"
In \*(L"shell\*(R" programming, the syntactic combination of a program name
and its arguments.  More loosely, anything you type to a shell (a
command interpreter) that starts it doing something.  Even more
loosely, a Perl \*(L"statement\*(R", which might start with a \*(L"label\*(R" and
typically ends with a semicolon.
.IP "command buffering" 4
.IX Item "command buffering"
A mechanism in Perl that lets you store up the output of each Perl
\&\*(L"command\*(R" and then flush it out as a single request to the
\&\*(L"operating system\*(R".  It's enabled by setting the \f(CW$|\fR
(\f(CW$AUTOFLUSH\fR) variable to a true value.  It's used when you don't
want data sitting around not going where it's supposed to, which may
happen because the default on a \*(L"file\*(R" or \*(L"pipe\*(R" is to use
\&\*(L"block buffering\*(R".
.IP "command name" 4
.IX Item "command name"
The name of the program currently executing, as typed on the command
line.  In C, the \*(L"command\*(R" name is passed to the program as the
first command-line argument.  In Perl, it comes in separately as
\&\f(CW$0\fR.
.IP "command-line arguments" 4
.IX Item "command-line arguments"
The values you supply along with a program name when you
tell a \*(L"shell\*(R" to execute a \*(L"command\*(R".  These values are passed to
a Perl program through \f(CW@ARGV\fR.
.IP "comment" 4
.IX Item "comment"
A remark that doesn't affect the meaning of the program.  In Perl, a
comment is introduced by a \f(CW\*(C`#\*(C'\fR character and continues to the end of
the line.
.IP "compilation unit" 4
.IX Item "compilation unit"
The \*(L"file\*(R" (or \*(L"string\*(R", in the case of eval)
that is currently being compiled.
.IP "compile phase" 4
.IX Item "compile phase"
Any time before Perl starts running your main program.  See also
\&\*(L"run phase\*(R".  Compile phase is mostly spent in \*(L"compile time\*(R", but
may also be spent in \*(L"run time\*(R" when \f(CW\*(C`BEGIN\*(C'\fR blocks,
use declarations, or constant subexpressions are being
evaluated.  The startup and import code of any use
declaration is also run during compile phase.
.IP "compile time" 4
.IX Item "compile time"
The time when Perl is trying to make sense of your code, as opposed to
when it thinks it knows what your code means and is merely trying to
do what it thinks your code says to do, which is \*(L"run time\*(R".
.IP "compiler" 4
.IX Item "compiler"
Strictly speaking, a program that munches up another program and spits
out yet another file containing the program in a \*(L"more executable\*(R"
form, typically containing native machine instructions.  The \fIperl\fR
program is not a compiler by this definition, but it does contain a
kind of compiler that takes a program and turns it into a more
executable form (syntax trees) within the \fIperl\fR
process itself, which the \*(L"interpreter\*(R" then interprets.  There are,
however, extension modules to get Perl to act more like a
\&\*(L"real\*(R" compiler.  See O.
.IP "composer" 4
.IX Item "composer"
A \*(L"constructor\*(R" for a \*(L"referent\*(R" that isn't really an \*(L"object\*(R",
like an anonymous array or a hash (or a sonata, for that matter).  For
example, a pair of braces acts as a composer for a hash, and a pair of
brackets acts as a composer for an array.  See \*(L"Making References\*(R" in perlref.
.IP "concatenation" 4
.IX Item "concatenation"
The process of gluing one cat's nose to another cat's tail.  Also, a
similar operation on two strings.
.IP "conditional" 4
.IX Item "conditional"
Something \*(L"iffy\*(R".  See \*(L"Boolean context\*(R".
.IP "connection" 4
.IX Item "connection"
In telephony, the temporary electrical circuit between the caller's
and the callee's phone.  In networking, the same kind of temporary
circuit between a \*(L"client\*(R" and a \*(L"server\*(R".
.IP "construct" 4
.IX Item "construct"
As a noun, a piece of syntax made up of smaller pieces.  As a
transitive verb, to create an \*(L"object\*(R" using a \*(L"constructor\*(R".
.IP "constructor" 4
.IX Item "constructor"
Any \*(L"class method\*(R", instance \*(L"method\*(R", or \*(L"subroutine\*(R"
that composes, initializes, blesses, and returns an \*(L"object\*(R".
Sometimes we use the term loosely to mean a \*(L"composer\*(R".
.IP "context" 4
.IX Item "context"
The surroundings, or environment.  The context given by the
surrounding code determines what kind of data a particular
\&\*(L"expression\*(R" is expected to return.  The three primary contexts are
\&\*(L"list context\*(R", \*(L"scalar context\*(R", and \*(L"void context\*(R".  Scalar
context is sometimes subdivided into \*(L"Boolean context\*(R", \*(L"numeric context\*(R", \*(L"string context\*(R", and \*(L"void context\*(R".  There's also a
\&\*(L"don't care\*(R" scalar context (which is dealt with in Programming Perl,
Third Edition, Chapter 2, \*(L"Bits and Pieces\*(R" if you care).
.IP "continuation" 4
.IX Item "continuation"
The treatment of more than one physical \*(L"line\*(R" as a single logical
line.  \*(L"Makefile\*(R" lines are continued by putting a backslash before
the \*(L"newline\*(R".  Mail headers as defined by \s-1RFC\s0 822 are continued by
putting a space or tab \fIafter\fR the newline.  In general, lines in
Perl do not need any form of continuation mark, because \*(L"whitespace\*(R"
(including newlines) is gleefully ignored.  Usually.
.IP "core dump" 4
.IX Item "core dump"
The corpse of a \*(L"process\*(R", in the form of a file left in the
\&\*(L"working directory\*(R" of the process, usually as a result of certain
kinds of fatal error.
.IP "\s-1CPAN\s0" 4
.IX Item "CPAN"
The Comprehensive Perl Archive Network.  (See "What modules and extensions are available for Perl? What is \s-1CPAN\s0? What does \s-1CPAN\s0/src/... mean?" in perlfaq2).
.IP "cracker" 4
.IX Item "cracker"
Someone who breaks security on computer systems.  A cracker may be a
true \*(L"hacker\*(R" or only a \*(L"script kiddie\*(R".
.IP "current package" 4
.IX Item "current package"
The \*(L"package\*(R" in which the current statement is compiled.  Scan
backwards in the text of your program through the current lexical scope or any enclosing lexical scopes till you find
a package declaration.  That's your current package name.
.IP "current working directory" 4
.IX Item "current working directory"
See \*(L"working directory\*(R".
.IP "currently selected output channel" 4
.IX Item "currently selected output channel"
The last \*(L"filehandle\*(R" that was designated with
select(\f(CW\*(C`FILEHANDLE\*(C'\fR); \*(L"\s-1STDOUT\s0\*(R", if no filehandle
has been selected.
.IP "\s-1CV\s0" 4
.IX Item "CV"
An internal \*(L"code value\*(R" typedef, holding a \*(L"subroutine\*(R".  The \*(L"\s-1CV\s0\*(R"
type is a subclass of \*(L"\s-1SV\s0\*(R".
.Sh "D"
.IX Subsection "D"
.IP "dangling statement" 4
.IX Item "dangling statement"
A bare, single \*(L"statement\*(R", without any braces, hanging off an \f(CW\*(C`if\*(C'\fR
or \f(CW\*(C`while\*(C'\fR conditional.  C allows them.  Perl doesn't.
.IP "data structure" 4
.IX Item "data structure"
How your various pieces of data relate to each other and what shape
they make when you put them all together, as in a rectangular table or
a triangular-shaped tree.
.IP "data type" 4
.IX Item "data type"
A set of possible values, together with all the operations that know
how to deal with those values.  For example, a numeric data type has a
certain set of numbers that you can work with and various mathematical
operations that you can do on the numbers but would make little sense
on, say, a string such as \f(CW"Kilroy"\fR.  Strings have their own
operations, such as \*(L"concatenation\*(R".  Compound types made of a
number of smaller pieces generally have operations to compose and
decompose them, and perhaps to rearrange them.  Objects
that model things in the real world often have operations that
correspond to real activities.  For instance, if you model an
elevator, your elevator object might have an \f(CW\*(C`open_door()\*(C'\fR
\&\*(L"method\*(R".
.IP "datagram" 4
.IX Item "datagram"
A packet of data, such as a \*(L"\s-1UDP\s0\*(R" message, that (from the viewpoint
of the programs involved) can be sent independently over the network.
(In fact, all packets are sent independently at the \*(L"\s-1IP\s0\*(R" level, but
\&\*(L"stream\*(R" protocols such as \*(L"\s-1TCP\s0\*(R" hide this from your program.)
.IP "\s-1DBM\s0" 4
.IX Item "DBM"
Stands for \*(L"Data Base Management\*(R" routines, a set of routines that
emulate an \*(L"associative array\*(R" using disk files.  The routines use a
dynamic hashing scheme to locate any entry with only two disk
accesses.  \s-1DBM\s0 files allow a Perl program to keep a persistent
\&\*(L"hash\*(R" across multiple invocations.  You can tie
your hash variables to various \s-1DBM\s0 implementations\*(--see AnyDBM_File
and DB_File.
.IP "declaration" 4
.IX Item "declaration"
An \*(L"assertion\*(R" that states something exists and perhaps describes
what it's like, without giving any commitment as to how or where
you'll use it.  A declaration is like the part of your recipe that
says, \*(L"two cups flour, one large egg, four or five tadpoles...\*(R"  See
\&\*(L"statement\*(R" for its opposite.  Note that some declarations also
function as statements.  Subroutine declarations also act as
definitions if a body is supplied.
.IP "decrement" 4
.IX Item "decrement"
To subtract a value from a variable, as in "decrement \f(CW$x\fR\*(L" (meaning
to remove 1 from its value) or \*(R"decrement \f(CW$x\fR by 3".
.IP "default" 4
.IX Item "default"
A \*(L"value\*(R" chosen for you if you don't supply a value of your own.
.IP "defined" 4
.IX Item "defined"
Having a meaning.  Perl thinks that some of the things people try to
do are devoid of meaning, in particular, making use of variables that
have never been given a \*(L"value\*(R" and performing certain operations on
data that isn't there.  For example, if you try to read data past the
end of a file, Perl will hand you back an undefined value.  See also
\&\*(L"false\*(R" and \*(L"defined\*(R" in perlfunc.
.IP "delimiter" 4
.IX Item "delimiter"
A \*(L"character\*(R" or \*(L"string\*(R" that sets bounds to an arbitrarily-sized
textual object, not to be confused with a \*(L"separator\*(R" or
\&\*(L"terminator\*(R".  \*(L"To delimit\*(R" really just means \*(L"to surround\*(R" or \*(L"to
enclose\*(R" (like these parentheses are doing).
.IP "dereference" 4
.IX Item "dereference"
A fancy computer science term meaning "to follow a \*(L"reference\*(R" to
what it points to\*(L".  The \*(R"de" part of it refers to the fact that
you're taking away one level of \*(L"indirection\*(R".
.IP "derived class" 4
.IX Item "derived class"
A \*(L"class\*(R" that defines some of its methods in terms of a
more generic class, called a \*(L"base class\*(R".  Note that classes aren't
classified exclusively into base classes or derived classes: a class
can function as both a derived class and a base class simultaneously,
which is kind of classy.
.IP "descriptor" 4
.IX Item "descriptor"
See \*(L"file descriptor\*(R".
.IP "destroy" 4
.IX Item "destroy"
To deallocate the memory of a \*(L"referent\*(R" (first triggering its
\&\f(CW\*(C`DESTROY\*(C'\fR method, if it has one).
.IP "destructor" 4
.IX Item "destructor"
A special \*(L"method\*(R" that is called when an \*(L"object\*(R" is thinking
about destroying itself.  A Perl program's \f(CW\*(C`DESTROY\*(C'\fR
method doesn't do the actual destruction; Perl just
triggers the method in case the \*(L"class\*(R" wants to do any
associated cleanup.
.IP "device" 4
.IX Item "device"
A whiz-bang hardware gizmo (like a disk or tape drive or a modem or a
joystick or a mouse) attached to your computer, that the \*(L"operating system\*(R" tries to make look like a \*(L"file\*(R" (or a bunch of files).
Under Unix, these fake files tend to live in the \fI/dev\fR directory.
.IP "directive" 4
.IX Item "directive"
A \*(L"pod\*(R" directive.  See perlpod.
.IP "directory" 4
.IX Item "directory"
A special file that contains other files.  Some operating systems call these \*(L"folders\*(R", \*(L"drawers\*(R", or
\&\*(L"catalogs\*(R".
.IP "directory handle" 4
.IX Item "directory handle"
A name that represents a particular instance of opening a directory to
read it, until you close it.  See the opendir
function.
.IP "dispatch" 4
.IX Item "dispatch"
To send something to its correct destination.  Often used
metaphorically to indicate a transfer of programmatic control to a
destination selected algorithmically, often by lookup in a table of
function references or, in the case of object
methods, by traversing the inheritance tree looking for the
most specific definition for the method.
.IP "distribution" 4
.IX Item "distribution"
A standard, bundled release of a system of software.  The default
usage implies source code is included.  If that is not the case, it
will be called a \*(L"binary\-only\*(R" distribution.
.IP "dweomer" 4
.IX Item "dweomer"
An enchantment, illusion, phantasm, or jugglery.  Said when Perl's
magical \*(L"dwimmer\*(R" effects don't do what you expect, but rather seem
to be the product of arcane dweomercraft, sorcery, or wonder working.
[From Old English]
.IP "dwimmer" 4
.IX Item "dwimmer"
\&\s-1DWIM\s0 is an acronym for \*(L"Do What I Mean\*(R", the principle that something
should just do what you want it to do without an undue amount of fuss.
A bit of code that does \*(L"dwimming\*(R" is a \*(L"dwimmer\*(R".  Dwimming can
require a great deal of behind-the-scenes magic, which (if it doesn't
stay properly behind the scenes) is called a \*(L"dweomer\*(R" instead.
.IP "dynamic scoping" 4
.IX Item "dynamic scoping"
Dynamic scoping works over a dynamic scope, making variables visible
throughout the rest of the \*(L"block\*(R" in which they are first used and
in any subroutines that are called by the rest of the
block.  Dynamically scoped variables can have their values temporarily
changed (and implicitly restored later) by a local
operator.  (Compare \*(L"lexical scoping\*(R".)  Used more loosely to mean
how a subroutine that is in the middle of calling another subroutine
\&\*(L"contains\*(R" that subroutine at \*(L"run time\*(R".
.Sh "E"
.IX Subsection "E"
.IP "eclectic" 4
.IX Item "eclectic"
Derived from many sources.  Some would say \fItoo\fR many.
.IP "element" 4
.IX Item "element"
A basic building block.  When you're talking about an \*(L"array\*(R", it's
one of the items that make up the array.
.IP "embedding" 4
.IX Item "embedding"
When something is contained in something else, particularly when that
might be considered surprising: \*(L"I've embedded a complete Perl
interpreter in my editor!\*(R"
.IP "empty subclass test" 4
.IX Item "empty subclass test"
The notion that an empty \*(L"derived class\*(R" should behave exactly like
its \*(L"base class\*(R".
.IP "en passant" 4
.IX Item "en passant"
When you change a \*(L"value\*(R" as it is being copied.  [From French, \*(L"in
passing\*(R", as in the exotic pawn-capturing maneuver in chess.]
.IP "encapsulation" 4
.IX Item "encapsulation"
The veil of abstraction separating the \*(L"interface\*(R" from the
\&\*(L"implementation\*(R" (whether enforced or not), which mandates that all
access to an \*(L"object\*(R"'s state be through methods alone.
.IP "endian" 4
.IX Item "endian"
See \*(L"little\-endian\*(R" and \*(L"big\-endian\*(R".
.IP "environment" 4
.IX Item "environment"
The collective set of environment variables
your \*(L"process\*(R" inherits from its parent.  Accessed via \f(CW%ENV\fR.
.IP "environment variable" 4
.IX Item "environment variable"
A mechanism by which some high-level agent such as a user can pass its
preferences down to its future offspring (child processes,
grandchild processes, great-grandchild processes, and so on).  Each
environment variable is a \*(L"key\*(R"/\*(L"value\*(R" pair, like one entry in a
\&\*(L"hash\*(R".
.IP "\s-1EOF\s0" 4
.IX Item "EOF"
End of File.  Sometimes used metaphorically as the terminating string
of a \*(L"here document\*(R".
.IP "errno" 4
.IX Item "errno"
The error number returned by a \*(L"syscall\*(R" when it fails.  Perl refers
to the error by the name \f(CW$!\fR (or \f(CW$OS_ERROR\fR if you use the English
module).
.IP "error" 4
.IX Item "error"
See \*(L"exception\*(R" or \*(L"fatal error\*(R".
.IP "escape sequence" 4
.IX Item "escape sequence"
See \*(L"metasymbol\*(R".
.IP "exception" 4
.IX Item "exception"
A fancy term for an error.  See \*(L"fatal error\*(R".
.IP "exception handling" 4
.IX Item "exception handling"
The way a program responds to an error.  The exception handling
mechanism in Perl is the eval operator.
.IP "exec" 4
.IX Item "exec"
To throw away the current \*(L"process\*(R"'s program and replace it with
another without exiting the process or relinquishing any resources
held (apart from the old memory image).
.IP "executable file" 4
.IX Item "executable file"
A \*(L"file\*(R" that is specially marked to tell the \*(L"operating system\*(R"
that it's okay to run this file as a program.  Usually shortened to
\&\*(L"executable\*(R".
.IP "execute" 4
.IX Item "execute"
To run a program or \*(L"subroutine\*(R".  (Has nothing
to do with the kill built\-in, unless you're trying to
run a \*(L"signal handler\*(R".)
.IP "execute bit" 4
.IX Item "execute bit"
The special mark that tells the operating system it can run this
program.  There are actually three execute bits under Unix, and which
bit gets used depends on whether you own the file singularly,
collectively, or not at all.
.IP "exit status" 4
.IX Item "exit status"
See \*(L"status\*(R".
.IP "export" 4
.IX Item "export"
To make symbols from a \*(L"module\*(R" available for \*(L"import\*(R" by other modules.
.IP "expression" 4
.IX Item "expression"
Anything you can legally say in a spot where a \*(L"value\*(R" is required.
Typically composed of literals, variables,
operators, functions, and \*(L"subroutine\*(R"
calls, not necessarily in that order.
.IP "extension" 4
.IX Item "extension"
A Perl module that also pulls in compiled C or \*(C+ code.  More
generally, any experimental option that can be compiled into Perl,
such as multithreading.
.Sh "F"
.IX Subsection "F"
.IP "false" 4
.IX Item "false"
In Perl, any value that would look like \f(CW""\fR or \f(CW"0"\fR if evaluated
in a string context.  Since undefined values evaluate to \f(CW""\fR, all
undefined values are false, but not all false values are undefined.
.IP "\s-1FAQ\s0" 4
.IX Item "FAQ"
Frequently Asked Question (although not necessarily frequently
answered, especially if the answer appears in the Perl \s-1FAQ\s0 shipped
standard with Perl).
.IP "fatal error" 4
.IX Item "fatal error"
An uncaught \*(L"exception\*(R", which causes termination of the \*(L"process\*(R"
after printing a message on your \*(L"standard error\*(R" stream.  Errors
that happen inside an eval are not fatal.  Instead,
the eval terminates after placing the exception
message in the \f(CW$@\fR (\f(CW$EVAL_ERROR\fR) variable.  You can try to
provoke a fatal error with the die operator (known as
throwing or raising an exception), but this may be caught by a
dynamically enclosing eval.  If not caught, the
die becomes a fatal error.
.IP "field" 4
.IX Item "field"
A single piece of numeric or string data that is part of a longer
\&\*(L"string\*(R", \*(L"record\*(R", or \*(L"line\*(R".  Variable-width fields are usually
split up by separators (so use split to
extract the fields), while fixed-width fields are usually at fixed
positions (so use unpack).  Instance variables are also known as fields.
.IP "\s-1FIFO\s0" 4
.IX Item "FIFO"
First In, First Out.  See also \*(L"\s-1LIFO\s0\*(R".  Also, a nickname for a
\&\*(L"named pipe\*(R".
.IP "file" 4
.IX Item "file"
A named collection of data, usually stored on disk in a \*(L"directory\*(R"
in a \*(L"filesystem\*(R".  Roughly like a document, if you're into office
metaphors.  In modern filesystems, you can actually give a file more
than one name.  Some files have special properties, like directories
and devices.
.IP "file descriptor" 4
.IX Item "file descriptor"
The little number the \*(L"operating system\*(R" uses to keep track of which
opened \*(L"file\*(R" you're talking about.  Perl hides the file descriptor
inside a "standard I/O" stream and then attaches the stream to
a \*(L"filehandle\*(R".
.IP "file test operator" 4
.IX Item "file test operator"
A built-in unary operator that you use to determine whether something
is \*(L"true\*(R" about a file, such as \f(CW\*(C`\-o $filename\*(C'\fR to test whether
you're the owner of the file.
.IP "fileglob" 4
.IX Item "fileglob"
A \*(L"wildcard\*(R" match on filenames.  See the
glob function.
.IP "filehandle" 4
.IX Item "filehandle"
An identifier (not necessarily related to the real name of a file)
that represents a particular instance of opening a file until you
close it.  If you're going to open and close several different files
in succession, it's fine to open each of them with the same
filehandle, so you don't have to write out separate code to process
each file.
.IP "filename" 4
.IX Item "filename"
One name for a file.  This name is listed in a \*(L"directory\*(R", and you
can use it in an open to tell the \*(L"operating system\*(R" exactly which file you want to open, and associate the file
with a \*(L"filehandle\*(R" which will carry the subsequent identity of that
file in your program, until you close it.
.IP "filesystem" 4
.IX Item "filesystem"
A set of directories and files residing on a
partition of the disk.  Sometimes known as a \*(L"partition\*(R".  You can
change the file's name or even move a file around from directory to
directory within a filesystem without actually moving the file itself,
at least under Unix.
.IP "filter" 4
.IX Item "filter"
A program designed to take a \*(L"stream\*(R" of input and transform it into
a stream of output.
.IP "flag" 4
.IX Item "flag"
We tend to avoid this term because it means so many things.  It may
mean a command-line \*(L"switch\*(R" that takes no argument
itself (such as Perl's \fB\-n\fR and \fB\-p\fR
flags) or, less frequently, a single-bit indicator (such as the
\&\f(CW\*(C`O_CREAT\*(C'\fR and \f(CW\*(C`O_EXCL\*(C'\fR flags used in
sysopen).
.IP "floating point" 4
.IX Item "floating point"
A method of storing numbers in \*(L"scientific notation\*(R", such that the
precision of the number is independent of its magnitude (the decimal
point \*(L"floats\*(R").  Perl does its numeric work with floating-point
numbers (sometimes called \*(L"floats\*(R"), when it can't get away with
using integers.  Floating-point numbers are mere
approximations of real numbers.
.IP "flush" 4
.IX Item "flush"
The act of emptying a \*(L"buffer\*(R", often before it's full.
.IP "\s-1FMTEYEWTK\s0" 4
.IX Item "FMTEYEWTK"
Far More Than Everything You Ever Wanted To Know.  An exhaustive
treatise on one narrow topic, something of a super\-\*(L"\s-1FAQ\s0\*(R".  See Tom
for far more.
.IP "fork" 4
.IX Item "fork"
To create a child \*(L"process\*(R" identical to the parent process at its
moment of conception, at least until it gets ideas of its own.  A
thread with protected memory.
.IP "formal arguments" 4
.IX Item "formal arguments"
The generic names by which a \*(L"subroutine\*(R" knows its
arguments.  In many languages, formal arguments are
always given individual names, but in Perl, the formal arguments are
just the elements of an array.  The formal arguments to a Perl program
are \f(CW$ARGV[0]\fR, \f(CW$ARGV[1]\fR, and so on.  Similarly, the formal
arguments to a Perl subroutine are \f(CW$_[0]\fR, \f(CW$_[1]\fR, and so on.  You
may give the arguments individual names by assigning the values to a
my list.  See also \*(L"actual arguments\*(R".
.IP "format" 4
.IX Item "format"
A specification of how many spaces and digits and things to put
somewhere so that whatever you're printing comes out nice and pretty.
.IP "freely available" 4
.IX Item "freely available"
Means you don't have to pay money to get it, but the copyright on it
may still belong to someone else (like Larry).
.IP "freely redistributable" 4
.IX Item "freely redistributable"
Means you're not in legal trouble if you give a bootleg copy of it to
your friends and we find out about it.  In fact, we'd rather you gave
a copy to all your friends.
.IP "freeware" 4
.IX Item "freeware"
Historically, any software that you give away, particularly if you
make the source code available as well.  Now often called \f(CW\*(C`open
source software\*(C'\fR.  Recently there has been a trend to use the term in
contradistinction to \*(L"open source software\*(R", to refer only to free
software released under the Free Software Foundation's \s-1GPL\s0 (General
Public License), but this is difficult to justify etymologically.
.IP "function" 4
.IX Item "function"
Mathematically, a mapping of each of a set of input values to a
particular output value.  In computers, refers to a \*(L"subroutine\*(R" or
\&\*(L"operator\*(R" that returns a \*(L"value\*(R".  It may or may not have input
values (called arguments).
.IP "funny character" 4
.IX Item "funny character"
Someone like Larry, or one of his peculiar friends.  Also refers to
the strange prefixes that Perl requires as noun markers on its
variables.
.IP "garbage collection" 4
.IX Item "garbage collection"
A misnamed feature\*(--it should be called, \*(L"expecting your mother to
pick up after you\*(R".  Strictly speaking, Perl doesn't do this, but it
relies on a reference-counting mechanism to keep things tidy.
However, we rarely speak strictly and will often refer to the
reference-counting scheme as a form of garbage collection.  (If it's
any comfort, when your interpreter exits, a \*(L"real\*(R" garbage collector
runs to make sure everything is cleaned up if you've been messy with
circular references and such.)
.Sh "G"
.IX Subsection "G"
.IP "\s-1GID\s0" 4
.IX Item "GID"
Group ID\*(--in Unix, the numeric group \s-1ID\s0 that the \*(L"operating system\*(R"
uses to identify you and members of your \*(L"group\*(R".
.IP "glob" 4
.IX Item "glob"
Strictly, the shell's \f(CW\*(C`*\*(C'\fR character, which will match a \*(L"glob\*(R" of
characters when you're trying to generate a list of filenames.
Loosely, the act of using globs and similar symbols to do pattern
matching.  See also \*(L"fileglob\*(R" and \*(L"typeglob\*(R".
.IP "global" 4
.IX Item "global"
Something you can see from anywhere, usually used of
variables and subroutines that are visible
everywhere in your program.  In Perl, only certain special variables
are truly global\*(--most variables (and all subroutines) exist only in
the current \*(L"package\*(R".  Global variables can be declared with
our.  See \*(L"our\*(R" in perlfunc.
.IP "global destruction" 4
.IX Item "global destruction"
The \*(L"garbage collection\*(R" of globals (and the running of any
associated object destructors) that takes place when a Perl
\&\*(L"interpreter\*(R" is being shut down.  Global destruction should not be
confused with the Apocalypse, except perhaps when it should.
.IP "glue language" 4
.IX Item "glue language"
A language such as Perl that is good at hooking things together that
weren't intended to be hooked together.
.IP "granularity" 4
.IX Item "granularity"
The size of the pieces you're dealing with, mentally speaking.
.IP "greedy" 4
.IX Item "greedy"
A \*(L"subpattern\*(R" whose \*(L"quantifier\*(R" wants to match as many things as
possible.
.IP "grep" 4
.IX Item "grep"
Originally from the old Unix editor command for \*(L"Globally search for a
Regular Expression and Print it\*(R", now used in the general sense of any
kind of search, especially text searches.  Perl has a built-in
grep function that searches a list for elements
matching any given criterion, whereas the \fIgrep\fR(1) program searches
for lines matching a \*(L"regular expression\*(R" in one or more files.
.IP "group" 4
.IX Item "group"
A set of users of which you are a member.  In some operating systems
(like Unix), you can give certain file access permissions to other
members of your group.
.IP "\s-1GV\s0" 4
.IX Item "GV"
An internal \*(L"glob value\*(R" typedef, holding a \*(L"typeglob\*(R".  The \*(L"\s-1GV\s0\*(R"
type is a subclass of \*(L"\s-1SV\s0\*(R".
.Sh "H"
.IX Subsection "H"
.IP "hacker" 4
.IX Item "hacker"
Someone who is brilliantly persistent in solving technical problems,
whether these involve golfing, fighting orcs, or programming.  Hacker
is a neutral term, morally speaking.  Good hackers are not to be
confused with evil crackers or clueless script kiddies.  If you confuse them, we will presume that
you are either evil or clueless.
.IP "handler" 4
.IX Item "handler"
A \*(L"subroutine\*(R" or \*(L"method\*(R" that is called by Perl when your
program needs to respond to some internal event, such as a \*(L"signal\*(R",
or an encounter with an operator subject to \*(L"operator overloading\*(R".
See also \*(L"callback\*(R".
.IP "hard reference" 4
.IX Item "hard reference"
A \*(L"scalar\*(R" \*(L"value\*(R" containing the actual address of a
\&\*(L"referent\*(R", such that the referent's \*(L"reference\*(R" count accounts
for it.  (Some hard references are held internally, such as the
implicit reference from one of a \*(L"typeglob\*(R"'s variable slots to its
corresponding referent.)  A hard reference is different from a
\&\*(L"symbolic reference\*(R".
.IP "hash" 4
.IX Item "hash"
An unordered association of \*(L"key\*(R"/\*(L"value\*(R" pairs, stored such that
you can easily use a string \*(L"key\*(R" to look up its associated data
\&\*(L"value\*(R".  This glossary is like a hash, where the word to be defined
is the key, and the definition is the value.  A hash is also sometimes
septisyllabically called an \*(L"associative array\*(R", which is a pretty
good reason for simply calling it a \*(L"hash\*(R" instead.
.IP "hash table" 4
.IX Item "hash table"
A data structure used internally by Perl for implementing associative
arrays (hashes) efficiently.  See also \*(L"bucket\*(R".
.IP "header file" 4
.IX Item "header file"
A file containing certain required definitions that you must include
\&\*(L"ahead\*(R" of the rest of your program to do certain obscure operations.
A C header file has a \fI.h\fR extension.  Perl doesn't really have
header files, though historically Perl has sometimes used translated
\&\fI.h\fR files with a \fI.ph\fR extension.  See \*(L"require\*(R" in perlfunc.
(Header files have been superseded by the \*(L"module\*(R" mechanism.)
.IP "here document" 4
.IX Item "here document"
So called because of a similar construct in shells that
pretends that the lines following the \*(L"command\*(R" are a
separate \*(L"file\*(R" to be fed to the command, up to some terminating
string.  In Perl, however, it's just a fancy form of quoting.
.IP "hexadecimal" 4
.IX Item "hexadecimal"
A number in base 16, \*(L"hex\*(R" for short.  The digits for 10 through 16
are customarily represented by the letters \f(CW\*(C`a\*(C'\fR through \f(CW\*(C`f\*(C'\fR.
Hexadecimal constants in Perl start with \f(CW\*(C`0x\*(C'\fR.  See also
\&\*(L"hex\*(R" in perlfunc.
.IP "home directory" 4
.IX Item "home directory"
The directory you are put into when you log in.  On a Unix system, the
name is often placed into \f(CW$ENV{HOME}\fR or \f(CW$ENV{LOGDIR}\fR by
\&\fIlogin\fR, but you can also find it with \f(CW\*(C`(getpwuid($<))[7]\*(C'\fR.
(Some platforms do not have a concept of a home directory.)
.IP "host" 4
.IX Item "host"
The computer on which a program or other data resides.
.IP "hubris" 4
.IX Item "hubris"
Excessive pride, the sort of thing Zeus zaps you for.  Also the
quality that makes you write (and maintain) programs that other people
won't want to say bad things about.  Hence, the third great virtue of
a programmer.  See also \*(L"laziness\*(R" and \*(L"impatience\*(R".
.IP "\s-1HV\s0" 4
.IX Item "HV"
Short for a \*(L"hash value\*(R" typedef, which holds Perl's internal
representation of a hash.  The \*(L"\s-1HV\s0\*(R" type is a subclass of \*(L"\s-1SV\s0\*(R".
.Sh "I"
.IX Subsection "I"
.IP "identifier" 4
.IX Item "identifier"
A legally formed name for most anything in which a computer program
might be interested.  Many languages (including Perl) allow
identifiers that start with a letter and contain letters and digits.
Perl also counts the underscore character as a valid letter.  (Perl
also has more complicated names, such as \*(L"qualified\*(R" names.)
.IP "impatience" 4
.IX Item "impatience"
The anger you feel when the computer is being lazy.  This makes you
write programs that don't just react to your needs, but actually
anticipate them.  Or at least that pretend to.  Hence, the second
great virtue of a programmer.  See also \*(L"laziness\*(R" and \*(L"hubris\*(R".
.IP "implementation" 4
.IX Item "implementation"
How a piece of code actually goes about doing its job.  Users of the
code should not count on implementation details staying the same
unless they are part of the published \*(L"interface\*(R".
.IP "import" 4
.IX Item "import"
To gain access to symbols that are exported from another module.  See
\&\*(L"use\*(R" in perlfunc.
.IP "increment" 4
.IX Item "increment"
To increase the value of something by 1 (or by some other number, if
so specified).
.IP "indexing" 4
.IX Item "indexing"
In olden days, the act of looking up a \*(L"key\*(R" in an actual index
(such as a phone book), but now merely the act of using any kind of
key or position to find the corresponding \*(L"value\*(R", even if no index
is involved.  Things have degenerated to the point that Perl's
index function merely locates the position (index)
of one string in another.
.IP "indirect filehandle" 4
.IX Item "indirect filehandle"
An \*(L"expression\*(R" that evaluates to something that can be used as a
\&\*(L"filehandle\*(R": a \*(L"string\*(R" (filehandle name), a \*(L"typeglob\*(R", a
typeglob \*(L"reference\*(R", or a low-level \*(L"\s-1IO\s0\*(R" object.
.IP "indirect object" 4
.IX Item "indirect object"
In English grammar, a short noun phrase between a verb and its direct
object indicating the beneficiary or recipient of the action.  In
Perl, \f(CW\*(C`print STDOUT "$foo\en";\*(C'\fR can be understood as \*(L"verb
indirect-object object\*(R" where \*(L"\s-1STDOUT\s0\*(R" is the recipient of the
print action, and \f(CW"$foo"\fR is the object being
printed.  Similarly, when invoking a \*(L"method\*(R", you might place the
invocant between the method and its arguments:
.Sp
.Vb 3
\&  $gollum = new Pathetic::Creature "Smeagol";
\&  give $gollum "Fisssssh!";
\&  give $gollum "Precious!";
.Ve
.IP "indirect object slot" 4
.IX Item "indirect object slot"
The syntactic position falling between a method call and its arguments
when using the indirect object invocation syntax.  (The slot is
distinguished by the absence of a comma between it and the next
argument.) \*(L"\s-1STDERR\s0\*(R" is in the indirect object slot here:
.Sp
.Vb 2
\&  print STDERR "Awake!  Awake!  Fear, Fire,
\&      Foes!  Awake!\en";
.Ve
.IP "indirection" 4
.IX Item "indirection"
If something in a program isn't the value you're looking for but
indicates where the value is, that's indirection.  This can be done
with either symbolic references or hard references.
.IP "infix" 4
.IX Item "infix"
An \*(L"operator\*(R" that comes in between its operands, such
as multiplication in \f(CW\*(C`24 * 7\*(C'\fR.
.IP "inheritance" 4
.IX Item "inheritance"
What you get from your ancestors, genetically or otherwise.  If you
happen to be a \*(L"class\*(R", your ancestors are called base classes and your descendants are called derived classes.  See \*(L"single inheritance\*(R" and \*(L"multiple inheritance\*(R".
.IP "instance" 4
.IX Item "instance"
Short for \*(L"an instance of a class\*(R", meaning an \*(L"object\*(R" of that \*(L"class\*(R".
.IP "instance variable" 4
.IX Item "instance variable"
An \*(L"attribute\*(R" of an \*(L"object\*(R"; data stored with the particular
object rather than with the class as a whole.
.IP "integer" 4
.IX Item "integer"
A number with no fractional (decimal) part.  A counting number, like
1, 2, 3, and so on, but including 0 and the negatives.
.IP "interface" 4
.IX Item "interface"
The services a piece of code promises to provide forever, in contrast to
its \*(L"implementation\*(R", which it should feel free to change whenever it
likes.
.IP "interpolation" 4
.IX Item "interpolation"
The insertion of a scalar or list value somewhere in the middle of
another value, such that it appears to have been there all along.  In
Perl, variable interpolation happens in double-quoted strings and
patterns, and list interpolation occurs when constructing the list of
values to pass to a list operator or other such construct that takes a
\&\*(L"\s-1LIST\s0\*(R".
.IP "interpreter" 4
.IX Item "interpreter"
Strictly speaking, a program that reads a second program and does what
the second program says directly without turning the program into a
different form first, which is what compilers do.  Perl
is not an interpreter by this definition, because it contains a kind
of compiler that takes a program and turns it into a more executable
form (syntax trees) within the \fIperl\fR process itself,
which the Perl \*(L"run time\*(R" system then interprets.
.IP "invocant" 4
.IX Item "invocant"
The agent on whose behalf a \*(L"method\*(R" is invoked.  In a \*(L"class\*(R"
method, the invocant is a package name.  In an \*(L"instance\*(R" method,
the invocant is an object reference.
.IP "invocation" 4
.IX Item "invocation"
The act of calling up a deity, daemon, program, method, subroutine, or
function to get it do what you think it's supposed to do.  We usually
\&\*(L"call\*(R" subroutines but \*(L"invoke\*(R" methods, since it sounds cooler.
.IP "I/O" 4
.IX Item "I/O"
Input from, or output to, a \*(L"file\*(R" or \*(L"device\*(R".
.IP "\s-1IO\s0" 4
.IX Item "IO"
An internal I/O object.  Can also mean \*(L"indirect object\*(R".
.IP "\s-1IP\s0" 4
.IX Item "IP"
Internet Protocol, or Intellectual Property.
.IP "\s-1IPC\s0" 4
.IX Item "IPC"
Interprocess Communication.
.IP "is-a" 4
.IX Item "is-a"
A relationship between two objects in which one object is
considered to be a more specific version of the other, generic object:
\&\*(L"A camel is a mammal.\*(R"  Since the generic object really only exists in
a Platonic sense, we usually add a little abstraction to the notion of
objects and think of the relationship as being between a generic
\&\*(L"base class\*(R" and a specific \*(L"derived class\*(R".  Oddly enough,
Platonic classes don't always have Platonic relationships\*(--see
\&\*(L"inheritance\*(R".
.IP "iteration" 4
.IX Item "iteration"
Doing something repeatedly.
.IP "iterator" 4
.IX Item "iterator"
A special programming gizmo that keeps track of where you are in
something that you're trying to iterate over.  The \f(CW\*(C`foreach\*(C'\fR loop in
Perl contains an iterator; so does a hash, allowing you to
each through it.
.IP "\s-1IV\s0" 4
.IX Item "IV"
The integer four, not to be confused with six, Tom's favorite editor.
\&\s-1IV\s0 also means an internal Integer Value of the type a \*(L"scalar\*(R" can
hold, not to be confused with an \*(L"\s-1NV\s0\*(R".
.Sh "J"
.IX Subsection "J"
.IP "\s-1JAPH\s0" 4
.IX Item "JAPH"
\&\*(L"Just Another Perl Hacker,\*(R" a clever but cryptic bit of Perl code that
when executed, evaluates to that string.  Often used to illustrate a
particular Perl feature, and something of an ungoing Obfuscated Perl
Contest seen in Usenix signatures.
.Sh "K"
.IX Subsection "K"
.IP "key" 4
.IX Item "key"
The string index to a \*(L"hash\*(R", used to look up the \*(L"value\*(R"
associated with that key.
.IP "keyword" 4
.IX Item "keyword"
See \*(L"reserved words\*(R".
.Sh "L"
.IX Subsection "L"
.IP "label" 4
.IX Item "label"
A name you give to a \*(L"statement\*(R" so that you can talk about that
statement elsewhere in the program.
.IP "laziness" 4
.IX Item "laziness"
The quality that makes you go to great effort to reduce overall energy
expenditure.  It makes you write labor-saving programs that other
people will find useful, and document what you wrote so you don't have
to answer so many questions about it.  Hence, the first great virtue
of a programmer.  Also hence, this book.  See also \*(L"impatience\*(R" and
\&\*(L"hubris\*(R".
.IP "left shift" 4
.IX Item "left shift"
A \*(L"bit shift\*(R" that multiplies the number by some power of 2.
.IP "leftmost longest" 4
.IX Item "leftmost longest"
The preference of the \*(L"regular expression\*(R" engine to match the
leftmost occurrence of a \*(L"pattern\*(R", then given a position at which a
match will occur, the preference for the longest match (presuming the
use of a \*(L"greedy\*(R" quantifier).  See perlre for \fImuch\fR more on
this subject.
.IP "lexeme" 4
.IX Item "lexeme"
Fancy term for a \*(L"token\*(R".
.IP "lexer" 4
.IX Item "lexer"
Fancy term for a \*(L"tokener\*(R".
.IP "lexical analysis" 4
.IX Item "lexical analysis"
Fancy term for \*(L"tokenizing\*(R".
.IP "lexical scoping" 4
.IX Item "lexical scoping"
Looking at your \fIOxford English Dictionary\fR through a microscope.
(Also known as \*(L"static scoping\*(R", because dictionaries don't change
very fast.)  Similarly, looking at variables stored in a private
dictionary (namespace) for each scope, which are visible only from
their point of declaration down to the end of the lexical scope in
which they are declared.  \-\-Syn. \*(L"static scoping\*(R".
\&\-\-Ant. \*(L"dynamic scoping\*(R".
.IP "lexical variable" 4
.IX Item "lexical variable"
A \*(L"variable\*(R" subject to \*(L"lexical scoping\*(R", declared by
my.  Often just called a \*(L"lexical\*(R".  (The
our declaration declares a lexically scoped name for a
global variable, which is not itself a lexical variable.)
.IP "library" 4
.IX Item "library"
Generally, a collection of procedures.  In ancient days, referred to a
collection of subroutines in a \fI.pl\fR file.  In modern times, refers
more often to the entire collection of Perl modules on your
system.
.IP "\s-1LIFO\s0" 4
.IX Item "LIFO"
Last In, First Out.  See also \*(L"\s-1FIFO\s0\*(R".  A \s-1LIFO\s0 is usually called a
\&\*(L"stack\*(R".
.IP "line" 4
.IX Item "line"
In Unix, a sequence of zero or more non-newline characters terminated
with a \*(L"newline\*(R" character.  On non-Unix machines, this is emulated
by the C library even if the underlying \*(L"operating system\*(R" has
different ideas.
.IP "line buffering" 4
.IX Item "line buffering"
Used by a "standard I/O" output stream that flushes its
\&\*(L"buffer\*(R" after every \*(L"newline\*(R".  Many standard I/O libraries
automatically set up line buffering on output that is going to the
terminal.
.IP "line number" 4
.IX Item "line number"
The number of lines read previous to this one, plus 1.  Perl keeps a
separate line number for each source or input file it opens.  The
current source file's line number is represented by \f(CW\*(C`_\|_LINE_\|_\*(C'\fR.  The
current input line number (for the file that was most recently read
via \f(CW\*(C`<FH>\*(C'\fR) is represented by the \f(CW$.\fR
(\f(CW$INPUT_LINE_NUMBER\fR) variable.  Many error messages report both
values, if available.
.IP "link" 4
.IX Item "link"
Used as a noun, a name in a \*(L"directory\*(R", representing a \*(L"file\*(R".  A
given file can have multiple links to it.  It's like having the same
phone number listed in the phone directory under different names.  As
a verb, to resolve a partially compiled file's unresolved symbols into
a (nearly) executable image.  Linking can generally be static or
dynamic, which has nothing to do with static or dynamic scoping.
.IP "\s-1LIST\s0" 4
.IX Item "LIST"
A syntactic construct representing a comma-separated list of
expressions, evaluated to produce a \*(L"list value\*(R".  Each
\&\*(L"expression\*(R" in a \*(L"\s-1LIST\s0\*(R" is evaluated in \*(L"list context\*(R" and
interpolated into the list value.
.IP "list" 4
.IX Item "list"
An ordered set of scalar values.
.IP "list context" 4
.IX Item "list context"
The situation in which an \*(L"expression\*(R" is expected by its
surroundings (the code calling it) to return a list of values rather
than a single value.  Functions that want a \*(L"\s-1LIST\s0\*(R" of arguments tell
those arguments that they should produce a list value.  See also
\&\*(L"context\*(R".
.IP "list operator" 4
.IX Item "list operator"
An \*(L"operator\*(R" that does something with a list of values, such as
join or grep.  Usually used for
named built-in operators (such as print,
unlink, and system) that do not
require parentheses around their \*(L"argument\*(R" list.
.IP "list value" 4
.IX Item "list value"
An unnamed list of temporary scalar values that may be passed around
within a program from any list-generating function to any function or
construct that provides a \*(L"list context\*(R".
.IP "literal" 4
.IX Item "literal"
A token in a programming language such as a number or \*(L"string\*(R" that
gives you an actual \*(L"value\*(R" instead of merely representing possible
values as a \*(L"variable\*(R" does.
.IP "little-endian" 4
.IX Item "little-endian"
From Swift: someone who eats eggs little end first.  Also used of
computers that store the least significant \*(L"byte\*(R" of a word at a
lower byte address than the most significant byte.  Often considered
superior to big-endian machines.  See also \*(L"big\-endian\*(R".
.IP "local" 4
.IX Item "local"
Not meaning the same thing everywhere.  A global variable in Perl can
be localized inside a dynamic scope via the
local operator.
.IP "logical operator" 4
.IX Item "logical operator"
Symbols representing the concepts \*(L"and\*(R", \*(L"or\*(R", \*(L"xor\*(R", and \*(L"not\*(R".
.IP "lookahead" 4
.IX Item "lookahead"
An \*(L"assertion\*(R" that peeks at the string to the right of the current
match location.
.IP "lookbehind" 4
.IX Item "lookbehind"
An \*(L"assertion\*(R" that peeks at the string to the left of the current
match location.
.IP "loop" 4
.IX Item "loop"
A construct that performs something repeatedly, like a roller coaster.
.IP "loop control statement" 4
.IX Item "loop control statement"
Any statement within the body of a loop that can make a loop
prematurely stop looping or skip an \*(L"iteration\*(R".  Generally you
shouldn't try this on roller coasters.
.IP "loop label" 4
.IX Item "loop label"
A kind of key or name attached to a loop (or roller coaster) so that
loop control statements can talk about which loop they want to
control.
.IP "lvaluable" 4
.IX Item "lvaluable"
Able to serve as an \*(L"lvalue\*(R".
.IP "lvalue" 4
.IX Item "lvalue"
Term used by language lawyers for a storage location you can assign a
new \*(L"value\*(R" to, such as a \*(L"variable\*(R" or an element of an
\&\*(L"array\*(R".  The \*(L"l\*(R" is short for \*(L"left\*(R", as in the left side of an
assignment, a typical place for lvalues.  An \*(L"lvaluable\*(R" function or
expression is one to which a value may be assigned, as in \f(CW\*(C`pos($x) =
10\*(C'\fR.
.IP "lvalue modifier" 4
.IX Item "lvalue modifier"
An adjectival pseudofunction that warps the meaning of an \*(L"lvalue\*(R"
in some declarative fashion.  Currently there are three lvalue
modifiers: my, our, and
local.
.Sh "M"
.IX Subsection "M"
.IP "magic" 4
.IX Item "magic"
Technically speaking, any extra semantics attached to a variable such
as \f(CW$!\fR, \f(CW$0\fR, \f(CW%ENV\fR, or \f(CW%SIG\fR, or to any tied variable.
Magical things happen when you diddle those variables.
.IP "magical increment" 4
.IX Item "magical increment"
An \*(L"increment\*(R" operator that knows how to bump up alphabetics as
well as numbers.
.IP "magical variables" 4
.IX Item "magical variables"
Special variables that have side effects when you access them or
assign to them.  For example, in Perl, changing elements of the
\&\f(CW%ENV\fR array also changes the corresponding environment variables
that subprocesses will use.  Reading the \f(CW$!\fR variable gives you the
current system error number or message.
.IP "Makefile" 4
.IX Item "Makefile"
A file that controls the compilation of a program.  Perl programs
don't usually need a \*(L"Makefile\*(R" because the Perl compiler has plenty
of self\-control.
.IP "man" 4
.IX Item "man"
The Unix program that displays online documentation (manual pages) for
you.
.IP "manpage" 4
.IX Item "manpage"
A \*(L"page\*(R" from the manuals, typically accessed via the \fIman\fR(1)
command.  A manpage contains a \s-1SYNOPSIS\s0, a \s-1DESCRIPTION\s0, a list of
\&\s-1BUGS\s0, and so on, and is typically longer than a page.  There are
manpages documenting commands, syscalls,
\&\*(L"library\*(R" functions, devices,
protocols, files, and such.  In this book, we
call any piece of standard Perl documentation (like \fIperlop\fR or
\&\fIperldelta\fR) a manpage, no matter what format it's installed in on
your system.
.IP "matching" 4
.IX Item "matching"
See \*(L"pattern matching\*(R".
.IP "member data" 4
.IX Item "member data"
See \*(L"instance variable\*(R".
.IP "memory" 4
.IX Item "memory"
This always means your main memory, not your disk.  Clouding the issue
is the fact that your machine may implement \*(L"virtual\*(R" memory; that
is, it will pretend that it has more memory than it really does, and
it'll use disk space to hold inactive bits.  This can make it seem
like you have a little more memory than you really do, but it's not a
substitute for real memory.  The best thing that can be said about
virtual memory is that it lets your performance degrade gradually
rather than suddenly when you run out of real memory.  But your
program can die when you run out of virtual memory too, if you haven't
thrashed your disk to death first.
.IP "metacharacter" 4
.IX Item "metacharacter"
A \*(L"character\*(R" that is \fInot\fR supposed to be treated normally.  Which
characters are to be treated specially as metacharacters varies
greatly from context to context.  Your \*(L"shell\*(R" will have certain
metacharacters, double-quoted Perl strings have other
metacharacters, and \*(L"regular expression\*(R" patterns have all the
double-quote metacharacters plus some extra ones of their own.
.IP "metasymbol" 4
.IX Item "metasymbol"
Something we'd call a \*(L"metacharacter\*(R" except that it's a sequence of
more than one character.  Generally, the first character in the
sequence must be a true metacharacter to get the other characters in
the metasymbol to misbehave along with it.
.IP "method" 4
.IX Item "method"
A kind of action that an \*(L"object\*(R" can take if you tell it to.  See
perlobj.
.IP "minimalism" 4
.IX Item "minimalism"
The belief that \*(L"small is beautiful.\*(R"  Paradoxically, if you say
something in a small language, it turns out big, and if you say it in
a big language, it turns out small.  Go figure.
.IP "mode" 4
.IX Item "mode"
In the context of the stat syscall, refers to the field holding
the \*(L"permission bits\*(R" and the type of the \*(L"file\*(R".
.IP "modifier" 4
.IX Item "modifier"
See \*(L"statement modifier\*(R", \*(L"regular expression modifier\*(R", and
\&\*(L"lvalue modifier\*(R", not necessarily in that order.
.IP "module" 4
.IX Item "module"
A \*(L"file\*(R" that defines a \*(L"package\*(R" of (almost) the same name, which
can either \*(L"export\*(R" symbols or function as an \*(L"object\*(R" class.  (A
module's main \fI.pm\fR file may also load in other files in support of
the module.)  See the use built\-in.
.IP "modulus" 4
.IX Item "modulus"
An integer divisor when you're interested in the remainder instead of
the quotient.
.IP "monger" 4
.IX Item "monger"
Short for Perl Monger, a purveyor of Perl.
.IP "mortal" 4
.IX Item "mortal"
A temporary value scheduled to die when the current statement
finishes.
.IP "multidimensional array" 4
.IX Item "multidimensional array"
An array with multiple subscripts for finding a single element.  Perl
implements these using references\-\-see perllol and
perldsc.
.IP "multiple inheritance" 4
.IX Item "multiple inheritance"
The features you got from your mother and father, mixed together
unpredictably.  (See also \*(L"inheritance\*(R", and \*(L"single inheritance\*(R".)  In computer languages (including Perl), the notion
that a given class may have multiple direct ancestors or base classes.
.Sh "N"
.IX Subsection "N"
.IP "named pipe" 4
.IX Item "named pipe"
A \*(L"pipe\*(R" with a name embedded in the \*(L"filesystem\*(R" so that it can
be accessed by two unrelated processes.
.IP "namespace" 4
.IX Item "namespace"
A domain of names.  You needn't worry about whether the names in one
such domain have been used in another.  See \*(L"package\*(R".
.IP "network address" 4
.IX Item "network address"
The most important attribute of a socket, like your telephone's
telephone number.  Typically an \s-1IP\s0 address.  See also \*(L"port\*(R".
.IP "newline" 4
.IX Item "newline"
A single character that represents the end of a line, with the \s-1ASCII\s0
value of 012 octal under Unix (but 015 on a Mac), and represented by
\&\f(CW\*(C`\en\*(C'\fR in Perl strings.  For Windows machines writing text files, and
for certain physical devices like terminals, the single newline gets
automatically translated by your C library into a line feed and a
carriage return, but normally, no translation is done.
.IP "\s-1NFS\s0" 4
.IX Item "NFS"
Network File System, which allows you to mount a remote filesystem as
if it were local.
.IP "null character" 4
.IX Item "null character"
A character with the \s-1ASCII\s0 value of zero.  It's used by C to terminate
strings, but Perl allows strings to contain a null.
.IP "null list" 4
.IX Item "null list"
A \*(L"list value\*(R" with zero elements, represented in Perl by \f(CW\*(C`()\*(C'\fR.
.IP "null string" 4
.IX Item "null string"
A \*(L"string\*(R" containing no characters, not to be confused with a
string containing a \*(L"null character\*(R", which has a positive length
and is \*(L"true\*(R".
.IP "numeric context" 4
.IX Item "numeric context"
The situation in which an expression is expected by its surroundings
(the code calling it) to return a number.  See also \*(L"context\*(R" and
\&\*(L"string context\*(R".
.IP "\s-1NV\s0" 4
.IX Item "NV"
Short for Nevada, no part of which will ever be confused with
civilization.  \s-1NV\s0 also means an internal floating-point Numeric Value
of the type a \*(L"scalar\*(R" can hold, not to be confused with an \*(L"\s-1IV\s0\*(R".
.IP "nybble" 4
.IX Item "nybble"
Half a \*(L"byte\*(R", equivalent to one \*(L"hexadecimal\*(R" digit, and worth
four bits.
.Sh "O"
.IX Subsection "O"
.IP "object" 4
.IX Item "object"
An \*(L"instance\*(R" of a \*(L"class\*(R".  Something that \*(L"knows\*(R" what
user-defined type (class) it is, and what it can do because of what
class it is.  Your program can request an object to do things, but the
object gets to decide whether it wants to do them or not.  Some
objects are more accommodating than others.
.IP "octal" 4
.IX Item "octal"
A number in base 8.  Only the digits 0 through 7 are allowed.  Octal
constants in Perl start with 0, as in 013.  See also the
oct function.
.IP "offset" 4
.IX Item "offset"
How many things you have to skip over when moving from the beginning
of a string or array to a specific position within it.  Thus, the
minimum offset is zero, not one, because you don't skip anything to
get to the first item.
.IP "one-liner" 4
.IX Item "one-liner"
An entire computer program crammed into one line of text.
.IP "open source software" 4
.IX Item "open source software"
Programs for which the source code is freely available and freely
redistributable, with no commercial strings attached.  For a more
detailed definition, see <http://www.opensource.org/osd.html>.
.IP "operand" 4
.IX Item "operand"
An \*(L"expression\*(R" that yields a \*(L"value\*(R" that an \*(L"operator\*(R"
operates on.  See also \*(L"precedence\*(R".
.IP "operating system" 4
.IX Item "operating system"
A special program that runs on the bare machine and hides the gory
details of managing processes and devices.
Usually used in a looser sense to indicate a particular culture of
programming.  The loose sense can be used at varying levels of
specificity.  At one extreme, you might say that all versions of Unix
and Unix-lookalikes are the same operating system (upsetting many
people, especially lawyers and other advocates).  At the other
extreme, you could say this particular version of this particular
vendor's operating system is different from any other version of this
or any other vendor's operating system.  Perl is much more portable
across operating systems than many other languages.  See also
\&\*(L"architecture\*(R" and \*(L"platform\*(R".
.IP "operator" 4
.IX Item "operator"
A gizmo that transforms some number of input values to some number of
output values, often built into a language with a special syntax or
symbol.  A given operator may have specific expectations about what
types of data you give as its arguments
(operands) and what type of data you want back from it.
.IP "operator overloading" 4
.IX Item "operator overloading"
A kind of \*(L"overloading\*(R" that you can do on built-in
operators to make them work on objects as if
the objects were ordinary scalar values, but with the actual semantics
supplied by the object class.  This is set up with the overload
\&\*(L"pragma\*(R".
.IP "options" 4
.IX Item "options"
See either switches or \*(L"regular expression modifier\*(R".
.IP "overloading" 4
.IX Item "overloading"
Giving additional meanings to a symbol or construct.  Actually, all
languages do overloading to one extent or another, since people are
good at figuring out things from \*(L"context\*(R".
.IP "overriding" 4
.IX Item "overriding"
Hiding or invalidating some other definition of the same name.  (Not
to be confused with \*(L"overloading\*(R", which adds definitions that must
be disambiguated some other way.) To confuse the issue further, we use
the word with two overloaded definitions: to describe how you can
define your own \*(L"subroutine\*(R" to hide a built-in \*(L"function\*(R" of the
same name (see \*(L"Overriding Built-in Functions\*(R" in perlsub) and to
describe how you can define a replacement \*(L"method\*(R" in a \*(L"derived class\*(R" to hide a \*(L"base class\*(R"'s method of the same name (see
perlobj).
.IP "owner" 4
.IX Item "owner"
The one user (apart from the superuser) who has absolute control over
a \*(L"file\*(R".  A file may also have a \*(L"group\*(R" of users who may
exercise joint ownership if the real owner permits it.  See
\&\*(L"permission bits\*(R".
.Sh "P"
.IX Subsection "P"
.IP "package" 4
.IX Item "package"
A \*(L"namespace\*(R" for global variables,
subroutines, and the like, such that they can be kept
separate from like-named symbols in other namespaces.  In a
sense, only the package is global, since the symbols in the package's
symbol table are only accessible from code compiled outside the
package by naming the package.  But in another sense, all package
symbols are also globals\*(--they're just well-organized globals.
.IP "pad" 4
.IX Item "pad"
Short for \*(L"scratchpad\*(R".
.IP "parameter" 4
.IX Item "parameter"
See \*(L"argument\*(R".
.IP "parent class" 4
.IX Item "parent class"
See \*(L"base class\*(R".
.IP "parse tree" 4
.IX Item "parse tree"
See \*(L"syntax tree\*(R".
.IP "parsing" 4
.IX Item "parsing"
The subtle but sometimes brutal art of attempting to turn your
possibly malformed program into a valid \*(L"syntax tree\*(R".
.IP "patch" 4
.IX Item "patch"
To fix by applying one, as it were.  In the realm of hackerdom, a
listing of the differences between two versions of a program as might
be applied by the \fIpatch\fR(1) program when you want to fix a bug or
upgrade your old version.
.IP "\s-1PATH\s0" 4
.IX Item "PATH"
The list of directories the system searches to find a
program you want to \*(L"execute\*(R".  The list is stored as one of your
environment variables, accessible in Perl as
\&\f(CW$ENV{PATH}\fR.
.IP "pathname" 4
.IX Item "pathname"
A fully qualified filename such as \fI/usr/bin/perl\fR.  Sometimes
confused with \*(L"\s-1PATH\s0\*(R".
.IP "pattern" 4
.IX Item "pattern"
A template used in \*(L"pattern matching\*(R".
.IP "pattern matching" 4
.IX Item "pattern matching"
Taking a pattern, usually a \*(L"regular expression\*(R", and trying the
pattern various ways on a string to see whether there's any way to
make it fit.  Often used to pick interesting tidbits out of a file.
.IP "permission bits" 4
.IX Item "permission bits"
Bits that the \*(L"owner\*(R" of a file sets or unsets to allow or disallow
access to other people.  These flag bits are part of the \*(L"mode\*(R" word
returned by the stat built-in when you ask about a
file.  On Unix systems, you can check the \fIls\fR(1) manpage for more
information.
.IP "Pern" 4
.IX Item "Pern"
What you get when you do \f(CW\*(C`Perl++\*(C'\fR twice.  Doing it only once will
curl your hair.  You have to increment it eight times to shampoo your
hair.  Lather, rinse, iterate.
.IP "pipe" 4
.IX Item "pipe"
A direct \*(L"connection\*(R" that carries the output of one \*(L"process\*(R" to
the input of another without an intermediate temporary file.  Once the
pipe is set up, the two processes in question can read and write as if
they were talking to a normal file, with some caveats.
.IP "pipeline" 4
.IX Item "pipeline"
A series of processes all in a row, linked by
pipes, where each passes its output stream to the next.
.IP "platform" 4
.IX Item "platform"
The entire hardware and software context in which a program runs.  A
 program written in a platform-dependent language might break if you
change any of: machine, operating system, libraries, compiler, or
system configuration.  The \fIperl\fR interpreter has to be compiled
differently for each platform because it is implemented in C, but
programs written in the Perl language are largely
platform\-independent.
.IP "pod" 4
.IX Item "pod"
The markup used to embed documentation into your Perl code.  See
perlpod.
.IP "pointer" 4
.IX Item "pointer"
A \*(L"variable\*(R" in a language like C that contains the exact memory
location of some other item.  Perl handles pointers internally so you
don't have to worry about them.  Instead, you just use symbolic
pointers in the form of keys and \*(L"variable\*(R" names, or hard references, which aren't pointers (but act like
pointers and do in fact contain pointers).
.IP "polymorphism" 4
.IX Item "polymorphism"
The notion that you can tell an \*(L"object\*(R" to do something generic,
and the object will interpret the command in different ways depending
on its type.  [<Gk many shapes]
.IP "port" 4
.IX Item "port"
The part of the address of a \s-1TCP\s0 or \s-1UDP\s0 socket that directs packets to
the correct process after finding the right machine, something like
the phone extension you give when you reach the company operator.
Also, the result of converting code to run on a different platform
than originally intended, or the verb denoting this conversion.
.IP "portable" 4
.IX Item "portable"
Once upon a time, C code compilable under both \s-1BSD\s0 and SysV.  In
general, code that can be easily converted to run on another
\&\*(L"platform\*(R", where \*(L"easily\*(R" can be defined however you like, and
usually is.  Anything may be considered portable if you try hard
enough.  See \fImobile home\fR or \fILondon Bridge\fR.
.IP "porter" 4
.IX Item "porter"
Someone who \*(L"carries\*(R" software from one \*(L"platform\*(R" to another.
Porting programs written in platform-dependent languages such as C can
be difficult work, but porting programs like Perl is very much worth
the agony.
.IP "\s-1POSIX\s0" 4
.IX Item "POSIX"
The Portable Operating System Interface specification.
.IP "postfix" 4
.IX Item "postfix"
An \*(L"operator\*(R" that follows its \*(L"operand\*(R", as in \f(CW\*(C`$x++\*(C'\fR.
.IP "pp" 4
.IX Item "pp"
An internal shorthand for a \*(L"push\-pop\*(R" code, that is, C code
implementing Perl's stack machine.
.IP "pragma" 4
.IX Item "pragma"
A standard module whose practical hints and suggestions are received
(and possibly ignored) at compile time.  Pragmas are named in all
lowercase.
.IP "precedence" 4
.IX Item "precedence"
The rules of conduct that, in the absence of other guidance, determine
what should happen first.  For example, in the absence of parentheses,
you always do multiplication before addition.
.IP "prefix" 4
.IX Item "prefix"
An \*(L"operator\*(R" that precedes its \*(L"operand\*(R", as in \f(CW\*(C`++$x\*(C'\fR.
.IP "preprocessing" 4
.IX Item "preprocessing"
What some helper \*(L"process\*(R" did to transform the incoming data into a
form more suitable for the current process.  Often done with an
incoming \*(L"pipe\*(R".  See also \*(L"C preprocessor\*(R".
.IP "procedure" 4
.IX Item "procedure"
A \*(L"subroutine\*(R".
.IP "process" 4
.IX Item "process"
An instance of a running program.  Under multitasking systems like
Unix, two or more separate processes could be running the same program
independently at the same time\*(--in fact, the fork
function is designed to bring about this happy state of affairs.
Under other operating systems, processes are sometimes called
\&\*(L"threads\*(R", \*(L"tasks\*(R", or \*(L"jobs\*(R", often with slight nuances in meaning.
.IP "program generator" 4
.IX Item "program generator"
A system that algorithmically writes code for you in a high-level
language.  See also \*(L"code generator\*(R".
.IP "progressive matching" 4
.IX Item "progressive matching"
Pattern matching that picks up where it left off before.
.IP "property" 4
.IX Item "property"
See either \*(L"instance variable\*(R" or \*(L"character property\*(R".
.IP "protocol" 4
.IX Item "protocol"
In networking, an agreed-upon way of sending messages back and forth
so that neither correspondent will get too confused.
.IP "prototype" 4
.IX Item "prototype"
An optional part of a \*(L"subroutine\*(R" declaration telling the Perl
compiler how many and what flavor of arguments may be passed as
\&\*(L"actual arguments\*(R", so that you can write subroutine calls that
parse much like built-in functions.  (Or don't parse, as the case may
be.)
.IP "pseudofunction" 4
.IX Item "pseudofunction"
A construct that sometimes looks like a function but really isn't.
Usually reserved for \*(L"lvalue\*(R" modifiers like my, for
\&\*(L"context\*(R" modifiers like scalar, and for the
pick-your-own-quotes constructs, \f(CW\*(C`q//\*(C'\fR, \f(CW\*(C`qq//\*(C'\fR, \f(CW\*(C`qx//\*(C'\fR, \f(CW\*(C`qw//\*(C'\fR,
\&\f(CW\*(C`qr//\*(C'\fR, \f(CW\*(C`m//\*(C'\fR, \f(CW\*(C`s///\*(C'\fR, \f(CW\*(C`y///\*(C'\fR, and \f(CW\*(C`tr///\*(C'\fR.
.IP "pseudohash" 4
.IX Item "pseudohash"
A reference to an array whose initial element happens to hold a
reference to a hash.  You can treat a pseudohash reference as either
an array reference or a hash reference.
.IP "pseudoliteral" 4
.IX Item "pseudoliteral"
An \*(L"operator\*(R" that looks something like a \*(L"literal\*(R", such as the
output-grabbing operator, \f(CW\*(C``\*(C'\fR\fI\f(CI\*(C`command\*(C'\fI\fR\f(CW\*(C``\*(C'\fR.
.IP "public domain" 4
.IX Item "public domain"
Something not owned by anybody.  Perl is copyrighted and is thus
\&\fInot\fR in the public domain\*(--it's just \*(L"freely available\*(R" and
\&\*(L"freely redistributable\*(R".
.IP "pumpkin" 4
.IX Item "pumpkin"
A notional \*(L"baton\*(R" handed around the Perl community indicating who is
the lead integrator in some arena of development.
.IP "pumpking" 4
.IX Item "pumpking"
A \*(L"pumpkin\*(R" holder, the person in charge of pumping the pump, or at
least priming it.  Must be willing to play the part of the Great
Pumpkin now and then.
.IP "\s-1PV\s0" 4
.IX Item "PV"
A \*(L"pointer value\*(R", which is Perl Internals Talk for a \f(CW\*(C`char*\*(C'\fR.
.Sh "Q"
.IX Subsection "Q"
.IP "qualified" 4
.IX Item "qualified"
Possessing a complete name.  The symbol \f(CW$Ent::moot\fR is qualified;
\&\f(CW$moot\fR is unqualified.  A fully qualified filename is specified from
the top-level directory.
.IP "quantifier" 4
.IX Item "quantifier"
A component of a \*(L"regular expression\*(R" specifying how many times the
foregoing \*(L"atom\*(R" may occur.
.Sh "R"
.IX Subsection "R"
.IP "readable" 4
.IX Item "readable"
With respect to files, one that has the proper permission bit set to
let you access the file.  With respect to computer programs, one
that's written well enough that someone has a chance of figuring out
what it's trying to do.
.IP "reaping" 4
.IX Item "reaping"
The last rites performed by a parent \*(L"process\*(R" on behalf of a
deceased child process so that it doesn't remain a \*(L"zombie\*(R".  See
the wait and waitpid function
calls.
.IP "record" 4
.IX Item "record"
A set of related data values in a \*(L"file\*(R" or \*(L"stream\*(R", often
associated with a unique \*(L"key\*(R" field.  In Unix, often commensurate
with a \*(L"line\*(R", or a blank-line-terminated set of lines (a
\&\*(L"paragraph\*(R").  Each line of the \fI/etc/passwd\fR file is a record, keyed
on login name, containing information about that user.
.IP "recursion" 4
.IX Item "recursion"
The art of defining something (at least partly) in terms of itself,
which is a naughty no-no in dictionaries but often works out okay in
computer programs if you're careful not to recurse forever, which is
like an infinite loop with more spectacular failure modes.
.IP "reference" 4
.IX Item "reference"
Where you look to find a pointer to information somewhere else.  (See
\&\*(L"indirection\*(R".)  References come in two flavors, symbolic references and hard references.
.IP "referent" 4
.IX Item "referent"
Whatever a reference refers to, which may or may not have a name.
Common types of referents include scalars, arrays, hashes, and
subroutines.
.IP "regex" 4
.IX Item "regex"
See \*(L"regular expression\*(R".
.IP "regular expression" 4
.IX Item "regular expression"
A single entity with various interpretations, like an elephant.  To a
computer scientist, it's a grammar for a little language in which some
strings are legal and others aren't.  To normal people, it's a pattern
you can use to find what you're looking for when it varies from case
to case.  Perl's regular expressions are far from regular in the
theoretical sense, but in regular use they work quite well.  Here's a
regular expression: \f(CW\*(C`/Oh s.*t./\*(C'\fR.  This will match strings like "\f(CW\*(C`Oh
say can you see by the dawn's early light\*(C'\fR\*(L" and \*(R"\f(CW\*(C`Oh sit!\*(C'\fR".  See
perlre.
.IP "regular expression modifier" 4
.IX Item "regular expression modifier"
An option on a pattern or substitution, such as \f(CW\*(C`/i\*(C'\fR to render the
pattern case insensitive.  See also \*(L"cloister\*(R".
.IP "regular file" 4
.IX Item "regular file"
A \*(L"file\*(R" that's not a \*(L"directory\*(R", a \*(L"device\*(R", a named \*(L"pipe\*(R"
or \*(L"socket\*(R", or a \*(L"symbolic link\*(R".  Perl uses the \f(CW\*(C`\-f\*(C'\fR file test
operator to identify regular files.  Sometimes called a \*(L"plain\*(R" file.
.IP "relational operator" 4
.IX Item "relational operator"
An \*(L"operator\*(R" that says whether a particular ordering relationship
is \*(L"true\*(R" about a pair of operands.  Perl has both
numeric and string relational operators.  See \*(L"collating sequence\*(R".
.IP "reserved words" 4
.IX Item "reserved words"
A word with a specific, built-in meaning to a \*(L"compiler\*(R", such as
\&\f(CW\*(C`if\*(C'\fR or delete.  In many languages (not Perl),
it's illegal to use reserved words to name anything else.  (Which is
why they're reserved, after all.)  In Perl, you just can't use them to
name labels or filehandles.  Also called
\&\*(L"keywords\*(R".
.IP "return value" 4
.IX Item "return value"
The \*(L"value\*(R" produced by a \*(L"subroutine\*(R" or \*(L"expression\*(R" when
evaluated.  In Perl, a return value may be either a \*(L"list\*(R" or a
\&\*(L"scalar\*(R".
.IP "\s-1RFC\s0" 4
.IX Item "RFC"
Request For Comment, which despite the timid connotations is the name
of a series of important standards documents.
.IP "right shift" 4
.IX Item "right shift"
A \*(L"bit shift\*(R" that divides a number by some power of 2.
.IP "root" 4
.IX Item "root"
The superuser (\s-1UID\s0 == 0).  Also, the top-level directory of the
filesystem.
.IP "\s-1RTFM\s0" 4
.IX Item "RTFM"
What you are told when someone thinks you should Read The Fine Manual.
.IP "run phase" 4
.IX Item "run phase"
Any time after Perl starts running your main program.  See also
\&\*(L"compile phase\*(R".  Run phase is mostly spent in \*(L"run time\*(R" but may
also be spent in \*(L"compile time\*(R" when require,
do \f(CW\*(C`FILE\*(C'\fR, or eval \f(CW\*(C`STRING\*(C'\fR
operators are executed or when a substitution uses the \f(CW\*(C`/ee\*(C'\fR
modifier.
.IP "run time" 4
.IX Item "run time"
The time when Perl is actually doing what your code says to do, as
opposed to the earlier period of time when it was trying to figure out
whether what you said made any sense whatsoever, which is \*(L"compile time\*(R".
.IP "run-time pattern" 4
.IX Item "run-time pattern"
A pattern that contains one or more variables to be interpolated
before parsing the pattern as a \*(L"regular expression\*(R", and that
therefore cannot be analyzed at compile time, but must be re-analyzed
each time the pattern match operator is evaluated.  Run-time patterns
are useful but expensive.
.IP "\s-1RV\s0" 4
.IX Item "RV"
A recreational vehicle, not to be confused with vehicular recreation.
\&\s-1RV\s0 also means an internal Reference Value of the type a \*(L"scalar\*(R" can
hold.  See also \*(L"\s-1IV\s0\*(R" and \*(L"\s-1NV\s0\*(R" if you're not confused yet.
.IP "rvalue" 4
.IX Item "rvalue"
A \*(L"value\*(R" that you might find on the right side of an
\&\*(L"assignment\*(R".  See also \*(L"lvalue\*(R".
.Sh "S"
.IX Subsection "S"
.IP "scalar" 4
.IX Item "scalar"
A simple, singular value; a number, \*(L"string\*(R", or \*(L"reference\*(R".
.IP "scalar context" 4
.IX Item "scalar context"
The situation in which an \*(L"expression\*(R" is expected by its
surroundings (the code calling it) to return a single \*(L"value\*(R" rather
than a \*(L"list\*(R" of values.  See also \*(L"context\*(R" and \*(L"list context\*(R".
A scalar context sometimes imposes additional constraints on the
return value\*(--see \*(L"string context\*(R" and \*(L"numeric context\*(R".
Sometimes we talk about a \*(L"Boolean context\*(R" inside conditionals, but
this imposes no additional constraints, since any scalar value,
whether numeric or \*(L"string\*(R", is already true or false.
.IP "scalar literal" 4
.IX Item "scalar literal"
A number or quoted \*(L"string\*(R"\-\-an actual \*(L"value\*(R" in the text of your
program, as opposed to a \*(L"variable\*(R".
.IP "scalar value" 4
.IX Item "scalar value"
A value that happens to be a \*(L"scalar\*(R" as opposed to a \*(L"list\*(R".
.IP "scalar variable" 4
.IX Item "scalar variable"
A \*(L"variable\*(R" prefixed with \f(CW\*(C`$\*(C'\fR that holds a single value.
.IP "scope" 4
.IX Item "scope"
How far away you can see a variable from, looking through one.  Perl
has two visibility mechanisms: it does \*(L"dynamic scoping\*(R" of
local variables, meaning that the rest
of the \*(L"block\*(R", and any subroutines that are called
by the rest of the block, can see the variables that are local to the
block.  Perl does \*(L"lexical scoping\*(R" of my variables,
meaning that the rest of the block can see the variable, but other
subroutines called by the block \fIcannot\fR see the variable.
.IP "scratchpad" 4
.IX Item "scratchpad"
The area in which a particular invocation of a particular file or
subroutine keeps some of its temporary values, including any lexically
scoped variables.
.IP "script" 4
.IX Item "script"
A text \*(L"file\*(R" that is a program intended to be executed
directly rather than compiled to another form of file
before execution.  Also, in the context of \*(L"Unicode\*(R", a writing
system for a particular language or group of languages, such as Greek,
Bengali, or Klingon.
.IP "script kiddie" 4
.IX Item "script kiddie"
A \*(L"cracker\*(R" who is not a \*(L"hacker\*(R", but knows just enough to run
canned scripts.  A cargo-cult programmer.
.IP "sed" 4
.IX Item "sed"
A venerable Stream EDitor from which Perl derives some of its ideas.
.IP "semaphore" 4
.IX Item "semaphore"
A fancy kind of interlock that prevents multiple threads or
processes from using up the same resources simultaneously.
.IP "separator" 4
.IX Item "separator"
A \*(L"character\*(R" or \*(L"string\*(R" that keeps two surrounding strings from
being confused with each other.  The split function
works on separators.  Not to be confused with delimiters
or terminators.  The \*(L"or\*(R" in the previous sentence
separated the two alternatives.
.IP "serialization" 4
.IX Item "serialization"
Putting a fancy \*(L"data structure\*(R" into linear order so that it can be
stored as a \*(L"string\*(R" in a disk file or database or sent through a
\&\*(L"pipe\*(R".  Also called marshalling.
.IP "server" 4
.IX Item "server"
In networking, a \*(L"process\*(R" that either advertises a \*(L"service\*(R" or
just hangs around at a known location and waits for clients
who need service to get in touch with it.
.IP "service" 4
.IX Item "service"
Something you do for someone else to make them happy, like giving them
the time of day (or of their life).  On some machines, well-known
services are listed by the getservent function.
.IP "setgid" 4
.IX Item "setgid"
Same as \*(L"setuid\*(R", only having to do with giving away \*(L"group\*(R"
privileges.
.IP "setuid" 4
.IX Item "setuid"
Said of a program that runs with the privileges of its \*(L"owner\*(R"
rather than (as is usually the case) the privileges of whoever is
running it.  Also describes the bit in the mode word (\*(L"permission bits\*(R") that controls the feature.  This bit must be explicitly set by
the owner to enable this feature, and the program must be carefully
written not to give away more privileges than it ought to.
.IP "shared memory" 4
.IX Item "shared memory"
A piece of \*(L"memory\*(R" accessible by two different
processes who otherwise would not see each other's memory.
.IP "shebang" 4
.IX Item "shebang"
Irish for the whole McGillicuddy.  In Perl culture, a portmanteau of
\&\*(L"sharp\*(R" and \*(L"bang\*(R", meaning the \f(CW\*(C`#!\*(C'\fR sequence that tells the system
where to find the interpreter.
.IP "shell" 4
.IX Item "shell"
A \*(L"command\*(R"\-line \*(L"interpreter\*(R".  The program that interactively
gives you a prompt, accepts one or more lines of input, and
executes the programs you mentioned, feeding each of them their proper
arguments and input data.  Shells can also execute
scripts containing such commands.  Under Unix, typical shells include
the Bourne shell (\fI/bin/sh\fR), the C shell (\fI/bin/csh\fR), and the Korn
shell (\fI/bin/ksh\fR).  Perl is not strictly a shell because it's not
interactive (although Perl programs can be interactive).
.IP "side effects" 4
.IX Item "side effects"
Something extra that happens when you evaluate an \*(L"expression\*(R".
Nowadays it can refer to almost anything.  For example, evaluating a
simple assignment statement typically has the \*(L"side effect\*(R" of
assigning a value to a variable.  (And you thought assigning the value
was your primary intent in the first place!)  Likewise, assigning a
value to the special variable \f(CW$|\fR (\f(CW$AUTOFLUSH\fR) has the side
effect of forcing a flush after every write or
print on the currently selected filehandle.
.IP "signal" 4
.IX Item "signal"
A bolt out of the blue; that is, an event triggered by the
\&\*(L"operating system\*(R", probably when you're least expecting it.
.IP "signal handler" 4
.IX Item "signal handler"
A \*(L"subroutine\*(R" that, instead of being content to be called in the
normal fashion, sits around waiting for a bolt out of the blue before
it will deign to \*(L"execute\*(R".  Under Perl, bolts out of the blue are
called signals, and you send them with the kill
built\-in.  See \*(L"%SIG\*(R" in perlvar and \*(L"Signals\*(R" in perlipc.
.IP "single inheritance" 4
.IX Item "single inheritance"
The features you got from your mother, if she told you that you don't
have a father.  (See also \*(L"inheritance\*(R" and \*(L"multiple inheritance\*(R".)  In computer languages, the notion that
classes reproduce asexually so that a given class can only
have one direct ancestor or \*(L"base class\*(R".  Perl supplies no such
restriction, though you may certainly program Perl that way if you
like.
.IP "slice" 4
.IX Item "slice"
A selection of any number of elements from a \*(L"list\*(R",
\&\*(L"array\*(R", or \*(L"hash\*(R".
.IP "slurp" 4
.IX Item "slurp"
To read an entire \*(L"file\*(R" into a \*(L"string\*(R" in one operation.
.IP "socket" 4
.IX Item "socket"
An endpoint for network communication among multiple
processes that works much like a telephone or a post
office box.  The most important thing about a socket is its \*(L"network address\*(R" (like a phone number).  Different kinds of sockets have
different kinds of addresses\*(--some look like filenames, and some
don't.
.IP "soft reference" 4
.IX Item "soft reference"
See \*(L"symbolic reference\*(R".
.IP "source filter" 4
.IX Item "source filter"
A special kind of \*(L"module\*(R" that does \*(L"preprocessing\*(R" on your
script just before it gets to the \*(L"tokener\*(R".
.IP "stack" 4
.IX Item "stack"
A device you can put things on the top of, and later take them back
off in the opposite order in which you put them on.  See \*(L"\s-1LIFO\s0\*(R".
.IP "standard" 4
.IX Item "standard"
Included in the official Perl distribution, as in a standard module, a
standard tool, or a standard Perl \*(L"manpage\*(R".
.IP "standard error" 4
.IX Item "standard error"
The default output \*(L"stream\*(R" for nasty remarks that don't belong in
\&\*(L"standard output\*(R".  Represented within a Perl program by the
\&\*(L"filehandle\*(R" \*(L"\s-1STDERR\s0\*(R".  You can use this stream explicitly, but the
die and warn built-ins write to your
standard error stream automatically.
.IP "standard I/O" 4
.IX Item "standard I/O"
A standard C library for doing buffered input and output to
the \*(L"operating system\*(R".  (The \*(L"standard\*(R" of standard I/O is only
marginally related to the \*(L"standard\*(R" of standard input and output.)
In general, Perl relies on whatever implementation of standard I/O a
given operating system supplies, so the buffering characteristics of a
Perl program on one machine may not exactly match those on another
machine.  Normally this only influences efficiency, not semantics.  If
your standard I/O package is doing block buffering and you want it to
\&\*(L"flush\*(R" the buffer more often, just set the \f(CW$|\fR variable to a true
value.
.IP "standard input" 4
.IX Item "standard input"
The default input \*(L"stream\*(R" for your program, which if possible
shouldn't care where its data is coming from.  Represented within a
Perl program by the \*(L"filehandle\*(R" \*(L"\s-1STDIN\s0\*(R".
.IP "standard output" 4
.IX Item "standard output"
The default output \*(L"stream\*(R" for your program, which if possible
shouldn't care where its data is going.  Represented within a Perl
program by the \*(L"filehandle\*(R" \*(L"\s-1STDOUT\s0\*(R".
.IP "stat structure" 4
.IX Item "stat structure"
A special internal spot in which Perl keeps the information about the
last \*(L"file\*(R" on which you requested information.
.IP "statement" 4
.IX Item "statement"
A \*(L"command\*(R" to the computer about what to do next, like a step in a
recipe: \*(L"Add marmalade to batter and mix until mixed.\*(R"  A statement is
distinguished from a \*(L"declaration\*(R", which doesn't tell the computer
to do anything, but just to learn something.
.IP "statement modifier" 4
.IX Item "statement modifier"
A \*(L"conditional\*(R" or \*(L"loop\*(R" that you put after the \*(L"statement\*(R"
instead of before, if you know what we mean.
.IP "static" 4
.IX Item "static"
Varying slowly compared to something else.  (Unfortunately, everything
is relatively stable compared to something else, except for certain
elementary particles, and we're not so sure about them.)  In
computers, where things are supposed to vary rapidly, \*(L"static\*(R" has a
derogatory connotation, indicating a slightly dysfunctional
\&\*(L"variable\*(R", \*(L"subroutine\*(R", or \*(L"method\*(R".  In Perl culture, the
word is politely avoided.
.IP "static method" 4
.IX Item "static method"
No such thing.  See \*(L"class method\*(R".
.IP "static scoping" 4
.IX Item "static scoping"
No such thing.  See \*(L"lexical scoping\*(R".
.IP "static variable" 4
.IX Item "static variable"
No such thing.  Just use a \*(L"lexical variable\*(R" in a scope larger than
your \*(L"subroutine\*(R".
.IP "status" 4
.IX Item "status"
The \*(L"value\*(R" returned to the parent \*(L"process\*(R" when one of its child
processes dies.  This value is placed in the special variable \f(CW$?\fR.
Its upper eight bits are the exit status of the defunct
process, and its lower eight bits identify the signal (if any) that
the process died from.  On Unix systems, this status value is the same
as the status word returned by \fIwait\fR(2).  See \*(L"system\*(R" in perlfunc.
.IP "\s-1STDERR\s0" 4
.IX Item "STDERR"
See \*(L"standard error\*(R".
.IP "\s-1STDIN\s0" 4
.IX Item "STDIN"
See \*(L"standard input\*(R".
.IP "\s-1STDIO\s0" 4
.IX Item "STDIO"
See "standard I/O".
.IP "\s-1STDOUT\s0" 4
.IX Item "STDOUT"
See \*(L"standard output\*(R".
.IP "stream" 4
.IX Item "stream"
A flow of data into or out of a process as a steady sequence of bytes
or characters, without the appearance of being broken up into packets.
This is a kind of \*(L"interface\*(R"\-\-the underlying \*(L"implementation\*(R" may
well break your data up into separate packets for delivery, but this
is hidden from you.
.IP "string" 4
.IX Item "string"
A sequence of characters such as \*(L"He said !@#*&%@#*?!\*(R".  A string does
not have to be entirely printable.
.IP "string context" 4
.IX Item "string context"
The situation in which an expression is expected by its surroundings
(the code calling it) to return a \*(L"string\*(R".  See also \*(L"context\*(R"
and \*(L"numeric context\*(R".
.IP "stringification" 4
.IX Item "stringification"
The process of producing a \*(L"string\*(R" representation of an abstract
object.
.IP "struct" 4
.IX Item "struct"
C keyword introducing a structure definition or name.
.IP "structure" 4
.IX Item "structure"
See \*(L"data structure\*(R".
.IP "subclass" 4
.IX Item "subclass"
See \*(L"derived class\*(R".
.IP "subpattern" 4
.IX Item "subpattern"
A component of a \*(L"regular expression\*(R" pattern.
.IP "subroutine" 4
.IX Item "subroutine"
A named or otherwise accessible piece of program that can be invoked
from elsewhere in the program in order to accomplish some sub-goal of
the program.  A subroutine is often parameterized to accomplish
different but related things depending on its input
arguments.  If the subroutine returns a meaningful
\&\*(L"value\*(R", it is also called a \*(L"function\*(R".
.IP "subscript" 4
.IX Item "subscript"
A \*(L"value\*(R" that indicates the position of a particular \*(L"array\*(R"
\&\*(L"element\*(R" in an array.
.IP "substitution" 4
.IX Item "substitution"
Changing parts of a string via the \f(CW\*(C`s///\*(C'\fR operator.  (We avoid use of
this term to mean \*(L"variable interpolation\*(R".)
.IP "substring" 4
.IX Item "substring"
A portion of a \*(L"string\*(R", starting at a certain \*(L"character\*(R"
position (\*(L"offset\*(R") and proceeding for a certain number of
characters.
.IP "superclass" 4
.IX Item "superclass"
See \*(L"base class\*(R".
.IP "superuser" 4
.IX Item "superuser"
The person whom the \*(L"operating system\*(R" will let do almost anything.
Typically your system administrator or someone pretending to be your
system administrator.  On Unix systems, the \*(L"root\*(R" user.  On Windows
systems, usually the Administrator user.
.IP "\s-1SV\s0" 4
.IX Item "SV"
Short for \*(L"scalar value\*(R".  But within the Perl interpreter every
\&\*(L"referent\*(R" is treated as a member of a class derived from \s-1SV\s0, in an
object-oriented sort of way.  Every \*(L"value\*(R" inside Perl is passed
around as a C language \f(CW\*(C`SV*\*(C'\fR pointer.  The \s-1SV\s0 \*(L"struct\*(R" knows its
own \*(L"referent type\*(R", and the code is smart enough (we hope) not to try
to call a \*(L"hash\*(R" function on a \*(L"subroutine\*(R".
.IP "switch" 4
.IX Item "switch"
An option you give on a command line to influence the way your program
works, usually introduced with a minus sign.  The word is also used as
a nickname for a \*(L"switch statement\*(R".
.IP "switch cluster" 4
.IX Item "switch cluster"
The combination of multiple command-line switches (e.g., \fB\-a \-b \-c\fR)
into one switch (e.g., \fB\-abc\fR).  Any switch with an additional
\&\*(L"argument\*(R" must be the last switch in a cluster.
.IP "switch statement" 4
.IX Item "switch statement"
A program technique that lets you evaluate an \*(L"expression\*(R" and then,
based on the value of the expression, do a multiway branch to the
appropriate piece of code for that value.  Also called a \*(L"case
structure\*(R", named after the similar Pascal construct.  Most switch
statements in Perl are spelled \f(CW\*(C`for\*(C'\fR.  See \*(L"Basic BLOCKs and Switch Statements\*(R" in perlsyn.
.IP "symbol" 4
.IX Item "symbol"
Generally, any \*(L"token\*(R" or \*(L"metasymbol\*(R".  Often used more
specifically to mean the sort of name you might find in a \*(L"symbol table\*(R".
.IP "symbol table" 4
.IX Item "symbol table"
Where a \*(L"compiler\*(R" remembers symbols.  A program like Perl must
somehow remember all the names of all the variables,
filehandles, and subroutines you've
used.  It does this by placing the names in a symbol table, which is
implemented in Perl using a \*(L"hash table\*(R".  There is a separate
symbol table for each \*(L"package\*(R" to give each package its own
\&\*(L"namespace\*(R".
.IP "symbolic debugger" 4
.IX Item "symbolic debugger"
A program that lets you step through the execution of your
program, stopping or printing things out here and there to see whether
anything has gone wrong, and if so, what.  The \*(L"symbolic\*(R" part just
means that you can talk to the debugger using the same symbols with
which your program is written.
.IP "symbolic link" 4
.IX Item "symbolic link"
An alternate filename that points to the real \*(L"filename\*(R", which in
turn points to the real \*(L"file\*(R".  Whenever the \*(L"operating system\*(R"
is trying to parse a \*(L"pathname\*(R" containing a symbolic link, it
merely substitutes the new name and continues parsing.
.IP "symbolic reference" 4
.IX Item "symbolic reference"
A variable whose value is the name of another variable or subroutine.
By dereferencing the first variable, you can get at
the second one.  Symbolic references are illegal under use strict 'refs'.
.IP "synchronous" 4
.IX Item "synchronous"
Programming in which the orderly sequence of events can be determined;
that is, when things happen one after the other, not at the same time.
.IP "syntactic sugar" 4
.IX Item "syntactic sugar"
An alternative way of writing something more easily; a shortcut.
.IP "syntax" 4
.IX Item "syntax"
From Greek, \*(L"with\-arrangement\*(R".  How things (particularly symbols) are
put together with each other.
.IP "syntax tree" 4
.IX Item "syntax tree"
An internal representation of your program wherein lower-level
constructs dangle off the higher-level constructs
enclosing them.
.IP "syscall" 4
.IX Item "syscall"
A \*(L"function\*(R" call directly to the \*(L"operating system\*(R".  Many of the
important subroutines and functions you use aren't direct system
calls, but are built up in one or more layers above the system call
level.  In general, Perl programmers don't need to worry about the
distinction.  However, if you do happen to know which Perl functions
are really syscalls, you can predict which of these will set the \f(CW$!\fR
(\f(CW$ERRNO\fR) variable on failure.  Unfortunately, beginning programmers
often confusingly employ the term \*(L"system call\*(R" to mean what happens
when you call the Perl system function, which
actually involves many syscalls.  To avoid any confusion, we nearly
always use say \*(L"syscall\*(R" for something you could call indirectly via
Perl's syscall function, and never for something
you would call with Perl's system function.
.Sh "T"
.IX Subsection "T"
.IP "tainted" 4
.IX Item "tainted"
Said of data derived from the grubby hands of a user and thus unsafe
for a secure program to rely on.  Perl does taint checks if you run a
\&\*(L"setuid\*(R" (or \*(L"setgid\*(R") program, or if you use the \fB\-T\fR switch.
.IP "\s-1TCP\s0" 4
.IX Item "TCP"
Short for Transmission Control Protocol.  A protocol wrapped around
the Internet Protocol to make an unreliable packet transmission
mechanism appear to the application program to be a reliable
\&\*(L"stream\*(R" of bytes.  (Usually.)
.IP "term" 4
.IX Item "term"
Short for a \*(L"terminal\*(R", that is, a leaf node of a \*(L"syntax tree\*(R".  A
thing that functions grammatically as an \*(L"operand\*(R" for the operators
in an expression.
.IP "terminator" 4
.IX Item "terminator"
A \*(L"character\*(R" or \*(L"string\*(R" that marks the end of another string.
The \f(CW$/\fR variable contains the string that terminates a
readline operation, which chomp
deletes from the end.  Not to be confused with
delimiters or separators.  The period at
the end of this sentence is a terminator.
.IP "ternary" 4
.IX Item "ternary"
An \*(L"operator\*(R" taking three operands.  Sometimes
pronounced \*(L"trinary\*(R".
.IP "text" 4
.IX Item "text"
A \*(L"string\*(R" or \*(L"file\*(R" containing primarily printable characters.
.IP "thread" 4
.IX Item "thread"
Like a forked process, but without \*(L"fork\*(R"'s inherent memory
protection.  A thread is lighter weight than a full process, in that a
process could have multiple threads running around in it, all fighting
over the same process's memory space unless steps are taken to protect
threads from each other.  See threads.
.IP "tie" 4
.IX Item "tie"
The bond between a magical variable and its implementation class.  See
\&\*(L"tie\*(R" in perlfunc and perltie.
.IP "\s-1TMTOWTDI\s0" 4
.IX Item "TMTOWTDI"
There's More Than One Way To Do It, the Perl Motto.  The notion that
there can be more than one valid path to solving a programming problem
in context.  (This doesn't mean that more ways are always better or
that all possible paths are equally desirable\*(--just that there need
not be One True Way.)  Pronounced TimToady.
.IP "token" 4
.IX Item "token"
A morpheme in a programming language, the smallest unit of text with
semantic significance.
.IP "tokener" 4
.IX Item "tokener"
A module that breaks a program text into a sequence of
tokens for later analysis by a parser.
.IP "tokenizing" 4
.IX Item "tokenizing"
Splitting up a program text into tokens.  Also known as
\&\*(L"lexing\*(R", in which case you get \*(L"lexemes\*(R" instead of tokens.
.IP "toolbox approach" 4
.IX Item "toolbox approach"
The notion that, with a complete set of simple tools that work well
together, you can build almost anything you want.  Which is fine if
you're assembling a tricycle, but if you're building a defranishizing
comboflux regurgalator, you really want your own machine shop in which
to build special tools.  Perl is sort of a machine shop.
.IP "transliterate" 4
.IX Item "transliterate"
To turn one string representation into another by mapping each
character of the source string to its corresponding character in the
result string.  See
"tr/\s-1SEARCHLIST\s0/\s-1REPLACEMENTLIST\s0/cds" in perlop.
.IP "trigger" 4
.IX Item "trigger"
An event that causes a \*(L"handler\*(R" to be run.
.IP "trinary" 4
.IX Item "trinary"
Not a stellar system with three stars, but an \*(L"operator\*(R" taking
three operands.  Sometimes pronounced \*(L"ternary\*(R".
.IP "troff" 4
.IX Item "troff"
A venerable typesetting language from which Perl derives the name of
its \f(CW$%\fR variable and which is secretly used in the production of
Camel books.
.IP "true" 4
.IX Item "true"
Any scalar value that doesn't evaluate to 0 or \f(CW""\fR.
.IP "truncating" 4
.IX Item "truncating"
Emptying a file of existing contents, either automatically when
opening a file for writing or explicitly via the
truncate function.
.IP "type" 4
.IX Item "type"
See \*(L"data type\*(R" and \*(L"class\*(R".
.IP "type casting" 4
.IX Item "type casting"
Converting data from one type to another.  C permits this.  Perl does
not need it.  Nor want it.
.IP "typed lexical" 4
.IX Item "typed lexical"
A \*(L"lexical variable\*(R" that is declared with a \*(L"class\*(R" type: \f(CW\*(C`my
Pony $bill\*(C'\fR.
.IP "typedef" 4
.IX Item "typedef"
A type definition in the C language.
.IP "typeglob" 4
.IX Item "typeglob"
Use of a single identifier, prefixed with \f(CW\*(C`*\*(C'\fR.  For example, \f(CW*name\fR
stands for any or all of \f(CW$name\fR, \f(CW@name\fR, \f(CW%name\fR, \f(CW&name\fR, or
just \f(CW\*(C`name\*(C'\fR.  How you use it determines whether it is interpreted as
all or only one of them.  See \*(L"Typeglobs and Filehandles\*(R" in perldata.
.IP "typemap" 4
.IX Item "typemap"
A description of how C types may be transformed to and from Perl types
within an \*(L"extension\*(R" module written in \*(L"\s-1XS\s0\*(R".
.Sh "U"
.IX Subsection "U"
.IP "\s-1UDP\s0" 4
.IX Item "UDP"
User Datagram Protocol, the typical way to send datagrams
over the Internet.
.IP "\s-1UID\s0" 4
.IX Item "UID"
A user \s-1ID\s0.  Often used in the context of \*(L"file\*(R" or \*(L"process\*(R"
ownership.
.IP "umask" 4
.IX Item "umask"
A mask of those \*(L"permission bits\*(R" that should be forced off when
creating files or directories, in order to establish a policy of whom
you'll ordinarily deny access to.  See the umask
function.
.IP "unary operator" 4
.IX Item "unary operator"
An operator with only one \*(L"operand\*(R", like \f(CW\*(C`!\*(C'\fR or
chdir.  Unary operators are usually prefix
operators; that is, they precede their operand.  The \f(CW\*(C`++\*(C'\fR and \f(CW\*(C`\-\-\*(C'\fR
operators can be either prefix or postfix.  (Their position \fIdoes\fR
change their meanings.)
.IP "Unicode" 4
.IX Item "Unicode"
A character set comprising all the major character sets of the world,
more or less.  See <http://www.unicode.org>.
.IP "Unix" 4
.IX Item "Unix"
A very large and constantly evolving language with several alternative
and largely incompatible syntaxes, in which anyone can define anything
any way they choose, and usually do.  Speakers of this language think
it's easy to learn because it's so easily twisted to one's own ends,
but dialectical differences make tribal intercommunication nearly
impossible, and travelers are often reduced to a pidgin-like subset of
the language.  To be universally understood, a Unix shell programmer
must spend years of study in the art.  Many have abandoned this
discipline and now communicate via an Esperanto-like language called
Perl.
.Sp
In ancient times, Unix was also used to refer to some code that a
couple of people at Bell Labs wrote to make use of a \s-1PDP\-7\s0 computer
that wasn't doing much of anything else at the time.
.Sh "V"
.IX Subsection "V"
.IP "value" 4
.IX Item "value"
An actual piece of data, in contrast to all the variables, references,
keys, indexes, operators, and whatnot that you need to access the
value.
.IP "variable" 4
.IX Item "variable"
A named storage location that can hold any of various kinds of
\&\*(L"value\*(R", as your program sees fit.
.IP "variable interpolation" 4
.IX Item "variable interpolation"
The \*(L"interpolation\*(R" of a scalar or array variable into a string.
.IP "variadic" 4
.IX Item "variadic"
Said of a \*(L"function\*(R" that happily receives an indeterminate number
of \*(L"actual arguments\*(R".
.IP "vector" 4
.IX Item "vector"
Mathematical jargon for a list of scalar values.
.IP "virtual" 4
.IX Item "virtual"
Providing the appearance of something without the reality, as in:
virtual memory is not real memory.  (See also \*(L"memory\*(R".)  The
opposite of \*(L"virtual\*(R" is \*(L"transparent\*(R", which means providing the
reality of something without the appearance, as in: Perl handles the
variable-length \s-1UTF\-8\s0 character encoding transparently.
.IP "void context" 4
.IX Item "void context"
A form of \*(L"scalar context\*(R" in which an \*(L"expression\*(R" is not
expected to return any \*(L"value\*(R" at all and is evaluated for its
\&\*(L"side effects\*(R" alone.
.IP "v\-string" 4
.IX Item "v-string"
A \*(L"version\*(R" or \*(L"vector\*(R" \*(L"string\*(R" specified with a \f(CW\*(C`v\*(C'\fR followed by a
series of decimal integers in dot notation, for instance,
\&\f(CW\*(C`v1.20.300.4000\*(C'\fR.  Each number turns into a \*(L"character\*(R" with the
specified ordinal value.  (The \f(CW\*(C`v\*(C'\fR is optional when there are at
least three integers.)
.Sh "W"
.IX Subsection "W"
.IP "warning" 4
.IX Item "warning"
A message printed to the \*(L"\s-1STDERR\s0\*(R" stream to the effect that something
might be wrong but isn't worth blowing up over.  See \*(L"warn\*(R" in perlfunc
and the warnings pragma.
.IP "watch expression" 4
.IX Item "watch expression"
An expression which, when its value changes, causes a breakpoint in
the Perl debugger.
.IP "whitespace" 4
.IX Item "whitespace"
A \*(L"character\*(R" that moves your cursor but doesn't otherwise put
anything on your screen.  Typically refers to any of: space, tab, line
feed, carriage return, or form feed.
.IP "word" 4
.IX Item "word"
In normal \*(L"computerese\*(R", the piece of data of the size most
efficiently handled by your computer, typically 32 bits or so, give or
take a few powers of 2.  In Perl culture, it more often refers to an
alphanumeric \*(L"identifier\*(R" (including underscores), or to a string of
nonwhitespace characters bounded by whitespace or string
boundaries.
.IP "working directory" 4
.IX Item "working directory"
Your current \*(L"directory\*(R", from which relative pathnames are
interpreted by the \*(L"operating system\*(R".  The operating system knows
your current directory because you told it with a
chdir or because you started out in the place where
your parent \*(L"process\*(R" was when you were born.
.IP "wrapper" 4
.IX Item "wrapper"
A program or subroutine that runs some other program or subroutine for
you, modifying some of its input or output to better suit your
purposes.
.IP "\s-1WYSIWYG\s0" 4
.IX Item "WYSIWYG"
What You See Is What You Get.  Usually used when something that
appears on the screen matches how it will eventually look, like Perl's
format declarations.  Also used to mean the
opposite of magic because everything works exactly as it appears, as
in the three-argument form of open.
.Sh "X"
.IX Subsection "X"
.IP "\s-1XS\s0" 4
.IX Item "XS"
An extraordinarily exported, expeditiously excellent, expressly
eXternal Subroutine, executed in existing C or \*(C+ or in an exciting
new extension language called (exasperatingly) \s-1XS\s0.  Examine perlxs
for the exact explanation or perlxstut for an exemplary unexacting
one.
.IP "\s-1XSUB\s0" 4
.IX Item "XSUB"
An external \*(L"subroutine\*(R" defined in \*(L"\s-1XS\s0\*(R".
.Sh "Y"
.IX Subsection "Y"
.IP "yacc" 4
.IX Item "yacc"
Yet Another Compiler Compiler.  A parser generator without which Perl
probably would not have existed.  See the file \fIperly.y\fR in the Perl
source distribution.
.Sh "Z"
.IX Subsection "Z"
.IP "zero width" 4
.IX Item "zero width"
A subpattern \*(L"assertion\*(R" matching the \*(L"null string\*(R" between
characters.
.IP "zombie" 4
.IX Item "zombie"
A process that has died (exited) but whose parent has not yet received
proper notification of its demise by virtue of having called
wait or waitpid.  If you
fork, you must clean up after your child processes
when they exit, or else the process table will fill up and your system
administrator will Not Be Happy with you.
.SH "AUTHOR AND COPYRIGHT"
.IX Header "AUTHOR AND COPYRIGHT"
Based on the Glossary of Programming Perl, Third Edition,
by Larry Wall, Tom Christiansen & Jon Orwant.
Copyright (c) 2000, 1996, 1991 O'Reilly Media, Inc.
This document may be distributed under the same terms as Perl itself.
