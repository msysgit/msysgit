.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLUTS 1"
.TH PERLUTS 1 "2006-01-07" "perl v5.8.8" "Perl Programmers Reference Guide"
.SH "NAME"
perluts \- Perl under UTS
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
This document can be read \fIas is\fR: as \fI\s-1README\s0.uts\fR, or you
can read it after you build your package using \*(L"man perluts\*(R".
.PP
The purpose is to help you build Perl for \s-1UTS\s0, which, if you
follow these instructions, should be easy, and result in
a solidly working installation.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Perl 5.7.2 (Developmental) or Perl 5.8.x (forthcoming) for \s-1UTS\s0
.SH "BUILDING PERL ON UTS"
.IX Header "BUILDING PERL ON UTS"
\&\s-1NOTE:\s0 Some sites have redefined the way uname works, and if yours
does this, special steps must be taken so that Configure can
recognize your system as a \s-1UTS\s0 system.  To see if you are in
this category, issue the command \*(L"uname \-a\*(R".  It should look
something like:
.PP
.Vb 1
\&  uts juno 4 4.4 9672 370
.Ve
.PP
At any rate, the first field should be \*(L"uts\*(R".  If this is not
the case; supposing it is, say telcoUTS, create a script, uts/uname
(i.e. uname, in the subdirectory \*(L"uts\*(R" of the main Perl source dir):
   # uname
   /usr/bin/uname \*(L"$@\*(R" | sed \-e 's/^telcoUTS/uts/'
.PP
and when you execute Configure, do it as below, except for adding
PATH=uts:$PATH as a prefix.  I.e. do:
.PP
.Vb 1
\&   PATH=uts:$PATH ./Configure ...
.Ve
.PP
There is no need to do an interactive configure, just type
.PP
.Vb 1
\&  ./Configure -de [-Dusedevel] [-Doptimize=-g ] 2>&1 | tee Conf.out
.Ve
.PP
\&\*(L"\-Dusedevel\*(R" may be required to configure Perl 5.7.2 non\-interactively.
Use \-Doptimize=\-g if you want to run Perl under sdb or gdb, \s-1OR\s0
if you want to be able to use the \-D command line flags to perl,
which are occasionally useful in debugging perl scripts.
.PP
In this and the following steps, the \*(L"2>&1 | tee \s-1XXX\s0.out\*(R" records all
output from the process, which will be useful if anything unexpected
goes wrong.
.PP
Then do the compilation with
.PP
.Vb 1
\&  make 2>&1 | tee make.out
.Ve
.PP
Finally, test using
.PP
.Vb 1
\&  make test 2>&1 | tee make-test.out
.Ve
.PP
In the output, the only failures you should see should look like:
.PP
.Vb 15
\&   lib/Math/BigInt/t/bigfltpm.........Use of uninitialized value ...
\&   FAILED at test 57
\&   lib/Math/BigInt/t/bigintc..........ok
\&   lib/Math/BigInt/t/bigintpm.........FAILED at test 204
\&   lib/Math/BigInt/t/mbimbf...........Use of uninitialized value ...
\&   Illegal division by zero at ../lib/Math/BigInt/Calc.pm line 314.
\&   FAILED at test 71
\&   lib/Math/Complex...................exp: OVERFLOW
\&   FAILED at test 250
\&   lib/Math/Trig......................exp: OVERFLOW
\&   ok
\&   lib/Memoize/t/array................ok
\&        ...
\&   lib/Net/protoent...................ok
\&   lib/Net/servent....................FAILED at test 0
.Ve
.PP
This means that everything passes except for some problems in the
packages \*(L"Math::BigInt\*(R", \*(L"Math::Complex\*(R", and \*(L"Math::Trig\*(R".
The lib/Net/servent failure seems to be a bug in the test
program.  To confirm this, from the main Perl source dir, do:
.PP
.Vb 1
\&   LD_LIBRARY_PATH=`pwd` ./perl -Ilib lib/Net/servent.t
.Ve
.PP
and it should output
.PP
.Vb 4
\&   1..3
\&   ok 1
\&   ok 2
\&   ok 3
.Ve
.SH "Installing the built perl on UTS"
.IX Header "Installing the built perl on UTS"
Run the command \*(L"make install\*(R"
.SH "AUTHOR"
.IX Header "AUTHOR"
.Vb 3
\&   Hal Morris
\&   UTS Global LLC
\&   email: hom00@utsglobal.com
.Ve
