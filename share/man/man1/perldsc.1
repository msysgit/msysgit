.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLDSC 1"
.TH PERLDSC 1 "2006-01-07" "perl v5.8.8" "Perl Programmers Reference Guide"
.SH "NAME"
.IX Xref "data structure complex data structure struct"
perldsc \- Perl Data Structures Cookbook
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The single feature most sorely lacking in the Perl programming language
prior to its 5.0 release was complex data structures.  Even without direct
language support, some valiant programmers did manage to emulate them, but
it was hard work and not for the faint of heart.  You could occasionally
get away with the \f(CW$m{$AoA,$b}\fR notation borrowed from \fBawk\fR in which the
keys are actually more like a single concatenated string \f(CW"$AoA$b"\fR, but
traversal and sorting were difficult.  More desperate programmers even
hacked Perl's internal symbol table directly, a strategy that proved hard
to develop and maintain\*(--to put it mildly.
.PP
The 5.0 release of Perl let us have complex data structures.  You
may now write something like this and all of a sudden, you'd have an array
with three dimensions!
.PP
.Vb 8
\&    for $x (1 .. 10) {
\&        for $y (1 .. 10) {
\&            for $z (1 .. 10) {
\&                $AoA[$x][$y][$z] =
\&                    $x ** $y + $z;
\&            }
\&        }
\&    }
.Ve
.PP
Alas, however simple this may appear, underneath it's a much more
elaborate construct than meets the eye!
.PP
How do you print it out?  Why can't you say just \f(CW\*(C`print @AoA\*(C'\fR?  How do
you sort it?  How can you pass it to a function or get one of these back
from a function?  Is it an object?  Can you save it to disk to read
back later?  How do you access whole rows or columns of that matrix?  Do
all the values have to be numeric?
.PP
As you see, it's quite easy to become confused.  While some small portion
of the blame for this can be attributed to the reference-based
implementation, it's really more due to a lack of existing documentation with
examples designed for the beginner.
.PP
This document is meant to be a detailed but understandable treatment of the
many different sorts of data structures you might want to develop.  It
should also serve as a cookbook of examples.  That way, when you need to
create one of these complex data structures, you can just pinch, pilfer, or
purloin a drop-in example from here.
.PP
Let's look at each of these possible constructs in detail.  There are separate
sections on each of the following:
.IP "* arrays of arrays" 5
.IX Item "arrays of arrays"
.PD 0
.IP "* hashes of arrays" 5
.IX Item "hashes of arrays"
.IP "* arrays of hashes" 5
.IX Item "arrays of hashes"
.IP "* hashes of hashes" 5
.IX Item "hashes of hashes"
.IP "* more elaborate constructs" 5
.IX Item "more elaborate constructs"
.PD
.PP
But for now, let's look at general issues common to all
these types of data structures.
.SH "REFERENCES"
.IX Xref "reference dereference dereferencing pointer"
.IX Header "REFERENCES"
The most important thing to understand about all data structures in Perl
\&\*(-- including multidimensional arrays\*(--is that even though they might
appear otherwise, Perl \f(CW@ARRAY\fRs and \f(CW%HASH\fRes are all internally
one\-dimensional.  They can hold only scalar values (meaning a string,
number, or a reference).  They cannot directly contain other arrays or
hashes, but instead contain \fIreferences\fR to other arrays or hashes.
.IX Xref "multidimensional array array, multidimensional"
.PP
You can't use a reference to an array or hash in quite the same way that you
would a real array or hash.  For C or \*(C+ programmers unused to
distinguishing between arrays and pointers to the same, this can be
confusing.  If so, just think of it as the difference between a structure
and a pointer to a structure.
.PP
You can (and should) read more about references in the \fIperlref\fR\|(1) man
page.  Briefly, references are rather like pointers that know what they
point to.  (Objects are also a kind of reference, but we won't be needing
them right away\*(--if ever.)  This means that when you have something which
looks to you like an access to a two-or-more-dimensional array and/or hash,
what's really going on is that the base type is
merely a one-dimensional entity that contains references to the next
level.  It's just that you can \fIuse\fR it as though it were a
two-dimensional one.  This is actually the way almost all C
multidimensional arrays work as well.
.PP
.Vb 4
\&    $array[7][12]                       # array of arrays
\&    $array[7]{string}                   # array of hashes
\&    $hash{string}[7]                    # hash of arrays
\&    $hash{string}{'another string'}     # hash of hashes
.Ve
.PP
Now, because the top level contains only references, if you try to print
out your array in with a simple \fIprint()\fR function, you'll get something
that doesn't look very nice, like this:
.PP
.Vb 5
\&    @AoA = ( [2, 3], [4, 5, 7], [0] );
\&    print $AoA[1][2];
\&  7
\&    print @AoA;
\&  ARRAY(0x83c38)ARRAY(0x8b194)ARRAY(0x8b1d0)
.Ve
.PP
That's because Perl doesn't (ever) implicitly dereference your variables.
If you want to get at the thing a reference is referring to, then you have
to do this yourself using either prefix typing indicators, like
\&\f(CW\*(C`${$blah}\*(C'\fR, \f(CW\*(C`@{$blah}\*(C'\fR, \f(CW\*(C`@{$blah[$i]}\*(C'\fR, or else postfix pointer arrows,
like \f(CW\*(C`$a\->[3]\*(C'\fR, \f(CW\*(C`$h\->{fred}\*(C'\fR, or even \f(CW\*(C`$ob\->method()\->[3]\*(C'\fR.
.SH "COMMON MISTAKES"
.IX Header "COMMON MISTAKES"
The two most common mistakes made in constructing something like
an array of arrays is either accidentally counting the number of
elements or else taking a reference to the same memory location
repeatedly.  Here's the case where you just get the count instead
of a nested array:
.PP
.Vb 4
\&    for $i (1..10) {
\&        @array = somefunc($i);
\&        $AoA[$i] = @array;      # WRONG!
\&    }
.Ve
.PP
That's just the simple case of assigning an array to a scalar and getting
its element count.  If that's what you really and truly want, then you
might do well to consider being a tad more explicit about it, like this:
.PP
.Vb 4
\&    for $i (1..10) {
\&        @array = somefunc($i);
\&        $counts[$i] = scalar @array;
\&    }
.Ve
.PP
Here's the case of taking a reference to the same memory location
again and again:
.PP
.Vb 4
\&    for $i (1..10) {
\&        @array = somefunc($i);
\&        $AoA[$i] = \e@array;     # WRONG!
\&    }
.Ve
.PP
So, what's the big problem with that?  It looks right, doesn't it?
After all, I just told you that you need an array of references, so by
golly, you've made me one!
.PP
Unfortunately, while this is true, it's still broken.  All the references
in \f(CW@AoA\fR refer to the \fIvery same place\fR, and they will therefore all hold
whatever was last in \f(CW@array\fR!  It's similar to the problem demonstrated in
the following C program:
.PP
.Vb 5
\&    #include <pwd.h>
\&    main() {
\&        struct passwd *getpwnam(), *rp, *dp;
\&        rp = getpwnam("root");
\&        dp = getpwnam("daemon");
.Ve
.PP
.Vb 3
\&        printf("daemon name is %s\enroot name is %s\en",
\&                dp->pw_name, rp->pw_name);
\&    }
.Ve
.PP
Which will print
.PP
.Vb 2
\&    daemon name is daemon
\&    root name is daemon
.Ve
.PP
The problem is that both \f(CW\*(C`rp\*(C'\fR and \f(CW\*(C`dp\*(C'\fR are pointers to the same location
in memory!  In C, you'd have to remember to \fImalloc()\fR yourself some new
memory.  In Perl, you'll want to use the array constructor \f(CW\*(C`[]\*(C'\fR or the
hash constructor \f(CW\*(C`{}\*(C'\fR instead.   Here's the right way to do the preceding
broken code fragments:
.IX Xref "[] {}"
.PP
.Vb 4
\&    for $i (1..10) {
\&        @array = somefunc($i);
\&        $AoA[$i] = [ @array ];
\&    }
.Ve
.PP
The square brackets make a reference to a new array with a \fIcopy\fR
of what's in \f(CW@array\fR at the time of the assignment.  This is what
you want.
.PP
Note that this will produce something similar, but it's
much harder to read:
.PP
.Vb 4
\&    for $i (1..10) {
\&        @array = 0 .. $i;
\&        @{$AoA[$i]} = @array;
\&    }
.Ve
.PP
Is it the same?  Well, maybe so\*(--and maybe not.  The subtle difference
is that when you assign something in square brackets, you know for sure
it's always a brand new reference with a new \fIcopy\fR of the data.
Something else could be going on in this new case with the \f(CW\*(C`@{$AoA[$i]}}\*(C'\fR
dereference on the left-hand-side of the assignment.  It all depends on
whether \f(CW$AoA[$i]\fR had been undefined to start with, or whether it
already contained a reference.  If you had already populated \f(CW@AoA\fR with
references, as in
.PP
.Vb 1
\&    $AoA[3] = \e@another_array;
.Ve
.PP
Then the assignment with the indirection on the left-hand-side would
use the existing reference that was already there:
.PP
.Vb 1
\&    @{$AoA[3]} = @array;
.Ve
.PP
Of course, this \fIwould\fR have the \*(L"interesting\*(R" effect of clobbering
\&\f(CW@another_array\fR.  (Have you ever noticed how when a programmer says
something is \*(L"interesting\*(R", that rather than meaning \*(L"intriguing\*(R",
they're disturbingly more apt to mean that it's \*(L"annoying\*(R",
\&\*(L"difficult\*(R", or both?  :\-)
.PP
So just remember always to use the array or hash constructors with \f(CW\*(C`[]\*(C'\fR
or \f(CW\*(C`{}\*(C'\fR, and you'll be fine, although it's not always optimally
efficient.
.PP
Surprisingly, the following dangerous-looking construct will
actually work out fine:
.PP
.Vb 4
\&    for $i (1..10) {
\&        my @array = somefunc($i);
\&        $AoA[$i] = \e@array;
\&    }
.Ve
.PP
That's because \fImy()\fR is more of a run-time statement than it is a
compile-time declaration \fIper se\fR.  This means that the \fImy()\fR variable is
remade afresh each time through the loop.  So even though it \fIlooks\fR as
though you stored the same variable reference each time, you actually did
not!  This is a subtle distinction that can produce more efficient code at
the risk of misleading all but the most experienced of programmers.  So I
usually advise against teaching it to beginners.  In fact, except for
passing arguments to functions, I seldom like to see the gimme-a-reference
operator (backslash) used much at all in code.  Instead, I advise
beginners that they (and most of the rest of us) should try to use the
much more easily understood constructors \f(CW\*(C`[]\*(C'\fR and \f(CW\*(C`{}\*(C'\fR instead of
relying upon lexical (or dynamic) scoping and hidden reference-counting to
do the right thing behind the scenes.
.PP
In summary:
.PP
.Vb 3
\&    $AoA[$i] = [ @array ];      # usually best
\&    $AoA[$i] = \e@array;         # perilous; just how my() was that array?
\&    @{ $AoA[$i] } = @array;     # way too tricky for most programmers
.Ve
.SH "CAVEAT ON PRECEDENCE"
.IX Xref "dereference, precedence dereferencing, precedence"
.IX Header "CAVEAT ON PRECEDENCE"
Speaking of things like \f(CW\*(C`@{$AoA[$i]}\*(C'\fR, the following are actually the
same thing:
.IX Xref "->"
.PP
.Vb 2
\&    $aref->[2][2]       # clear
\&    $$aref[2][2]        # confusing
.Ve
.PP
That's because Perl's precedence rules on its five prefix dereferencers
(which look like someone swearing: \f(CW\*(C`$ @ * % &\*(C'\fR) make them bind more
tightly than the postfix subscripting brackets or braces!  This will no
doubt come as a great shock to the C or \*(C+ programmer, who is quite
accustomed to using \f(CW*a[i]\fR to mean what's pointed to by the \fIi'th\fR
element of \f(CW\*(C`a\*(C'\fR.  That is, they first take the subscript, and only then
dereference the thing at that subscript.  That's fine in C, but this isn't C.
.PP
The seemingly equivalent construct in Perl, \f(CW$$aref[$i]\fR first does
the deref of \f(CW$aref\fR, making it take \f(CW$aref\fR as a reference to an
array, and then dereference that, and finally tell you the \fIi'th\fR value
of the array pointed to by \f(CW$AoA\fR. If you wanted the C notion, you'd have to
write \f(CW\*(C`${$AoA[$i]}\*(C'\fR to force the \f(CW$AoA[$i]\fR to get evaluated first
before the leading \f(CW\*(C`$\*(C'\fR dereferencer.
.ie n .SH "WHY YOU SHOULD ALWAYS ""use strict"""
.el .SH "WHY YOU SHOULD ALWAYS \f(CWuse strict\fP"
.IX Header "WHY YOU SHOULD ALWAYS use strict"
If this is starting to sound scarier than it's worth, relax.  Perl has
some features to help you avoid its most common pitfalls.  The best
way to avoid getting confused is to start every program like this:
.PP
.Vb 2
\&    #!/usr/bin/perl -w
\&    use strict;
.Ve
.PP
This way, you'll be forced to declare all your variables with \fImy()\fR and
also disallow accidental \*(L"symbolic dereferencing\*(R".  Therefore if you'd done
this:
.PP
.Vb 5
\&    my $aref = [
\&        [ "fred", "barney", "pebbles", "bambam", "dino", ],
\&        [ "homer", "bart", "marge", "maggie", ],
\&        [ "george", "jane", "elroy", "judy", ],
\&    ];
.Ve
.PP
.Vb 1
\&    print $aref[2][2];
.Ve
.PP
The compiler would immediately flag that as an error \fIat compile time\fR,
because you were accidentally accessing \f(CW@aref\fR, an undeclared
variable, and it would thereby remind you to write instead:
.PP
.Vb 1
\&    print $aref->[2][2]
.Ve
.SH "DEBUGGING"
.IX Xref "data structure, debugging complex data structure, debugging AoA, debugging HoA, debugging AoH, debugging HoH, debugging array of arrays, debugging hash of arrays, debugging array of hashes, debugging hash of hashes, debugging"
.IX Header "DEBUGGING"
Before version 5.002, the standard Perl debugger didn't do a very nice job of
printing out complex data structures.  With 5.002 or above, the
debugger includes several new features, including command line editing as
well as the \f(CW\*(C`x\*(C'\fR command to dump out complex data structures.  For
example, given the assignment to \f(CW$AoA\fR above, here's the debugger output:
.PP
.Vb 18
\&    DB<1> x $AoA
\&    $AoA = ARRAY(0x13b5a0)
\&       0  ARRAY(0x1f0a24)
\&          0  'fred'
\&          1  'barney'
\&          2  'pebbles'
\&          3  'bambam'
\&          4  'dino'
\&       1  ARRAY(0x13b558)
\&          0  'homer'
\&          1  'bart'
\&          2  'marge'
\&          3  'maggie'
\&       2  ARRAY(0x13b540)
\&          0  'george'
\&          1  'jane'
\&          2  'elroy'
\&          3  'judy'
.Ve
.SH "CODE EXAMPLES"
.IX Header "CODE EXAMPLES"
Presented with little comment (these will get their own manpages someday)
here are short code examples illustrating access of various
types of data structures.
.SH "ARRAYS OF ARRAYS"
.IX Xref "array of arrays AoA"
.IX Header "ARRAYS OF ARRAYS"
.Sh "Declaration of an \s-1ARRAY\s0 \s-1OF\s0 \s-1ARRAYS\s0"
.IX Subsection "Declaration of an ARRAY OF ARRAYS"
.Vb 5
\& @AoA = (
\&        [ "fred", "barney" ],
\&        [ "george", "jane", "elroy" ],
\&        [ "homer", "marge", "bart" ],
\&      );
.Ve
.Sh "Generation of an \s-1ARRAY\s0 \s-1OF\s0 \s-1ARRAYS\s0"
.IX Subsection "Generation of an ARRAY OF ARRAYS"
.Vb 4
\& # reading from file
\& while ( <> ) {
\&     push @AoA, [ split ];
\& }
.Ve
.PP
.Vb 4
\& # calling a function
\& for $i ( 1 .. 10 ) {
\&     $AoA[$i] = [ somefunc($i) ];
\& }
.Ve
.PP
.Vb 5
\& # using temp vars
\& for $i ( 1 .. 10 ) {
\&     @tmp = somefunc($i);
\&     $AoA[$i] = [ @tmp ];
\& }
.Ve
.PP
.Vb 2
\& # add to an existing row
\& push @{ $AoA[0] }, "wilma", "betty";
.Ve
.Sh "Access and Printing of an \s-1ARRAY\s0 \s-1OF\s0 \s-1ARRAYS\s0"
.IX Subsection "Access and Printing of an ARRAY OF ARRAYS"
.Vb 2
\& # one element
\& $AoA[0][0] = "Fred";
.Ve
.PP
.Vb 2
\& # another element
\& $AoA[1][1] =~ s/(\ew)/\eu$1/;
.Ve
.PP
.Vb 4
\& # print the whole thing with refs
\& for $aref ( @AoA ) {
\&     print "\et [ @$aref ],\en";
\& }
.Ve
.PP
.Vb 4
\& # print the whole thing with indices
\& for $i ( 0 .. $#AoA ) {
\&     print "\et [ @{$AoA[$i]} ],\en";
\& }
.Ve
.PP
.Vb 6
\& # print the whole thing one at a time
\& for $i ( 0 .. $#AoA ) {
\&     for $j ( 0 .. $#{ $AoA[$i] } ) {
\&         print "elt $i $j is $AoA[$i][$j]\en";
\&     }
\& }
.Ve
.SH "HASHES OF ARRAYS"
.IX Xref "hash of arrays HoA"
.IX Header "HASHES OF ARRAYS"
.Sh "Declaration of a \s-1HASH\s0 \s-1OF\s0 \s-1ARRAYS\s0"
.IX Subsection "Declaration of a HASH OF ARRAYS"
.Vb 5
\& %HoA = (
\&        flintstones        => [ "fred", "barney" ],
\&        jetsons            => [ "george", "jane", "elroy" ],
\&        simpsons           => [ "homer", "marge", "bart" ],
\&      );
.Ve
.Sh "Generation of a \s-1HASH\s0 \s-1OF\s0 \s-1ARRAYS\s0"
.IX Subsection "Generation of a HASH OF ARRAYS"
.Vb 6
\& # reading from file
\& # flintstones: fred barney wilma dino
\& while ( <> ) {
\&     next unless s/^(.*?):\es*//;
\&     $HoA{$1} = [ split ];
\& }
.Ve
.PP
.Vb 7
\& # reading from file; more temps
\& # flintstones: fred barney wilma dino
\& while ( $line = <> ) {
\&     ($who, $rest) = split /:\es*/, $line, 2;
\&     @fields = split ' ', $rest;
\&     $HoA{$who} = [ @fields ];
\& }
.Ve
.PP
.Vb 4
\& # calling a function that returns a list
\& for $group ( "simpsons", "jetsons", "flintstones" ) {
\&     $HoA{$group} = [ get_family($group) ];
\& }
.Ve
.PP
.Vb 5
\& # likewise, but using temps
\& for $group ( "simpsons", "jetsons", "flintstones" ) {
\&     @members = get_family($group);
\&     $HoA{$group} = [ @members ];
\& }
.Ve
.PP
.Vb 2
\& # append new members to an existing family
\& push @{ $HoA{"flintstones"} }, "wilma", "betty";
.Ve
.Sh "Access and Printing of a \s-1HASH\s0 \s-1OF\s0 \s-1ARRAYS\s0"
.IX Subsection "Access and Printing of a HASH OF ARRAYS"
.Vb 2
\& # one element
\& $HoA{flintstones}[0] = "Fred";
.Ve
.PP
.Vb 2
\& # another element
\& $HoA{simpsons}[1] =~ s/(\ew)/\eu$1/;
.Ve
.PP
.Vb 4
\& # print the whole thing
\& foreach $family ( keys %HoA ) {
\&     print "$family: @{ $HoA{$family} }\en"
\& }
.Ve
.PP
.Vb 8
\& # print the whole thing with indices
\& foreach $family ( keys %HoA ) {
\&     print "family: ";
\&     foreach $i ( 0 .. $#{ $HoA{$family} } ) {
\&         print " $i = $HoA{$family}[$i]";
\&     }
\&     print "\en";
\& }
.Ve
.PP
.Vb 4
\& # print the whole thing sorted by number of members
\& foreach $family ( sort { @{$HoA{$b}} <=> @{$HoA{$a}} } keys %HoA ) {
\&     print "$family: @{ $HoA{$family} }\en"
\& }
.Ve
.PP
.Vb 9
\& # print the whole thing sorted by number of members and name
\& foreach $family ( sort {
\&                            @{$HoA{$b}} <=> @{$HoA{$a}}
\&                                        ||
\&                                    $a cmp $b
\&            } keys %HoA )
\& {
\&     print "$family: ", join(", ", sort @{ $HoA{$family} }), "\en";
\& }
.Ve
.SH "ARRAYS OF HASHES"
.IX Xref "array of hashes AoH"
.IX Header "ARRAYS OF HASHES"
.Sh "Declaration of an \s-1ARRAY\s0 \s-1OF\s0 \s-1HASHES\s0"
.IX Subsection "Declaration of an ARRAY OF HASHES"
.Vb 16
\& @AoH = (
\&        {
\&            Lead     => "fred",
\&            Friend   => "barney",
\&        },
\&        {
\&            Lead     => "george",
\&            Wife     => "jane",
\&            Son      => "elroy",
\&        },
\&        {
\&            Lead     => "homer",
\&            Wife     => "marge",
\&            Son      => "bart",
\&        }
\&  );
.Ve
.Sh "Generation of an \s-1ARRAY\s0 \s-1OF\s0 \s-1HASHES\s0"
.IX Subsection "Generation of an ARRAY OF HASHES"
.Vb 10
\& # reading from file
\& # format: LEAD=fred FRIEND=barney
\& while ( <> ) {
\&     $rec = {};
\&     for $field ( split ) {
\&         ($key, $value) = split /=/, $field;
\&         $rec->{$key} = $value;
\&     }
\&     push @AoH, $rec;
\& }
.Ve
.PP
.Vb 6
\& # reading from file
\& # format: LEAD=fred FRIEND=barney
\& # no temp
\& while ( <> ) {
\&     push @AoH, { split /[\es+=]/ };
\& }
.Ve
.PP
.Vb 5
\& # calling a function  that returns a key/value pair list, like
\& # "lead","fred","daughter","pebbles"
\& while ( %fields = getnextpairset() ) {
\&     push @AoH, { %fields };
\& }
.Ve
.PP
.Vb 4
\& # likewise, but using no temp vars
\& while (<>) {
\&     push @AoH, { parsepairs($_) };
\& }
.Ve
.PP
.Vb 3
\& # add key/value to an element
\& $AoH[0]{pet} = "dino";
\& $AoH[2]{pet} = "santa's little helper";
.Ve
.Sh "Access and Printing of an \s-1ARRAY\s0 \s-1OF\s0 \s-1HASHES\s0"
.IX Subsection "Access and Printing of an ARRAY OF HASHES"
.Vb 2
\& # one element
\& $AoH[0]{lead} = "fred";
.Ve
.PP
.Vb 2
\& # another element
\& $AoH[1]{lead} =~ s/(\ew)/\eu$1/;
.Ve
.PP
.Vb 8
\& # print the whole thing with refs
\& for $href ( @AoH ) {
\&     print "{ ";
\&     for $role ( keys %$href ) {
\&         print "$role=$href->{$role} ";
\&     }
\&     print "}\en";
\& }
.Ve
.PP
.Vb 8
\& # print the whole thing with indices
\& for $i ( 0 .. $#AoH ) {
\&     print "$i is { ";
\&     for $role ( keys %{ $AoH[$i] } ) {
\&         print "$role=$AoH[$i]{$role} ";
\&     }
\&     print "}\en";
\& }
.Ve
.PP
.Vb 6
\& # print the whole thing one at a time
\& for $i ( 0 .. $#AoH ) {
\&     for $role ( keys %{ $AoH[$i] } ) {
\&         print "elt $i $role is $AoH[$i]{$role}\en";
\&     }
\& }
.Ve
.SH "HASHES OF HASHES"
.IX Xref "hass of hashes HoH"
.IX Header "HASHES OF HASHES"
.Sh "Declaration of a \s-1HASH\s0 \s-1OF\s0 \s-1HASHES\s0"
.IX Subsection "Declaration of a HASH OF HASHES"
.Vb 16
\& %HoH = (
\&        flintstones => {
\&                lead      => "fred",
\&                pal       => "barney",
\&        },
\&        jetsons     => {
\&                lead      => "george",
\&                wife      => "jane",
\&                "his boy" => "elroy",
\&        },
\&        simpsons    => {
\&                lead      => "homer",
\&                wife      => "marge",
\&                kid       => "bart",
\&        },
\& );
.Ve
.Sh "Generation of a \s-1HASH\s0 \s-1OF\s0 \s-1HASHES\s0"
.IX Subsection "Generation of a HASH OF HASHES"
.Vb 9
\& # reading from file
\& # flintstones: lead=fred pal=barney wife=wilma pet=dino
\& while ( <> ) {
\&     next unless s/^(.*?):\es*//;
\&     $who = $1;
\&     for $field ( split ) {
\&         ($key, $value) = split /=/, $field;
\&         $HoH{$who}{$key} = $value;
\&     }
.Ve
.PP
.Vb 11
\& # reading from file; more temps
\& while ( <> ) {
\&     next unless s/^(.*?):\es*//;
\&     $who = $1;
\&     $rec = {};
\&     $HoH{$who} = $rec;
\&     for $field ( split ) {
\&         ($key, $value) = split /=/, $field;
\&         $rec->{$key} = $value;
\&     }
\& }
.Ve
.PP
.Vb 4
\& # calling a function  that returns a key,value hash
\& for $group ( "simpsons", "jetsons", "flintstones" ) {
\&     $HoH{$group} = { get_family($group) };
\& }
.Ve
.PP
.Vb 5
\& # likewise, but using temps
\& for $group ( "simpsons", "jetsons", "flintstones" ) {
\&     %members = get_family($group);
\&     $HoH{$group} = { %members };
\& }
.Ve
.PP
.Vb 5
\& # append new members to an existing family
\& %new_folks = (
\&     wife => "wilma",
\&     pet  => "dino",
\& );
.Ve
.PP
.Vb 3
\& for $what (keys %new_folks) {
\&     $HoH{flintstones}{$what} = $new_folks{$what};
\& }
.Ve
.Sh "Access and Printing of a \s-1HASH\s0 \s-1OF\s0 \s-1HASHES\s0"
.IX Subsection "Access and Printing of a HASH OF HASHES"
.Vb 2
\& # one element
\& $HoH{flintstones}{wife} = "wilma";
.Ve
.PP
.Vb 2
\& # another element
\& $HoH{simpsons}{lead} =~ s/(\ew)/\eu$1/;
.Ve
.PP
.Vb 8
\& # print the whole thing
\& foreach $family ( keys %HoH ) {
\&     print "$family: { ";
\&     for $role ( keys %{ $HoH{$family} } ) {
\&         print "$role=$HoH{$family}{$role} ";
\&     }
\&     print "}\en";
\& }
.Ve
.PP
.Vb 8
\& # print the whole thing  somewhat sorted
\& foreach $family ( sort keys %HoH ) {
\&     print "$family: { ";
\&     for $role ( sort keys %{ $HoH{$family} } ) {
\&         print "$role=$HoH{$family}{$role} ";
\&     }
\&     print "}\en";
\& }
.Ve
.PP
.Vb 8
\& # print the whole thing sorted by number of members
\& foreach $family ( sort { keys %{$HoH{$b}} <=> keys %{$HoH{$a}} } keys %HoH ) {
\&     print "$family: { ";
\&     for $role ( sort keys %{ $HoH{$family} } ) {
\&         print "$role=$HoH{$family}{$role} ";
\&     }
\&     print "}\en";
\& }
.Ve
.PP
.Vb 3
\& # establish a sort order (rank) for each role
\& $i = 0;
\& for ( qw(lead wife son daughter pal pet) ) { $rank{$_} = ++$i }
.Ve
.PP
.Vb 9
\& # now print the whole thing sorted by number of members
\& foreach $family ( sort { keys %{ $HoH{$b} } <=> keys %{ $HoH{$a} } } keys %HoH ) {
\&     print "$family: { ";
\&     # and print these according to rank order
\&     for $role ( sort { $rank{$a} <=> $rank{$b} }  keys %{ $HoH{$family} } ) {
\&         print "$role=$HoH{$family}{$role} ";
\&     }
\&     print "}\en";
\& }
.Ve
.SH "MORE ELABORATE RECORDS"
.IX Xref "record structure struct"
.IX Header "MORE ELABORATE RECORDS"
.Sh "Declaration of \s-1MORE\s0 \s-1ELABORATE\s0 \s-1RECORDS\s0"
.IX Subsection "Declaration of MORE ELABORATE RECORDS"
Here's a sample showing how to create and use a record whose fields are of
many different sorts:
.PP
.Vb 8
\&     $rec = {
\&         TEXT      => $string,
\&         SEQUENCE  => [ @old_values ],
\&         LOOKUP    => { %some_table },
\&         THATCODE  => \e&some_function,
\&         THISCODE  => sub { $_[0] ** $_[1] },
\&         HANDLE    => \e*STDOUT,
\&     };
.Ve
.PP
.Vb 1
\&     print $rec->{TEXT};
.Ve
.PP
.Vb 2
\&     print $rec->{SEQUENCE}[0];
\&     $last = pop @ { $rec->{SEQUENCE} };
.Ve
.PP
.Vb 2
\&     print $rec->{LOOKUP}{"key"};
\&     ($first_k, $first_v) = each %{ $rec->{LOOKUP} };
.Ve
.PP
.Vb 2
\&     $answer = $rec->{THATCODE}->($arg);
\&     $answer = $rec->{THISCODE}->($arg1, $arg2);
.Ve
.PP
.Vb 2
\&     # careful of extra block braces on fh ref
\&     print { $rec->{HANDLE} } "a string\en";
.Ve
.PP
.Vb 3
\&     use FileHandle;
\&     $rec->{HANDLE}->autoflush(1);
\&     $rec->{HANDLE}->print(" a string\en");
.Ve
.Sh "Declaration of a \s-1HASH\s0 \s-1OF\s0 \s-1COMPLEX\s0 \s-1RECORDS\s0"
.IX Subsection "Declaration of a HASH OF COMPLEX RECORDS"
.Vb 10
\&     %TV = (
\&        flintstones => {
\&            series   => "flintstones",
\&            nights   => [ qw(monday thursday friday) ],
\&            members  => [
\&                { name => "fred",    role => "lead", age  => 36, },
\&                { name => "wilma",   role => "wife", age  => 31, },
\&                { name => "pebbles", role => "kid",  age  =>  4, },
\&            ],
\&        },
.Ve
.PP
.Vb 9
\&        jetsons     => {
\&            series   => "jetsons",
\&            nights   => [ qw(wednesday saturday) ],
\&            members  => [
\&                { name => "george",  role => "lead", age  => 41, },
\&                { name => "jane",    role => "wife", age  => 39, },
\&                { name => "elroy",   role => "kid",  age  =>  9, },
\&            ],
\&         },
.Ve
.PP
.Vb 10
\&        simpsons    => {
\&            series   => "simpsons",
\&            nights   => [ qw(monday) ],
\&            members  => [
\&                { name => "homer", role => "lead", age  => 34, },
\&                { name => "marge", role => "wife", age => 37, },
\&                { name => "bart",  role => "kid",  age  =>  11, },
\&            ],
\&         },
\&      );
.Ve
.Sh "Generation of a \s-1HASH\s0 \s-1OF\s0 \s-1COMPLEX\s0 \s-1RECORDS\s0"
.IX Subsection "Generation of a HASH OF COMPLEX RECORDS"
.Vb 5
\&     # reading from file
\&     # this is most easily done by having the file itself be
\&     # in the raw data format as shown above.  perl is happy
\&     # to parse complex data structures if declared as data, so
\&     # sometimes it's easiest to do that
.Ve
.PP
.Vb 4
\&     # here's a piece by piece build up
\&     $rec = {};
\&     $rec->{series} = "flintstones";
\&     $rec->{nights} = [ find_days() ];
.Ve
.PP
.Vb 7
\&     @members = ();
\&     # assume this file in field=value syntax
\&     while (<>) {
\&         %fields = split /[\es=]+/;
\&         push @members, { %fields };
\&     }
\&     $rec->{members} = [ @members ];
.Ve
.PP
.Vb 2
\&     # now remember the whole thing
\&     $TV{ $rec->{series} } = $rec;
.Ve
.PP
.Vb 19
\&     ###########################################################
\&     # now, you might want to make interesting extra fields that
\&     # include pointers back into the same data structure so if
\&     # change one piece, it changes everywhere, like for example
\&     # if you wanted a {kids} field that was a reference
\&     # to an array of the kids' records without having duplicate
\&     # records and thus update problems.
\&     ###########################################################
\&     foreach $family (keys %TV) {
\&         $rec = $TV{$family}; # temp pointer
\&         @kids = ();
\&         for $person ( @{ $rec->{members} } ) {
\&             if ($person->{role} =~ /kid|son|daughter/) {
\&                 push @kids, $person;
\&             }
\&         }
\&         # REMEMBER: $rec and $TV{$family} point to same data!!
\&         $rec->{kids} = [ @kids ];
\&     }
.Ve
.PP
.Vb 3
\&     # you copied the array, but the array itself contains pointers
\&     # to uncopied objects. this means that if you make bart get
\&     # older via
.Ve
.PP
.Vb 1
\&     $TV{simpsons}{kids}[0]{age}++;
.Ve
.PP
.Vb 2
\&     # then this would also change in
\&     print $TV{simpsons}{members}[2]{age};
.Ve
.PP
.Vb 2
\&     # because $TV{simpsons}{kids}[0] and $TV{simpsons}{members}[2]
\&     # both point to the same underlying anonymous hash table
.Ve
.PP
.Vb 13
\&     # print the whole thing
\&     foreach $family ( keys %TV ) {
\&         print "the $family";
\&         print " is on during @{ $TV{$family}{nights} }\en";
\&         print "its members are:\en";
\&         for $who ( @{ $TV{$family}{members} } ) {
\&             print " $who->{name} ($who->{role}), age $who->{age}\en";
\&         }
\&         print "it turns out that $TV{$family}{lead} has ";
\&         print scalar ( @{ $TV{$family}{kids} } ), " kids named ";
\&         print join (", ", map { $_->{name} } @{ $TV{$family}{kids} } );
\&         print "\en";
\&     }
.Ve
.SH "Database Ties"
.IX Header "Database Ties"
You cannot easily tie a multilevel data structure (such as a hash of
hashes) to a dbm file.  The first problem is that all but \s-1GDBM\s0 and
Berkeley \s-1DB\s0 have size limitations, but beyond that, you also have problems
with how references are to be represented on disk.  One experimental
module that does partially attempt to address this need is the \s-1MLDBM\s0
module.  Check your nearest \s-1CPAN\s0 site as described in perlmodlib for
source code to \s-1MLDBM\s0.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIperlref\fR\|(1), \fIperllol\fR\|(1), \fIperldata\fR\|(1), \fIperlobj\fR\|(1)
.SH "AUTHOR"
.IX Header "AUTHOR"
Tom Christiansen <\fItchrist@perl.com\fR>
.PP
Last update:
Wed Oct 23 04:57:50 \s-1MET\s0 \s-1DST\s0 1996
