.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLBS2000 1"
.TH PERLBS2000 1 "2006-01-07" "perl v5.8.8" "Perl Programmers Reference Guide"
.SH "NAME"
README.BS2000 \- building and installing Perl for BS2000.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
This document will help you Configure, build, test and install Perl
on \s-1BS2000\s0 in the \s-1POSIX\s0 subsystem.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a ported perl for the \s-1POSIX\s0 subsystem in \s-1BS2000\s0 \s-1VERSION\s0 \s-1OSD\s0
V3.1A or later.  It may work on other versions, but we started porting
and testing it with 3.1A and are currently using Version V4.0A.
.PP
You may need the following \s-1GNU\s0 programs in order to install perl:
.Sh "gzip on \s-1BS2000\s0"
.IX Subsection "gzip on BS2000"
We used version 1.2.4, which could be installed out of the box with
one failure during 'make check'.
.Sh "bison on \s-1BS2000\s0"
.IX Subsection "bison on BS2000"
The yacc coming with \s-1BS2000\s0 \s-1POSIX\s0 didn't work for us.  So we had to
use bison.  We had to make a few changes to perl in order to use the
pure (reentrant) parser of bison.  We used version 1.25, but we had to
add a few changes due to \s-1EBCDIC\s0.  See below for more details
concerning yacc.
.Sh "Unpacking Perl Distribution on \s-1BS2000\s0"
.IX Subsection "Unpacking Perl Distribution on BS2000"
To extract an \s-1ASCII\s0 tar archive on \s-1BS2000\s0 \s-1POSIX\s0 you need an \s-1ASCII\s0
filesystem (we used the mountpoint /usr/local/ascii for this).  Now
you extract the archive in the \s-1ASCII\s0 filesystem without
I/O\-conversion:
.PP
cd /usr/local/ascii
export IO_CONVERSION=NO
gunzip < /usr/local/src/perl.tar.gz | pax \-r
.PP
You may ignore the error message for the first element of the archive
(this doesn't look like a tar archive / skipping to next file...),
it's only the directory which will be created automatically anyway.
.PP
After extracting the archive you copy the whole directory tree to your
\&\s-1EBCDIC\s0 filesystem.  \fBThis time you use I/O\-conversion\fR:
.PP
cd /usr/local/src
IO_CONVERSION=YES
cp \-r /usr/local/ascii/perl5.005_02 ./
.Sh "Compiling Perl on \s-1BS2000\s0"
.IX Subsection "Compiling Perl on BS2000"
There is a \*(L"hints\*(R" file for \s-1BS2000\s0 called hints.posix\-bc (because
posix-bc is the \s-1OS\s0 name given by `uname`) that specifies the correct
values for most things.  The major problem is (of course) the \s-1EBCDIC\s0
character set.  We have german \s-1EBCDIC\s0 version.
.PP
Because of our problems with the native yacc we used \s-1GNU\s0 bison to
generate a pure (=reentrant) parser for perly.y.  So our yacc is
really the following script:
.PP
\&\-\-\-\-\-8<\-\-\-\-\-/usr/local/bin/yacc\-\-\-\-\-8<\-\-\-\-\-
#! /usr/bin/sh
.PP
# Bison as a reentrant yacc:
.PP
# save parameters:
params="\*(L"
while [[ $# \-gt 1 ]]; do
    params=\*(R"$params \f(CW$1\fR"
    shift
done
.PP
# add flag \f(CW%pure_parser:\fR
.PP
tmpfile=/tmp/bison.$$.y
echo \f(CW%pure_parser\fR > \f(CW$tmpfile\fR
cat \f(CW$1\fR >> \f(CW$tmpfile\fR
.PP
# call bison:
.PP
echo \*(L"/usr/local/bin/bison \-\-yacc \f(CW$params\fR \f(CW$1\fR\et\et\et(Pure Parser)\*(R"
/usr/local/bin/bison \-\-yacc \f(CW$params\fR \f(CW$tmpfile\fR
.PP
# cleanup:
.PP
rm \-f \f(CW$tmpfile\fR
\&\-\-\-\-\-8<\-\-\-\-\-\-\-\-\-\-8<\-\-\-\-\-
.PP
We still use the normal yacc for a2p.y though!!!  We made a softlink
called byacc to distinguish between the two versions:
.PP
ln \-s /usr/bin/yacc /usr/local/bin/byacc
.PP
We build perl using \s-1GNU\s0 make.  We tried the native make once and it
worked too.
.Sh "Testing Perl on \s-1BS2000\s0"
.IX Subsection "Testing Perl on BS2000"
We still got a few errors during \f(CW\*(C`make test\*(C'\fR.  Some of them are the
result of using bison.  Bison prints \fIparser error\fR instead of \fIsyntax
error\fR, so we may ignore them.  The following list shows
our errors, your results may differ:
.PP
op/numconvert.......FAILED tests 1409\-1440
op/regexp...........FAILED tests 483, 496
op/regexp_noamp.....FAILED tests 483, 496
pragma/overload.....FAILED tests 152\-153, 170\-171
pragma/warnings.....FAILED tests 14, 82, 129, 155, 192, 205, 207
lib/bigfloat........FAILED tests 351\-352, 355
lib/bigfltpm........FAILED tests 354\-355, 358
lib/complex.........FAILED tests 267, 487
lib/dumper..........FAILED tests 43, 45
Failed 11/231 test scripts, 95.24% okay. 57/10595 subtests failed, 99.46% okay.
.Sh "Installing Perl on \s-1BS2000\s0"
.IX Subsection "Installing Perl on BS2000"
We have no nroff on \s-1BS2000\s0 \s-1POSIX\s0 (yet), so we ignored any errors while
installing the documentation.
.Sh "Using Perl in the Posix-Shell of \s-1BS2000\s0"
.IX Subsection "Using Perl in the Posix-Shell of BS2000"
\&\s-1BS2000\s0 \s-1POSIX\s0 doesn't support the shebang notation
(\f(CW\*(C`#!/usr/local/bin/perl\*(C'\fR), so you have to use the following lines
instead:
.PP
: # use perl
    eval 'exec /usr/local/bin/perl \-S \f(CW$0\fR ${1+\*(L"$@\*(R"}'
        if \f(CW$running_under_some_shell\fR;
.ie n .Sh "Using Perl in ""native"" \s-1BS2000\s0"
.el .Sh "Using Perl in ``native'' \s-1BS2000\s0"
.IX Subsection "Using Perl in native BS2000"
We don't have much experience with this yet, but try the following:
.PP
Copy your Perl executable to a \s-1BS2000\s0 \s-1LLM\s0 using bs2cp:
.PP
\&\f(CW\*(C`bs2cp /usr/local/bin/perl 'bs2:perl(perl,l)'\*(C'\fR
.PP
Now you can start it with the following (\s-1SDF\s0) command:
.PP
\&\f(CW\*(C`/START\-PROG FROM\-FILE=*MODULE(PERL,PERL),PROG\-MODE=*ANY,RUN\-MODE=*ADV\*(C'\fR
.PP
First you get the \s-1BS2000\s0 commandline prompt ('*').  Here you may enter
your parameters, e.g. \f(CW\*(C`\-e 'print "Hello World!\e\en";'\*(C'\fR (note the
double backslash!) or \f(CW\*(C`\-w\*(C'\fR and the name of your Perl script.
Filenames starting with \f(CW\*(C`/\*(C'\fR are searched in the Posix filesystem,
others are searched in the \s-1BS2000\s0 filesystem.  You may even use
wildcards if you put a \f(CW\*(C`%\*(C'\fR in front of your filename (e.g. \f(CW\*(C`\-w
checkfiles.pl %*.c\*(C'\fR).  Read your C/\*(C+ manual for additional
possibilities of the commandline prompt (look for
\&\s-1PARAMETER\-PROMPTING\s0).
.Sh "Floating point anomalies on \s-1BS2000\s0"
.IX Subsection "Floating point anomalies on BS2000"
There appears to be a bug in the floating point implementation on \s-1BS2000\s0 \s-1POSIX\s0
systems such that calling \fIint()\fR on the product of a number and a small
magnitude number is not the same as calling \fIint()\fR on the quotient of
that number and a large magnitude number.  For example, in the following
Perl code:
.PP
.Vb 4
\&    my $x = 100000.0;
\&    my $y = int($x * 1e-5) * 1e5; # '0'
\&    my $z = int($x / 1e+5) * 1e5;  # '100000'
\&    print "\e$y is $y and \e$z is $z\en"; # $y is 0 and $z is 100000
.Ve
.PP
Although one would expect the quantities \f(CW$y\fR and \f(CW$z\fR to be the same and equal
to 100000 they will differ and instead will be 0 and 100000 respectively.
.Sh "Using PerlIO and different encodings on \s-1ASCII\s0 and \s-1EBCDIC\s0 partitions"
.IX Subsection "Using PerlIO and different encodings on ASCII and EBCDIC partitions"
Since version 5.8 Perl uses the new PerlIO on \s-1BS2000\s0.  This enables
you using different encodings per \s-1IO\s0 channel.  For example you may use
.PP
.Vb 9
\&    use Encode;
\&    open($f, ">:encoding(ascii)", "test.ascii");
\&    print $f "Hello World!\en";
\&    open($f, ">:encoding(posix-bc)", "test.ebcdic");
\&    print $f "Hello World!\en";
\&    open($f, ">:encoding(latin1)", "test.latin1");
\&    print $f "Hello World!\en";
\&    open($f, ">:encoding(utf8)", "test.utf8");
\&    print $f "Hello World!\en";
.Ve
.PP
to get two files containing \*(L"Hello World!\en\*(R" in \s-1ASCII\s0, \s-1EBCDIC\s0, \s-1ISO\s0
Latin\-1 (in this example identical to \s-1ASCII\s0) respective UTF-EBCDIC (in
this example identical to normal \s-1EBCDIC\s0).  See the documentation of
Encode::PerlIO for details.
.PP
As the PerlIO layer uses raw \s-1IO\s0 internally, all this totally ignores
the type of your filesystem (\s-1ASCII\s0 or \s-1EBCDIC\s0) and the \s-1IO_CONVERSION\s0
environment variable.  If you want to get the old behavior, that the
\&\s-1BS2000\s0 \s-1IO\s0 functions determine conversion depending on the filesystem
PerlIO still is your friend.  You use \s-1IO_CONVERSION\s0 as usual and tell
Perl, that it should use the native \s-1IO\s0 layer:
.PP
.Vb 2
\&    export IO_CONVERSION=YES
\&    export PERLIO=stdio
.Ve
.PP
Now your \s-1IO\s0 would be \s-1ASCII\s0 on \s-1ASCII\s0 partitions and \s-1EBCDIC\s0 on \s-1EBCDIC\s0
partitions.  See the documentation of PerlIO (without \f(CW\*(C`Encode::\*(C'\fR!)
for further posibilities.
.SH "AUTHORS"
.IX Header "AUTHORS"
Thomas Dorner
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\s-1INSTALL\s0, perlport.
.Sh "Mailing list"
.IX Subsection "Mailing list"
If you are interested in the \s-1VM/ESA\s0, z/OS (formerly known as \s-1OS/390\s0)
and POSIX-BC (\s-1BS2000\s0) ports of Perl then see the perl-mvs mailing list.
To subscribe, send an empty message to perl\-mvs\-subscribe@perl.org.
.PP
See also:
.PP
.Vb 1
\&    http://lists.perl.org/showlist.cgi?name=perl-mvs
.Ve
.PP
There are web archives of the mailing list at:
.PP
.Vb 2
\&    http://www.xray.mpe.mpg.de/mailing-lists/perl-mvs/
\&    http://archive.develooper.com/perl-mvs@perl.org/
.Ve
.SH "HISTORY"
.IX Header "HISTORY"
This document was originally written by Thomas Dorner for the 5.005
release of Perl.
.PP
This document was podified for the 5.6 release of perl 11 July 2000.
