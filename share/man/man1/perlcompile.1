.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PERLCOMPILE 1"
.TH PERLCOMPILE 1 "2006-01-07" "perl v5.8.8" "Perl Programmers Reference Guide"
.SH "NAME"
perlcompile \- Introduction to the Perl Compiler\-Translator 
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Perl has always had a compiler: your source is compiled into an
internal form (a parse tree) which is then optimized before being
run.  Since version 5.005, Perl has shipped with a module
capable of inspecting the optimized parse tree (\f(CW\*(C`B\*(C'\fR), and this has
been used to write many useful utilities, including a module that lets
you turn your Perl into C source code that can be compiled into a
native executable.
.PP
The \f(CW\*(C`B\*(C'\fR module provides access to the parse tree, and other modules
(\*(L"back ends\*(R") do things with the tree.  Some write it out as
bytecode, C source code, or a semi-human-readable text.  Another
traverses the parse tree to build a cross-reference of which
subroutines, formats, and variables are used where.  Another checks
your code for dubious constructs.  Yet another back end dumps the
parse tree back out as Perl source, acting as a source code beautifier
or deobfuscator.
.PP
Because its original purpose was to be a way to produce C code
corresponding to a Perl program, and in turn a native executable, the
\&\f(CW\*(C`B\*(C'\fR module and its associated back ends are known as \*(L"the
compiler\*(R", even though they don't really compile anything.
Different parts of the compiler are more accurately a \*(L"translator\*(R",
or an \*(L"inspector\*(R", but people want Perl to have a \*(L"compiler
option\*(R" not an \*(L"inspector gadget\*(R".  What can you do?
.PP
This document covers the use of the Perl compiler: which modules
it comprises, how to use the most important of the back end modules,
what problems there are, and how to work around them.
.Sh "Layout"
.IX Subsection "Layout"
The compiler back ends are in the \f(CW\*(C`B::\*(C'\fR hierarchy, and the front-end
(the module that you, the user of the compiler, will sometimes
interact with) is the O module.  Some back ends (e.g., \f(CW\*(C`B::C\*(C'\fR) have
programs (e.g., \fIperlcc\fR) to hide the modules' complexity.
.PP
Here are the important back ends to know about, with their status
expressed as a number from 0 (outline for later implementation) to
10 (if there's a bug in it, we're very surprised):
.IP "B::Bytecode" 4
.IX Item "B::Bytecode"
Stores the parse tree in a machine-independent format, suitable
for later reloading through the ByteLoader module.  Status: 5 (some
things work, some things don't, some things are untested).
.IP "B::C" 4
.IX Item "B::C"
Creates a C source file containing code to rebuild the parse tree
and resume the interpreter.  Status: 6 (many things work adequately,
including programs using Tk).
.IP "B::CC" 4
.IX Item "B::CC"
Creates a C source file corresponding to the run time code path in
the parse tree.  This is the closest to a Perl-to-C translator there
is, but the code it generates is almost incomprehensible because it
translates the parse tree into a giant switch structure that
manipulates Perl structures.  Eventual goal is to reduce (given
sufficient type information in the Perl program) some of the
Perl data structure manipulations into manipulations of C\-level
ints, floats, etc.  Status: 5 (some things work, including
uncomplicated Tk examples).
.IP "B::Lint" 4
.IX Item "B::Lint"
Complains if it finds dubious constructs in your source code.  Status:
6 (it works adequately, but only has a very limited number of areas
that it checks).
.IP "B::Deparse" 4
.IX Item "B::Deparse"
Recreates the Perl source, making an attempt to format it coherently.
Status: 8 (it works nicely, but a few obscure things are missing).
.IP "B::Xref" 4
.IX Item "B::Xref"
Reports on the declaration and use of subroutines and variables.
Status: 8 (it works nicely, but still has a few lingering bugs).
.SH "Using The Back Ends"
.IX Header "Using The Back Ends"
The following sections describe how to use the various compiler back
ends.  They're presented roughly in order of maturity, so that the
most stable and proven back ends are described first, and the most
experimental and incomplete back ends are described last.
.PP
The O module automatically enabled the \fB\-c\fR flag to Perl, which
prevents Perl from executing your code once it has been compiled.
This is why all the back ends print:
.PP
.Vb 1
\&  myperlprogram syntax OK
.Ve
.PP
before producing any other output.
.Sh "The Cross Referencing Back End"
.IX Subsection "The Cross Referencing Back End"
The cross referencing back end (B::Xref) produces a report on your program,
breaking down declarations and uses of subroutines and variables (and
formats) by file and subroutine.  For instance, here's part of the
report from the \fIpod2man\fR program that comes with Perl:
.PP
.Vb 12
\&  Subroutine clear_noremap
\&    Package (lexical)
\&      $ready_to_print   i1069, 1079
\&    Package main
\&      $&                1086
\&      $.                1086
\&      $0                1086
\&      $1                1087
\&      $2                1085, 1085
\&      $3                1085, 1085
\&      $ARGV             1086
\&      %HTML_Escapes     1085, 1085
.Ve
.PP
This shows the variables used in the subroutine \f(CW\*(C`clear_noremap\*(C'\fR.  The
variable \f(CW$ready_to_print\fR is a \fImy()\fR (lexical) variable,
\&\fBi\fRntroduced (first declared with \fImy()\fR) on line 1069, and used on
line 1079.  The variable \f(CW$&\fR from the main package is used on 1086,
and so on.
.PP
A line number may be prefixed by a single letter:
.IP "i" 4
.IX Item "i"
Lexical variable introduced (declared with \fImy()\fR) for the first time.
.IP "&" 4
Subroutine or method call.
.IP "s" 4
.IX Item "s"
Subroutine defined.
.IP "r" 4
.IX Item "r"
Format defined.
.PP
The most useful option the cross referencer has is to save the report
to a separate file.  For instance, to save the report on
\&\fImyperlprogram\fR to the file \fIreport\fR:
.PP
.Vb 1
\&  $ perl -MO=Xref,-oreport myperlprogram
.Ve
.Sh "The Decompiling Back End"
.IX Subsection "The Decompiling Back End"
The Deparse back end turns your Perl source back into Perl source.  It
can reformat along the way, making it useful as a de\-obfuscator.  The
most basic way to use it is:
.PP
.Vb 1
\&  $ perl -MO=Deparse myperlprogram
.Ve
.PP
You'll notice immediately that Perl has no idea of how to paragraph
your code.  You'll have to separate chunks of code from each other
with newlines by hand.  However, watch what it will do with
one\-liners:
.PP
.Vb 12
\&  $ perl -MO=Deparse -e '$op=shift||die "usage: $0
\&  code [...]";chomp(@ARGV=<>)unless@ARGV; for(@ARGV){$was=$_;eval$op;
\&  die$@ if$@; rename$was,$_ unless$was eq $_}'
\&  -e syntax OK
\&  $op = shift @ARGV || die("usage: $0 code [...]");
\&  chomp(@ARGV = <ARGV>) unless @ARGV;
\&  foreach $_ (@ARGV) {
\&      $was = $_;
\&      eval $op;
\&      die $@ if $@;
\&      rename $was, $_ unless $was eq $_;
\&  }
.Ve
.PP
The decompiler has several options for the code it generates.  For
instance, you can set the size of each indent from 4 (as above) to
2 with:
.PP
.Vb 1
\&  $ perl -MO=Deparse,-si2 myperlprogram
.Ve
.PP
The \fB\-p\fR option adds parentheses where normally they are omitted:
.PP
.Vb 6
\&  $ perl -MO=Deparse -e 'print "Hello, world\en"'
\&  -e syntax OK
\&  print "Hello, world\en";
\&  $ perl -MO=Deparse,-p -e 'print "Hello, world\en"'
\&  -e syntax OK
\&  print("Hello, world\en");
.Ve
.PP
See B::Deparse for more information on the formatting options.
.Sh "The Lint Back End"
.IX Subsection "The Lint Back End"
The lint back end (B::Lint) inspects programs for poor style.  One
programmer's bad style is another programmer's useful tool, so options
let you select what is complained about.
.PP
To run the style checker across your source code:
.PP
.Vb 1
\&  $ perl -MO=Lint myperlprogram
.Ve
.PP
To disable context checks and undefined subroutines:
.PP
.Vb 1
\&  $ perl -MO=Lint,-context,-undefined-subs myperlprogram
.Ve
.PP
See B::Lint for information on the options.
.Sh "The Simple C Back End"
.IX Subsection "The Simple C Back End"
This module saves the internal compiled state of your Perl program
to a C source file, which can be turned into a native executable
for that particular platform using a C compiler.  The resulting
program links against the Perl interpreter library, so it
will not save you disk space (unless you build Perl with a shared
library) or program size.  It may, however, save you startup time.
.PP
The \f(CW\*(C`perlcc\*(C'\fR tool generates such executables by default.
.PP
.Vb 1
\&  perlcc myperlprogram.pl
.Ve
.Sh "The Bytecode Back End"
.IX Subsection "The Bytecode Back End"
This back end is only useful if you also have a way to load and
execute the bytecode that it produces.  The ByteLoader module provides
this functionality.
.PP
To turn a Perl program into executable byte code, you can use \f(CW\*(C`perlcc\*(C'\fR
with the \f(CW\*(C`\-B\*(C'\fR switch:
.PP
.Vb 1
\&  perlcc -B myperlprogram.pl
.Ve
.PP
The byte code is machine independent, so once you have a compiled
module or program, it is as portable as Perl source (assuming that
the user of the module or program has a modern-enough Perl interpreter
to decode the byte code).
.PP
See \fBB::Bytecode\fR for information on options to control the
optimization and nature of the code generated by the Bytecode module.
.Sh "The Optimized C Back End"
.IX Subsection "The Optimized C Back End"
The optimized C back end will turn your Perl program's run time
code-path into an equivalent (but optimized) C program that manipulates
the Perl data structures directly.  The program will still link against
the Perl interpreter library, to allow for \fIeval()\fR, \f(CW\*(C`s///e\*(C'\fR,
\&\f(CW\*(C`require\*(C'\fR, etc.
.PP
The \f(CW\*(C`perlcc\*(C'\fR tool generates such executables when using the \-O
switch.  To compile a Perl program (ending in \f(CW\*(C`.pl\*(C'\fR
or \f(CW\*(C`.p\*(C'\fR):
.PP
.Vb 1
\&  perlcc -O myperlprogram.pl
.Ve
.PP
To produce a shared library from a Perl module (ending in \f(CW\*(C`.pm\*(C'\fR):
.PP
.Vb 1
\&  perlcc -O Myperlmodule.pm
.Ve
.PP
For more information, see perlcc and B::CC.
.SH "Module List for the Compiler Suite"
.IX Header "Module List for the Compiler Suite"
.IP "B" 4
.IX Item "B"
This module is the introspective (\*(L"reflective\*(R" in Java terms)
module, which allows a Perl program to inspect its innards.  The
back end modules all use this module to gain access to the compiled
parse tree.  You, the user of a back end module, will not need to
interact with B.
.IP "O" 4
.IX Item "O"
This module is the front-end to the compiler's back ends.  Normally
called something like this:
.Sp
.Vb 1
\&  $ perl -MO=Deparse myperlprogram
.Ve
.Sp
This is like saying \f(CW\*(C`use O 'Deparse'\*(C'\fR in your Perl program.
.IP "B::Asmdata" 4
.IX Item "B::Asmdata"
This module is used by the B::Assembler module, which is in turn used
by the B::Bytecode module, which stores a parse-tree as
bytecode for later loading.  It's not a back end itself, but rather a
component of a back end.
.IP "B::Assembler" 4
.IX Item "B::Assembler"
This module turns a parse-tree into data suitable for storing
and later decoding back into a parse\-tree.  It's not a back end
itself, but rather a component of a back end.  It's used by the
\&\fIassemble\fR program that produces bytecode.
.IP "B::Bblock" 4
.IX Item "B::Bblock"
This module is used by the B::CC back end.  It walks \*(L"basic blocks\*(R".
A basic block is a series of operations which is known to execute from
start to finish, with no possibility of branching or halting.
.IP "B::Bytecode" 4
.IX Item "B::Bytecode"
This module is a back end that generates bytecode from a
program's parse tree.  This bytecode is written to a file, from where
it can later be reconstructed back into a parse tree.  The goal is to
do the expensive program compilation once, save the interpreter's
state into a file, and then restore the state from the file when the
program is to be executed.  See \*(L"The Bytecode Back End\*(R"
for details about usage.
.IP "B::C" 4
.IX Item "B::C"
This module writes out C code corresponding to the parse tree and
other interpreter internal structures.  You compile the corresponding
C file, and get an executable file that will restore the internal
structures and the Perl interpreter will begin running the
program.  See \*(L"The Simple C Back End\*(R" for details about usage.
.IP "B::CC" 4
.IX Item "B::CC"
This module writes out C code corresponding to your program's
operations.  Unlike the B::C module, which merely stores the
interpreter and its state in a C program, the B::CC module makes a
C program that does not involve the interpreter.  As a consequence,
programs translated into C by B::CC can execute faster than normal
interpreted programs.  See \*(L"The Optimized C Back End\*(R" for
details about usage.
.IP "B::Concise" 4
.IX Item "B::Concise"
This module prints a concise (but complete) version of the Perl parse
tree.  Its output is more customizable than the one of B::Terse or
B::Debug (and it can emulate them). This module useful for people who
are writing their own back end, or who are learning about the Perl
internals.  It's not useful to the average programmer.
.IP "B::Debug" 4
.IX Item "B::Debug"
This module dumps the Perl parse tree in verbose detail to \s-1STDOUT\s0.
It's useful for people who are writing their own back end, or who
are learning about the Perl internals.  It's not useful to the
average programmer.
.IP "B::Deparse" 4
.IX Item "B::Deparse"
This module produces Perl source code from the compiled parse tree.
It is useful in debugging and deconstructing other people's code,
also as a pretty-printer for your own source.  See
\&\*(L"The Decompiling Back End\*(R" for details about usage.
.IP "B::Disassembler" 4
.IX Item "B::Disassembler"
This module turns bytecode back into a parse tree.  It's not a back
end itself, but rather a component of a back end.  It's used by the
\&\fIdisassemble\fR program that comes with the bytecode.
.IP "B::Lint" 4
.IX Item "B::Lint"
This module inspects the compiled form of your source code for things
which, while some people frown on them, aren't necessarily bad enough
to justify a warning.  For instance, use of an array in scalar context
without explicitly saying \f(CW\*(C`scalar(@array)\*(C'\fR is something that Lint
can identify.  See \*(L"The Lint Back End\*(R" for details about usage.
.IP "B::Showlex" 4
.IX Item "B::Showlex"
This module prints out the \fImy()\fR variables used in a function or a
file.  To get a list of the \fImy()\fR variables used in the subroutine
\&\fImysub()\fR defined in the file myperlprogram:
.Sp
.Vb 1
\&  $ perl -MO=Showlex,mysub myperlprogram
.Ve
.Sp
To get a list of the \fImy()\fR variables used in the file myperlprogram:
.Sp
.Vb 1
\&  $ perl -MO=Showlex myperlprogram
.Ve
.Sp
[\s-1BROKEN\s0]
.IP "B::Stackobj" 4
.IX Item "B::Stackobj"
This module is used by the B::CC module.  It's not a back end itself,
but rather a component of a back end.
.IP "B::Stash" 4
.IX Item "B::Stash"
This module is used by the perlcc program, which compiles a module
into an executable.  B::Stash prints the symbol tables in use by a
program, and is used to prevent B::CC from producing C code for the
B::* and O modules.  It's not a back end itself, but rather a
component of a back end.
.IP "B::Terse" 4
.IX Item "B::Terse"
This module prints the contents of the parse tree, but without as much
information as B::Debug.  For comparison, \f(CW\*(C`print "Hello, world."\*(C'\fR
produced 96 lines of output from B::Debug, but only 6 from B::Terse.
.Sp
This module is useful for people who are writing their own back end,
or who are learning about the Perl internals.  It's not useful to the
average programmer.
.IP "B::Xref" 4
.IX Item "B::Xref"
This module prints a report on where the variables, subroutines, and
formats are defined and used within a program and the modules it
loads.  See \*(L"The Cross Referencing Back End\*(R" for details about
usage.
.SH "KNOWN PROBLEMS"
.IX Header "KNOWN PROBLEMS"
The simple C backend currently only saves typeglobs with alphanumeric
names.
.PP
The optimized C backend outputs code for more modules than it should
(e.g., DirHandle).  It also has little hope of properly handling
\&\f(CW\*(C`goto LABEL\*(C'\fR outside the running subroutine (\f(CW\*(C`goto &sub\*(C'\fR is okay).
\&\f(CW\*(C`goto LABEL\*(C'\fR currently does not work at all in this backend.
It also creates a huge initialization function that gives
C compilers headaches.  Splitting the initialization function gives
better results.  Other problems include: unsigned math does not
work correctly; some opcodes are handled incorrectly by default
opcode handling mechanism.
.PP
BEGIN{} blocks are executed while compiling your code.  Any external
state that is initialized in BEGIN{}, such as opening files, initiating
database connections etc., do not behave properly.  To work around
this, Perl has an INIT{} block that corresponds to code being executed
before your program begins running but after your program has finished
being compiled.  Execution order: BEGIN{}, (possible save of state
through compiler back\-end), INIT{}, program runs, END{}.
.SH "AUTHOR"
.IX Header "AUTHOR"
This document was originally written by Nathan Torkington, and is now
maintained by the perl5\-porters mailing list
\&\fIperl5\-porters@perl.org\fR.
