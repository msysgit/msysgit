.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "PerlIO::via 3pm"
.TH PerlIO::via 3pm "2001-09-21" "perl v5.8.8" "Perl Programmers Reference Guide"
.SH "NAME"
PerlIO::via \- Helper class for PerlIO layers implemented in perl
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&   use PerlIO::via::Layer;
\&   open($fh,"<:via(Layer)",...);
.Ve
.PP
.Vb 2
\&   use Some::Other::Package;
\&   open($fh,">:via(Some::Other::Package)",...);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The PerlIO::via module allows you to develop PerlIO layers in Perl, without
having to go into the nitty gritty of programming C with \s-1XS\s0 as the interface
to Perl.
.PP
One example module, PerlIO::via::QuotedPrint, is included with Perl
5.8.0, and more example modules are available from \s-1CPAN\s0, such as
PerlIO::via::StripHTML and PerlIO::via::Base64.  The
PerlIO::via::StripHTML module for instance, allows you to say:
.PP
.Vb 3
\&        use PerlIO::via::StripHTML;
\&        open( my $fh, "<:via(StripHTML)", "index.html" );
\&        my @line = <$fh>;
.Ve
.PP
to obtain the text of an HTML-file in an array with all the HTML-tags
automagically removed.
.PP
Please note that if the layer is created in the PerlIO::via:: namespace, it
does \fBnot\fR have to be fully qualified.  The PerlIO::via module will prefix
the PerlIO::via:: namespace if the specified modulename does not exist as a
fully qualified module name.
.SH "EXPECTED METHODS"
.IX Header "EXPECTED METHODS"
To create a Perl module that implements a PerlIO layer in Perl (as opposed to
in C using \s-1XS\s0 as the interface to Perl), you need to supply some of the
following subroutines.  It is recommended to create these Perl modules in the
PerlIO::via:: namespace, so that they can easily be located on \s-1CPAN\s0 and use
the default namespace feature of the PerlIO::via module itself.
.PP
Please note that this is an area of recent development in Perl and that the
interface described here is therefore still subject to change (and hopefully
will have better documentation and more examples).
.PP
In the method descriptions below \fI$fh\fR will be
a reference to a glob which can be treated as a perl file handle.
It refers to the layer below. \fI$fh\fR is not passed if the layer
is at the bottom of the stack, for this reason and to maintain
some level of \*(L"compatibility\*(R" with \s-1TIEHANDLE\s0 classes it is passed last.
.IP "$class\->\s-1PUSHED\s0([$mode[,$fh]])" 4
.IX Item "$class->PUSHED([$mode[,$fh]])"
Should return an object or the class, or \-1 on failure.  (Compare
\&\s-1TIEHANDLE\s0.)  The arguments are an optional mode string (\*(L"r\*(R", \*(L"w\*(R",
\&\*(L"w+\*(R", ...) and a filehandle for the PerlIO layer below.  Mandatory.
.Sp
When layer is pushed as part of an \f(CW\*(C`open\*(C'\fR call, \f(CW\*(C`PUSHED\*(C'\fR will be called
\&\fIbefore\fR the actual open occurs whether than be via \f(CW\*(C`OPEN\*(C'\fR, \f(CW\*(C`SYSOPEN\*(C'\fR,
\&\f(CW\*(C`FDOPEN\*(C'\fR or by letting lower layer do the open.
.IP "$obj\->\s-1POPPED\s0([$fh])" 4
.IX Item "$obj->POPPED([$fh])"
Optional \- layer is about to be removed.
.IP "$obj\->\s-1UTF8\s0($bellowFlag,[$fh])" 4
.IX Item "$obj->UTF8($bellowFlag,[$fh])"
Optional \- if present it will be called immediately after \s-1PUSHED\s0 has
returned. It should return true value if the layer expects data to be
\&\s-1UTF\-8\s0 encoded. If it returns true result is as if caller had done
.Sp
.Vb 1
\&   ":via(YourClass):utf8"
.Ve
.Sp
If not present of it it returns false, then stream is left with
flag clear.
The \fI$bellowFlag\fR argument will be true if there is a layer below
and that layer was expecting \s-1UTF\-8\s0.
.IP "$obj\->\s-1OPEN\s0($path,$mode[,$fh])" 4
.IX Item "$obj->OPEN($path,$mode[,$fh])"
Optional \- if not present lower layer does open.
If present called for normal opens after layer is pushed.
This function is subject to change as there is no easy way
to get lower layer to do open and then regain control.
.IP "$obj\->\s-1BINMODE\s0([,$fh])" 4
.IX Item "$obj->BINMODE([,$fh])"
Optional \- if not available layer is popped on binmode($fh) or when \f(CW\*(C`:raw\*(C'\fR
is pushed. If present it should return 0 on success \-1 on error and undef
to pop the layer.
.IP "$obj\->\s-1FDOPEN\s0($fd[,$fh])" 4
.IX Item "$obj->FDOPEN($fd[,$fh])"
Optional \- if not present lower layer does open.
If present called for opens which pass a numeric file
descriptor after layer is pushed.
This function is subject to change as there is no easy way
to get lower layer to do open and then regain control.
.IP "$obj\->\s-1SYSOPEN\s0($path,$imode,$perm,[,$fh])" 4
.IX Item "$obj->SYSOPEN($path,$imode,$perm,[,$fh])"
Optional \- if not present lower layer does open.
If present called for sysopen style opens which pass a numeric mode
and permissions after layer is pushed.
This function is subject to change as there is no easy way
to get lower layer to do open and then regain control.
.IP "$obj\->\s-1FILENO\s0($fh)" 4
.IX Item "$obj->FILENO($fh)"
Returns a numeric value for Unix-like file descriptor. Return \-1 if
there isn't one.  Optional.  Default is fileno($fh).
.IP "$obj\->\s-1READ\s0($buffer,$len,$fh)" 4
.IX Item "$obj->READ($buffer,$len,$fh)"
Returns the number of octets placed in \f(CW$buffer\fR (must be less than or
equal to \f(CW$len\fR).  Optional.  Default is to use \s-1FILL\s0 instead.
.IP "$obj\->\s-1WRITE\s0($buffer,$fh)" 4
.IX Item "$obj->WRITE($buffer,$fh)"
Returns the number of octets from buffer that have been successfully written.
.IP "$obj\->\s-1FILL\s0($fh)" 4
.IX Item "$obj->FILL($fh)"
Should return a string to be placed in the buffer.  Optional. If not
provided must provide \s-1READ\s0 or reject handles open for reading in
\&\s-1PUSHED\s0.
.IP "$obj\->\s-1CLOSE\s0($fh)" 4
.IX Item "$obj->CLOSE($fh)"
Should return 0 on success, \-1 on error.
Optional.
.IP "$obj\->\s-1SEEK\s0($posn,$whence,$fh)" 4
.IX Item "$obj->SEEK($posn,$whence,$fh)"
Should return 0 on success, \-1 on error.
Optional.  Default is to fail, but that is likely to be changed
in future.
.IP "$obj\->\s-1TELL\s0($fh)" 4
.IX Item "$obj->TELL($fh)"
Returns file postion.
Optional.  Default to be determined.
.IP "$obj\->\s-1UNREAD\s0($buffer,$fh)" 4
.IX Item "$obj->UNREAD($buffer,$fh)"
Returns the number of octets from buffer that have been successfully
saved to be returned on future \s-1FILL/READ\s0 calls.  Optional.  Default is
to push data into a temporary layer above this one.
.IP "$obj\->\s-1FLUSH\s0($fh)" 4
.IX Item "$obj->FLUSH($fh)"
Flush any buffered write data.  May possibly be called on readable
handles too.  Should return 0 on success, \-1 on error.
.IP "$obj\->\s-1SETLINEBUF\s0($fh)" 4
.IX Item "$obj->SETLINEBUF($fh)"
Optional. No return.
.IP "$obj\->\s-1CLEARERR\s0($fh)" 4
.IX Item "$obj->CLEARERR($fh)"
Optional. No return.
.IP "$obj\->\s-1ERROR\s0($fh)" 4
.IX Item "$obj->ERROR($fh)"
Optional. Returns error state. Default is no error until a mechanism
to signal error (die?) is worked out.
.IP "$obj\->\s-1EOF\s0($fh)" 4
.IX Item "$obj->EOF($fh)"
Optional. Returns end-of-file state. Default is function of return
value of \s-1FILL\s0 or \s-1READ\s0.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
Check the PerlIO::via:: namespace on \s-1CPAN\s0 for examples of PerlIO layers
implemented in Perl.  To give you an idea how simple the implementation of
a PerlIO layer can look, as simple example is included here.
.Sh "Example \- a Hexadecimal Handle"
.IX Subsection "Example - a Hexadecimal Handle"
Given the following module, PerlIO::via::Hex :
.PP
.Vb 1
\&    package PerlIO::via::Hex;
.Ve
.PP
.Vb 7
\&    sub PUSHED
\&    {
\&     my ($class,$mode,$fh) = @_;
\&     # When writing we buffer the data
\&     my $buf = '';
\&     return bless \e$buf,$class;
\&    }
.Ve
.PP
.Vb 6
\&    sub FILL
\&    {
\&     my ($obj,$fh) = @_;
\&     my $line = <$fh>;
\&     return (defined $line) ? pack("H*", $line) : undef;
\&    }
.Ve
.PP
.Vb 6
\&    sub WRITE
\&    {
\&     my ($obj,$buf,$fh) = @_;
\&     $$obj .= unpack("H*", $buf);
\&     return length($buf);
\&    }
.Ve
.PP
.Vb 7
\&    sub FLUSH
\&    {
\&     my ($obj,$fh) = @_;
\&     print $fh $$obj or return -1;
\&     $$obj = '';
\&     return 0;
\&    }
.Ve
.PP
.Vb 1
\&    1;
.Ve
.PP
the following code opens up an output handle that will convert any
output to hexadecimal dump of the output bytes: for example \*(L"A\*(R" will
be converted to \*(L"41\*(R" (on ASCII-based machines, on \s-1EBCDIC\s0 platforms
the \*(L"A\*(R" will become \*(L"c1\*(R")
.PP
.Vb 2
\&    use PerlIO::via::Hex;
\&    open(my $fh, ">:via(Hex)", "foo.hex");
.Ve
.PP
and the following code will read the hexdump in and convert it
on the fly back into bytes:
.PP
.Vb 1
\&    open(my $fh, "<:via(Hex)", "foo.hex");
.Ve
