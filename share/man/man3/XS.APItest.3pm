.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "XS::APItest 3pm"
.TH XS::APItest 3pm "2001-09-21" "perl v5.8.8" "Perl Programmers Reference Guide"
.SH "NAME"
XS::APItest \- Test the perl C API
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use XS::APItest;
\&  print_double(4);
.Ve
.SH "ABSTRACT"
.IX Header "ABSTRACT"
This module tests the perl C \s-1API\s0. Currently tests that \f(CW\*(C`printf\*(C'\fR
works correctly.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module can be used to check that the perl C \s-1API\s0 is behaving
correctly. This module provides test functions and an associated
test script that verifies the output.
.PP
This module is not meant to be installed.
.Sh "\s-1EXPORT\s0"
.IX Subsection "EXPORT"
Exports all the test functions:
.IP "\fBprint_double\fR" 4
.IX Item "print_double"
Test that a double-precision floating point number is formatted
correctly by \f(CW\*(C`printf\*(C'\fR.
.Sp
.Vb 1
\&  print_double( $val );
.Ve
.Sp
Output is sent to \s-1STDOUT\s0.
.IP "\fBprint_long_double\fR" 4
.IX Item "print_long_double"
Test that a \f(CW\*(C`long double\*(C'\fR is formatted correctly by
\&\f(CW\*(C`printf\*(C'\fR. Takes no arguments \- the test value is hard-wired
into the function (as \*(L"7\*(R").
.Sp
.Vb 1
\&  print_long_double();
.Ve
.Sp
Output is sent to \s-1STDOUT\s0.
.IP "\fBhave_long_double\fR" 4
.IX Item "have_long_double"
Determine whether a \f(CW\*(C`long double\*(C'\fR is supported by Perl.  This should
be used to determine whether to test \f(CW\*(C`print_long_double\*(C'\fR.
.Sp
.Vb 1
\&  print_long_double() if have_long_double;
.Ve
.IP "\fBprint_nv\fR" 4
.IX Item "print_nv"
Test that an \f(CW\*(C`NV\*(C'\fR is formatted correctly by
\&\f(CW\*(C`printf\*(C'\fR.
.Sp
.Vb 1
\&  print_nv( $val );
.Ve
.Sp
Output is sent to \s-1STDOUT\s0.
.IP "\fBprint_iv\fR" 4
.IX Item "print_iv"
Test that an \f(CW\*(C`IV\*(C'\fR is formatted correctly by
\&\f(CW\*(C`printf\*(C'\fR.
.Sp
.Vb 1
\&  print_iv( $val );
.Ve
.Sp
Output is sent to \s-1STDOUT\s0.
.IP "\fBprint_uv\fR" 4
.IX Item "print_uv"
Test that an \f(CW\*(C`UV\*(C'\fR is formatted correctly by
\&\f(CW\*(C`printf\*(C'\fR.
.Sp
.Vb 1
\&  print_uv( $val );
.Ve
.Sp
Output is sent to \s-1STDOUT\s0.
.IP "\fBprint_int\fR" 4
.IX Item "print_int"
Test that an \f(CW\*(C`int\*(C'\fR is formatted correctly by
\&\f(CW\*(C`printf\*(C'\fR.
.Sp
.Vb 1
\&  print_int( $val );
.Ve
.Sp
Output is sent to \s-1STDOUT\s0.
.IP "\fBprint_long\fR" 4
.IX Item "print_long"
Test that an \f(CW\*(C`long\*(C'\fR is formatted correctly by
\&\f(CW\*(C`printf\*(C'\fR.
.Sp
.Vb 1
\&  print_long( $val );
.Ve
.Sp
Output is sent to \s-1STDOUT\s0.
.IP "\fBprint_float\fR" 4
.IX Item "print_float"
Test that a single-precision floating point number is formatted
correctly by \f(CW\*(C`printf\*(C'\fR.
.Sp
.Vb 1
\&  print_float( $val );
.Ve
.Sp
Output is sent to \s-1STDOUT\s0.
.IP "\fBcall_sv\fR, \fBcall_pv\fR, \fBcall_method\fR" 4
.IX Item "call_sv, call_pv, call_method"
These exercise the C calls of the same names. Everything after the flags
arg is passed as the the args to the called function. They return whatever
the C function itself pushed onto the stack, plus the return value from
the function; for example
.Sp
.Vb 2
\&    call_sv( sub { @_, 'c' }, G_ARRAY,  'a', 'b'); # returns 'a', 'b', 'c', 3
\&    call_sv( sub { @_ },      G_SCALAR, 'a', 'b'); # returns 'b', 1
.Ve
.IP "\fBeval_sv\fR" 4
.IX Item "eval_sv"
Evaluates the passed \s-1SV\s0. Result handling is done the same as for
\&\f(CW\*(C`call_sv()\*(C'\fR etc.
.IP "\fBeval_pv\fR" 4
.IX Item "eval_pv"
Exercises the C function of the same name in scalar context. Returns the
same \s-1SV\s0 that the C function returns.
.IP "\fBrequire_pv\fR" 4
.IX Item "require_pv"
Exercises the C function of the same name. Returns nothing.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
XS::Typemap, perlapi.
.SH "AUTHORS"
.IX Header "AUTHORS"
Tim Jenness, <t.jenness@jach.hawaii.edu>,
Christian Soeller, <csoelle@mph.auckland.ac.nz>,
Hugo van der Sanden <hv@crypt.compulink.co.uk>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2002,2004 Tim Jenness, Christian Soeller, Hugo van der Sanden.
All Rights Reserved.
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself. 
