.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "bigrat 3pm"
.TH bigrat 3pm "2001-09-21" "perl v5.8.8" "Perl Programmers Reference Guide"
.SH "NAME"
bigrat \- Transparent BigNumber/BigRational support for Perl
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use bigrat;
.Ve
.PP
.Vb 2
\&  $x = 2 + 4.5,"\en";                    # BigFloat 6.5
\&  print 1/3 + 1/4,"\en";                 # produces 7/12
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
All operators (inlcuding basic math operations) are overloaded. Integer and
floating-point constants are created as proper BigInts or BigFloats,
respectively.
.PP
Other than bignum, this module upgrades to Math::BigRat, meaning that
instead of 2.5 you will get 2+1/2 as output.
.Sh "Modules Used"
.IX Subsection "Modules Used"
\&\f(CW\*(C`bigrat\*(C'\fR is just a thin wrapper around various modules of the Math::BigInt
family. Think of it as the head of the family, who runs the shop, and orders
the others to do the work.
.PP
The following modules are currently used by bignum:
.PP
.Vb 4
\&        Math::BigInt::Lite      (for speed, and only if it is loadable)
\&        Math::BigInt
\&        Math::BigFloat
\&        Math::BigRat
.Ve
.Sh "Math Library"
.IX Subsection "Math Library"
Math with the numbers is done (by default) by a module called
Math::BigInt::Calc. This is equivalent to saying:
.PP
.Vb 1
\&        use bigrat lib => 'Calc';
.Ve
.PP
You can change this by using:
.PP
.Vb 1
\&        use bigrat lib => 'BitVect';
.Ve
.PP
The following would first try to find Math::BigInt::Foo, then
Math::BigInt::Bar, and when this also fails, revert to Math::BigInt::Calc:
.PP
.Vb 1
\&        use bigrat lib => 'Foo,Math::BigInt::Bar';
.Ve
.PP
Please see respective module documentation for further details.
.Sh "Sign"
.IX Subsection "Sign"
The sign is either '+', '\-', 'NaN', '+inf' or '\-inf'.
.PP
A sign of 'NaN' is used to represent the result when input arguments are not
numbers or as a result of 0/0. '+inf' and '\-inf' represent plus respectively
minus infinity. You will get '+inf' when dividing a positive number by 0, and
\&'\-inf' when dividing any negative number by 0.
.Sh "Methods"
.IX Subsection "Methods"
Since all numbers are not objects, you can use all functions that are part of
the BigInt or BigFloat \s-1API\s0. It is wise to use only the \fIbxxx()\fR notation, and not
the \fIfxxx()\fR notation, though. This makes you independed on the fact that the
underlying object might morph into a different class than BigFloat.
.Sh "Cavaet"
.IX Subsection "Cavaet"
But a warning is in order. When using the following to make a copy of a number,
only a shallow copy will be made.
.PP
.Vb 2
\&        $x = 9; $y = $x;
\&        $x = $y = 7;
.Ve
.PP
If you want to make a real copy, use the following:
.PP
.Vb 1
\&        $y = $x->copy();
.Ve
.PP
Using the copy or the original with overloaded math is okay, e.g. the
following work:
.PP
.Vb 2
\&        $x = 9; $y = $x;
\&        print $x + 1, " ", $y,"\en";     # prints 10 9
.Ve
.PP
but calling any method that modifies the number directly will result in
\&\fBboth\fR the original and the copy beeing destroyed:
.PP
.Vb 2
\&        $x = 9; $y = $x;
\&        print $x->badd(1), " ", $y,"\en";        # prints 10 10
.Ve
.PP
.Vb 2
\&        $x = 9; $y = $x;
\&        print $x->binc(1), " ", $y,"\en";        # prints 10 10
.Ve
.PP
.Vb 2
\&        $x = 9; $y = $x;
\&        print $x->bmul(2), " ", $y,"\en";        # prints 18 18
.Ve
.PP
Using methods that do not modify, but testthe contents works:
.PP
.Vb 2
\&        $x = 9; $y = $x;
\&        $z = 9 if $x->is_zero();                # works fine
.Ve
.PP
See the documentation about the copy constructor and \f(CW\*(C`=\*(C'\fR in overload, as
well as the documentation in BigInt for further details.
.Sh "Options"
.IX Subsection "Options"
bignum recognizes some options that can be passed while loading it via use.
The options can (currently) be either a single letter form, or the long form.
The following options exist:
.IP "a or accuracy" 2
.IX Item "a or accuracy"
This sets the accuracy for all math operations. The argument must be greater
than or equal to zero. See Math::BigInt's \fIbround()\fR function for details.
.Sp
.Vb 1
\&        perl -Mbigrat=a,50 -le 'print sqrt(20)'
.Ve
.IP "p or precision" 2
.IX Item "p or precision"
This sets the precision for all math operations. The argument can be any
integer. Negative values mean a fixed number of digits after the dot, while
a positive value rounds to this digit left from the dot. 0 or 1 mean round to
integer. See Math::BigInt's \fIbfround()\fR function for details.
.Sp
.Vb 1
\&        perl -Mbigrat=p,-50 -le 'print sqrt(20)'
.Ve
.IP "t or trace" 2
.IX Item "t or trace"
This enables a trace mode and is primarily for debugging bignum or
Math::BigInt/Math::BigFloat.
.IP "l or lib" 2
.IX Item "l or lib"
Load a different math lib, see \*(L"\s-1MATH\s0 \s-1LIBRARY\s0\*(R".
.Sp
.Vb 1
\&        perl -Mbigrat=l,GMP -e 'print 2 ** 512'
.Ve
.Sp
Currently there is no way to specify more than one library on the command
line. This will be hopefully fixed soon ;)
.IP "v or version" 2
.IX Item "v or version"
This prints out the name and version of all modules used and then exits.
.Sp
.Vb 1
\&        perl -Mbigrat=v
.Ve
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.Vb 5
\&        perl -Mbigrat -le 'print sqrt(33)'
\&        perl -Mbigrat -le 'print 2*255'
\&        perl -Mbigrat -le 'print 4.5+2*255'
\&        perl -Mbigrat -le 'print 3/7 + 5/7 + 8/3'       
\&        perl -Mbigrat -le 'print 12->is_odd()';
.Ve
.SH "LICENSE"
.IX Header "LICENSE"
This program is free software; you may redistribute it and/or modify it under
the same terms as Perl itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Especially bignum.
.Sp
Math::BigFloat, Math::BigInt, Math::BigRat and Math::Big as well
as Math::BigInt::BitVect, Math::BigInt::Pari and  Math::BigInt::GMP.
.SH "AUTHORS"
.IX Header "AUTHORS"
(C) by Tels <http://bloodgate.com/> in early 2002 \- 2005.
