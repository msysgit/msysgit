.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "CPAN 3pm"
.TH CPAN 3pm "2001-09-21" "perl v5.8.8" "Perl Programmers Reference Guide"
.SH "NAME"
CPAN \- query, download and build perl modules from CPAN sites
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Interactive mode:
.PP
.Vb 1
\&  perl -MCPAN -e shell;
.Ve
.PP
Batch mode:
.PP
.Vb 1
\&  use CPAN;
.Ve
.PP
.Vb 1
\&  autobundle, clean, install, make, recompile, test
.Ve
.SH "STATUS"
.IX Header "STATUS"
This module will eventually be replaced by \s-1CPANPLUS\s0. \s-1CPANPLUS\s0 is kind
of a modern rewrite from ground up with greater extensibility and more
features but no full compatibility. If you're new to \s-1CPAN\s0.pm, you
probably should investigate if \s-1CPANPLUS\s0 is the better choice for you.
If you're already used to \s-1CPAN\s0.pm you're welcome to continue using it,
if you accept that its development is mostly (though not completely)
stalled.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \s-1CPAN\s0 module is designed to automate the make and install of perl
modules and extensions. It includes some primitive searching capabilities and
knows how to use Net::FTP or \s-1LWP\s0 (or lynx or an external ftp client)
to fetch the raw data from the net.
.PP
Modules are fetched from one or more of the mirrored \s-1CPAN\s0
(Comprehensive Perl Archive Network) sites and unpacked in a dedicated
directory.
.PP
The \s-1CPAN\s0 module also supports the concept of named and versioned
\&\fIbundles\fR of modules. Bundles simplify the handling of sets of
related modules. See Bundles below.
.PP
The package contains a session manager and a cache manager. There is
no status retained between sessions. The session manager keeps track
of what has been fetched, built and installed in the current
session. The cache manager keeps track of the disk space occupied by
the make processes and deletes excess space according to a simple \s-1FIFO\s0
mechanism.
.PP
For extended searching capabilities there's a plugin for \s-1CPAN\s0 available,
\&\f(CW\*(C`CPAN::WAIT\*(C'\fR. \f(CW\*(C`CPAN::WAIT\*(C'\fR is a full-text search engine
that indexes all documents available in \s-1CPAN\s0 authors directories. If
\&\f(CW\*(C`CPAN::WAIT\*(C'\fR is installed on your system, the interactive shell of
\&\s-1CPAN\s0.pm will enable the \f(CW\*(C`wq\*(C'\fR, \f(CW\*(C`wr\*(C'\fR, \f(CW\*(C`wd\*(C'\fR, \f(CW\*(C`wl\*(C'\fR, and \f(CW\*(C`wh\*(C'\fR commands
which send queries to the \s-1WAIT\s0 server that has been configured for your
installation.
.PP
All other methods provided are accessible in a programmer style and in an
interactive shell style.
.Sh "Interactive Mode"
.IX Subsection "Interactive Mode"
The interactive mode is entered by running
.PP
.Vb 1
\&    perl -MCPAN -e shell
.Ve
.PP
which puts you into a readline interface. You will have the most fun if
you install Term::ReadKey and Term::ReadLine to enjoy both history and
command completion.
.PP
Once you are on the command line, type 'h' and the rest should be
self\-explanatory.
.PP
The function call \f(CW\*(C`shell\*(C'\fR takes two optional arguments, one is the
prompt, the second is the default initial command line (the latter
only works if a real ReadLine interface module is installed).
.PP
The most common uses of the interactive modes are
.IP "Searching for authors, bundles, distribution files and modules" 2
.IX Item "Searching for authors, bundles, distribution files and modules"
There are corresponding one-letter commands \f(CW\*(C`a\*(C'\fR, \f(CW\*(C`b\*(C'\fR, \f(CW\*(C`d\*(C'\fR, and \f(CW\*(C`m\*(C'\fR
for each of the four categories and another, \f(CW\*(C`i\*(C'\fR for any of the
mentioned four. Each of the four entities is implemented as a class
with slightly differing methods for displaying an object.
.Sp
Arguments you pass to these commands are either strings exactly matching
the identification string of an object or regular expressions that are
then matched case-insensitively against various attributes of the
objects. The parser recognizes a regular expression only if you
enclose it between two slashes.
.Sp
The principle is that the number of found objects influences how an
item is displayed. If the search finds one item, the result is
displayed with the rather verbose method \f(CW\*(C`as_string\*(C'\fR, but if we find
more than one, we display each object with the terse method
<as_glimpse>.
.IP "make, test, install, clean  modules or distributions" 2
.IX Item "make, test, install, clean  modules or distributions"
These commands take any number of arguments and investigate what is
necessary to perform the action. If the argument is a distribution
file name (recognized by embedded slashes), it is processed. If it is
a module, \s-1CPAN\s0 determines the distribution file in which this module
is included and processes that, following any dependencies named in
the module's Makefile.PL (this behavior is controlled by
\&\fIprerequisites_policy\fR.)
.Sp
Any \f(CW\*(C`make\*(C'\fR or \f(CW\*(C`test\*(C'\fR are run unconditionally. An
.Sp
.Vb 1
\&  install <distribution_file>
.Ve
.Sp
also is run unconditionally. But for
.Sp
.Vb 1
\&  install <module>
.Ve
.Sp
\&\s-1CPAN\s0 checks if an install is actually needed for it and prints
\&\fImodule up to date\fR in the case that the distribution file containing
the module doesn't need to be updated.
.Sp
\&\s-1CPAN\s0 also keeps track of what it has done within the current session
and doesn't try to build a package a second time regardless if it
succeeded or not. The \f(CW\*(C`force\*(C'\fR command takes as a first argument the
method to invoke (currently: \f(CW\*(C`make\*(C'\fR, \f(CW\*(C`test\*(C'\fR, or \f(CW\*(C`install\*(C'\fR) and executes the
command from scratch.
.Sp
Example:
.Sp
.Vb 7
\&    cpan> install OpenGL
\&    OpenGL is up to date.
\&    cpan> force install OpenGL
\&    Running make
\&    OpenGL-0.4/
\&    OpenGL-0.4/COPYRIGHT
\&    [...]
.Ve
.Sp
A \f(CW\*(C`clean\*(C'\fR command results in a
.Sp
.Vb 1
\&  make clean
.Ve
.Sp
being executed within the distribution file's working directory.
.IP "get, readme, look module or distribution" 2
.IX Item "get, readme, look module or distribution"
\&\f(CW\*(C`get\*(C'\fR downloads a distribution file without further action. \f(CW\*(C`readme\*(C'\fR
displays the \s-1README\s0 file of the associated distribution. \f(CW\*(C`Look\*(C'\fR gets
and untars (if not yet done) the distribution file, changes to the
appropriate directory and opens a subshell process in that directory.
.IP "ls author" 2
.IX Item "ls author"
\&\f(CW\*(C`ls\*(C'\fR lists all distribution files in and below an author's \s-1CPAN\s0
directory. Only those files that contain modules are listed and if
there is more than one for any given module, only the most recent one
is listed.
.IP "Signals" 2
.IX Item "Signals"
\&\s-1CPAN\s0.pm installs signal handlers for \s-1SIGINT\s0 and \s-1SIGTERM\s0. While you are
in the cpan-shell it is intended that you can press \f(CW\*(C`^C\*(C'\fR anytime and
return to the cpan-shell prompt. A \s-1SIGTERM\s0 will cause the cpan-shell
to clean up and leave the shell loop. You can emulate the effect of a
\&\s-1SIGTERM\s0 by sending two consecutive SIGINTs, which usually means by
pressing \f(CW\*(C`^C\*(C'\fR twice.
.Sp
\&\s-1CPAN\s0.pm ignores a \s-1SIGPIPE\s0. If the user sets inactivity_timeout, a
\&\s-1SIGALRM\s0 is used during the run of the \f(CW\*(C`perl Makefile.PL\*(C'\fR subprocess.
.Sh "CPAN::Shell"
.IX Subsection "CPAN::Shell"
The commands that are available in the shell interface are methods in
the package CPAN::Shell. If you enter the shell command, all your
input is split by the \fIText::ParseWords::shellwords()\fR routine which
acts like most shells do. The first word is being interpreted as the
method to be called and the rest of the words are treated as arguments
to this method. Continuation lines are supported if a line ends with a
literal backslash.
.Sh "autobundle"
.IX Subsection "autobundle"
\&\f(CW\*(C`autobundle\*(C'\fR writes a bundle file into the
\&\f(CW\*(C`$CPAN::Config\->{cpan_home}/Bundle\*(C'\fR directory. The file contains
a list of all modules that are both available from \s-1CPAN\s0 and currently
installed within \f(CW@INC\fR. The name of the bundle file is based on the
current date and a counter.
.Sh "recompile"
.IX Subsection "recompile"
\&\fIrecompile()\fR is a very special command in that it takes no argument and
runs the make/test/install cycle with brute force over all installed
dynamically loadable extensions (aka \s-1XS\s0 modules) with 'force' in
effect. The primary purpose of this command is to finish a network
installation. Imagine, you have a common source tree for two different
architectures. You decide to do a completely independent fresh
installation. You start on one architecture with the help of a Bundle
file produced earlier. \s-1CPAN\s0 installs the whole Bundle for you, but
when you try to repeat the job on the second architecture, \s-1CPAN\s0
responds with a \f(CW"Foo up to date"\fR message for all modules. So you
invoke \s-1CPAN\s0's recompile on the second architecture and you're done.
.PP
Another popular use for \f(CW\*(C`recompile\*(C'\fR is to act as a rescue in case your
perl breaks binary compatibility. If one of the modules that \s-1CPAN\s0 uses
is in turn depending on binary compatibility (so you cannot run \s-1CPAN\s0
commands), then you should try the CPAN::Nox module for recovery.
.ie n .Sh "The four ""CPAN::*"" Classes: Author, Bundle, Module, Distribution"
.el .Sh "The four \f(CWCPAN::*\fP Classes: Author, Bundle, Module, Distribution"
.IX Subsection "The four CPAN::* Classes: Author, Bundle, Module, Distribution"
Although it may be considered internal, the class hierarchy does matter
for both users and programmer. \s-1CPAN\s0.pm deals with above mentioned four
classes, and all those classes share a set of methods. A classical
single polymorphism is in effect. A metaclass object registers all
objects of all kinds and indexes them with a string. The strings
referencing objects have a separated namespace (well, not completely
separated):
.PP
.Vb 1
\&         Namespace                         Class
.Ve
.PP
.Vb 3
\&   words containing a "/" (slash)      Distribution
\&    words starting with Bundle::          Bundle
\&          everything else            Module or Author
.Ve
.PP
Modules know their associated Distribution objects. They always refer
to the most recent official release. Developers may mark their releases
as unstable development versions (by inserting an underbar into the
module version number which will also be reflected in the distribution
name when you run 'make dist'), so the really hottest and newest 
distribution is not always the default.  If a module Foo circulates 
on \s-1CPAN\s0 in both version 1.23 and 1.23_90, \s-1CPAN\s0.pm offers a convenient 
way to install version 1.23 by saying
.PP
.Vb 1
\&    install Foo
.Ve
.PP
This would install the complete distribution file (say
BAR/Foo\-1.23.tar.gz) with all accompanying material. But if you would
like to install version 1.23_90, you need to know where the
distribution file resides on \s-1CPAN\s0 relative to the authors/id/
directory. If the author is \s-1BAR\s0, this might be BAR/Foo\-1.23_90.tar.gz;
so you would have to say
.PP
.Vb 1
\&    install BAR/Foo-1.23_90.tar.gz
.Ve
.PP
The first example will be driven by an object of the class
CPAN::Module, the second by an object of class CPAN::Distribution.
.Sh "Programmer's interface"
.IX Subsection "Programmer's interface"
If you do not enter the shell, the available shell commands are both
available as methods (\f(CW\*(C`CPAN::Shell\->install(...)\*(C'\fR) and as
functions in the calling package (\f(CW\*(C`install(...)\*(C'\fR).
.PP
There's currently only one class that has a stable interface \-
CPAN::Shell. All commands that are available in the \s-1CPAN\s0 shell are
methods of the class CPAN::Shell. Each of the commands that produce
listings of modules (\f(CW\*(C`r\*(C'\fR, \f(CW\*(C`autobundle\*(C'\fR, \f(CW\*(C`u\*(C'\fR) also return a list of
the IDs of all modules within the list.
.IP "expand($type,@things)" 2
.IX Item "expand($type,@things)"
The IDs of all objects available within a program are strings that can
be expanded to the corresponding real objects with the
\&\f(CW\*(C`CPAN::Shell\->expand("Module",@things)\*(C'\fR method. Expand returns a
list of CPAN::Module objects according to the \f(CW@things\fR arguments
given. In scalar context it only returns the first element of the
list.
.IP "expandany(@things)" 2
.IX Item "expandany(@things)"
Like expand, but returns objects of the appropriate type, i.e.
CPAN::Bundle objects for bundles, CPAN::Module objects for modules and
CPAN::Distribution objects fro distributions.
.IP "Programming Examples" 2
.IX Item "Programming Examples"
This enables the programmer to do operations that combine
functionalities that are available in the shell.
.Sp
.Vb 2
\&    # install everything that is outdated on my disk:
\&    perl -MCPAN -e 'CPAN::Shell->install(CPAN::Shell->r)'
.Ve
.Sp
.Vb 5
\&    # install my favorite programs if necessary:
\&    for $mod (qw(Net::FTP Digest::MD5 Data::Dumper)){
\&        my $obj = CPAN::Shell->expand('Module',$mod);
\&        $obj->install;
\&    }
.Ve
.Sp
.Vb 7
\&    # list all modules on my disk that have no VERSION number
\&    for $mod (CPAN::Shell->expand("Module","/./")){
\&        next unless $mod->inst_file;
\&        # MakeMaker convention for undefined $VERSION:
\&        next unless $mod->inst_version eq "undef";
\&        print "No VERSION in ", $mod->id, "\en";
\&    }
.Ve
.Sp
.Vb 2
\&    # find out which distribution on CPAN contains a module:
\&    print CPAN::Shell->expand("Module","Apache::Constants")->cpan_file
.Ve
.Sp
Or if you want to write a cronjob to watch The \s-1CPAN\s0, you could list
all modules that need updating. First a quick and dirty way:
.Sp
.Vb 1
\&    perl -e 'use CPAN; CPAN::Shell->r;'
.Ve
.Sp
If you don't want to get any output in the case that all modules are
up to date, you can parse the output of above command for the regular
expression //modules are up to date// and decide to mail the output
only if it doesn't match. Ick?
.Sp
If you prefer to do it more in a programmer style in one single
process, maybe something like this suits you better:
.Sp
.Vb 7
\&  # list all modules on my disk that have newer versions on CPAN
\&  for $mod (CPAN::Shell->expand("Module","/./")){
\&    next unless $mod->inst_file;
\&    next if $mod->uptodate;
\&    printf "Module %s is installed as %s, could be updated to %s from CPAN\en",
\&        $mod->id, $mod->inst_version, $mod->cpan_version;
\&  }
.Ve
.Sp
If that gives you too much output every day, you maybe only want to
watch for three modules. You can write
.Sp
.Vb 1
\&  for $mod (CPAN::Shell->expand("Module","/Apache|LWP|CGI/")){
.Ve
.Sp
as the first line instead. Or you can combine some of the above
tricks:
.Sp
.Vb 5
\&  # watch only for a new mod_perl module
\&  $mod = CPAN::Shell->expand("Module","mod_perl");
\&  exit if $mod->uptodate;
\&  # new mod_perl arrived, let me know all update recommendations
\&  CPAN::Shell->r;
.Ve
.Sh "Methods in the other Classes"
.IX Subsection "Methods in the other Classes"
The programming interface for the classes CPAN::Module,
CPAN::Distribution, CPAN::Bundle, and CPAN::Author is still considered
beta and partially even alpha. In the following paragraphs only those
methods are documented that have proven useful over a longer time and
thus are unlikely to change.
.IP "\fICPAN::Author::as_glimpse()\fR" 4
.IX Item "CPAN::Author::as_glimpse()"
Returns a one-line description of the author
.IP "\fICPAN::Author::as_string()\fR" 4
.IX Item "CPAN::Author::as_string()"
Returns a multi-line description of the author
.IP "\fICPAN::Author::email()\fR" 4
.IX Item "CPAN::Author::email()"
Returns the author's email address
.IP "\fICPAN::Author::fullname()\fR" 4
.IX Item "CPAN::Author::fullname()"
Returns the author's name
.IP "\fICPAN::Author::name()\fR" 4
.IX Item "CPAN::Author::name()"
An alias for fullname
.IP "\fICPAN::Bundle::as_glimpse()\fR" 4
.IX Item "CPAN::Bundle::as_glimpse()"
Returns a one-line description of the bundle
.IP "\fICPAN::Bundle::as_string()\fR" 4
.IX Item "CPAN::Bundle::as_string()"
Returns a multi-line description of the bundle
.IP "\fICPAN::Bundle::clean()\fR" 4
.IX Item "CPAN::Bundle::clean()"
Recursively runs the \f(CW\*(C`clean\*(C'\fR method on all items contained in the bundle.
.IP "\fICPAN::Bundle::contains()\fR" 4
.IX Item "CPAN::Bundle::contains()"
Returns a list of objects' IDs contained in a bundle. The associated
objects may be bundles, modules or distributions.
.IP "CPAN::Bundle::force($method,@args)" 4
.IX Item "CPAN::Bundle::force($method,@args)"
Forces \s-1CPAN\s0 to perform a task that normally would have failed. Force
takes as arguments a method name to be called and any number of
additional arguments that should be passed to the called method. The
internals of the object get the needed changes so that \s-1CPAN\s0.pm does
not refuse to take the action. The \f(CW\*(C`force\*(C'\fR is passed recursively to
all contained objects.
.IP "\fICPAN::Bundle::get()\fR" 4
.IX Item "CPAN::Bundle::get()"
Recursively runs the \f(CW\*(C`get\*(C'\fR method on all items contained in the bundle
.IP "\fICPAN::Bundle::inst_file()\fR" 4
.IX Item "CPAN::Bundle::inst_file()"
Returns the highest installed version of the bundle in either \f(CW@INC\fR or
\&\f(CW\*(C`$CPAN::Config\-\*(C'\fR{cpan_home}>. Note that this is different from
CPAN::Module::inst_file.
.IP "\fICPAN::Bundle::inst_version()\fR" 4
.IX Item "CPAN::Bundle::inst_version()"
Like CPAN::Bundle::inst_file, but returns the \f(CW$VERSION\fR
.IP "\fICPAN::Bundle::uptodate()\fR" 4
.IX Item "CPAN::Bundle::uptodate()"
Returns 1 if the bundle itself and all its members are uptodate.
.IP "\fICPAN::Bundle::install()\fR" 4
.IX Item "CPAN::Bundle::install()"
Recursively runs the \f(CW\*(C`install\*(C'\fR method on all items contained in the bundle
.IP "\fICPAN::Bundle::make()\fR" 4
.IX Item "CPAN::Bundle::make()"
Recursively runs the \f(CW\*(C`make\*(C'\fR method on all items contained in the bundle
.IP "\fICPAN::Bundle::readme()\fR" 4
.IX Item "CPAN::Bundle::readme()"
Recursively runs the \f(CW\*(C`readme\*(C'\fR method on all items contained in the bundle
.IP "\fICPAN::Bundle::test()\fR" 4
.IX Item "CPAN::Bundle::test()"
Recursively runs the \f(CW\*(C`test\*(C'\fR method on all items contained in the bundle
.IP "\fICPAN::Distribution::as_glimpse()\fR" 4
.IX Item "CPAN::Distribution::as_glimpse()"
Returns a one-line description of the distribution
.IP "\fICPAN::Distribution::as_string()\fR" 4
.IX Item "CPAN::Distribution::as_string()"
Returns a multi-line description of the distribution
.IP "\fICPAN::Distribution::clean()\fR" 4
.IX Item "CPAN::Distribution::clean()"
Changes to the directory where the distribution has been unpacked and
runs \f(CW\*(C`make clean\*(C'\fR there.
.IP "\fICPAN::Distribution::containsmods()\fR" 4
.IX Item "CPAN::Distribution::containsmods()"
Returns a list of IDs of modules contained in a distribution file.
Only works for distributions listed in the 02packages.details.txt.gz
file. This typically means that only the most recent version of a
distribution is covered.
.IP "\fICPAN::Distribution::cvs_import()\fR" 4
.IX Item "CPAN::Distribution::cvs_import()"
Changes to the directory where the distribution has been unpacked and
runs something like
.Sp
.Vb 1
\&    cvs -d $cvs_root import -m $cvs_log $cvs_dir $userid v$version
.Ve
.Sp
there.
.IP "\fICPAN::Distribution::dir()\fR" 4
.IX Item "CPAN::Distribution::dir()"
Returns the directory into which this distribution has been unpacked.
.IP "CPAN::Distribution::force($method,@args)" 4
.IX Item "CPAN::Distribution::force($method,@args)"
Forces \s-1CPAN\s0 to perform a task that normally would have failed. Force
takes as arguments a method name to be called and any number of
additional arguments that should be passed to the called method. The
internals of the object get the needed changes so that \s-1CPAN\s0.pm does
not refuse to take the action.
.IP "\fICPAN::Distribution::get()\fR" 4
.IX Item "CPAN::Distribution::get()"
Downloads the distribution from \s-1CPAN\s0 and unpacks it. Does nothing if
the distribution has already been downloaded and unpacked within the
current session.
.IP "\fICPAN::Distribution::install()\fR" 4
.IX Item "CPAN::Distribution::install()"
Changes to the directory where the distribution has been unpacked and
runs the external command \f(CW\*(C`make install\*(C'\fR there. If \f(CW\*(C`make\*(C'\fR has not
yet been run, it will be run first. A \f(CW\*(C`make test\*(C'\fR will be issued in
any case and if this fails, the install will be canceled. The
cancellation can be avoided by letting \f(CW\*(C`force\*(C'\fR run the \f(CW\*(C`install\*(C'\fR for
you.
.IP "\fICPAN::Distribution::isa_perl()\fR" 4
.IX Item "CPAN::Distribution::isa_perl()"
Returns 1 if this distribution file seems to be a perl distribution.
Normally this is derived from the file name only, but the index from
\&\s-1CPAN\s0 can contain a hint to achieve a return value of true for other
filenames too.
.IP "\fICPAN::Distribution::look()\fR" 4
.IX Item "CPAN::Distribution::look()"
Changes to the directory where the distribution has been unpacked and
opens a subshell there. Exiting the subshell returns.
.IP "\fICPAN::Distribution::make()\fR" 4
.IX Item "CPAN::Distribution::make()"
First runs the \f(CW\*(C`get\*(C'\fR method to make sure the distribution is
downloaded and unpacked. Changes to the directory where the
distribution has been unpacked and runs the external commands \f(CW\*(C`perl
Makefile.PL\*(C'\fR and \f(CW\*(C`make\*(C'\fR there.
.IP "\fICPAN::Distribution::prereq_pm()\fR" 4
.IX Item "CPAN::Distribution::prereq_pm()"
Returns the hash reference that has been announced by a distribution
as the \s-1PREREQ_PM\s0 hash in the Makefile.PL. Note: works only after an
attempt has been made to \f(CW\*(C`make\*(C'\fR the distribution. Returns undef
otherwise.
.IP "\fICPAN::Distribution::readme()\fR" 4
.IX Item "CPAN::Distribution::readme()"
Downloads the \s-1README\s0 file associated with a distribution and runs it
through the pager specified in \f(CW\*(C`$CPAN::Config\-\*(C'\fR{pager}>.
.IP "\fICPAN::Distribution::test()\fR" 4
.IX Item "CPAN::Distribution::test()"
Changes to the directory where the distribution has been unpacked and
runs \f(CW\*(C`make test\*(C'\fR there.
.IP "\fICPAN::Distribution::uptodate()\fR" 4
.IX Item "CPAN::Distribution::uptodate()"
Returns 1 if all the modules contained in the distribution are
uptodate. Relies on containsmods.
.IP "\fICPAN::Index::force_reload()\fR" 4
.IX Item "CPAN::Index::force_reload()"
Forces a reload of all indices.
.IP "\fICPAN::Index::reload()\fR" 4
.IX Item "CPAN::Index::reload()"
Reloads all indices if they have been read more than
\&\f(CW\*(C`$CPAN::Config\-\*(C'\fR{index_expire}> days.
.IP "\fICPAN::InfoObj::dump()\fR" 4
.IX Item "CPAN::InfoObj::dump()"
CPAN::Author, CPAN::Bundle, CPAN::Module, and CPAN::Distribution
inherit this method. It prints the data structure associated with an
object. Useful for debugging. Note: the data structure is considered
internal and thus subject to change without notice.
.IP "\fICPAN::Module::as_glimpse()\fR" 4
.IX Item "CPAN::Module::as_glimpse()"
Returns a one-line description of the module
.IP "\fICPAN::Module::as_string()\fR" 4
.IX Item "CPAN::Module::as_string()"
Returns a multi-line description of the module
.IP "\fICPAN::Module::clean()\fR" 4
.IX Item "CPAN::Module::clean()"
Runs a clean on the distribution associated with this module.
.IP "\fICPAN::Module::cpan_file()\fR" 4
.IX Item "CPAN::Module::cpan_file()"
Returns the filename on \s-1CPAN\s0 that is associated with the module.
.IP "\fICPAN::Module::cpan_version()\fR" 4
.IX Item "CPAN::Module::cpan_version()"
Returns the latest version of this module available on \s-1CPAN\s0.
.IP "\fICPAN::Module::cvs_import()\fR" 4
.IX Item "CPAN::Module::cvs_import()"
Runs a cvs_import on the distribution associated with this module.
.IP "\fICPAN::Module::description()\fR" 4
.IX Item "CPAN::Module::description()"
Returns a 44 character description of this module. Only available for
modules listed in The Module List (CPAN/modules/00modlist.long.html
or 00modlist.long.txt.gz)
.IP "CPAN::Module::force($method,@args)" 4
.IX Item "CPAN::Module::force($method,@args)"
Forces \s-1CPAN\s0 to perform a task that normally would have failed. Force
takes as arguments a method name to be called and any number of
additional arguments that should be passed to the called method. The
internals of the object get the needed changes so that \s-1CPAN\s0.pm does
not refuse to take the action.
.IP "\fICPAN::Module::get()\fR" 4
.IX Item "CPAN::Module::get()"
Runs a get on the distribution associated with this module.
.IP "\fICPAN::Module::inst_file()\fR" 4
.IX Item "CPAN::Module::inst_file()"
Returns the filename of the module found in \f(CW@INC\fR. The first file found
is reported just like perl itself stops searching \f(CW@INC\fR when it finds a
module.
.IP "\fICPAN::Module::inst_version()\fR" 4
.IX Item "CPAN::Module::inst_version()"
Returns the version number of the module in readable format.
.IP "\fICPAN::Module::install()\fR" 4
.IX Item "CPAN::Module::install()"
Runs an \f(CW\*(C`install\*(C'\fR on the distribution associated with this module.
.IP "\fICPAN::Module::look()\fR" 4
.IX Item "CPAN::Module::look()"
Changes to the directory where the distribution associated with this
module has been unpacked and opens a subshell there. Exiting the
subshell returns.
.IP "\fICPAN::Module::make()\fR" 4
.IX Item "CPAN::Module::make()"
Runs a \f(CW\*(C`make\*(C'\fR on the distribution associated with this module.
.IP "\fICPAN::Module::manpage_headline()\fR" 4
.IX Item "CPAN::Module::manpage_headline()"
If module is installed, peeks into the module's manpage, reads the
headline and returns it. Moreover, if the module has been downloaded
within this session, does the equivalent on the downloaded module even
if it is not installed.
.IP "\fICPAN::Module::readme()\fR" 4
.IX Item "CPAN::Module::readme()"
Runs a \f(CW\*(C`readme\*(C'\fR on the distribution associated with this module.
.IP "\fICPAN::Module::test()\fR" 4
.IX Item "CPAN::Module::test()"
Runs a \f(CW\*(C`test\*(C'\fR on the distribution associated with this module.
.IP "\fICPAN::Module::uptodate()\fR" 4
.IX Item "CPAN::Module::uptodate()"
Returns 1 if the module is installed and up\-to\-date.
.IP "\fICPAN::Module::userid()\fR" 4
.IX Item "CPAN::Module::userid()"
Returns the author's \s-1ID\s0 of the module.
.Sh "Cache Manager"
.IX Subsection "Cache Manager"
Currently the cache manager only keeps track of the build directory
($CPAN::Config\->{build_dir}). It is a simple \s-1FIFO\s0 mechanism that
deletes complete directories below \f(CW\*(C`build_dir\*(C'\fR as soon as the size of
all directories there gets bigger than \f(CW$CPAN::Config\fR\->{build_cache}
(in \s-1MB\s0). The contents of this cache may be used for later
re-installations that you intend to do manually, but will never be
trusted by \s-1CPAN\s0 itself. This is due to the fact that the user might
use these directories for building modules on different architectures.
.PP
There is another directory ($CPAN::Config\->{keep_source_where}) where
the original distribution files are kept. This directory is not
covered by the cache manager and must be controlled by the user. If
you choose to have the same directory as build_dir and as
keep_source_where directory, then your sources will be deleted with
the same fifo mechanism.
.Sh "Bundles"
.IX Subsection "Bundles"
A bundle is just a perl module in the namespace Bundle:: that does not
define any functions or methods. It usually only contains documentation.
.PP
It starts like a perl module with a package declaration and a \f(CW$VERSION\fR
variable. After that the pod section looks like any other pod with the
only difference being that \fIone special pod section\fR exists starting with
(verbatim):
.PP
.Vb 1
\&        =head1 CONTENTS
.Ve
.PP
In this pod section each line obeys the format
.PP
.Vb 1
\&        Module_Name [Version_String] [- optional text]
.Ve
.PP
The only required part is the first field, the name of a module
(e.g. Foo::Bar, ie. \fInot\fR the name of the distribution file). The rest
of the line is optional. The comment part is delimited by a dash just
as in the man page header.
.PP
The distribution of a bundle should follow the same convention as
other distributions.
.PP
Bundles are treated specially in the \s-1CPAN\s0 package. If you say 'install
Bundle::Tkkit' (assuming such a bundle exists), \s-1CPAN\s0 will install all
the modules in the \s-1CONTENTS\s0 section of the pod. You can install your
own Bundles locally by placing a conformant Bundle file somewhere into
your \f(CW@INC\fR path. The \fIautobundle()\fR command which is available in the
shell interface does that for you by including all currently installed
modules in a snapshot bundle file.
.Sh "Prerequisites"
.IX Subsection "Prerequisites"
If you have a local mirror of \s-1CPAN\s0 and can access all files with
\&\*(L"file:\*(R" URLs, then you only need a perl better than perl5.003 to run
this module. Otherwise Net::FTP is strongly recommended. \s-1LWP\s0 may be
required for non-UNIX systems or if your nearest \s-1CPAN\s0 site is
associated with a \s-1URL\s0 that is not \f(CW\*(C`ftp:\*(C'\fR.
.PP
If you have neither Net::FTP nor \s-1LWP\s0, there is a fallback mechanism
implemented for an external ftp command or for an external lynx
command.
.Sh "Finding packages and \s-1VERSION\s0"
.IX Subsection "Finding packages and VERSION"
This module presumes that all packages on \s-1CPAN\s0
.IP "\(bu" 2
declare their \f(CW$VERSION\fR variable in an easy to parse manner. This
prerequisite can hardly be relaxed because it consumes far too much
memory to load all packages into the running program just to determine
the \f(CW$VERSION\fR variable. Currently all programs that are dealing with
version use something like this
.Sp
.Vb 2
\&    perl -MExtUtils::MakeMaker -le \e
\&        'print MM->parse_version(shift)' filename
.Ve
.Sp
If you are author of a package and wonder if your \f(CW$VERSION\fR can be
parsed, please try the above method.
.IP "\(bu" 2
come as compressed or gzipped tarfiles or as zip files and contain a
Makefile.PL (well, we try to handle a bit more, but without much
enthusiasm).
.Sh "Debugging"
.IX Subsection "Debugging"
The debugging of this module is a bit complex, because we have
interferences of the software producing the indices on \s-1CPAN\s0, of the
mirroring process on \s-1CPAN\s0, of packaging, of configuration, of
synchronicity, and of bugs within \s-1CPAN\s0.pm.
.PP
For code debugging in interactive mode you can try \*(L"o debug\*(R" which
will list options for debugging the various parts of the code. You
should know that \*(L"o debug\*(R" has built-in completion support.
.PP
For data debugging there is the \f(CW\*(C`dump\*(C'\fR command which takes the same
arguments as make/test/install and outputs the object's Data::Dumper
dump.
.Sh "Floppy, Zip, Offline Mode"
.IX Subsection "Floppy, Zip, Offline Mode"
\&\s-1CPAN\s0.pm works nicely without network too. If you maintain machines
that are not networked at all, you should consider working with file:
URLs. Of course, you have to collect your modules somewhere first. So
you might use \s-1CPAN\s0.pm to put together all you need on a networked
machine. Then copy the \f(CW$CPAN::Config\fR\->{keep_source_where} (but not
\&\f(CW$CPAN::Config\fR\->{build_dir}) directory on a floppy. This floppy is kind
of a personal \s-1CPAN\s0. \s-1CPAN\s0.pm on the non-networked machines works nicely
with this floppy. See also below the paragraph about CD-ROM support.
.SH "CONFIGURATION"
.IX Header "CONFIGURATION"
When the \s-1CPAN\s0 module is used for the first time, a configuration
dialog tries to determine a couple of site specific options. The
result of the dialog is stored in a hash reference \f(CW $CPAN::Config \fR
in a file CPAN/Config.pm.
.PP
The default values defined in the CPAN/Config.pm file can be
overridden in a user specific file: CPAN/MyConfig.pm. Such a file is
best placed in \f(CW$HOME\fR/.cpan/CPAN/MyConfig.pm, because \f(CW$HOME\fR/.cpan is
added to the search path of the \s-1CPAN\s0 module before the \fIuse()\fR or
\&\fIrequire()\fR statements.
.PP
The configuration dialog can be started any time later again by
issueing the command \f(CW\*(C` o conf init \*(C'\fR in the \s-1CPAN\s0 shell.
.PP
Currently the following keys in the hash reference \f(CW$CPAN::Config\fR are
defined:
.PP
.Vb 35
\&  build_cache        size of cache for directories to build modules
\&  build_dir          locally accessible directory to build modules
\&  index_expire       after this many days refetch index files
\&  cache_metadata     use serializer to cache metadata
\&  cpan_home          local directory reserved for this package
\&  dontload_hash      anonymous hash: modules in the keys will not be
\&                     loaded by the CPAN::has_inst() routine
\&  gzip               location of external program gzip
\&  histfile           file to maintain history between sessions
\&  histsize           maximum number of lines to keep in histfile
\&  inactivity_timeout breaks interactive Makefile.PLs after this
\&                     many seconds inactivity. Set to 0 to never break.
\&  inhibit_startup_message
\&                     if true, does not print the startup message
\&  keep_source_where  directory in which to keep the source (if we do)
\&  make               location of external make program
\&  make_arg           arguments that should always be passed to 'make'
\&  make_install_arg   same as make_arg for 'make install'
\&  makepl_arg         arguments passed to 'perl Makefile.PL'
\&  pager              location of external program more (or any pager)
\&  prerequisites_policy
\&                     what to do if you are missing module prerequisites
\&                     ('follow' automatically, 'ask' me, or 'ignore')
\&  proxy_user         username for accessing an authenticating proxy
\&  proxy_pass         password for accessing an authenticating proxy
\&  scan_cache         controls scanning of cache ('atstart' or 'never')
\&  tar                location of external program tar
\&  term_is_latin      if true internal UTF-8 is translated to ISO-8859-1
\&                     (and nonsense for characters outside latin range)
\&  unzip              location of external program unzip
\&  urllist            arrayref to nearby CPAN sites (or equivalent locations)
\&  wait_list          arrayref to a wait server to try (See CPAN::WAIT)
\&  ftp_proxy,      }  the three usual variables for configuring
\&    http_proxy,   }  proxy requests. Both as CPAN::Config variables
\&    no_proxy      }  and as environment variables configurable.
.Ve
.PP
You can set and query each of these options interactively in the cpan
shell with the command set defined within the \f(CW\*(C`o conf\*(C'\fR command:
.ie n .IP """o conf <scalar option>""" 2
.el .IP "\f(CWo conf <scalar option>\fR" 2
.IX Item "o conf <scalar option>"
prints the current value of the \fIscalar option\fR
.ie n .IP """o conf <scalar option> <value>""" 2
.el .IP "\f(CWo conf <scalar option> <value>\fR" 2
.IX Item "o conf <scalar option> <value>"
Sets the value of the \fIscalar option\fR to \fIvalue\fR
.ie n .IP """o conf <list option>""" 2
.el .IP "\f(CWo conf <list option>\fR" 2
.IX Item "o conf <list option>"
prints the current value of the \fIlist option\fR in MakeMaker's
neatvalue format.
.ie n .IP """o conf <list option> [shift|pop]""" 2
.el .IP "\f(CWo conf <list option> [shift|pop]\fR" 2
.IX Item "o conf <list option> [shift|pop]"
shifts or pops the array in the \fIlist option\fR variable
.ie n .IP """o conf <list option> [unshift|push|splice] <list>""" 2
.el .IP "\f(CWo conf <list option> [unshift|push|splice] <list>\fR" 2
.IX Item "o conf <list option> [unshift|push|splice] <list>"
works like the corresponding perl commands.
.Sh "Note on urllist parameter's format"
.IX Subsection "Note on urllist parameter's format"
urllist parameters are URLs according to \s-1RFC\s0 1738. We do a little
guessing if your \s-1URL\s0 is not compliant, but if you have problems with
file URLs, please try the correct format. Either:
.PP
.Vb 1
\&    file://localhost/whatever/ftp/pub/CPAN/
.Ve
.PP
or
.PP
.Vb 1
\&    file:///home/ftp/pub/CPAN/
.Ve
.Sh "urllist parameter has CD-ROM support"
.IX Subsection "urllist parameter has CD-ROM support"
The \f(CW\*(C`urllist\*(C'\fR parameter of the configuration table contains a list of
URLs that are to be used for downloading. If the list contains any
\&\f(CW\*(C`file\*(C'\fR URLs, \s-1CPAN\s0 always tries to get files from there first. This
feature is disabled for index files. So the recommendation for the
owner of a CD-ROM with \s-1CPAN\s0 contents is: include your local, possibly
outdated CD-ROM as a \f(CW\*(C`file\*(C'\fR \s-1URL\s0 at the end of urllist, e.g.
.PP
.Vb 1
\&  o conf urllist push file://localhost/CDROM/CPAN
.Ve
.PP
\&\s-1CPAN\s0.pm will then fetch the index files from one of the \s-1CPAN\s0 sites
that come at the beginning of urllist. It will later check for each
module if there is a local copy of the most recent version.
.PP
Another peculiarity of urllist is that the site that we could
successfully fetch the last file from automatically gets a preference
token and is tried as the first site for the next request. So if you
add a new site at runtime it may happen that the previously preferred
site will be tried another time. This means that if you want to disallow
a site for the next transfer, it must be explicitly removed from
urllist.
.SH "SECURITY"
.IX Header "SECURITY"
There's no strong security layer in \s-1CPAN\s0.pm. \s-1CPAN\s0.pm helps you to
install foreign, unmasked, unsigned code on your machine. We compare
to a checksum that comes from the net just as the distribution file
itself. If somebody has managed to tamper with the distribution file,
they may have as well tampered with the \s-1CHECKSUMS\s0 file. Future
development will go towards strong authentication.
.SH "EXPORT"
.IX Header "EXPORT"
Most functions in package \s-1CPAN\s0 are exported per default. The reason
for this is that the primary use is intended for the cpan shell or for
one\-liners.
.SH "POPULATE AN INSTALLATION WITH LOTS OF MODULES"
.IX Header "POPULATE AN INSTALLATION WITH LOTS OF MODULES"
Populating a freshly installed perl with my favorite modules is pretty
easy if you maintain a private bundle definition file. To get a useful
blueprint of a bundle definition file, the command autobundle can be used
on the \s-1CPAN\s0 shell command line. This command writes a bundle definition
file for all modules that are installed for the currently running perl
interpreter. It's recommended to run this command only once and from then
on maintain the file manually under a private name, say
Bundle/my_bundle.pm. With a clever bundle file you can then simply say
.PP
.Vb 1
\&    cpan> install Bundle::my_bundle
.Ve
.PP
then answer a few questions and then go out for a coffee.
.PP
Maintaining a bundle definition file means keeping track of two
things: dependencies and interactivity. \s-1CPAN\s0.pm sometimes fails on
calculating dependencies because not all modules define all MakeMaker
attributes correctly, so a bundle definition file should specify
prerequisites as early as possible. On the other hand, it's a bit
annoying that many distributions need some interactive configuring. So
what I try to accomplish in my private bundle file is to have the
packages that need to be configured early in the file and the gentle
ones later, so I can go out after a few minutes and leave \s-1CPAN\s0.pm
untended.
.SH "WORKING WITH CPAN.pm BEHIND FIREWALLS"
.IX Header "WORKING WITH CPAN.pm BEHIND FIREWALLS"
Thanks to Graham Barr for contributing the following paragraphs about
the interaction between perl, and various firewall configurations. For
further informations on firewalls, it is recommended to consult the
documentation that comes with the ncftp program. If you are unable to
go through the firewall with a simple Perl setup, it is very likely
that you can configure ncftp so that it works for your firewall.
.Sh "Three basic types of firewalls"
.IX Subsection "Three basic types of firewalls"
Firewalls can be categorized into three basic types.
.IP "http firewall" 4
.IX Item "http firewall"
This is where the firewall machine runs a web server and to access the
outside world you must do it via the web server. If you set environment
variables like http_proxy or ftp_proxy to a values beginning with http://
or in your web browser you have to set proxy information then you know
you are running an http firewall.
.Sp
To access servers outside these types of firewalls with perl (even for
ftp) you will need to use \s-1LWP\s0.
.IP "ftp firewall" 4
.IX Item "ftp firewall"
This where the firewall machine runs an ftp server. This kind of
firewall will only let you access ftp servers outside the firewall.
This is usually done by connecting to the firewall with ftp, then
entering a username like \*(L"user@outside.host.com\*(R"
.Sp
To access servers outside these type of firewalls with perl you
will need to use Net::FTP.
.IP "One way visibility" 4
.IX Item "One way visibility"
I say one way visibility as these firewalls try to make themselves look
invisible to the users inside the firewall. An \s-1FTP\s0 data connection is
normally created by sending the remote server your \s-1IP\s0 address and then
listening for the connection. But the remote server will not be able to
connect to you because of the firewall. So for these types of firewall
\&\s-1FTP\s0 connections need to be done in a passive mode.
.Sp
There are two that I can think off.
.RS 4
.IP "\s-1SOCKS\s0" 4
.IX Item "SOCKS"
If you are using a \s-1SOCKS\s0 firewall you will need to compile perl and link
it with the \s-1SOCKS\s0 library, this is what is normally called a 'socksified'
perl. With this executable you will be able to connect to servers outside
the firewall as if it is not there.
.IP "\s-1IP\s0 Masquerade" 4
.IX Item "IP Masquerade"
This is the firewall implemented in the Linux kernel, it allows you to
hide a complete network behind one \s-1IP\s0 address. With this firewall no
special compiling is needed as you can access hosts directly.
.Sp
For accessing ftp servers behind such firewalls you may need to set
the environment variable \f(CW\*(C`FTP_PASSIVE\*(C'\fR to a true value, e.g.
.Sp
.Vb 1
\&    env FTP_PASSIVE=1 perl -MCPAN -eshell
.Ve
.Sp
or
.Sp
.Vb 1
\&    perl -MCPAN -e '$ENV{FTP_PASSIVE} = 1; shell'
.Ve
.RE
.RS 4
.RE
.Sh "Configuring lynx or ncftp for going through a firewall"
.IX Subsection "Configuring lynx or ncftp for going through a firewall"
If you can go through your firewall with e.g. lynx, presumably with a
command such as
.PP
.Vb 1
\&    /usr/local/bin/lynx -pscott:tiger
.Ve
.PP
then you would configure \s-1CPAN\s0.pm with the command
.PP
.Vb 1
\&    o conf lynx "/usr/local/bin/lynx -pscott:tiger"
.Ve
.PP
That's all. Similarly for ncftp or ftp, you would configure something
like
.PP
.Vb 1
\&    o conf ncftp "/usr/bin/ncftp -f /home/scott/ncftplogin.cfg"
.Ve
.PP
Your mileage may vary...
.SH "FAQ"
.IX Header "FAQ"
.IP "1)" 4
I installed a new version of module X but \s-1CPAN\s0 keeps saying,
I have the old version installed
.Sp
Most probably you \fBdo\fR have the old version installed. This can
happen if a module installs itself into a different directory in the
\&\f(CW@INC\fR path than it was previously installed. This is not really a
\&\s-1CPAN\s0.pm problem, you would have the same problem when installing the
module manually. The easiest way to prevent this behaviour is to add
the argument \f(CW\*(C`UNINST=1\*(C'\fR to the \f(CW\*(C`make install\*(C'\fR call, and that is why
many people add this argument permanently by configuring
.Sp
.Vb 1
\&  o conf make_install_arg UNINST=1
.Ve
.IP "2)" 4
So why is UNINST=1 not the default?
.Sp
Because there are people who have their precise expectations about who
may install where in the \f(CW@INC\fR path and who uses which \f(CW@INC\fR array. In
fine tuned environments \f(CW\*(C`UNINST=1\*(C'\fR can cause damage.
.IP "3)" 4
I want to clean up my mess, and install a new perl along with
all modules I have. How do I go about it?
.Sp
Run the autobundle command for your old perl and optionally rename the
resulting bundle file (e.g. Bundle/mybundle.pm), install the new perl
with the Configure option prefix, e.g.
.Sp
.Vb 1
\&    ./Configure -Dprefix=/usr/local/perl-5.6.78.9
.Ve
.Sp
Install the bundle file you produced in the first step with something like
.Sp
.Vb 1
\&    cpan> install Bundle::mybundle
.Ve
.Sp
and you're done.
.IP "4)" 4
When I install bundles or multiple modules with one command
there is too much output to keep track of.
.Sp
You may want to configure something like
.Sp
.Vb 2
\&  o conf make_arg "| tee -ai /root/.cpan/logs/make.out"
\&  o conf make_install_arg "| tee -ai /root/.cpan/logs/make_install.out"
.Ve
.Sp
so that \s-1STDOUT\s0 is captured in a file for later inspection.
.IP "5)" 4
I am not root, how can I install a module in a personal directory?
.Sp
You will most probably like something like this:
.Sp
.Vb 4
\&  o conf makepl_arg "LIB=~/myperl/lib \e
\&                    INSTALLMAN1DIR=~/myperl/man/man1 \e
\&                    INSTALLMAN3DIR=~/myperl/man/man3"
\&  install Sybase::Sybperl
.Ve
.Sp
You can make this setting permanent like all \f(CW\*(C`o conf\*(C'\fR settings with
\&\f(CW\*(C`o conf commit\*(C'\fR.
.Sp
You will have to add ~/myperl/man to the \s-1MANPATH\s0 environment variable
and also tell your perl programs to look into ~/myperl/lib, e.g. by
including
.Sp
.Vb 1
\&  use lib "$ENV{HOME}/myperl/lib";
.Ve
.Sp
or setting the \s-1PERL5LIB\s0 environment variable.
.Sp
Another thing you should bear in mind is that the \s-1UNINST\s0 parameter
should never be set if you are not root.
.IP "6)" 4
How to get a package, unwrap it, and make a change before building it?
.Sp
.Vb 1
\&  look Sybase::Sybperl
.Ve
.IP "7)" 4
I installed a Bundle and had a couple of fails. When I
retried, everything resolved nicely. Can this be fixed to work
on first try?
.Sp
The reason for this is that \s-1CPAN\s0 does not know the dependencies of all
modules when it starts out. To decide about the additional items to
install, it just uses data found in the generated Makefile. An
undetected missing piece breaks the process. But it may well be that
your Bundle installs some prerequisite later than some depending item
and thus your second try is able to resolve everything. Please note,
\&\s-1CPAN\s0.pm does not know the dependency tree in advance and cannot sort
the queue of things to install in a topologically correct order. It
resolves perfectly well \s-1IFF\s0 all modules declare the prerequisites
correctly with the \s-1PREREQ_PM\s0 attribute to MakeMaker. For bundles which
fail and you need to install often, it is recommended sort the Bundle
definition file manually. It is planned to improve the metadata
situation for dependencies on \s-1CPAN\s0 in general, but this will still
take some time.
.IP "8)" 4
In our intranet we have many modules for internal use. How
can I integrate these modules with \s-1CPAN\s0.pm but without uploading
the modules to \s-1CPAN\s0?
.Sp
Have a look at the CPAN::Site module.
.IP "9)" 4
When I run \s-1CPAN\s0's shell, I get error msg about line 1 to 4,
setting meta input/output via the /etc/inputrc file.
.Sp
Some versions of readline are picky about capitalization in the
/etc/inputrc file and specifically RedHat 6.2 comes with a
/etc/inputrc that contains the word \f(CW\*(C`on\*(C'\fR in lowercase. Change the
occurrences of \f(CW\*(C`on\*(C'\fR to \f(CW\*(C`On\*(C'\fR and the bug should disappear.
.IP "10)" 4
.IX Item "10)"
Some authors have strange characters in their names.
.Sp
Internally \s-1CPAN\s0.pm uses the \s-1UTF\-8\s0 charset. If your terminal is
expecting \s-1ISO\-8859\-1\s0 charset, a converter can be activated by setting
term_is_latin to a true value in your config file. One way of doing so
would be
.Sp
.Vb 1
\&    cpan> ! $CPAN::Config->{term_is_latin}=1
.Ve
.Sp
Extended support for converters will be made available as soon as perl
becomes stable with regard to charset issues.
.SH "BUGS"
.IX Header "BUGS"
We should give coverage for \fBall\fR of the \s-1CPAN\s0 and not just the \s-1PAUSE\s0
part, right? In this discussion \s-1CPAN\s0 and \s-1PAUSE\s0 have become equal \*(--
but they are not. \s-1PAUSE\s0 is authors/, modules/ and scripts/. \s-1CPAN\s0 is
\&\s-1PAUSE\s0 plus the clpa/, doc/, misc/, ports/, and src/.
.PP
Future development should be directed towards a better integration of
the other parts.
.PP
If a Makefile.PL requires special customization of libraries, prompts
the user for special input, etc. then you may find \s-1CPAN\s0 is not able to
build the distribution. In that case, you should attempt the
traditional method of building a Perl module package from a shell.
.SH "AUTHOR"
.IX Header "AUTHOR"
Andreas Koenig <andreas.koenig@anima.de>
.SH "TRANSLATIONS"
.IX Header "TRANSLATIONS"
Kawai,Takanori provides a Japanese translation of this manpage at
http://member.nifty.ne.jp/hippo2000/perltips/CPAN.htm
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIperl\fR\|(1), \fICPAN::Nox\fR\|(3)
