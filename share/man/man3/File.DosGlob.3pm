.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "File::DosGlob 3pm"
.TH File::DosGlob 3pm "2001-09-21" "perl v5.8.8" "Perl Programmers Reference Guide"
.SH "NAME"
File::DosGlob \- DOS like globbing and then some
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    require 5.004;
.Ve
.PP
.Vb 2
\&    # override CORE::glob in current package
\&    use File::DosGlob 'glob';
.Ve
.PP
.Vb 2
\&    # override CORE::glob in ALL packages (use with extreme caution!)
\&    use File::DosGlob 'GLOBAL_glob';
.Ve
.PP
.Vb 2
\&    @perlfiles = glob  "..\e\epe?l/*.p?";
\&    print <..\e\epe?l/*.p?>;
.Ve
.PP
.Vb 2
\&    # from the command line (overrides only in main::)
\&    > perl -MFile::DosGlob=glob -e "print <../pe*/*p?>"
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A module that implements DOS-like globbing with a few enhancements.
It is largely compatible with perlglob.exe (the M$ setargv.obj
version) in all but one respect\*(--it understands wildcards in
directory components.
.PP
For example, \f(CW\*(C`<..\e\el*b\e\efile/*glob.p?\*(C'\fR> will work as expected (in
that it will find something like '..\elib\eFile/DosGlob.pm' alright).
Note that all path components are case\-insensitive, and that
backslashes and forward slashes are both accepted, and preserved.
You may have to double the backslashes if you are putting them in
literally, due to double-quotish parsing of the pattern by perl.
.PP
Spaces in the argument delimit distinct patterns, so
\&\f(CW\*(C`glob('*.exe *.dll')\*(C'\fR globs all filenames that end in \f(CW\*(C`.exe\*(C'\fR
or \f(CW\*(C`.dll\*(C'\fR.  If you want to put in literal spaces in the glob
pattern, you can escape them with either double quotes, or backslashes.
e.g. \f(CW\*(C`glob('c:/"Program Files"/*/*.dll')\*(C'\fR, or
\&\f(CW\*(C`glob('c:/Program\e Files/*/*.dll')\*(C'\fR.  The argument is tokenized using
\&\f(CW\*(C`Text::ParseWords::parse_line()\*(C'\fR, so see Text::ParseWords for details
of the quoting rules used.
.PP
Extending it to csh patterns is left as an exercise to the reader.
.SH "NOTES"
.IX Header "NOTES"
.IP "\(bu" 4
Mac \s-1OS\s0 (Classic) users should note a few differences. The specification 
of pathnames in glob patterns adheres to the usual Mac \s-1OS\s0 conventions: 
The path separator is a colon ':', not a slash '/' or backslash '\e'. A 
full path always begins with a volume name. A relative pathname on Mac 
\&\s-1OS\s0 must always begin with a ':', except when specifying a file or 
directory name in the current working directory, where the leading colon 
is optional. If specifying a volume name only, a trailing ':' is 
required. Due to these rules, a glob like <*:> will find all 
mounted volumes, while a glob like <*> or <:*> will find 
all files and directories in the current directory.
.Sp
Note that updirs in the glob pattern are resolved before the matching begins,
i.e. a pattern like \*(L"*HD:t?p::a*\*(R" will be matched as \*(L"*HD:a*\*(R". Note also,
that a single trailing ':' in the pattern is ignored (unless it's a volume
name pattern like \*(L"*HD:\*(R"), i.e. a glob like <:*:> will find both directories 
\&\fIand\fR files (and not, as one might expect, only directories). 
.Sp
The metachars '*', '?' and the escape char '\e' are valid characters in 
volume, directory and file names on Mac \s-1OS\s0. Hence, if you want to match
a '*', '?' or '\e' literally, you have to escape these characters. Due to 
perl's quoting rules, things may get a bit complicated, when you want to 
match a string like '\e*' literally, or when you want to match '\e' literally, 
but treat the immediately following character '*' as metachar. So, here's a 
rule of thumb (applies to both single\- and double-quoted strings): escape 
each '*' or '?' or '\e' with a backslash, if you want to treat them literally, 
and then double each backslash and your are done. E.g. 
.Sp
\&\- Match '\e*' literally
.Sp
.Vb 2
\&   escape both '\e' and '*'  : '\e\e\e*'
\&   double the backslashes   : '\e\e\e\e\e\e*'
.Ve
.Sp
(Internally, the glob routine sees a '\e\e\e*', which means that both '\e' and 
\&'*' are escaped.)
.Sp
\&\- Match '\e' literally, treat '*' as metachar
.Sp
.Vb 2
\&   escape '\e' but not '*'   : '\e\e*'
\&   double the backslashes   : '\e\e\e\e*'
.Ve
.Sp
(Internally, the glob routine sees a '\e\e*', which means that '\e' is escaped and 
\&'*' is not.)
.Sp
Note that you also have to quote literal spaces in the glob pattern, as described
above.
.SH "EXPORTS (by request only)"
.IX Header "EXPORTS (by request only)"
\&\fIglob()\fR
.SH "BUGS"
.IX Header "BUGS"
Should probably be built into the core, and needs to stop
pandering to \s-1DOS\s0 habits.  Needs a dose of optimizium too.
.SH "AUTHOR"
.IX Header "AUTHOR"
Gurusamy Sarathy <gsar@activestate.com>
.SH "HISTORY"
.IX Header "HISTORY"
.IP "\(bu" 4
Support for globally overriding \fIglob()\fR (\s-1GSAR\s0 3\-JUN\-98)
.IP "\(bu" 4
Scalar context, independent iterator context fixes (\s-1GSAR\s0 15\-SEP\-97)
.IP "\(bu" 4
A few dir-vs-file optimizations result in glob importation being
10 times faster than using perlglob.exe, and using perlglob.bat is
only twice as slow as perlglob.exe (\s-1GSAR\s0 28\-MAY\-97)
.IP "\(bu" 4
Several cleanups prompted by lack of compatible perlglob.exe
under Borland (\s-1GSAR\s0 27\-MAY\-97)
.IP "\(bu" 4
Initial version (\s-1GSAR\s0 20\-FEB\-97)
.SH "SEE ALSO"
.IX Header "SEE ALSO"
perl
.PP
perlglob.bat
.PP
Text::ParseWords
