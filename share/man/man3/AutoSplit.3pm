.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "AutoSplit 3pm"
.TH AutoSplit 3pm "2001-09-21" "perl v5.8.8" "Perl Programmers Reference Guide"
.SH "NAME"
AutoSplit \- split a package for autoloading
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& autosplit($file, $dir, $keep, $check, $modtime);
.Ve
.PP
.Vb 1
\& autosplit_lib_modules(@modules);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This function will split up your program into files that the AutoLoader
module can handle. It is used by both the standard perl libraries and by
the MakeMaker utility, to automatically configure libraries for autoloading.
.PP
The \f(CW\*(C`autosplit\*(C'\fR interface splits the specified file into a hierarchy 
rooted at the directory \f(CW$dir\fR. It creates directories as needed to reflect
class hierarchy, and creates the file \fIautosplit.ix\fR. This file acts as
both forward declaration of all package routines, and as timestamp for the
last update of the hierarchy.
.PP
The remaining three arguments to \f(CW\*(C`autosplit\*(C'\fR govern other options to
the autosplitter.
.IP "$keep" 2
.IX Item "$keep"
If the third argument, \fI$keep\fR, is false, then any
pre-existing \f(CW\*(C`*.al\*(C'\fR files in the autoload directory are removed if
they are no longer part of the module (obsoleted functions).
\&\f(CW$keep\fR defaults to 0.
.IP "$check" 2
.IX Item "$check"
The
fourth argument, \fI$check\fR, instructs \f(CW\*(C`autosplit\*(C'\fR to check the module
currently being split to ensure that it includes a \f(CW\*(C`use\*(C'\fR
specification for the AutoLoader module, and skips the module if
AutoLoader is not detected.
\&\f(CW$check\fR defaults to 1.
.IP "$modtime" 2
.IX Item "$modtime"
Lastly, the \fI$modtime\fR argument specifies
that \f(CW\*(C`autosplit\*(C'\fR is to check the modification time of the module
against that of the \f(CW\*(C`autosplit.ix\*(C'\fR file, and only split the module if
it is newer.
\&\f(CW$modtime\fR defaults to 1.
.PP
Typical use of AutoSplit in the perl MakeMaker utility is via the command-line
with:
.PP
.Vb 1
\& perl -e 'use AutoSplit; autosplit($ARGV[0], $ARGV[1], 0, 1, 1)'
.Ve
.PP
Defined as a Make macro, it is invoked with file and directory arguments;
\&\f(CW\*(C`autosplit\*(C'\fR will split the specified file into the specified directory and
delete obsolete \f(CW\*(C`.al\*(C'\fR files, after checking first that the module does use
the AutoLoader, and ensuring that the module is not already currently split
in its current form (the modtime test).
.PP
The \f(CW\*(C`autosplit_lib_modules\*(C'\fR form is used in the building of perl. It takes
as input a list of files (modules) that are assumed to reside in a directory
\&\fBlib\fR relative to the current directory. Each file is sent to the 
autosplitter one at a time, to be split into the directory \fBlib/auto\fR.
.PP
In both usages of the autosplitter, only subroutines defined following the
perl \fI_\|_END_\|_\fR token are split out into separate files. Some
routines may be placed prior to this marker to force their immediate loading
and parsing.
.Sh "Multiple packages"
.IX Subsection "Multiple packages"
As of version 1.01 of the AutoSplit module it is possible to have
multiple packages within a single file. Both of the following cases
are supported:
.PP
.Vb 7
\&   package NAME;
\&   __END__
\&   sub AAA { ... }
\&   package NAME::option1;
\&   sub BBB { ... }
\&   package NAME::option2;
\&   sub BBB { ... }
.Ve
.PP
.Vb 5
\&   package NAME;
\&   __END__
\&   sub AAA { ... }
\&   sub NAME::option1::BBB { ... }
\&   sub NAME::option2::BBB { ... }
.Ve
.SH "DIAGNOSTICS"
.IX Header "DIAGNOSTICS"
\&\f(CW\*(C`AutoSplit\*(C'\fR will inform the user if it is necessary to create the
top-level directory specified in the invocation. It is preferred that
the script or installation process that invokes \f(CW\*(C`AutoSplit\*(C'\fR have
created the full directory path ahead of time. This warning may
indicate that the module is being split into an incorrect path.
.PP
\&\f(CW\*(C`AutoSplit\*(C'\fR will warn the user of all subroutines whose name causes
potential file naming conflicts on machines with drastically limited
(8 characters or less) file name length. Since the subroutine name is
used as the file name, these warnings can aid in portability to such
systems.
.PP
Warnings are issued and the file skipped if \f(CW\*(C`AutoSplit\*(C'\fR cannot locate
either the \fI_\|_END_\|_\fR marker or a \*(L"package Name;\*(R"\-style specification.
.PP
\&\f(CW\*(C`AutoSplit\*(C'\fR will also emit general diagnostics for inability to
create directories or files.
