<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LibGit2Sharp</name>
    </assembly>
    <members>
        <member name="T:LibGit2Sharp.TreeEntry">
            <summary>
              Representation of an entry in a <see cref="T:LibGit2Sharp.Tree"/>.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.TreeEntry.#ctor">
            <summary>
              Needed for mocking purposes.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.TreeEntry.Equals(System.Object)">
            <summary>
              Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:LibGit2Sharp.TreeEntry"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:LibGit2Sharp.TreeEntry"/>.</param>
            <returns>True if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:LibGit2Sharp.TreeEntry"/>; otherwise, false.</returns>
        </member>
        <member name="M:LibGit2Sharp.TreeEntry.Equals(LibGit2Sharp.TreeEntry)">
            <summary>
              Determines whether the specified <see cref="T:LibGit2Sharp.TreeEntry"/> is equal to the current <see cref="T:LibGit2Sharp.TreeEntry"/>.
            </summary>
            <param name="other">The <see cref="T:LibGit2Sharp.TreeEntry"/> to compare with the current <see cref="T:LibGit2Sharp.TreeEntry"/>.</param>
            <returns>True if the specified <see cref="T:LibGit2Sharp.TreeEntry"/> is equal to the current <see cref="T:LibGit2Sharp.TreeEntry"/>; otherwise, false.</returns>
        </member>
        <member name="M:LibGit2Sharp.TreeEntry.GetHashCode">
            <summary>
              Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:LibGit2Sharp.TreeEntry.op_Equality(LibGit2Sharp.TreeEntry,LibGit2Sharp.TreeEntry)">
            <summary>
              Tests if two <see cref="T:LibGit2Sharp.TreeEntry"/> are equal.
            </summary>
            <param name="left">First <see cref="T:LibGit2Sharp.TreeEntry"/> to compare.</param>
            <param name="right">Second <see cref="T:LibGit2Sharp.TreeEntry"/> to compare.</param>
            <returns>True if the two objects are equal; false otherwise.</returns>
        </member>
        <member name="M:LibGit2Sharp.TreeEntry.op_Inequality(LibGit2Sharp.TreeEntry,LibGit2Sharp.TreeEntry)">
            <summary>
              Tests if two <see cref="T:LibGit2Sharp.TreeEntry"/> are different.
            </summary>
            <param name="left">First <see cref="T:LibGit2Sharp.TreeEntry"/> to compare.</param>
            <param name="right">Second <see cref="T:LibGit2Sharp.TreeEntry"/> to compare.</param>
            <returns>True if the two objects are different; false otherwise.</returns>
        </member>
        <member name="P:LibGit2Sharp.TreeEntry.Mode">
            <summary>
              Gets the file mode.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.TreeEntry.Name">
            <summary>
              Gets the filename.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.TreeEntry.Path">
            <summary>
              Gets the path.
              <para>The path is expressed in a relative form from the latest known <see cref="T:LibGit2Sharp.Tree"/>. Path segments are separated with a forward or backslash, depending on the OS the libray is being run on."/&gt;</para>
            </summary>
        </member>
        <member name="P:LibGit2Sharp.TreeEntry.Target">
            <summary>
              Gets the <see cref="T:LibGit2Sharp.GitObject"/> being pointed at.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.TreeEntry.Type">
            <summary>
              Gets the <see cref="T:LibGit2Sharp.GitObjectType"/> of the <see cref="P:LibGit2Sharp.TreeEntry.Target"/> being pointed at.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.IQueryableCommitLog">
            <summary>
              A log of commits in a <see cref="T:LibGit2Sharp.Repository"/> that can be filtered with queries.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.ICommitLog">
            <summary>
              A log of commits in a <see cref="T:LibGit2Sharp.Repository"/>.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.ICommitCollection">
            <summary>
              A collection of commits in a <see cref="T:LibGit2Sharp.Repository"/>.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.ICommitCollection.SortedBy">
            <summary>
              Gets the current sorting strategy applied when enumerating the log.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.IQueryableCommitCollection">
            <summary>
              A collection of commits in a <see cref="T:LibGit2Sharp.Repository"/> that can be filtered with queries.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.IQueryableCommitCollection.QueryBy(LibGit2Sharp.Filter)">
            <summary>
              Returns the list of commits of the repository matching the specified <paramref name = "filter" />.
            </summary>
            <param name = "filter">The options used to control which commits will be returned.</param>
            <returns>A list of commits, ready to be enumerated.</returns>
        </member>
        <member name="M:LibGit2Sharp.IQueryableCommitCollection.Create(System.String,LibGit2Sharp.Signature,LibGit2Sharp.Signature,System.Boolean)">
            <summary>
              Stores the content of the <see cref="P:LibGit2Sharp.Repository.Index"/> as a new <see cref="T:LibGit2Sharp.Commit"/> into the repository.
              The tip of the <see cref="P:LibGit2Sharp.Repository.Head"/> will be used as the parent of this new Commit.
              Once the commit is created, the <see cref="P:LibGit2Sharp.Repository.Head"/> will move forward to point at it.
            </summary>
            <param name="message">The description of why a change was made to the repository.</param>
            <param name="author">The <see cref="T:LibGit2Sharp.Signature"/> of who made the change.</param>
            <param name="committer">The <see cref="T:LibGit2Sharp.Signature"/> of who added the change to the repository.</param>
            <param name="amendPreviousCommit">True to amend the current <see cref="T:LibGit2Sharp.Commit"/> pointed at by <see cref="P:LibGit2Sharp.Repository.Head"/>, false otherwise.</param>
            <returns>The generated <see cref="T:LibGit2Sharp.Commit"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.IQueryableCommitCollection.FindCommonAncestor(LibGit2Sharp.Commit,LibGit2Sharp.Commit)">
            <summary>
              Find the best possible common ancestor given two <see cref="T:LibGit2Sharp.Commit"/>s.
            </summary>
            <param name="first">The first <see cref="T:LibGit2Sharp.Commit"/>.</param>
            <param name="second">The second <see cref="T:LibGit2Sharp.Commit"/>.</param>
            <returns>The common ancestor or null if none found.</returns>
        </member>
        <member name="M:LibGit2Sharp.IQueryableCommitCollection.FindCommonAncestor(System.Collections.Generic.IEnumerable{LibGit2Sharp.Commit})">
            <summary>
              Find the best possible common ancestor given two or more <see cref="T:LibGit2Sharp.Commit"/>s.
            </summary>
            <param name="commits">The <see cref="T:LibGit2Sharp.Commit"/> for which to find the common ancestor.</param>
            <returns>The common ancestor or null if none found.</returns>
        </member>
        <member name="T:LibGit2Sharp.ChangeKind">
            <summary>
              The kind of changes that a Diff can report.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.ChangeKind.Unmodified">
            <summary>
              No changes detected.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.ChangeKind.Added">
            <summary>
              The file was added.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.ChangeKind.Deleted">
            <summary>
              The file was deleted.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.ChangeKind.Modified">
            <summary>
              The file content was modified.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.ChangeKind.Renamed">
            <summary>
              The file was renamed.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.ChangeKind.Copied">
            <summary>
              The file was copied.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.ChangeKind.Ignored">
            <summary>
              The file is ignored in the workdir.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.ChangeKind.Untracked">
            <summary>
              The file is untracked in the workdir.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.BranchCollection">
            <summary>
              The collection of Branches in a <see cref="T:LibGit2Sharp.Repository"/>
            </summary>
        </member>
        <member name="M:LibGit2Sharp.BranchCollection.#ctor">
            <summary>
              Needed for mocking purposes.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.BranchCollection.#ctor(LibGit2Sharp.Repository)">
            <summary>
              Initializes a new instance of the <see cref="T:LibGit2Sharp.BranchCollection"/> class.
            </summary>
            <param name="repo">The repo.</param>
        </member>
        <member name="M:LibGit2Sharp.BranchCollection.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:LibGit2Sharp.BranchCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:LibGit2Sharp.BranchCollection.Add(System.String,LibGit2Sharp.Commit,System.Boolean)">
            <summary>
              Create a new local branch with the specified name
            </summary>
            <param name="name">The name of the branch.</param>
            <param name="commit">The target commit.</param>
            <param name="allowOverwrite">True to allow silent overwriting a potentially existing branch, false otherwise.</param>
            <returns>A new <see cref="T:LibGit2Sharp.Branch"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.BranchCollection.Create(System.String,System.String,System.Boolean)">
            <summary>
              Create a new local branch with the specified name
            </summary>
            <param name = "name">The name of the branch.</param>
            <param name = "commitish">Revparse spec for the target commit.</param>
            <param name = "allowOverwrite">True to allow silent overwriting a potentially existing branch, false otherwise.</param>
            <returns></returns>
        </member>
        <member name="M:LibGit2Sharp.BranchCollection.Remove(LibGit2Sharp.Branch)">
            <summary>
              Deletes the specified branch.
            </summary>
            <param name = "branch">The branch to delete.</param>
        </member>
        <member name="M:LibGit2Sharp.BranchCollection.Delete(System.String,System.Boolean)">
            <summary>
              Deletes the branch with the specified name.
            </summary>
            <param name = "name">The name of the branch to delete.</param>
            <param name = "isRemote">True if the provided <paramref name="name"/> is the name of a remote branch, false otherwise.</param>
        </member>
        <member name="M:LibGit2Sharp.BranchCollection.Move(LibGit2Sharp.Branch,System.String,System.Boolean)">
            <summary>
              Renames an existing local branch with a new name.
            </summary>
            <param name="branch">The current local branch.</param>
            <param name="newName">The new name the existing branch should bear.</param>
            <param name="allowOverwrite">True to allow silent overwriting a potentially existing branch, false otherwise.</param>
            <returns>A new <see cref="T:LibGit2Sharp.Branch"/>.</returns>
        </member>
        <member name="P:LibGit2Sharp.BranchCollection.Item(System.String)">
            <summary>
              Gets the <see cref="T:LibGit2Sharp.Branch"/> with the specified name.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.GitSortOptions">
            <summary>
              Determines the sorting strategy when iterating through the content of the repository
            </summary>
        </member>
        <member name="F:LibGit2Sharp.GitSortOptions.None">
            <summary>
              Sort the repository contents in no particular ordering;
              this sorting is arbitrary, implementation-specific
              and subject to change at any time.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.GitSortOptions.Topological">
            <summary>
              Sort the repository contents in topological order
              (parents before children); this sorting mode
              can be combined with time sorting.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.GitSortOptions.Time">
            <summary>
              Sort the repository contents by commit time;
              this sorting mode can be combined with
              topological sorting.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.GitSortOptions.Reverse">
            <summary>
              Iterate through the repository contents in reverse
              order; this sorting mode can be combined with
              any of the above.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.Core.Epoch">
            <summary>
              Provides helper methods to help converting between Epoch (unix timestamp) and <see cref="T:System.DateTimeOffset"/>.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Core.Epoch.ToDateTimeOffset(System.Int64,System.Int32)">
            <summary>
              Builds a <see cref="T:System.DateTimeOffset"/> from a Unix timestamp and a timezone offset.
            </summary>
            <param name="secondsSinceEpoch">The number of seconds since 00:00:00 UTC on 1 January 1970.</param>
            <param name="timeZoneOffsetInMinutes">The number of minutes from UTC in a timezone.</param>
            <returns>A <see cref="T:System.DateTimeOffset"/> representing this instant.</returns>
        </member>
        <member name="M:LibGit2Sharp.Core.Epoch.ToSecondsSinceEpoch(System.DateTimeOffset)">
            <summary>
              Converts the<see cref="P:System.DateTimeOffset.UtcDateTime"/> part of a <see cref="T:System.DateTimeOffset"/> into a Unix timestamp.
            </summary>
            <param name="date">The <see cref="T:System.DateTimeOffset"/> to convert.</param>
            <returns>The number of seconds since 00:00:00 UTC on 1 January 1970.</returns>
        </member>
        <member name="T:LibGit2Sharp.Core.Ensure">
            <summary>
              Ensure input parameters
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Core.Ensure.ArgumentNotNull(System.Object,System.String)">
            <summary>
              Checks an argument to ensure it isn't null.
            </summary>
            <param name = "argumentValue">The argument value to check.</param>
            <param name = "argumentName">The name of the argument.</param>
        </member>
        <member name="M:LibGit2Sharp.Core.Ensure.ArgumentNotNullOrEmptyString(System.String,System.String)">
            <summary>
              Checks a string argument to ensure it isn't null or empty.
            </summary>
            <param name = "argumentValue">The argument value to check.</param>
            <param name = "argumentName">The name of the argument.</param>
        </member>
        <member name="M:LibGit2Sharp.Core.Ensure.Success(System.Int32,System.Boolean)">
            <summary>
              Check that the result of a C call was successful
              <para>
                This usually means that the method is expected to return 0.
                In some rare cases, some methods may return negative values for errors and
                positive values carrying information. Those positive values should be interpreted
                as successful calls as well.
              </para>
            </summary>
            <param name = "result">The result to examine.</param>
            <param name = "allowPositiveResult">False to only allow success when comparing against 0,
              True when positive values are allowed as well.</param>
        </member>
        <member name="M:LibGit2Sharp.Core.Ensure.ArgumentConformsTo``1(``0,System.Func{``0,System.Boolean},System.String)">
            <summary>
              Checks an argument by applying provided checker.
            </summary>
            <param name = "argumentValue">The argument value to check.</param>
            <param name = "checker">The predicate which has to be satisfied</param>
            <param name = "argumentName">The name of the argument.</param>
        </member>
        <member name="T:LibGit2Sharp.Core.Compat.Environment">
            <summary>
            Provides information about, and means to manipulate, the current environment and platform.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Core.Compat.Environment.Is64BitProcess">
            <summary>
            Determines whether the current process is a 64-bit process.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.Handlers.ProgressHandler">
            <summary>
              Delegate definition to handle Progress callback. 
              Returns the text as reported by the server. The text
              in the serverProgressOutput parameter is not delivered
              in any particular units (i.e. not necessarily delivered
              as whole lines) and is likely to be chunked as partial lines.
            </summary>
            <param name="serverProgressOutput">text reported by the server. 
              Text can be chunked at arbitrary increments (i.e. can be composed
              of a partial line of text).</param>
        </member>
        <member name="T:LibGit2Sharp.Handlers.UpdateTipsHandler">
            <summary>
              Delegate definition to handle UpdateTips callback.
            </summary>
            <param name="referenceName">Name of the updated reference.</param>
            <param name="oldId">Old ID of the reference.</param>
            <param name="newId">New ID of the reference.</param>
            <returns>Return negative integer to cancel.</returns>
        </member>
        <member name="T:LibGit2Sharp.Handlers.CompletionHandler">
            <summary>
              Delegate definition to handle Completion callback.
            </summary>
            <param name="RemoteCompletionType"></param>
            <returns></returns>
        </member>
        <member name="T:LibGit2Sharp.Handlers.TransferProgressHandler">
            <summary>
              Delegate definition for transfer progress callback.
            </summary>
            <param name="progress">The <see cref="T:LibGit2Sharp.TransferProgress"/> object containing progress information.</param>
        </member>
        <member name="T:LibGit2Sharp.Handlers.CheckoutProgressHandler">
            <summary>
              Delegate definition for checkout progress callback.
            </summary>
            <param name="path">Path of the updated file.</param>
            <param name="completedSteps">Number of completed steps.</param>
            <param name="totalSteps">Total number of steps.</param>
        </member>
        <member name="T:LibGit2Sharp.Blob">
            <summary>
              Stores the binary content of a tracked file.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.GitObject">
            <summary>
              A GitObject
            </summary>
        </member>
        <member name="F:LibGit2Sharp.GitObject.repo">
            <summary>
              The <see cref="T:LibGit2Sharp.Repository"/> containing the object. 
            </summary>
        </member>
        <member name="M:LibGit2Sharp.GitObject.#ctor">
            <summary>
              Needed for mocking purposes.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.GitObject.#ctor(LibGit2Sharp.Repository,LibGit2Sharp.ObjectId)">
            <summary>
              Initializes a new instance of the <see cref="T:LibGit2Sharp.GitObject"/> class.
            </summary>
            <param name="repo">The <see cref="T:LibGit2Sharp.Repository"/> containing the object.</param>
            <param name="id">The <see cref="T:LibGit2Sharp.ObjectId"/> it should be identified by.</param>
        </member>
        <member name="M:LibGit2Sharp.GitObject.Equals(System.Object)">
            <summary>
              Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:LibGit2Sharp.GitObject"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:LibGit2Sharp.GitObject"/>.</param>
            <returns>True if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:LibGit2Sharp.GitObject"/>; otherwise, false.</returns>
        </member>
        <member name="M:LibGit2Sharp.GitObject.Equals(LibGit2Sharp.GitObject)">
            <summary>
              Determines whether the specified <see cref="T:LibGit2Sharp.GitObject"/> is equal to the current <see cref="T:LibGit2Sharp.GitObject"/>.
            </summary>
            <param name="other">The <see cref="T:LibGit2Sharp.GitObject"/> to compare with the current <see cref="T:LibGit2Sharp.GitObject"/>.</param>
            <returns>True if the specified <see cref="T:LibGit2Sharp.GitObject"/> is equal to the current <see cref="T:LibGit2Sharp.GitObject"/>; otherwise, false.</returns>
        </member>
        <member name="M:LibGit2Sharp.GitObject.GetHashCode">
            <summary>
              Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:LibGit2Sharp.GitObject.op_Equality(LibGit2Sharp.GitObject,LibGit2Sharp.GitObject)">
            <summary>
              Tests if two <see cref="T:LibGit2Sharp.GitObject"/> are equal.
            </summary>
            <param name="left">First <see cref="T:LibGit2Sharp.GitObject"/> to compare.</param>
            <param name="right">Second <see cref="T:LibGit2Sharp.GitObject"/> to compare.</param>
            <returns>True if the two objects are equal; false otherwise.</returns>
        </member>
        <member name="M:LibGit2Sharp.GitObject.op_Inequality(LibGit2Sharp.GitObject,LibGit2Sharp.GitObject)">
            <summary>
              Tests if two <see cref="T:LibGit2Sharp.GitObject"/> are different.
            </summary>
            <param name="left">First <see cref="T:LibGit2Sharp.GitObject"/> to compare.</param>
            <param name="right">Second <see cref="T:LibGit2Sharp.GitObject"/> to compare.</param>
            <returns>True if the two objects are different; false otherwise.</returns>
        </member>
        <member name="P:LibGit2Sharp.GitObject.Id">
            <summary>
              Gets the id of this object
            </summary>
        </member>
        <member name="P:LibGit2Sharp.GitObject.Sha">
            <summary>
              Gets the 40 character sha1 of this object.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Blob.#ctor">
            <summary>
              Needed for mocking purposes.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Blob.Size">
            <summary>
              Gets the size in bytes of the contents of a blob
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Blob.Content">
            <summary>
              Gets the blob content in a <see cref="T:System.Byte"/> array.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Blob.ContentStream">
            <summary>
              Gets the blob content in a <see cref="T:System.IO.Stream"/>.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.TagCollection">
            <summary>
              The collection of <see cref="T:LibGit2Sharp.Tag"/>s in a <see cref="T:LibGit2Sharp.Repository"/>
            </summary>
        </member>
        <member name="M:LibGit2Sharp.TagCollection.#ctor">
            <summary>
              Needed for mocking purposes.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.TagCollection.#ctor(LibGit2Sharp.Repository)">
            <summary>
              Initializes a new instance of the <see cref="T:LibGit2Sharp.TagCollection"/> class.
            </summary>
            <param name="repo">The repo.</param>
        </member>
        <member name="M:LibGit2Sharp.TagCollection.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:LibGit2Sharp.TagCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:LibGit2Sharp.TagCollection.Add(System.String,LibGit2Sharp.GitObject,LibGit2Sharp.Signature,System.String,System.Boolean)">
            <summary>
              Creates an annotated tag with the specified name.
            </summary>
            <param name="name">The name.</param>
            <param name="target">The target <see cref="T:LibGit2Sharp.GitObject"/>.</param>
            <param name="tagger">The tagger.</param>
            <param name="message">The message.</param>
            <param name="allowOverwrite">True to allow silent overwriting a potentially existing tag, false otherwise.</param>
            <returns></returns>
        </member>
        <member name="M:LibGit2Sharp.TagCollection.Create(System.String,System.String,LibGit2Sharp.Signature,System.String,System.Boolean)">
            <summary>
              Creates an annotated tag with the specified name.
            </summary>
            <param name = "name">The name.</param>
            <param name = "target">The target which can be sha or a canonical reference name.</param>
            <param name = "tagger">The tagger.</param>
            <param name = "message">The message.</param>
            <param name = "allowOverwrite">True to allow silent overwriting a potentially existing tag, false otherwise.</param>
            <returns></returns>
        </member>
        <member name="M:LibGit2Sharp.TagCollection.Add(System.String,LibGit2Sharp.GitObject,System.Boolean)">
            <summary>
              Creates a lightweight tag with the specified name.
            </summary>
            <param name="name">The name.</param>
            <param name="target">The target <see cref="T:LibGit2Sharp.GitObject"/>.</param>
            <param name="allowOverwrite">True to allow silent overwriting a potentially existing tag, false otherwise.</param>
            <returns></returns>
        </member>
        <member name="M:LibGit2Sharp.TagCollection.Create(System.String,System.String,System.Boolean)">
            <summary>
              Creates a lightweight tag with the specified name.
            </summary>
            <param name = "name">The name.</param>
            <param name = "target">The target which can be sha or a canonical reference name.</param>
            <param name = "allowOverwrite">True to allow silent overwriting a potentially existing tag, false otherwise.</param>
            <returns></returns>
        </member>
        <member name="M:LibGit2Sharp.TagCollection.Remove(LibGit2Sharp.Tag)">
            <summary>
              Deletes the tag with the specified name.
            </summary>
            <param name = "tag">The tag to delete.</param>
        </member>
        <member name="M:LibGit2Sharp.TagCollection.Delete(System.String)">
            <summary>
              Deletes the tag with the specified name.
            </summary>
            <param name = "name">The short or canonical name of the tag to delete.</param>
        </member>
        <member name="P:LibGit2Sharp.TagCollection.Item(System.String)">
            <summary>
              Gets the <see cref="T:LibGit2Sharp.Tag"/> with the specified name.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.OdbBackendStream">
            <summary>
              When an OdbBackend implements the WriteStream or ReadStream methods, it returns an OdbBackendStream to libgit2.
              Libgit2 then uses the OdbBackendStream to read or write from the backend in a streaming fashion.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.OdbBackendStream.#ctor">
            <summary>
            This is to quiet the MetaFixture.TypesInLibGit2SharpMustBeExtensibleInATestingContext test.
            Do not use this constructor.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.OdbBackendStream.#ctor(LibGit2Sharp.OdbBackend)">
            <summary>
            Base constructor for OdbBackendStream. Make sure that your derived class calls this base constructor.
            </summary>
            <param name="backend">The backend to which this backend stream is attached.</param>
        </member>
        <member name="M:LibGit2Sharp.OdbBackendStream.Dispose">
            <summary>
              Invoked by libgit2 when this stream is no longer needed.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.OdbBackendStream.Read(System.IO.Stream,System.Int64)">
            <summary>
              Requests that the stream write the next length bytes of the stream to the provided Stream object.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.OdbBackendStream.Write(System.IO.Stream,System.Int64)">
            <summary>
              Requests that the stream write the first length bytes of the provided Stream object to the stream.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.OdbBackendStream.FinalizeWrite(System.Byte[]@)">
            <summary>
              After all bytes have been written to the stream, the object ID can be retrieved by calling FinalizeWrite.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.OdbBackendStream.CanRead">
            <summary>
              If true, then it is legal to call the Read method.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.OdbBackendStream.CanWrite">
            <summary>
              If true, then it is legal to call the Write and FinalizeWrite methods.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.OdbBackendStream.Backend">
            <summary>
              The backend object this stream was created by.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.IndexEntry">
            <summary>
              A reference to a <see cref="T:LibGit2Sharp.Blob"/> known by the <see cref="T:LibGit2Sharp.Index"/>.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.IndexEntry.Equals(System.Object)">
            <summary>
              Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:LibGit2Sharp.IndexEntry"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:LibGit2Sharp.IndexEntry"/>.</param>
            <returns>True if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:LibGit2Sharp.IndexEntry"/>; otherwise, false.</returns>
        </member>
        <member name="M:LibGit2Sharp.IndexEntry.Equals(LibGit2Sharp.IndexEntry)">
            <summary>
              Determines whether the specified <see cref="T:LibGit2Sharp.IndexEntry"/> is equal to the current <see cref="T:LibGit2Sharp.IndexEntry"/>.
            </summary>
            <param name="other">The <see cref="T:LibGit2Sharp.IndexEntry"/> to compare with the current <see cref="T:LibGit2Sharp.IndexEntry"/>.</param>
            <returns>True if the specified <see cref="T:LibGit2Sharp.IndexEntry"/> is equal to the current <see cref="T:LibGit2Sharp.IndexEntry"/>; otherwise, false.</returns>
        </member>
        <member name="M:LibGit2Sharp.IndexEntry.GetHashCode">
            <summary>
              Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:LibGit2Sharp.IndexEntry.op_Equality(LibGit2Sharp.IndexEntry,LibGit2Sharp.IndexEntry)">
            <summary>
              Tests if two <see cref="T:LibGit2Sharp.IndexEntry"/> are equal.
            </summary>
            <param name="left">First <see cref="T:LibGit2Sharp.IndexEntry"/> to compare.</param>
            <param name="right">Second <see cref="T:LibGit2Sharp.IndexEntry"/> to compare.</param>
            <returns>True if the two objects are equal; false otherwise.</returns>
        </member>
        <member name="M:LibGit2Sharp.IndexEntry.op_Inequality(LibGit2Sharp.IndexEntry,LibGit2Sharp.IndexEntry)">
            <summary>
              Tests if two <see cref="T:LibGit2Sharp.IndexEntry"/> are different.
            </summary>
            <param name="left">First <see cref="T:LibGit2Sharp.IndexEntry"/> to compare.</param>
            <param name="right">Second <see cref="T:LibGit2Sharp.IndexEntry"/> to compare.</param>
            <returns>True if the two objects are different; false otherwise.</returns>
        </member>
        <member name="P:LibGit2Sharp.IndexEntry.State">
            <summary>
              State of the version of the <see cref="T:LibGit2Sharp.Blob"/> pointed at by this <see cref="T:LibGit2Sharp.IndexEntry"/>, 
              compared against the <see cref="T:LibGit2Sharp.Blob"/> known from the <see cref="P:LibGit2Sharp.Repository.Head"/> and the file in the working directory.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.IndexEntry.Path">
            <summary>
              Gets the relative path to the file within the working directory.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.IndexEntry.Mode">
            <summary>
              Gets the file mode.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.IndexEntry.Id">
            <summary>
              Gets the id of the <see cref="T:LibGit2Sharp.Blob"/> pointed at by this index entry.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.ReferenceCollection">
            <summary>
              The Collection of references in a <see cref="T:LibGit2Sharp.Repository"/>
            </summary>
        </member>
        <member name="M:LibGit2Sharp.ReferenceCollection.#ctor">
            <summary>
              Needed for mocking purposes.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.ReferenceCollection.#ctor(LibGit2Sharp.Repository)">
            <summary>
              Initializes a new instance of the <see cref="T:LibGit2Sharp.ReferenceCollection"/> class.
            </summary>
            <param name="repo">The repo.</param>
        </member>
        <member name="M:LibGit2Sharp.ReferenceCollection.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:LibGit2Sharp.ReferenceCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:LibGit2Sharp.ReferenceCollection.Add(System.String,LibGit2Sharp.ObjectId,System.Boolean)">
            <summary>
              Creates a direct reference with the specified name and target
            </summary>
            <param name="name">The canonical name of the reference to create.</param>
            <param name="targetId">Id of the target object.</param>
            <param name="allowOverwrite">True to allow silent overwriting a potentially existing reference, false otherwise.</param>
            <returns>A new <see cref="T:LibGit2Sharp.Reference"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.ReferenceCollection.Add(System.String,LibGit2Sharp.Reference,System.Boolean)">
            <summary>
              Creates a symbolic reference  with the specified name and target
            </summary>
            <param name="name">The canonical name of the reference to create.</param>
            <param name="targetRef">The target reference.</param>
            <param name="allowOverwrite">True to allow silent overwriting a potentially existing reference, false otherwise.</param>
            <returns>A new <see cref="T:LibGit2Sharp.Reference"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.ReferenceCollection.Create(System.String,System.String,System.Boolean)">
            <summary>
              Creates a direct or symbolic reference with the specified name and target
            </summary>
            <param name="name">The name of the reference to create.</param>
            <param name="target">The target which can be either a sha or the canonical name of another reference.</param>
            <param name="allowOverwrite">True to allow silent overwriting a potentially existing reference, false otherwise.</param>
            <returns>A new <see cref="T:LibGit2Sharp.Reference"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.ReferenceCollection.Remove(LibGit2Sharp.Reference)">
            <summary>
              Remove a reference from the repository
            </summary>
            <param name = "reference">The reference to delete.</param>
        </member>
        <member name="M:LibGit2Sharp.ReferenceCollection.Delete(System.String)">
            <summary>
              Delete a reference with the specified name
            </summary>
            <param name = "name">The name of the reference to delete.</param>
        </member>
        <member name="M:LibGit2Sharp.ReferenceCollection.Move(LibGit2Sharp.Reference,System.String,System.Boolean)">
            <summary>
              Rename an existing reference with a new name
            </summary>
            <param name="reference">The reference to rename.</param>
            <param name="newName">The new canonical name.</param>
            <param name="allowOverwrite">True to allow silent overwriting a potentially existing reference, false otherwise.</param>
            <returns>A new <see cref="T:LibGit2Sharp.Reference"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.ReferenceCollection.UpdateTarget(LibGit2Sharp.Reference,LibGit2Sharp.ObjectId)">
            <summary>
              Updates the target of a direct reference.
            </summary>
            <param name="directRef">The direct reference which target should be updated.</param>
            <param name="targetId">The new target.</param>
            <returns>A new <see cref="T:LibGit2Sharp.Reference"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.ReferenceCollection.UpdateTarget(LibGit2Sharp.Reference,LibGit2Sharp.Reference)">
            <summary>
              Updates the target of a symbolic reference.
            </summary>
            <param name="symbolicRef">The symbolic reference which target should be updated.</param>
            <param name="targetRef">The new target.</param>
            <returns>A new <see cref="T:LibGit2Sharp.Reference"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.ReferenceCollection.FromGlob(System.String)">
            <summary>
              Returns the list of references of the repository matching the specified <paramref name = "pattern" />.
            </summary>
            <param name = "pattern">The glob pattern the reference name should match.</param>
            <returns>A list of references, ready to be enumerated.</returns>
        </member>
        <member name="M:LibGit2Sharp.ReferenceCollection.IsValidName(System.String)">
             <summary>
               Determines if the proposed reference name is well-formed.
             </summary>
             <para>
               - Top-level names must contain only capital letters and underscores,
               and must begin and end with a letter. (e.g. "HEAD", "ORIG_HEAD").
            
               - Names prefixed with "refs/" can be almost anything.  You must avoid
               the characters '~', '^', ':', '\\', '?', '[', and '*', and the
               sequences ".." and "@{" which have special meaning to revparse.
             </para>
             <param name="canonicalName">The name to be checked.</param>
             <returns>true is the name is valid; false otherwise.</returns>
        </member>
        <member name="P:LibGit2Sharp.ReferenceCollection.Item(System.String)">
            <summary>
              Gets the <see cref="T:LibGit2Sharp.Reference"/> with the specified name.
            </summary>
            <param name="name">The canonical name of the reference to resolve.</param>
            <returns>The resolved <see cref="T:LibGit2Sharp.Reference"/> if it has been found, null otherwise.</returns>
        </member>
        <member name="T:LibGit2Sharp.MergeConflictException">
            <summary>
              The exception that is thrown when there is a conflict merging changes.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.LibGit2SharpException">
            <summary>
              The exception that is thrown when an error occurs during application execution.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.LibGit2SharpException.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:LibGit2Sharp.LibGit2SharpException"/> class.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.LibGit2SharpException.#ctor(System.String)">
            <summary>
              Initializes a new instance of the <see cref="T:LibGit2Sharp.LibGit2SharpException"/> class with a specified error message.
            </summary>
            <param name="message">A message that describes the error. </param>
        </member>
        <member name="M:LibGit2Sharp.LibGit2SharpException.#ctor(System.String,System.Exception)">
            <summary>
              Initializes a new instance of the <see cref="T:LibGit2Sharp.LibGit2SharpException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception. </param>
            <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException"/> parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:LibGit2Sharp.LibGit2SharpException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
              Initializes a new instance of the <see cref="T:LibGit2Sharp.LibGit2SharpException"/> class with a serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:LibGit2Sharp.MergeConflictException.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:LibGit2Sharp.MergeConflictException"/> class.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.MergeConflictException.#ctor(System.String)">
            <summary>
              Initializes a new instance of the <see cref="T:LibGit2Sharp.MergeConflictException"/> class with a specified error message.
            </summary>
            <param name="message">A message that describes the error. </param>
        </member>
        <member name="M:LibGit2Sharp.MergeConflictException.#ctor(System.String,System.Exception)">
            <summary>
              Initializes a new instance of the <see cref="T:LibGit2Sharp.MergeConflictException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception. </param>
            <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException"/> parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:LibGit2Sharp.MergeConflictException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
              Initializes a new instance of the <see cref="T:LibGit2Sharp.MergeConflictException"/> class with a serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:LibGit2Sharp.Core.Compat.Lazy`1">
            <summary>
              Provides support for lazy initialization.
            </summary>
            <typeparam name = "TType">Specifies the type of object that is being lazily initialized.</typeparam>
        </member>
        <member name="M:LibGit2Sharp.Core.Compat.Lazy`1.#ctor(System.Func{`0})">
            <summary>
              Initializes a new instance of the <see cref="T:LibGit2Sharp.Core.Compat.Lazy`1"/> class.
            </summary>
            <param name="evaluator"></param>
        </member>
        <member name="P:LibGit2Sharp.Core.Compat.Lazy`1.Value">
            <summary>
              Gets the lazily initialized value of the current instance.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.Changes">
            <summary>
              Base class for changes.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Changes.LinesAdded">
            <summary>
              The number of lines added.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Changes.LinesDeleted">
            <summary>
              The number of lines deleted.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Changes.Patch">
            <summary>
              The patch corresponding to these changes.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Changes.IsBinaryComparison">
            <summary>
              Determines if at least one side of the comparison holds binary content.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.AmbiguousException">
            <summary>
              The exception that is thrown when provided filtering criteria lead to more
              than one result.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.AmbiguousException.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:LibGit2Sharp.AmbiguousException"/> class.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.AmbiguousException.#ctor(System.String)">
            <summary>
              Initializes a new instance of the <see cref="T:LibGit2Sharp.AmbiguousException"/> class with a specified error message.
            </summary>
            <param name="message">A message that describes the error. </param>
        </member>
        <member name="M:LibGit2Sharp.AmbiguousException.#ctor(System.String,System.Exception)">
            <summary>
              Initializes a new instance of the <see cref="T:LibGit2Sharp.AmbiguousException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception. </param>
            <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException"/> parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:LibGit2Sharp.AmbiguousException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
              Initializes a new instance of the <see cref="T:LibGit2Sharp.AmbiguousException"/> class with a serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:LibGit2Sharp.IRepository">
            <summary>
              A Repository is the primary interface into a git repository
            </summary>
        </member>
        <member name="M:LibGit2Sharp.IRepository.Checkout(System.String)">
            <summary>
              Checkout the specified branch, reference or SHA.
            </summary>
            <param name = "commitishOrBranchSpec">A revparse spec for the commit or branch to checkout.</param>
            <returns>The new HEAD.</returns>
        </member>
        <member name="M:LibGit2Sharp.IRepository.Checkout(System.String,LibGit2Sharp.CheckoutOptions,LibGit2Sharp.Handlers.CheckoutProgressHandler)">
            <summary>
              Checkout the specified branch, reference or SHA.
            </summary>
            <param name = "commitishOrBranchSpec">A revparse spec for the commit or branch to checkout.</param>
            <param name="checkoutOptions">Options controlling checkout behavior.</param>
            <param name="onCheckoutProgress">Callback method to report checkout progress updates through.</param>
            <returns>The new HEAD.</returns>
        </member>
        <member name="M:LibGit2Sharp.IRepository.Lookup(LibGit2Sharp.ObjectId,LibGit2Sharp.GitObjectType)">
            <summary>
              Try to lookup an object by its <see cref="T:LibGit2Sharp.ObjectId"/> and <see cref="T:LibGit2Sharp.GitObjectType"/>. If no matching object is found, null will be returned.
            </summary>
            <param name="id">The id to lookup.</param>
            <param name="type">The kind of GitObject being looked up</param>
            <returns>The <see cref="T:LibGit2Sharp.GitObject"/> or null if it was not found.</returns>
        </member>
        <member name="M:LibGit2Sharp.IRepository.Lookup(System.String,LibGit2Sharp.GitObjectType)">
            <summary>
              Try to lookup an object by its sha or a reference canonical name and <see cref="T:LibGit2Sharp.GitObjectType"/>. If no matching object is found, null will be returned.
            </summary>
            <param name="objectish">A revparse spec for the object to lookup.</param>
            <param name="type">The kind of <see cref="T:LibGit2Sharp.GitObject"/> being looked up</param>
            <returns>The <see cref="T:LibGit2Sharp.GitObject"/> or null if it was not found.</returns>
        </member>
        <member name="M:LibGit2Sharp.IRepository.Commit(System.String,LibGit2Sharp.Signature,LibGit2Sharp.Signature,System.Boolean)">
            <summary>
              Stores the content of the <see cref="P:LibGit2Sharp.Repository.Index"/> as a new <see cref="M:LibGit2Sharp.IRepository.Commit(System.String,LibGit2Sharp.Signature,LibGit2Sharp.Signature,System.Boolean)"/> into the repository.
              The tip of the <see cref="P:LibGit2Sharp.Repository.Head"/> will be used as the parent of this new Commit.
              Once the commit is created, the <see cref="P:LibGit2Sharp.Repository.Head"/> will move forward to point at it.
            </summary>
            <param name="message">The description of why a change was made to the repository.</param>
            <param name="author">The <see cref="T:LibGit2Sharp.Signature"/> of who made the change.</param>
            <param name="committer">The <see cref="T:LibGit2Sharp.Signature"/> of who added the change to the repository.</param>
            <param name="amendPreviousCommit">True to amend the current <see cref="M:LibGit2Sharp.IRepository.Commit(System.String,LibGit2Sharp.Signature,LibGit2Sharp.Signature,System.Boolean)"/> pointed at by <see cref="P:LibGit2Sharp.Repository.Head"/>, false otherwise.</param>
            <returns>The generated <see cref="M:LibGit2Sharp.IRepository.Commit(System.String,LibGit2Sharp.Signature,LibGit2Sharp.Signature,System.Boolean)"/>.</returns>
        </member>
        <member name="P:LibGit2Sharp.IRepository.Head">
            <summary>
              Shortcut to return the branch pointed to by HEAD
            </summary>
            <returns></returns>
        </member>
        <member name="P:LibGit2Sharp.IRepository.Config">
            <summary>
              Provides access to the configuration settings for this repository.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.IRepository.Index">
            <summary>
              Gets the index.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.IRepository.Refs">
            <summary>
              Lookup and enumerate references in the repository.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.IRepository.Remotes">
            <summary>
              Lookup and manage remotes in the repository.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.IRepository.Commits">
            <summary>
              Lookup and enumerate commits in the repository.
              Iterating this collection directly starts walking from the HEAD.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.IRepository.Branches">
            <summary>
              Lookup and enumerate branches in the repository.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.IRepository.Tags">
            <summary>
              Lookup and enumerate tags in the repository.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.IRepository.Info">
            <summary>
              Provides high level information about this repository.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.IRepository.Diff">
            <summary>
              Provides access to diffing functionalities to show changes between the working tree and the index or a tree, changes between the index and a tree, changes between two trees, or changes between two files on disk.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.Branch">
            <summary>
              A branch is a special kind of reference
            </summary>
        </member>
        <member name="T:LibGit2Sharp.ReferenceWrapper`1">
            <summary>
              A base class for things that wrap a <see cref="T:LibGit2Sharp.Reference"/> (branch, tag, etc).
            </summary>
            <typeparam name="TObject">The type of the referenced Git object.</typeparam>
        </member>
        <member name="F:LibGit2Sharp.ReferenceWrapper`1.repo">
            <summary>
              The repository.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.ReferenceWrapper`1.#ctor">
            <summary>
              Needed for mocking purposes.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.ReferenceWrapper`1.#ctor(LibGit2Sharp.Repository,LibGit2Sharp.Reference,System.Func{LibGit2Sharp.Reference,System.String})">
            <param name="repo">The repository.</param>
            <param name="reference">The reference.</param>
            <param name="canonicalNameSelector">A function to construct the reference's canonical name.</param>
        </member>
        <member name="M:LibGit2Sharp.ReferenceWrapper`1.ToString">
            <summary>
              Returns the <see cref="P:LibGit2Sharp.ReferenceWrapper`1.CanonicalName"/>, a <see cref="T:System.String"/> representation of the current reference.
            </summary>
            <returns>The <see cref="P:LibGit2Sharp.ReferenceWrapper`1.CanonicalName"/> that represents the current reference.</returns>
        </member>
        <member name="M:LibGit2Sharp.ReferenceWrapper`1.Shorten(System.String)">
            <summary>
              Returns the friendly shortened name from a canonical name.
            </summary>
            <param name="canonicalName">The canonical name to shorten.</param>
            <returns></returns>
        </member>
        <member name="M:LibGit2Sharp.ReferenceWrapper`1.Equals(LibGit2Sharp.ReferenceWrapper{`0})">
            <summary>
              Determines whether the specified <see cref="T:LibGit2Sharp.ReferenceWrapper`1"/> is equal to the current <see cref="T:LibGit2Sharp.ReferenceWrapper`1"/>.
            </summary>
            <param name="other">The <see cref="T:LibGit2Sharp.ReferenceWrapper`1"/> to compare with the current <see cref="T:LibGit2Sharp.ReferenceWrapper`1"/>.</param>
            <returns>True if the specified <see cref="T:LibGit2Sharp.ReferenceWrapper`1"/> is equal to the current <see cref="T:LibGit2Sharp.ReferenceWrapper`1"/>; otherwise, false.</returns>
        </member>
        <member name="M:LibGit2Sharp.ReferenceWrapper`1.Equals(System.Object)">
            <summary>
              Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:LibGit2Sharp.ReferenceWrapper`1"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:LibGit2Sharp.ReferenceWrapper`1"/>.</param>
            <returns>True if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:LibGit2Sharp.ReferenceWrapper`1"/>; otherwise, false.</returns>
        </member>
        <member name="M:LibGit2Sharp.ReferenceWrapper`1.GetHashCode">
            <summary>
              Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:LibGit2Sharp.ReferenceWrapper`1.op_Equality(LibGit2Sharp.ReferenceWrapper{`0},LibGit2Sharp.ReferenceWrapper{`0})">
            <summary>
              Tests if two <see cref="T:LibGit2Sharp.ReferenceWrapper`1"/> are equal.
            </summary>
            <param name="left">First <see cref="T:LibGit2Sharp.ReferenceWrapper`1"/> to compare.</param>
            <param name="right">Second <see cref="T:LibGit2Sharp.ReferenceWrapper`1"/> to compare.</param>
            <returns>True if the two objects are equal; false otherwise.</returns>
        </member>
        <member name="M:LibGit2Sharp.ReferenceWrapper`1.op_Inequality(LibGit2Sharp.ReferenceWrapper{`0},LibGit2Sharp.ReferenceWrapper{`0})">
            <summary>
              Tests if two <see cref="T:LibGit2Sharp.ReferenceWrapper`1"/> are different.
            </summary>
            <param name="left">First <see cref="T:LibGit2Sharp.ReferenceWrapper`1"/> to compare.</param>
            <param name="right">Second <see cref="T:LibGit2Sharp.ReferenceWrapper`1"/> to compare.</param>
            <returns>True if the two objects are different; false otherwise.</returns>
        </member>
        <member name="P:LibGit2Sharp.ReferenceWrapper`1.CanonicalName">
            <summary>
              Gets the full name of this reference.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.ReferenceWrapper`1.Name">
            <summary>
              Gets the name of this reference.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.ReferenceWrapper`1.TargetObject">
            <summary>
              Gets the <typeparamref name="TObject"/> this <see cref="T:LibGit2Sharp.ReferenceWrapper`1"/> points to.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Branch.#ctor">
            <summary>
              Needed for mocking purposes.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Branch.#ctor(LibGit2Sharp.Repository,LibGit2Sharp.Reference,System.String)">
            <summary>
              Initializes a new instance of the <see cref="T:LibGit2Sharp.Branch"/> class.
            </summary>
            <param name="repo">The repo.</param>
            <param name="reference">The reference.</param>
            <param name="canonicalName">The full name of the reference</param>
        </member>
        <member name="M:LibGit2Sharp.Branch.#ctor(LibGit2Sharp.Repository,LibGit2Sharp.Reference)">
            <summary>
              Initializes a new instance of an orphaned <see cref="T:LibGit2Sharp.Branch"/> class.
              <para>
                This <see cref="T:LibGit2Sharp.Branch"/> instance will point to no commit.
              </para>
            </summary>
            <param name="repo">The repo.</param>
            <param name="reference">The reference.</param>
        </member>
        <member name="M:LibGit2Sharp.Branch.Checkout">
            <summary>
              Checkout this branch.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Branch.Checkout(LibGit2Sharp.CheckoutOptions,LibGit2Sharp.Handlers.CheckoutProgressHandler)">
            <summary>
              Checkout this branch with a callback for progress reporting.
            </summary>
            <param name="checkoutOptions">Options controlling checkout behavior.</param>
            <param name="onCheckoutProgress">Callback method to report checkout progress updates through.</param>
        </member>
        <member name="M:LibGit2Sharp.Branch.Shorten(System.String)">
            <summary>
              Returns the friendly shortened name from a canonical name.
            </summary>
            <param name="canonicalName">The canonical name to shorten.</param>
            <returns></returns>
        </member>
        <member name="P:LibGit2Sharp.Branch.Item(System.String)">
            <summary>
              Gets the <see cref="T:LibGit2Sharp.TreeEntry"/> pointed at by the <paramref name="relativePath"/> in the <see cref="P:LibGit2Sharp.Branch.Tip"/>.
            </summary>
            <param name="relativePath">The relative path to the <see cref="T:LibGit2Sharp.TreeEntry"/> from the <see cref="P:LibGit2Sharp.Branch.Tip"/> working directory.</param>
            <returns><c>null</c> if nothing has been found, the <see cref="T:LibGit2Sharp.TreeEntry"/> otherwise.</returns>
        </member>
        <member name="P:LibGit2Sharp.Branch.IsRemote">
            <summary>
              Gets a value indicating whether this instance is a remote.
            </summary>
            <value>
              <c>true</c> if this instance is remote; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:LibGit2Sharp.Branch.TrackedBranch">
            <summary>
              Gets the remote branch which is connected to this local one, or null if there is none.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Branch.IsTracking">
            <summary>
              Determines if this local branch is connected to a remote one.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Branch.AheadBy">
            <summary>
              Gets the number of commits, starting from the <see cref="P:LibGit2Sharp.Branch.Tip"/>, that have been performed on this local branch and aren't known from the remote one.
              <para>
                This property will return null if there is no remote branch linked to this local branch, or if the remote branch and the local branch do
                not share a common ancestor.
              </para>
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Branch.BehindBy">
            <summary>
              Gets the number of commits that exist in the remote branch, on top of <see cref="P:LibGit2Sharp.Branch.Tip"/>, and aren't known from the local one.
              <para>
                This property will return null if there is no remote branch linked to this local branch, or if the remote branch and the local branch do
                not share a common ancestor.
              </para>
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Branch.IsCurrentRepositoryHead">
            <summary>
              Gets a value indicating whether this instance is current branch (HEAD) in the repository.
            </summary>
            <value>
              <c>true</c> if this instance is the current branch; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:LibGit2Sharp.Branch.Tip">
            <summary>
              Gets the <see cref="T:LibGit2Sharp.Commit"/> that this branch points to.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Branch.Commits">
            <summary>
              Gets the commits on this branch. (Starts walking from the References's target).
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Branch.Remote">
            <summary>
              Gets the configured <see cref="P:LibGit2Sharp.Branch.Remote"/> to fetch from and push to.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.ReferenceCollectionExtensions">
            <summary>
              Provides helper overloads to a <see cref="T:LibGit2Sharp.ReferenceCollection"/>.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.ReferenceCollectionExtensions.Add(LibGit2Sharp.ReferenceCollection,System.String,System.String,System.Boolean)">
            <summary>
              Creates a direct or symbolic reference with the specified name and target
            </summary>
            <param name="name">The name of the reference to create.</param>
            <param name="canonicalRefNameOrObjectish">The target which can be either the canonical name of a reference or a revparse spec.</param>
            <param name="allowOverwrite">True to allow silent overwriting a potentially existing reference, false otherwise.</param>
            <param name="refsColl">The <see cref="T:LibGit2Sharp.ReferenceCollection"/> being worked with.</param>
            <returns>A new <see cref="T:LibGit2Sharp.Reference"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.ReferenceCollectionExtensions.UpdateTarget(LibGit2Sharp.ReferenceCollection,LibGit2Sharp.Reference,System.String)">
            <summary>
              Updates the target of a direct reference.
            </summary>
            <param name="directRef">The direct reference which target should be updated.</param>
            <param name="objectish">The revparse spec of the target.</param>
            <param name="refsColl">The <see cref="T:LibGit2Sharp.ReferenceCollection"/> being worked with.</param>
        </member>
        <member name="M:LibGit2Sharp.ReferenceCollectionExtensions.Move(LibGit2Sharp.ReferenceCollection,System.String,System.String,System.Boolean)">
            <summary>
              Rename an existing reference with a new name
            </summary>
            <param name="currentName">The canonical name of the reference to rename.</param>
            <param name="newName">The new canonical name.</param>
            <param name="allowOverwrite">True to allow silent overwriting a potentially existing reference, false otherwise.</param>
            <param name="refsColl">The <see cref="T:LibGit2Sharp.ReferenceCollection"/> being worked with.</param>
            <returns>A new <see cref="T:LibGit2Sharp.Reference"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.ReferenceCollectionExtensions.UpdateTarget(LibGit2Sharp.ReferenceCollection,System.String,System.String)">
            <summary>
              Updates the target of a reference.
            </summary>
            <param name="name">The canonical name of the reference.</param>
            <param name="canonicalRefNameOrObjectish">The target which can be either the canonical name of a reference or a revparse spec.</param>
            <param name="refsColl">The <see cref="T:LibGit2Sharp.ReferenceCollection"/> being worked with.</param>
            <returns>A new <see cref="T:LibGit2Sharp.Reference"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.ReferenceCollectionExtensions.Remove(LibGit2Sharp.ReferenceCollection,System.String)">
            <summary>
              Delete a reference with the specified name
            </summary>
            <param name="refsColl">The <see cref="T:LibGit2Sharp.ReferenceCollection"/> being worked with.</param>
            <param name="name">The canonical name of the reference to delete.</param>
        </member>
        <member name="T:LibGit2Sharp.CheckoutOptions">
            <summary>
              Options controlling Checkout behavior.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.CheckoutOptions.None">
            <summary>
              No checkout flags - use default behavior.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.CheckoutOptions.Force">
            <summary>
              Proceed with checkout even if the index or the working tree differs from HEAD.
              This will throw away local changes.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.BareRepositoryException">
            <summary>
              The exception that is thrown when an operation which requires a
              working directory is performed against a bare repository.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.BareRepositoryException.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:LibGit2Sharp.BareRepositoryException"/> class.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.BareRepositoryException.#ctor(System.String)">
            <summary>
              Initializes a new instance of the <see cref="T:LibGit2Sharp.BareRepositoryException"/> class with a specified error message.
            </summary>
            <param name="message">A message that describes the error. </param>
        </member>
        <member name="M:LibGit2Sharp.BareRepositoryException.#ctor(System.String,System.Exception)">
            <summary>
              Initializes a new instance of the <see cref="T:LibGit2Sharp.BareRepositoryException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception. </param>
            <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException"/> parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:LibGit2Sharp.BareRepositoryException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
              Initializes a new instance of the <see cref="T:LibGit2Sharp.BareRepositoryException"/> class with a serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:LibGit2Sharp.ResetOptions">
            <summary>
              Specifies the kind of operation that <see cref="M:LibGit2Sharp.Repository.Reset(LibGit2Sharp.ResetOptions,System.String)"/> should perform.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.ResetOptions.Soft">
            <summary>
              Moves the branch pointed to by HEAD to the specified commit object.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.ResetOptions.Mixed">
            <summary>
              Moves the branch pointed to by HEAD to the specified commit object and resets the index
              to the tree recorded by the commit.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.ResetOptions.Hard">
            <summary>
              Moves the branch pointed to by HEAD to the specified commit object, resets the index
              to the tree recorded by the commit and updates the working directory to match the content
              of the index.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.ObjectId">
            <summary>
              Uniquely identifies a <see cref="T:LibGit2Sharp.GitObject"/>.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.ObjectId.HexSize">
            <summary>
              Size of the string-based representation of a SHA-1.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.ObjectId.Zero">
            <summary>
              Zero ObjectId
            </summary>
        </member>
        <member name="M:LibGit2Sharp.ObjectId.#ctor(LibGit2Sharp.Core.GitOid)">
            <summary>
              Initializes a new instance of the <see cref="T:LibGit2Sharp.ObjectId"/> class.
            </summary>
            <param name="oid">The oid.</param>
        </member>
        <member name="M:LibGit2Sharp.ObjectId.#ctor(System.Byte[])">
            <summary>
              Initializes a new instance of the <see cref="T:LibGit2Sharp.ObjectId"/> class.
            </summary>
            <param name="rawId">The byte array.</param>
        </member>
        <member name="M:LibGit2Sharp.ObjectId.#ctor(System.String)">
            <summary>
              Initializes a new instance of the <see cref="T:LibGit2Sharp.ObjectId"/> class.
            </summary>
            <param name="sha">The sha.</param>
        </member>
        <member name="M:LibGit2Sharp.ObjectId.TryParse(System.String,LibGit2Sharp.ObjectId@)">
            <summary>
              Converts the specified string representation of a Sha-1 to its <see cref="T:LibGit2Sharp.ObjectId"/> equivalent and returns a value that indicates whether the conversion succeeded.
            </summary>
            <param name="sha">A string containing a Sha-1 to convert. </param>
            <param name="result">When this method returns, contains the <see cref="T:LibGit2Sharp.ObjectId"/> value equivalent to the Sha-1 contained in <paramref name="sha"/>, if the conversion succeeded, or <code>null</code> if the conversion failed.</param>
            <returns>true if the <paramref name="sha"/> parameter was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:LibGit2Sharp.ObjectId.Equals(System.Object)">
            <summary>
              Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:LibGit2Sharp.ObjectId"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:LibGit2Sharp.ObjectId"/>.</param>
            <returns>True if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:LibGit2Sharp.ObjectId"/>; otherwise, false.</returns>
        </member>
        <member name="M:LibGit2Sharp.ObjectId.Equals(LibGit2Sharp.ObjectId)">
            <summary>
              Determines whether the specified <see cref="T:LibGit2Sharp.ObjectId"/> is equal to the current <see cref="T:LibGit2Sharp.ObjectId"/>.
            </summary>
            <param name="other">The <see cref="T:LibGit2Sharp.ObjectId"/> to compare with the current <see cref="T:LibGit2Sharp.ObjectId"/>.</param>
            <returns>True if the specified <see cref="T:LibGit2Sharp.ObjectId"/> is equal to the current <see cref="T:LibGit2Sharp.ObjectId"/>; otherwise, false.</returns>
        </member>
        <member name="M:LibGit2Sharp.ObjectId.GetHashCode">
            <summary>
              Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:LibGit2Sharp.ObjectId.ToString">
            <summary>
              Returns the <see cref="P:LibGit2Sharp.ObjectId.Sha"/>, a <see cref="T:System.String"/> representation of the current <see cref="T:LibGit2Sharp.ObjectId"/>.
            </summary>
            <returns>The <see cref="P:LibGit2Sharp.ObjectId.Sha"/> that represents the current <see cref="T:LibGit2Sharp.ObjectId"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.ObjectId.ToString(System.Int32)">
            <summary>
              Returns the <see cref="P:LibGit2Sharp.ObjectId.Sha"/>, a <see cref="T:System.String"/> representation of the current <see cref="T:LibGit2Sharp.ObjectId"/>.
            </summary>
            <param name="prefixLength">The number of chars the <see cref="P:LibGit2Sharp.ObjectId.Sha"/> should be truncated to.</param>
            <returns>The <see cref="P:LibGit2Sharp.ObjectId.Sha"/> that represents the current <see cref="T:LibGit2Sharp.ObjectId"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.ObjectId.op_Equality(LibGit2Sharp.ObjectId,LibGit2Sharp.ObjectId)">
            <summary>
              Tests if two <see cref="T:LibGit2Sharp.ObjectId"/> are equal.
            </summary>
            <param name="left">First <see cref="T:LibGit2Sharp.ObjectId"/> to compare.</param>
            <param name="right">Second <see cref="T:LibGit2Sharp.ObjectId"/> to compare.</param>
            <returns>True if the two objects are equal; false otherwise.</returns>
        </member>
        <member name="M:LibGit2Sharp.ObjectId.op_Inequality(LibGit2Sharp.ObjectId,LibGit2Sharp.ObjectId)">
            <summary>
              Tests if two <see cref="T:LibGit2Sharp.ObjectId"/> are different.
            </summary>
            <param name="left">First <see cref="T:LibGit2Sharp.ObjectId"/> to compare.</param>
            <param name="right">Second <see cref="T:LibGit2Sharp.ObjectId"/> to compare.</param>
            <returns>True if the two objects are different; false otherwise.</returns>
        </member>
        <member name="P:LibGit2Sharp.ObjectId.RawId">
            <summary>
              Gets the raw id.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.ObjectId.Sha">
            <summary>
              Gets the sha.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.LibGit2Exception">
            <summary>
              The exception that is thrown when an error occurs during application execution.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.LibGit2Exception.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:LibGit2Sharp.LibGit2Exception"/> class.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.LibGit2Exception.#ctor(System.String)">
            <summary>
              Initializes a new instance of the <see cref="T:LibGit2Sharp.LibGit2Exception"/> class with a specified error message.
            </summary>
            <param name="message">A message that describes the error. </param>
        </member>
        <member name="M:LibGit2Sharp.LibGit2Exception.#ctor(System.String,System.Exception)">
            <summary>
              Initializes a new instance of the <see cref="T:LibGit2Sharp.LibGit2Exception"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception. </param>
            <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException"/> parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="T:LibGit2Sharp.TransferCallbacks">
            <summary>
              Class to handle the mapping between libgit2 git_transfer_progress_callback function and 
              a corresponding <see cref="T:LibGit2Sharp.Handlers.TransferProgressHandler"/>. Generates a delegate that 
              wraps the <see cref="T:LibGit2Sharp.Handlers.TransferProgressHandler"/> delegate with a delegate that matches
              the git_transfer_progress_callback signature.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.TransferCallbacks.onTransferProgress">
            <summary>
              Managed delegate to be called in response to a git_transfer_progress_callback callback from libgit2.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.TransferCallbacks.#ctor(LibGit2Sharp.Handlers.TransferProgressHandler)">
            <summary>
              Constructor to set up the native callback given managed delegate.
            </summary>
            <param name="onTransferProgress">The <see cref="T:LibGit2Sharp.Handlers.TransferProgressHandler"/> delegate that the git_transfer_progress_callback will call.</param>
        </member>
        <member name="M:LibGit2Sharp.TransferCallbacks.GenerateCallback(LibGit2Sharp.Handlers.TransferProgressHandler)">
            <summary>
              Generates a delegate that matches the native git_transfer_progress_callback function's signature and wraps the <see cref="T:LibGit2Sharp.Handlers.TransferProgressHandler"/> delegate.
            </summary>
            <param name="onTransferProgress">The <see cref="T:LibGit2Sharp.Handlers.TransferProgressHandler"/> delegate to call in responde to a the native git_transfer_progress_callback callback.</param>
            <returns>A delegate method with a signature that matches git_transfer_progress_callback.</returns>
        </member>
        <member name="M:LibGit2Sharp.TransferCallbacks.OnGitTransferProgress(LibGit2Sharp.Core.GitTransferProgress@,System.IntPtr)">
            <summary>
              The delegate with the signature that matches the native git_transfer_progress_callback function's signature.
            </summary>
            <param name="progress"><see cref="T:LibGit2Sharp.Core.GitTransferProgress"/> structure containing progress information.</param>
            <param name="payload">Payload data.</param>
        </member>
        <member name="T:LibGit2Sharp.Signature">
            <summary>
              A signature
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Signature.#ctor(System.String,System.String,System.DateTimeOffset)">
            <summary>
              Initializes a new instance of the <see cref="T:LibGit2Sharp.Signature"/> class.
            </summary>
            <param name="name">The name.</param>
            <param name="email">The email.</param>
            <param name="when">The when.</param>
        </member>
        <member name="M:LibGit2Sharp.Signature.Equals(System.Object)">
            <summary>
              Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:LibGit2Sharp.Signature"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:LibGit2Sharp.Signature"/>.</param>
            <returns>True if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:LibGit2Sharp.Signature"/>; otherwise, false.</returns>
        </member>
        <member name="M:LibGit2Sharp.Signature.Equals(LibGit2Sharp.Signature)">
            <summary>
              Determines whether the specified <see cref="T:LibGit2Sharp.Signature"/> is equal to the current <see cref="T:LibGit2Sharp.Signature"/>.
            </summary>
            <param name="other">The <see cref="T:LibGit2Sharp.Signature"/> to compare with the current <see cref="T:LibGit2Sharp.Signature"/>.</param>
            <returns>True if the specified <see cref="T:LibGit2Sharp.Signature"/> is equal to the current <see cref="T:LibGit2Sharp.Signature"/>; otherwise, false.</returns>
        </member>
        <member name="M:LibGit2Sharp.Signature.GetHashCode">
            <summary>
              Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:LibGit2Sharp.Signature.op_Equality(LibGit2Sharp.Signature,LibGit2Sharp.Signature)">
            <summary>
              Tests if two <see cref="T:LibGit2Sharp.Signature"/> are equal.
            </summary>
            <param name="left">First <see cref="T:LibGit2Sharp.Signature"/> to compare.</param>
            <param name="right">Second <see cref="T:LibGit2Sharp.Signature"/> to compare.</param>
            <returns>True if the two objects are equal; false otherwise.</returns>
        </member>
        <member name="M:LibGit2Sharp.Signature.op_Inequality(LibGit2Sharp.Signature,LibGit2Sharp.Signature)">
            <summary>
              Tests if two <see cref="T:LibGit2Sharp.Signature"/> are different.
            </summary>
            <param name="left">First <see cref="T:LibGit2Sharp.Signature"/> to compare.</param>
            <param name="right">Second <see cref="T:LibGit2Sharp.Signature"/> to compare.</param>
            <returns>True if the two objects are different; false otherwise.</returns>
        </member>
        <member name="P:LibGit2Sharp.Signature.Name">
            <summary>
              Gets the name.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Signature.Email">
            <summary>
              Gets the email.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Signature.When">
            <summary>
              Gets the date when this signature happened.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.Filter">
            <summary>
              Criterias used to filter out and order the commits of the repository when querying its history.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Filter.#ctor">
            <summary>
              Initializes a new instance of <see cref="T:LibGit2Sharp.Filter"/>.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Filter.SortBy">
            <summary>
              The ordering stragtegy to use.
              <para>
                By default, the commits are shown in reverse chronological order.
              </para>
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Filter.Since">
            <summary>
              A pointer to a commit object or a list of pointers to consider as starting points.
              <para>
                Can be either a <see cref="T:System.String"/> containing the sha or reference canonical name to use, 
                a <see cref="T:LibGit2Sharp.Branch"/>, a <see cref="T:LibGit2Sharp.Reference"/>, a <see cref="T:LibGit2Sharp.Commit"/>, a <see cref="T:LibGit2Sharp.Tag"/>,
                a <see cref="T:LibGit2Sharp.TagAnnotation"/>, an <see cref="T:LibGit2Sharp.ObjectId"/> or even a mixed collection of all of the above.
                By default, the <see cref="P:LibGit2Sharp.Repository.Head"/> will be used as boundary.
              </para>
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Filter.Until">
            <summary>
              A pointer to a commit object or a list of pointers which will be excluded (along with ancestors) from the enumeration.
              <para>
                Can be either a <see cref="T:System.String"/> containing the sha or reference canonical name to use, 
                a <see cref="T:LibGit2Sharp.Branch"/>, a <see cref="T:LibGit2Sharp.Reference"/>, a <see cref="T:LibGit2Sharp.Commit"/>, a <see cref="T:LibGit2Sharp.Tag"/>,
                a <see cref="T:LibGit2Sharp.TagAnnotation"/>, an <see cref="T:LibGit2Sharp.ObjectId"/> or even a mixed collection of all of the above.
              </para>
            </summary>
        </member>
        <member name="T:LibGit2Sharp.ConfigurationLevel">
            <summary>
              Specifies the level of configuration to use.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.ConfigurationLevel.Local">
            <summary>
              The local .git/config of the current repository.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.ConfigurationLevel.Global">
            <summary>
              The global ~/.gitconfig of the current user.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.ConfigurationLevel.XDG">
            <summary>
            The global ~/.config/git/config of the current user
            </summary>
        </member>
        <member name="F:LibGit2Sharp.ConfigurationLevel.System">
            <summary>
              The system wide .gitconfig.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.TagCollectionExtensions">
            <summary>
              Provides helper overloads to a <see cref="T:LibGit2Sharp.TagCollection"/>.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.TagCollectionExtensions.Add(LibGit2Sharp.TagCollection,System.String,System.String,LibGit2Sharp.Signature,System.String,System.Boolean)">
            <summary>
              Creates an annotated tag with the specified name.
            </summary>
            <param name="name">The name.</param>
            <param name="objectish">Revparse spec for the target object.</param>
            <param name="tagger">The tagger.</param>
            <param name="message">The message.</param>
            <param name="allowOverwrite">True to allow silent overwriting a potentially existing tag, false otherwise.</param>
            <param name="tags">The <see cref="T:LibGit2Sharp.TagCollection"/> being worked with.</param>
        </member>
        <member name="M:LibGit2Sharp.TagCollectionExtensions.Add(LibGit2Sharp.TagCollection,System.String,System.String,System.Boolean)">
            <summary>
              Creates a lightweight tag with the specified name.
            </summary>
            <param name="name">The name.</param>
            <param name="objectish">Revparse spec for the target object.</param>
            <param name="allowOverwrite">True to allow silent overwriting a potentially existing tag, false otherwise.</param>
            <param name="tags">The <see cref="T:LibGit2Sharp.TagCollection"/> being worked with.</param>
        </member>
        <member name="M:LibGit2Sharp.TagCollectionExtensions.Remove(LibGit2Sharp.TagCollection,System.String)">
            <summary>
              Deletes the tag with the specified name.
            </summary>
            <param name="name">The short or canonical name of the tag to delete.</param>
            <param name="tags">The <see cref="T:LibGit2Sharp.TagCollection"/> being worked with.</param>
        </member>
        <member name="T:LibGit2Sharp.RemoteCompletionType">
            <summary>
              git_remote_completion types.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.RemoteCompletionType.Download">
            <summary>
              Download.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.RemoteCompletionType.Indexing">
            <summary>
              Indexing.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.RemoteCompletionType.Error">
            <summary>
              Error.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.ConfigurationEntry">
            <summary>
            An enumerated configuration entry.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.ConfigurationEntry.#ctor(System.String,System.String,LibGit2Sharp.ConfigurationLevel)">
            <summary>
            Initializes a new instance of the <see cref="T:LibGit2Sharp.ConfigurationEntry"/> class with a given key and value
            </summary>
            <param name="key">The option name</param>
            <param name="value">The option value, as a string</param>
            <param name="level">The origin store</param>
        </member>
        <member name="P:LibGit2Sharp.ConfigurationEntry.Key">
            <summary>
            The option name.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.ConfigurationEntry.Value">
            <summary>
            The option value.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.ConfigurationEntry.Level">
            <summary>
            The origin store.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.DirectReference">
            <summary>
              A DirectReference points directly to a <see cref="T:LibGit2Sharp.GitObject"/>
            </summary>
        </member>
        <member name="T:LibGit2Sharp.Reference">
            <summary>
              A Reference to another git object
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Reference.ResolveToDirectReference">
            <summary>
              Recursively peels the target of the reference until a direct reference is encountered.
            </summary>
            <returns>The <see cref="T:LibGit2Sharp.DirectReference"/> this <see cref="T:LibGit2Sharp.Reference"/> points to.</returns>
        </member>
        <member name="M:LibGit2Sharp.Reference.Equals(System.Object)">
            <summary>
              Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:LibGit2Sharp.Reference"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:LibGit2Sharp.Reference"/>.</param>
            <returns>True if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:LibGit2Sharp.Reference"/>; otherwise, false.</returns>
        </member>
        <member name="M:LibGit2Sharp.Reference.Equals(LibGit2Sharp.Reference)">
            <summary>
              Determines whether the specified <see cref="T:LibGit2Sharp.Reference"/> is equal to the current <see cref="T:LibGit2Sharp.Reference"/>.
            </summary>
            <param name="other">The <see cref="T:LibGit2Sharp.Reference"/> to compare with the current <see cref="T:LibGit2Sharp.Reference"/>.</param>
            <returns>True if the specified <see cref="T:LibGit2Sharp.Reference"/> is equal to the current <see cref="T:LibGit2Sharp.Reference"/>; otherwise, false.</returns>
        </member>
        <member name="M:LibGit2Sharp.Reference.GetHashCode">
            <summary>
              Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:LibGit2Sharp.Reference.op_Equality(LibGit2Sharp.Reference,LibGit2Sharp.Reference)">
            <summary>
              Tests if two <see cref="T:LibGit2Sharp.Reference"/> are equal.
            </summary>
            <param name="left">First <see cref="T:LibGit2Sharp.Reference"/> to compare.</param>
            <param name="right">Second <see cref="T:LibGit2Sharp.Reference"/> to compare.</param>
            <returns>True if the two objects are equal; false otherwise.</returns>
        </member>
        <member name="M:LibGit2Sharp.Reference.op_Inequality(LibGit2Sharp.Reference,LibGit2Sharp.Reference)">
            <summary>
              Tests if two <see cref="T:LibGit2Sharp.Reference"/> are different.
            </summary>
            <param name="left">First <see cref="T:LibGit2Sharp.Reference"/> to compare.</param>
            <param name="right">Second <see cref="T:LibGit2Sharp.Reference"/> to compare.</param>
            <returns>True if the two objects are different; false otherwise.</returns>
        </member>
        <member name="M:LibGit2Sharp.Reference.ToString">
            <summary>
              Returns the <see cref="P:LibGit2Sharp.Reference.CanonicalName"/>, a <see cref="T:System.String"/> representation of the current <see cref="T:LibGit2Sharp.Reference"/>.
            </summary>
            <returns>The <see cref="P:LibGit2Sharp.Reference.CanonicalName"/> that represents the current <see cref="T:LibGit2Sharp.Reference"/>.</returns>
        </member>
        <member name="P:LibGit2Sharp.Reference.CanonicalName">
            <summary>
              Gets the full name of this reference.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Reference.TargetIdentifier">
            <summary>
              Gets the target declared by the reference.
              <para>
                If this reference is a <see cref="T:LibGit2Sharp.SymbolicReference"/>, returns the canonical name of the target.
                Otherwise, if this reference is a <see cref="T:LibGit2Sharp.DirectReference"/>, returns the sha of the target.
              </para>
            </summary>
        </member>
        <member name="M:LibGit2Sharp.DirectReference.#ctor">
            <summary>
              Needed for mocking purposes.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.DirectReference.ResolveToDirectReference">
            <summary>
              As a <see cref="T:LibGit2Sharp.DirectReference"/> is already peeled, invoking this will return the same <see cref="T:LibGit2Sharp.DirectReference"/>.
            </summary>
            <returns>This instance.</returns>
        </member>
        <member name="P:LibGit2Sharp.DirectReference.Target">
            <summary>
              Gets the target of this <see cref="T:LibGit2Sharp.DirectReference"/>
            </summary>
        </member>
        <member name="T:LibGit2Sharp.Remote">
            <summary>
              A remote repository whose branches are tracked.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Remote.#ctor">
            <summary>
              Needed for mocking purposes.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Remote.Fetch(LibGit2Sharp.TagFetchMode,LibGit2Sharp.Handlers.ProgressHandler,LibGit2Sharp.Handlers.CompletionHandler,LibGit2Sharp.Handlers.UpdateTipsHandler,LibGit2Sharp.Handlers.TransferProgressHandler)">
            <summary>
              Fetch from the <see cref="T:LibGit2Sharp.Remote"/>.
            </summary>
            <param name="tagFetchMode">Optional parameter indicating what tags to download.</param>
            <param name="onProgress">Progress callback. Corresponds to libgit2 progress callback.</param>
            <param name="onCompletion">Completion callback. Corresponds to libgit2 completion callback.</param>
            <param name="onUpdateTips">UpdateTips callback. Corresponds to libgit2 update_tips callback.</param>
            <param name="onTransferProgress">Callback method that transfer progress will be reported through.
              Reports the client's state regarding the received and processed (bytes, objects) from the server.</param>
        </member>
        <member name="M:LibGit2Sharp.Remote.Equals(System.Object)">
            <summary>
              Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:LibGit2Sharp.Remote"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:LibGit2Sharp.Remote"/>.</param>
            <returns>True if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:LibGit2Sharp.Remote"/>; otherwise, false.</returns>
        </member>
        <member name="M:LibGit2Sharp.Remote.Equals(LibGit2Sharp.Remote)">
            <summary>
              Determines whether the specified <see cref="T:LibGit2Sharp.Remote"/> is equal to the current <see cref="T:LibGit2Sharp.Remote"/>.
            </summary>
            <param name="other">The <see cref="T:LibGit2Sharp.Remote"/> to compare with the current <see cref="T:LibGit2Sharp.Remote"/>.</param>
            <returns>True if the specified <see cref="T:LibGit2Sharp.Remote"/> is equal to the current <see cref="T:LibGit2Sharp.Remote"/>; otherwise, false.</returns>
        </member>
        <member name="M:LibGit2Sharp.Remote.GetHashCode">
            <summary>
              Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:LibGit2Sharp.Remote.op_Equality(LibGit2Sharp.Remote,LibGit2Sharp.Remote)">
            <summary>
              Tests if two <see cref="T:LibGit2Sharp.Remote"/> are equal.
            </summary>
            <param name="left">First <see cref="T:LibGit2Sharp.Remote"/> to compare.</param>
            <param name="right">Second <see cref="T:LibGit2Sharp.Remote"/> to compare.</param>
            <returns>True if the two objects are equal; false otherwise.</returns>
        </member>
        <member name="M:LibGit2Sharp.Remote.op_Inequality(LibGit2Sharp.Remote,LibGit2Sharp.Remote)">
            <summary>
              Tests if two <see cref="T:LibGit2Sharp.Remote"/> are different.
            </summary>
            <param name="left">First <see cref="T:LibGit2Sharp.Remote"/> to compare.</param>
            <param name="right">Second <see cref="T:LibGit2Sharp.Remote"/> to compare.</param>
            <returns>True if the two objects are different; false otherwise.</returns>
        </member>
        <member name="P:LibGit2Sharp.Remote.Name">
            <summary>
              Gets the alias of this remote repository.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Remote.Url">
            <summary>
              Gets the url to use to communicate with this remote repository.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.FileStatus">
            <summary>
              Calculated status of a filepath in the working directory considering the current <see cref="P:LibGit2Sharp.Repository.Index"/> and the <see cref="P:LibGit2Sharp.Repository.Head"/>.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.FileStatus.Nonexistent">
            <summary>
              The file doesn't exist.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.FileStatus.Unaltered">
            <summary>
              The file hasn't been modified.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.FileStatus.Added">
            <summary>
              New file has been added to the Index. It's unknown from the Head.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.FileStatus.Staged">
            <summary>
              New version of a file has been added to the Index. A previous version exists in the Head.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.FileStatus.Removed">
            <summary>
              The deletion of a file has been promoted from the working directory to the Index. A previous version exists in the Head.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.FileStatus.Renamed">
            <summary>
              The renaming of a file has been promoted from the working directory to the Index. A previous version exists in the Head.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.FileStatus.StagedTypeChange">
            <summary>
              A change in type for a file has been promoted from the working directory to the Index. A previous version exists in the Head.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.FileStatus.Untracked">
            <summary>
              New file in the working directory, unknown from the Index and the Head.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.FileStatus.Modified">
            <summary>
              The file has been updated in the working directory. A previous version exists in the Index.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.FileStatus.Missing">
            <summary>
              The file has been deleted from the working directory. A previous version exists in the Index.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.FileStatus.TypeChanged">
            <summary>
              The file type has been changed in the working directory. A previous version exists in the Index.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.FileStatus.Ignored">
            <summary>
              The file is <see cref="F:LibGit2Sharp.FileStatus.Untracked"/> but its name and/or path matches an exclude pattern in a <c>gitignore</c> file.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.TreeEntryChanges">
            <summary>
              Holds the changes between two versions of a tree entry.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.TreeEntryChanges.#ctor">
            <summary>
              Needed for mocking purposes. 
            </summary>
        </member>
        <member name="P:LibGit2Sharp.TreeEntryChanges.Path">
            <summary>
              The new path.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.TreeEntryChanges.Mode">
            <summary>
              The new <see cref="P:LibGit2Sharp.TreeEntryChanges.Mode"/>.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.TreeEntryChanges.Oid">
            <summary>
              The new content hash.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.TreeEntryChanges.Status">
            <summary>
              The kind of change that has been done (added, deleted, modified ...).
            </summary>
        </member>
        <member name="P:LibGit2Sharp.TreeEntryChanges.OldPath">
            <summary>
              The old path.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.TreeEntryChanges.OldMode">
            <summary>
              The old <see cref="P:LibGit2Sharp.TreeEntryChanges.Mode"/>.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.TreeEntryChanges.OldOid">
            <summary>
              The old content hash.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.TagFetchMode">
            <summary>
              Describe the expected tag retrieval behavior
              when a fetch operation is being performed.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.TagFetchMode.None">
            <summary>
              No tag will be retrieved.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.TagFetchMode.Auto">
            <summary>
              Default behavior. Will automatically retrieve tags that
              point to objects retrieved during this fetch.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.TagFetchMode.All">
            <summary>
              All tags will be downloaded, but _only_ tags, along with
              all the objects these tags are pointing to.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.Note">
            <summary>
              A note, attached to a given <see cref="T:LibGit2Sharp.GitObject"/>.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Note.#ctor">
            <summary>
              Needed for mocking purposes.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Note.Equals(System.Object)">
            <summary>
              Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:LibGit2Sharp.Note"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:LibGit2Sharp.Note"/>.</param>
            <returns>True if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:LibGit2Sharp.Note"/>; otherwise, false.</returns>
        </member>
        <member name="M:LibGit2Sharp.Note.Equals(LibGit2Sharp.Note)">
            <summary>
              Determines whether the specified <see cref="T:LibGit2Sharp.Note"/> is equal to the current <see cref="T:LibGit2Sharp.Note"/>.
            </summary>
            <param name="other">The <see cref="T:LibGit2Sharp.Note"/> to compare with the current <see cref="T:LibGit2Sharp.Note"/>.</param>
            <returns>True if the specified <see cref="T:LibGit2Sharp.Note"/> is equal to the current <see cref="T:LibGit2Sharp.Note"/>; otherwise, false.</returns>
        </member>
        <member name="M:LibGit2Sharp.Note.GetHashCode">
            <summary>
              Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:LibGit2Sharp.Note.op_Equality(LibGit2Sharp.Note,LibGit2Sharp.Note)">
            <summary>
              Tests if two <see cref="T:LibGit2Sharp.Note"/> are equal.
            </summary>
            <param name="left">First <see cref="T:LibGit2Sharp.Note"/> to compare.</param>
            <param name="right">Second <see cref="T:LibGit2Sharp.Note"/> to compare.</param>
            <returns>True if the two objects are equal; false otherwise.</returns>
        </member>
        <member name="M:LibGit2Sharp.Note.op_Inequality(LibGit2Sharp.Note,LibGit2Sharp.Note)">
            <summary>
              Tests if two <see cref="T:LibGit2Sharp.Note"/> are different.
            </summary>
            <param name="left">First <see cref="T:LibGit2Sharp.Note"/> to compare.</param>
            <param name="right">Second <see cref="T:LibGit2Sharp.Note"/> to compare.</param>
            <returns>True if the two objects are different; false otherwise.</returns>
        </member>
        <member name="P:LibGit2Sharp.Note.BlobId">
            <summary>
              The <see cref="T:LibGit2Sharp.ObjectId"/> of the blob containing the note message.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Note.Message">
            <summary>
              The message.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Note.Namespace">
            <summary>
              The namespace with which this note is associated.
              <para>This is the abbreviated namespace (e.g.: commits), and not the canonical namespace (e.g.: refs/notes/commits).</para>
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Note.TargetObjectId">
            <summary>
              The <see cref="T:LibGit2Sharp.ObjectId"/> of the target object.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.Tag">
            <summary>
              A Tag
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Tag.#ctor">
            <summary>
              Needed for mocking purposes.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Tag.Shorten(System.String)">
            <summary>
              Returns the friendly shortened name from a canonical name.
            </summary>
            <param name="canonicalName">The canonical name to shorten.</param>
            <returns></returns>
        </member>
        <member name="P:LibGit2Sharp.Tag.Annotation">
            <summary>
              Gets the optional information associated to this tag.
              <para>When the <see cref="T:LibGit2Sharp.Tag"/> is a lightweight tag, <c>null</c> is returned.</para>
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Tag.Target">
            <summary>
              Gets the <see cref="T:LibGit2Sharp.GitObject"/> that this tag points to.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Tag.IsAnnotated">
            <summary>
              Indicates whether the tag holds any metadata.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.RemoteCollection">
            <summary>
              The collection of <see cref="T:LibGit2Sharp.Remote"/> in a <see cref="T:LibGit2Sharp.Repository"/>
            </summary>
        </member>
        <member name="M:LibGit2Sharp.RemoteCollection.#ctor">
            <summary>
              Needed for mocking purposes.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.RemoteCollection.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:LibGit2Sharp.RemoteCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:LibGit2Sharp.RemoteCollection.Add(System.String,System.String)">
            <summary>
              Creates a <see cref="T:LibGit2Sharp.Remote"/> with the specified name and for the repository at the specified location.
              <para>
                A default fetch refspec will be added for this remote.
              </para>
            </summary>
            <param name="name">The name of the remote to create.</param>
            <param name="url">The location of the repository.</param>
            <returns>A new <see cref="T:LibGit2Sharp.Remote"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.RemoteCollection.Create(System.String,System.String)">
            <summary>
              Creates a <see cref="T:LibGit2Sharp.Remote"/> with the specified name and for the repository at the specified location.
              <para>
                A default fetch refspec will be added for this remote.
              </para>
            </summary>
            <param name="name">The name of the remote to create.</param>
            <param name="url">The location of the repository.</param>
            <returns>A new <see cref="T:LibGit2Sharp.Remote"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.RemoteCollection.Add(System.String,System.String,System.String)">
            <summary>
              Creates a <see cref="T:LibGit2Sharp.Remote"/> with the specified name and for the repository at the specified location.
            </summary>
            <param name="name">The name of the remote to create.</param>
            <param name="url">The location of the repository.</param>
            <param name="fetchRefSpec">The refSpec to be used when fetching from this remote..</param>
            <returns>A new <see cref="T:LibGit2Sharp.Remote"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.RemoteCollection.Create(System.String,System.String,System.String)">
            <summary>
              Creates a <see cref="T:LibGit2Sharp.Remote"/> with the specified name and for the repository at the specified location.
            </summary>
            <param name="name">The name of the remote to create.</param>
            <param name="url">The location of the repository.</param>
            <param name="fetchRefSpec">The refSpec to be used when fetching from this remote..</param>
            <returns>A new <see cref="T:LibGit2Sharp.Remote"/>.</returns>
        </member>
        <member name="P:LibGit2Sharp.RemoteCollection.Item(System.String)">
            <summary>
              Gets the <see cref="T:LibGit2Sharp.Remote"/> with the specified name.
            </summary>
            <param name="name">The name of the remote to retrieve.</param>
            <returns>The retrived <see cref="T:LibGit2Sharp.Remote"/> if it has been found, null otherwise.</returns>
        </member>
        <member name="T:LibGit2Sharp.Mode">
            <summary>
              Git specific modes for entries.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Mode.Nonexistent">
            <summary>
              000000 file mode (the entry doesn't exist)
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Mode.Directory">
            <summary>
              040000 file mode
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Mode.NonExecutableFile">
            <summary>
              100644 file mode
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Mode.NonExecutableGroupWritableFile">
            <summary>
              Obsolete 100664 file mode.
              <para>0100664 mode is an early Git design mistake. It's kept for
                ascendant compatibility as some <see cref="T:LibGit2Sharp.Tree"/> and
                <see cref="P:LibGit2Sharp.Repository.Index"/> entries may still bear
                this mode in some old git repositories, but it's now deprecated.
              </para>
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Mode.ExecutableFile">
            <summary>
              100755 file mode
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Mode.SymbolicLink">
            <summary>
              120000 file mode
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Mode.GitLink">
            <summary>
              160000 file mode
            </summary>
        </member>
        <member name="T:LibGit2Sharp.TransferProgress">
            <summary>
              Expose progress values from a fetch operation.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.TransferProgress.#ctor">
            <summary>
              Empty constructor.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.TransferProgress.#ctor(LibGit2Sharp.Core.GitTransferProgress)">
            <summary>
              Constructor.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.TransferProgress.TotalObjects">
            <summary>
              Total number of objects.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.TransferProgress.IndexedObjects">
            <summary>
              Number of objects indexed.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.TransferProgress.ReceivedObjects">
            <summary>
              Number of objects received.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.TransferProgress.ReceivedBytes">
            <summary>
              Number of bytes received.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.DiffTarget">
            <summary>
              The target of a Tree based diff comparison.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.DiffTarget.WorkingDirectory">
            <summary>
              The working directory.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.DiffTarget.Index">
            <summary>
              The repository index.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.DiffTarget.BothWorkingDirectoryAndIndex">
            <summary>
              Both the working directory and the repository index.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.RemoteCallbacks">
            <summary>
              Class to translate libgit2 callbacks into delegates exposed by LibGit2Sharp.
              Handles generating libgit2 git_remote_callbacks datastructure given a set
              of LibGit2Sharp delegates and handles propagating libgit2 callbacks into
              corresponding LibGit2Sharp exposed delegates.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.RemoteCallbacks.Progress">
            <summary>
              Progress callback. Corresponds to libgit2 progress callback.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.RemoteCallbacks.UpdateTips">
            <summary>
              UpdateTips callback. Corresponds to libgit2 update_tips callback.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.RemoteCallbacks.Completion">
            <summary>
              Completion callback. Corresponds to libgit2 Completion callback.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.RemoteCallbacks.GitProgressHandler(System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
              Handler for libgit2 Progress callback. Converts values
              received from libgit2 callback to more suitable types
              and calls delegate provided by LibGit2Sharp consumer.
            </summary>
            <param name="str">IntPtr to string from libgit2</param>
            <param name="len">length of string</param>
            <param name="data"></param>
        </member>
        <member name="M:LibGit2Sharp.RemoteCallbacks.GitUpdateTipsHandler(System.IntPtr,LibGit2Sharp.Core.GitOid@,LibGit2Sharp.Core.GitOid@,System.IntPtr)">
            <summary>
              Handler for libgit2 update_tips callback. Converts values
              received from libgit2 callback to more suitable types
              and calls delegate provided by LibGit2Sharp consumer.
            </summary>
            <param name="str">IntPtr to string</param>
            <param name="oldId">Old reference ID</param>
            <param name="newId">New referene ID</param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:LibGit2Sharp.RemoteCallbacks.GitCompletionHandler(LibGit2Sharp.RemoteCompletionType,System.IntPtr)">
            <summary>
              Handler for libgit2 completion callback. Converts values
              received from libgit2 callback to more suitable types
              and calls delegate provided by LibGit2Sharp consumer.
            </summary>
            <param name="remoteCompletionType"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:LibGit2Sharp.Core.GitRemoteCallbacks">
            <summary>
              Structure for git_remote_callbacks
            </summary>
        </member>
        <member name="T:LibGit2Sharp.Diff">
            <summary>
              Show changes between the working tree and the index or a tree, changes between the index and a tree, changes between two trees, or changes between two files on disk.
              <para>
                Copied and renamed files currently cannot be detected, as the feature is not supported by libgit2 yet.
                These files will be shown as a pair of Deleted/Added files.</para>
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Diff.#ctor">
            <summary>
              Needed for mocking purposes.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Diff.Compare(LibGit2Sharp.Tree,LibGit2Sharp.Tree,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
              Show changes between two <see cref="T:LibGit2Sharp.Tree"/>s.
            </summary>
            <param name="oldTree">The <see cref="T:LibGit2Sharp.Tree"/> you want to compare from.</param>
            <param name="newTree">The <see cref="T:LibGit2Sharp.Tree"/> you want to compare to.</param>
            <param name="paths">The list of paths (either files or directories) that should be compared.</param>
            <returns>A <see cref="T:LibGit2Sharp.TreeChanges"/> containing the changes between the <paramref name="oldTree"/> and the <paramref name="newTree"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.Diff.Compare(LibGit2Sharp.Blob,LibGit2Sharp.Blob)">
            <summary>
              Show changes between two <see cref="T:LibGit2Sharp.Blob"/>s.
            </summary>
            <param name="oldBlob">The <see cref="T:LibGit2Sharp.Blob"/> you want to compare from.</param>
            <param name="newBlob">The <see cref="T:LibGit2Sharp.Blob"/> you want to compare to.</param>
            <returns>A <see cref="T:LibGit2Sharp.ContentChanges"/> containing the changes between the <paramref name="oldBlob"/> and the <paramref name="newBlob"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.Diff.Compare(LibGit2Sharp.Tree,LibGit2Sharp.DiffTarget,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
              Show changes between a <see cref="T:LibGit2Sharp.Tree"/> and a selectable target.
            </summary>
            <param name="oldTree">The <see cref="T:LibGit2Sharp.Tree"/> to compare from.</param>
            <param name="diffTarget">The target to compare to.</param>
            <param name="paths">The list of paths (either files or directories) that should be compared.</param>
            <returns>A <see cref="T:LibGit2Sharp.TreeChanges"/> containing the changes between the <see cref="T:LibGit2Sharp.Tree"/> and the selected target.</returns>
        </member>
        <member name="M:LibGit2Sharp.Diff.Compare(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
              Show changes between the working directory and the index.
            </summary>
            <param name="paths">The list of paths (either files or directories) that should be compared.</param>
            <returns>A <see cref="T:LibGit2Sharp.TreeChanges"/> containing the changes between the working directory and the index.</returns>
        </member>
        <member name="T:LibGit2Sharp.Configuration">
            <summary>
              Provides access to configuration variables for a repository.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Configuration.#ctor">
            <summary>
              Needed for mocking purposes.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Configuration.#ctor(System.String,System.String)">
            <summary>
              Access configuration values without a repository. Generally you want to access configuration via an instance of <see cref="T:LibGit2Sharp.Repository"/> instead.
            </summary>
            <param name="globalConfigurationFileLocation">Path to a Global configuration file. If null, the default path for a global configuration file will be probed.</param>
            <param name="systemConfigurationFileLocation">Path to a System configuration file. If null, the default path for a system configuration file will be probed.</param>
        </member>
        <member name="M:LibGit2Sharp.Configuration.Dispose">
            <summary>
              Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
              Saves any open configuration files.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Configuration.Unset(System.String,LibGit2Sharp.ConfigurationLevel)">
            <summary>
              Unset a configuration variable (key and value).
            </summary>
            <param name = "key">The key to unset.</param>
            <param name = "level">The configuration file which should be considered as the target of this operation</param>
        </member>
        <member name="M:LibGit2Sharp.Configuration.Delete(System.String,LibGit2Sharp.ConfigurationLevel)">
            <summary>
              Delete a configuration variable (key and value).
            </summary>
            <param name = "key">The key to delete.</param>
            <param name = "level">The configuration file which should be considered as the target of this operation</param>
        </member>
        <member name="M:LibGit2Sharp.Configuration.Dispose(System.Boolean)">
            <summary>
              Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Configuration.Get``1(System.String,``0)">
            <summary>
              Get a configuration value for a key. Keys are in the form 'section.name'.
              <para>
                For example in  order to get the value for this in a .git\config file:
            
                <code>
                [core]
                bare = true
                </code>
            
                You would call:
            
                <code>
                bool isBare = repo.Config.Get&lt;bool&gt;("core.bare", false);
                </code>
              </para>
            </summary>
            <typeparam name = "T">The configuration value type</typeparam>
            <param name = "key">The key</param>
            <param name = "defaultValue">The default value</param>
            <returns>The configuration value, or <c>defaultValue</c> if not set</returns>
        </member>
        <member name="M:LibGit2Sharp.Configuration.Get``1(System.String,System.String,``0)">
            <summary>
              Get a configuration value for a key. Keys are in the form 'section.name'.
              <para>
                For example in  order to get the value for this in a .git\config file:
            
                <code>
                [core]
                bare = true
                </code>
            
                You would call:
            
                <code>
                bool isBare = repo.Config.Get&lt;bool&gt;("core", "bare", false);
                </code>
              </para>
            </summary>
            <typeparam name = "T">The configuration value type</typeparam>
            <param name = "firstKeyPart">The first key part</param>
            <param name = "secondKeyPart">The second key part</param>
            <param name = "defaultValue">The default value</param>
            <returns>The configuration value, or <c>defaultValue</c> if not set</returns>
        </member>
        <member name="M:LibGit2Sharp.Configuration.Get``1(System.String,System.String,System.String,``0)">
             <summary>
               Get a configuration value for the given key parts.
               <para>
                 For example in order to get the value for this in a .git\config file:
            
                 <code>
                 [difftool "kdiff3"]
                   path = c:/Program Files/KDiff3/kdiff3.exe
                 </code>
            
                 You would call:
            
                 <code>
                 string where = repo.Config.Get&lt;string&gt;("difftool", "kdiff3", "path", null);
                 </code>
               </para>
             </summary>
             <typeparam name = "T">The configuration value type</typeparam>
             <param name = "firstKeyPart">The first key part</param>
             <param name = "secondKeyPart">The second key part</param>
             <param name = "thirdKeyPart">The third key part</param>
             <param name = "defaultValue">The default value</param>
             <returns>The configuration value, or <c>defaultValue</c> if not set</returns>
        </member>
        <member name="M:LibGit2Sharp.Configuration.Get``1(System.String[],``0)">
             <summary>
               Get a configuration value for the given key parts.
               <para>
                 For example in order to get the value for this in a .git\config file:
            
                 <code>
                 [core]
                 bare = true
                 </code>
            
                 You would call:
            
                 <code>
                 bool isBare = repo.Config.Get&lt;bool&gt;(new []{ "core", "bare" }, false);
                 </code>
               </para>
             </summary>
             <typeparam name = "T">The configuration value type</typeparam>
             <param name = "keyParts">The key parts</param>
             <param name = "defaultValue">The default value</param>
             <returns>The configuration value, or <c>defaultValue</c> if not set</returns>
        </member>
        <member name="M:LibGit2Sharp.Configuration.Set``1(System.String,``0,LibGit2Sharp.ConfigurationLevel)">
            <summary>
              Set a configuration value for a key. Keys are in the form 'section.name'.
              <para>
                For example in order to set the value for this in a .git\config file:
              
                [test]
                boolsetting = true
              
                You would call:
              
                repo.Config.Set("test.boolsetting", true);
              </para>
            </summary>
            <typeparam name = "T">The configuration value type</typeparam>
            <param name = "key">The key parts</param>
            <param name = "value">The default value</param>
            <param name = "level">The configuration file which should be considered as the target of this operation</param>
        </member>
        <member name="P:LibGit2Sharp.Configuration.HasLocalConfig">
            <summary>
              Determines if there is a local repository level Git configuration file.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Configuration.HasGlobalConfig">
            <summary>
              Determines if a Git configuration file specific to the current interactive user has been found.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Configuration.HasSystemConfig">
            <summary>
              Determines if a system-wide Git configuration file has been found.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.BlobExtensions">
            <summary>
              Provides helper overloads to a <see cref="T:LibGit2Sharp.Blob"/>.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.BlobExtensions.ContentAsUtf8(LibGit2Sharp.Blob)">
            <summary>
              Gets the blob content decoded as UTF-8.
            </summary>
            <param name="blob">The blob for which the content will be returned.</param>
            <returns>Blob content as UTF-8</returns>
        </member>
        <member name="M:LibGit2Sharp.BlobExtensions.ContentAsUnicode(LibGit2Sharp.Blob)">
            <summary>
              Gets the blob content decoded as Unicode.
            </summary>
            <param name="blob">The blob for which the content will be returned.</param>
            <returns>Blob content as unicode.</returns>
        </member>
        <member name="T:LibGit2Sharp.TagAnnotation">
            <summary>
              A TagAnnotation
            </summary>
        </member>
        <member name="M:LibGit2Sharp.TagAnnotation.#ctor">
            <summary>
              Needed for mocking purposes.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.TagAnnotation.Name">
            <summary>
              Gets the name of this tag.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.TagAnnotation.Message">
            <summary>
              Gets the message of this tag.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.TagAnnotation.Target">
            <summary>
              Gets the <see cref="T:LibGit2Sharp.GitObject"/> that this tag annotation points to.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.TagAnnotation.Tagger">
            <summary>
              Gets the tagger.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.RepositoryStatus">
            <summary>
              Holds the result of the determination of the state of the working directory.
              <para>Only files that differ from the current index and/or commit will be considered.</para>
            </summary>
        </member>
        <member name="M:LibGit2Sharp.RepositoryStatus.#ctor">
            <summary>
              Needed for mocking purposes.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.RepositoryStatus.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:LibGit2Sharp.RepositoryStatus.System#Collections#IEnumerable#GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:LibGit2Sharp.RepositoryStatus.Added">
            <summary>
              List of files added to the index, which are not in the current commit
            </summary>
        </member>
        <member name="P:LibGit2Sharp.RepositoryStatus.Staged">
            <summary>
              List of files added to the index, which are already in the current commit with different content
            </summary>
        </member>
        <member name="P:LibGit2Sharp.RepositoryStatus.Removed">
            <summary>
              List of files removed from the index but are existent in the current commit
            </summary>
        </member>
        <member name="P:LibGit2Sharp.RepositoryStatus.Missing">
            <summary>
              List of files existent in the index but are missing in the working directory
            </summary>
        </member>
        <member name="P:LibGit2Sharp.RepositoryStatus.Modified">
            <summary>
              List of files with unstaged modifications. A file may be modified and staged at the same time if it has been modified after adding.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.RepositoryStatus.Untracked">
            <summary>
              List of files existing in the working directory but are neither tracked in the index nor in the current commit.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.RepositoryStatus.Ignored">
            <summary>
              List of files existing in the working directory that are ignored.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.RepositoryStatus.IsDirty">
            <summary>
              True if the index or the working directory has been altered since the last commit. False otherwise.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.RepositoryInformation">
            <summary>
              Provides high level information about a repository.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.RepositoryInformation.#ctor">
            <summary>
              Needed for mocking purposes.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.RepositoryInformation.Path">
            <summary>
              Gets the normalized path to the git repository.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.RepositoryInformation.WorkingDirectory">
            <summary>
              Gets the normalized path to the working directory.
              <para>
                Is the repository is bare, null is returned.
              </para>
            </summary>
        </member>
        <member name="P:LibGit2Sharp.RepositoryInformation.IsBare">
            <summary>
              Indicates whether the repository has a working directory.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.RepositoryInformation.IsEmpty">
            <summary>
              Gets a value indicating whether this repository is empty.
            </summary>
            <value>
              <c>true</c> if this repository is empty; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:LibGit2Sharp.RepositoryInformation.IsHeadDetached">
            <summary>
              Indicates whether the Head points to an arbitrary commit instead of the tip of a local branch.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.RepositoryInformation.IsHeadOrphaned">
            <summary>
              Indicates whether the Head points to a reference which doesn't exist.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.Repository">
            <summary>
              A Repository is the primary interface into a git repository
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Repository.#ctor(System.String,LibGit2Sharp.RepositoryOptions)">
            <summary>
              Initializes a new instance of the <see cref="T:LibGit2Sharp.Repository"/> class, providing ooptional behavioral overrides through <paramref name="options"/> parameter.
              <para>For a standard repository, <paramref name="path"/> should either point to the ".git" folder or to the working directory. For a bare repository, <paramref name="path"/> should directly point to the repository folder.</para>
            </summary>
            <param name="path">
              The path to the git repository to open, can be either the path to the git directory (for non-bare repositories this
              would be the ".git" folder inside the working directory) or the path to the working directory.
            </param>
            <param name="options">
              Overrides to the way a repository is opened.
            </param>
        </member>
        <member name="M:LibGit2Sharp.Repository.Finalize">
            <summary>
              Takes care of releasing all non-managed remaining resources.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Repository.Dispose">
            <summary>
              Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Repository.Dispose(System.Boolean)">
            <summary>
              Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Repository.Init(System.String,System.Boolean)">
            <summary>
              Initialize a repository at the specified <paramref name="path"/>.
            </summary>
            <param name="path">The path to the working folder when initializing a standard ".git" repository. Otherwise, when initializing a bare repository, the path to the expected location of this later.</param>
            <param name="isBare">true to initialize a bare repository. False otherwise, to initialize a standard ".git" repository.</param>
            <returns> a new instance of the <see cref="T:LibGit2Sharp.Repository"/> class. The client code is responsible for calling <see cref="M:LibGit2Sharp.Repository.Dispose"/> on this instance.</returns>
        </member>
        <member name="M:LibGit2Sharp.Repository.Lookup(LibGit2Sharp.ObjectId,LibGit2Sharp.GitObjectType)">
            <summary>
              Try to lookup an object by its <see cref="T:LibGit2Sharp.ObjectId"/> and <see cref="T:LibGit2Sharp.GitObjectType"/>. If no matching object is found, null will be returned.
            </summary>
            <param name="id">The id to lookup.</param>
            <param name="type">The kind of GitObject being looked up</param>
            <returns>The <see cref="T:LibGit2Sharp.GitObject"/> or null if it was not found.</returns>
        </member>
        <member name="M:LibGit2Sharp.Repository.Lookup(System.String,LibGit2Sharp.GitObjectType)">
            <summary>
              Try to lookup an object by its sha or a reference canonical name and <see cref="T:LibGit2Sharp.GitObjectType"/>. If no matching object is found, null will be returned.
            </summary>
            <param name="objectish">A revparse spec for the object to lookup.</param>
            <param name="type">The kind of <see cref="T:LibGit2Sharp.GitObject"/> being looked up</param>
            <returns>The <see cref="T:LibGit2Sharp.GitObject"/> or null if it was not found.</returns>
        </member>
        <member name="M:LibGit2Sharp.Repository.LookupCommit(System.String)">
            <summary>
              Lookup a commit by its SHA or name, or throw if a commit is not found.
            </summary>
            <param name="commitish">A revparse spec for the commit.</param>
            <returns>The commit.</returns>
        </member>
        <member name="M:LibGit2Sharp.Repository.Discover(System.String)">
            <summary>
              Probe for a git repository.
              <para>The lookup start from <paramref name = "startingPath" /> and walk upward parent directories if nothing has been found.</para>
            </summary>
            <param name = "startingPath">The base path where the lookup starts.</param>
            <returns>The path to the git repository.</returns>
        </member>
        <member name="M:LibGit2Sharp.Repository.Clone(System.String,System.String,System.Boolean,System.Boolean,LibGit2Sharp.Handlers.TransferProgressHandler,LibGit2Sharp.Handlers.CheckoutProgressHandler)">
            <summary>
            Clone with specified options.
            </summary>
            <param name="sourceUrl">URI for the remote repository</param>
            <param name="workdirPath">Local path to clone into</param>
            <param name="bare">True will result in a bare clone, false a full clone.</param>
            <param name="checkout">If true, the origin's HEAD will be checked out. This only applies
            to non-bare repositories.</param>
            <param name="onTransferProgress">Handler for network transfer and indexing progress information</param>
            <param name="onCheckoutProgress">Handler for checkout progress information</param>
            <returns></returns>
        </member>
        <member name="M:LibGit2Sharp.Repository.Checkout(System.String)">
            <summary>
              Checkout the specified <see cref="T:LibGit2Sharp.Branch"/>, reference or SHA.
            </summary>
            <param name="commitOrBranchSpec">A revparse spec for the commit or branch to checkout.</param>
            <returns>The <see cref="T:LibGit2Sharp.Branch"/> that was checked out.</returns>
        </member>
        <member name="M:LibGit2Sharp.Repository.Checkout(System.String,LibGit2Sharp.CheckoutOptions,LibGit2Sharp.Handlers.CheckoutProgressHandler)">
            <summary>
              Checkout the specified <see cref="T:LibGit2Sharp.Branch"/>, reference or SHA.
            </summary>
            <param name="commitishOrBranchSpec">A revparse spec for the commit or branch to checkout.</param>
            <param name="checkoutOptions"><see cref="T:LibGit2Sharp.CheckoutOptions"/> controlling checkout behavior.</param>
            <param name="onCheckoutProgress"><see cref="T:LibGit2Sharp.Handlers.CheckoutProgressHandler"/> that checkout progress is reported through.</param>
            <returns>The <see cref="T:LibGit2Sharp.Branch"/> that was checked out.</returns>
        </member>
        <member name="M:LibGit2Sharp.Repository.Checkout(LibGit2Sharp.Branch)">
            <summary>
              Checkout the specified <see cref="T:LibGit2Sharp.Branch"/>.
            </summary>
            <param name="branch">The <see cref="T:LibGit2Sharp.Branch"/> to check out.</param>
            <returns>The <see cref="T:LibGit2Sharp.Branch"/> that was checked out.</returns>
        </member>
        <member name="M:LibGit2Sharp.Repository.Checkout(LibGit2Sharp.Branch,LibGit2Sharp.CheckoutOptions,LibGit2Sharp.Handlers.CheckoutProgressHandler)">
            <summary>
              Checkout the specified <see cref="T:LibGit2Sharp.Branch"/>.
            </summary>
            <param name="branch">The <see cref="T:LibGit2Sharp.Branch"/> to check out. </param>
            <param name="checkoutOptions"><see cref="T:LibGit2Sharp.CheckoutOptions"/> controlling checkout behavior.</param>
            <param name="onCheckoutProgress"><see cref="T:LibGit2Sharp.Handlers.CheckoutProgressHandler"/> that checkout progress is reported through.</param>
            <returns>The <see cref="T:LibGit2Sharp.Branch"/> that was checked out.</returns>
        </member>
        <member name="M:LibGit2Sharp.Repository.CheckoutInternal(System.String,LibGit2Sharp.CheckoutOptions,LibGit2Sharp.Handlers.CheckoutProgressHandler)">
            <summary>
              Internal implementation of Checkout that expects the ID of the checkout target
              to already be in the form of a canonical branch name or a commit ID.
            </summary>
            <param name="commitIdOrCanonicalBranchName">Commit ID or canonical branch name.</param>
            <param name="checkoutOptions"><see cref="T:LibGit2Sharp.CheckoutOptions"/> controlling checkout behavior.</param>
            <param name="onCheckoutProgress"><see cref="T:LibGit2Sharp.Handlers.CheckoutProgressHandler"/> that checkout progress is reported through.</param>
            <returns>The <see cref="T:LibGit2Sharp.Branch"/> that was checked out.</returns>
        </member>
        <member name="M:LibGit2Sharp.Repository.Reset(LibGit2Sharp.ResetOptions,System.String)">
            <summary>
              Sets the current <see cref="P:LibGit2Sharp.Repository.Head"/> to the specified commit and optionally resets the <see cref="P:LibGit2Sharp.Repository.Index"/> and
              the content of the working tree to match.
            </summary>
            <param name="resetOptions">Flavor of reset operation to perform.</param>
            <param name="commitish">A revparse spec for the target commit object.</param>
        </member>
        <member name="M:LibGit2Sharp.Repository.Reset(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
              Replaces entries in the <see cref="P:LibGit2Sharp.Repository.Index"/> with entries from the specified commit.
            </summary>
            <param name="commitish">A revparse spec for the target commit object.</param>
            <param name="paths">The list of paths (either files or directories) that should be considered.</param>
        </member>
        <member name="M:LibGit2Sharp.Repository.Commit(System.String,LibGit2Sharp.Signature,LibGit2Sharp.Signature,System.Boolean)">
            <summary>
              Stores the content of the <see cref="P:LibGit2Sharp.Repository.Index"/> as a new <see cref="M:LibGit2Sharp.Repository.Commit(System.String,LibGit2Sharp.Signature,LibGit2Sharp.Signature,System.Boolean)"/> into the repository.
              The tip of the <see cref="P:LibGit2Sharp.Repository.Head"/> will be used as the parent of this new Commit.
              Once the commit is created, the <see cref="P:LibGit2Sharp.Repository.Head"/> will move forward to point at it.
            </summary>
            <param name="message">The description of why a change was made to the repository.</param>
            <param name="author">The <see cref="T:LibGit2Sharp.Signature"/> of who made the change.</param>
            <param name="committer">The <see cref="T:LibGit2Sharp.Signature"/> of who added the change to the repository.</param>
            <param name="amendPreviousCommit">True to amend the current <see cref="M:LibGit2Sharp.Repository.Commit(System.String,LibGit2Sharp.Signature,LibGit2Sharp.Signature,System.Boolean)"/> pointed at by <see cref="P:LibGit2Sharp.Repository.Head"/>, false otherwise.</param>
            <returns>The generated <see cref="M:LibGit2Sharp.Repository.Commit(System.String,LibGit2Sharp.Signature,LibGit2Sharp.Signature,System.Boolean)"/>.</returns>
        </member>
        <member name="P:LibGit2Sharp.Repository.Head">
            <summary>
              Shortcut to return the branch pointed to by HEAD
            </summary>
            <returns></returns>
        </member>
        <member name="P:LibGit2Sharp.Repository.Config">
            <summary>
              Provides access to the configuration settings for this repository.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Repository.Index">
            <summary>
              Gets the index.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Repository.ObjectDatabase">
            <summary>
              Gets the database.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Repository.Refs">
            <summary>
              Lookup and enumerate references in the repository.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Repository.Remotes">
            <summary>
              Lookup and manage remotes in the repository.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Repository.Commits">
            <summary>
              Lookup and enumerate commits in the repository.
              Iterating this collection directly starts walking from the HEAD.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Repository.Branches">
            <summary>
              Lookup and enumerate branches in the repository.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Repository.Tags">
            <summary>
              Lookup and enumerate tags in the repository.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Repository.Info">
            <summary>
              Provides high level information about this repository.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Repository.Diff">
            <summary>
              Provides access to diffing functionalities to show changes between the working tree and the index or a tree, changes between the index and a tree, changes between two trees, or changes between two files on disk.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Repository.Notes">
            <summary>
              Lookup notes in the repository.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Repository.Version">
            <summary>
              Gets the current LibGit2Sharp version.
              <para>
                The format of the version number is as follows:
                <para>Major.Minor.Patch-LibGit2Sharp_abbrev_hash-libgit2_abbrev_hash (x86|amd64)</para>
              </para>
            </summary>
        </member>
        <member name="T:LibGit2Sharp.GitObjectType">
            <summary>
              Underlying type of a <see cref="T:LibGit2Sharp.GitObject"/>
            </summary>
        </member>
        <member name="F:LibGit2Sharp.GitObjectType.Any">
            <summary>
              Object can be of any type.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.GitObjectType.Bad">
            <summary>
              Object is invalid.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.GitObjectType.Ext1">
            <summary>
              Reserved for future use.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.GitObjectType.Commit">
            <summary>
              A commit object.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.GitObjectType.Tree">
            <summary>
              A tree (directory listing) object.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.GitObjectType.Blob">
            <summary>
              A file revision object.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.GitObjectType.Tag">
            <summary>
              An annotated tag object.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.GitObjectType.Ext2">
            <summary>
              Reserved for future use.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.GitObjectType.OfsDelta">
            <summary>
              A delta, base is given by an offset.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.GitObjectType.RefDelta">
            <summary>
              A delta, base is given by object id.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.NoteCollection">
            <summary>
              A collection of <see cref="T:LibGit2Sharp.Note"/> exposed in the <see cref="T:LibGit2Sharp.Repository"/>.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.NoteCollection.#ctor">
            <summary>
              Needed for mocking purposes.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.NoteCollection.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:LibGit2Sharp.NoteCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:LibGit2Sharp.NoteCollection.Add(LibGit2Sharp.ObjectId,System.String,LibGit2Sharp.Signature,LibGit2Sharp.Signature,System.String)">
            <summary>
              Creates or updates a <see cref="T:LibGit2Sharp.Note"/> on the specified object, and for the given namespace.
            </summary>
            <param name="targetId">The target <see cref="T:LibGit2Sharp.ObjectId"/>, for which the note will be created.</param>
            <param name="message">The note message.</param>
            <param name="author">The author.</param>
            <param name="committer">The committer.</param>
            <param name="namespace">The namespace on which the note will be created. It can be either a canonical namespace or an abbreviated namespace ('refs/notes/myNamespace' or just 'myNamespace').</param>
            <returns>The note which was just saved.</returns>
        </member>
        <member name="M:LibGit2Sharp.NoteCollection.Create(LibGit2Sharp.ObjectId,System.String,LibGit2Sharp.Signature,LibGit2Sharp.Signature,System.String)">
            <summary>
              Creates or updates a <see cref="T:LibGit2Sharp.Note"/> on the specified object, and for the given namespace.
            </summary>
            <param name="targetId">The target <see cref="T:LibGit2Sharp.ObjectId"/>, for which the note will be created.</param>
            <param name="message">The note message.</param>
            <param name="author">The author.</param>
            <param name="committer">The committer.</param>
            <param name="namespace">The namespace on which the note will be created. It can be either a canonical namespace or an abbreviated namespace ('refs/notes/myNamespace' or just 'myNamespace').</param>
            <returns>The note which was just saved.</returns>
        </member>
        <member name="M:LibGit2Sharp.NoteCollection.Remove(LibGit2Sharp.ObjectId,LibGit2Sharp.Signature,LibGit2Sharp.Signature,System.String)">
            <summary>
              Deletes the note on the specified object, and for the given namespace.
            </summary>
            <param name="targetId">The target <see cref="T:LibGit2Sharp.ObjectId"/>, for which the note will be created.</param>
            <param name="author">The author.</param>
            <param name="committer">The committer.</param>
            <param name="namespace">The namespace on which the note will be removed. It can be either a canonical namespace or an abbreviated namespace ('refs/notes/myNamespace' or just 'myNamespace').</param>
        </member>
        <member name="M:LibGit2Sharp.NoteCollection.Delete(LibGit2Sharp.ObjectId,LibGit2Sharp.Signature,LibGit2Sharp.Signature,System.String)">
            <summary>
              Deletes the note on the specified object, and for the given namespace.
            </summary>
            <param name="targetId">The target <see cref="T:LibGit2Sharp.ObjectId"/>, for which the note will be created.</param>
            <param name="author">The author.</param>
            <param name="committer">The committer.</param>
            <param name="namespace">The namespace on which the note will be removed. It can be either a canonical namespace or an abbreviated namespace ('refs/notes/myNamespace' or just 'myNamespace').</param>
        </member>
        <member name="P:LibGit2Sharp.NoteCollection.DefaultNamespace">
            <summary>
              The default namespace for notes.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.NoteCollection.Namespaces">
            <summary>
              The list of canonicalized namespaces related to notes.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.NoteCollection.Item(LibGit2Sharp.ObjectId)">
            <summary>
              Gets the collection of <see cref="T:LibGit2Sharp.Note"/> associated with the specified <see cref="T:LibGit2Sharp.ObjectId"/>.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.NoteCollection.Item(System.String)">
            <summary>
              Gets the collection of <see cref="T:LibGit2Sharp.Note"/> associated with the specified namespace.
              <para>This is similar to the 'get notes list' command.</para>
            </summary>
        </member>
        <member name="T:LibGit2Sharp.Commit">
            <summary>
              A Commit
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Commit.#ctor">
            <summary>
              Needed for mocking purposes.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Commit.Item(System.String)">
            <summary>
              Gets the <see cref="T:LibGit2Sharp.TreeEntry"/> pointed at by the <paramref name="relativePath"/> in the <see cref="P:LibGit2Sharp.Commit.Tree"/>.
            </summary>
            <param name="relativePath">The relative path to the <see cref="T:LibGit2Sharp.TreeEntry"/> from the <see cref="T:LibGit2Sharp.Commit"/> working directory.</param>
            <returns><c>null</c> if nothing has been found, the <see cref="T:LibGit2Sharp.TreeEntry"/> otherwise.</returns>
        </member>
        <member name="P:LibGit2Sharp.Commit.Message">
            <summary>
              Gets the commit message.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Commit.MessageShort">
            <summary>
              Gets the short commit message which is usually the first line of the commit.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Commit.Encoding">
            <summary>
              Gets the encoding of the message.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Commit.Author">
            <summary>
              Gets the author of this commit.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Commit.Committer">
            <summary>
              Gets the committer.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Commit.Tree">
            <summary>
              Gets the Tree associated to this commit.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Commit.Parents">
            <summary>
              Gets the parents of this commit. This property is lazy loaded and can throw an exception if the commit no longer exists in the repo.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Commit.ParentsCount">
            <summary>
              Gets The count of parent commits.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Commit.Notes">
            <summary>
              Gets the notes of this commit.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.TreeEntryDefinition">
            <summary>
              Holds the meta data of a <see cref="T:LibGit2Sharp.TreeEntry"/>.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.TreeEntryDefinition.#ctor">
            <summary>
              Needed for mocking purposes.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.TreeEntryDefinition.Equals(System.Object)">
            <summary>
              Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:LibGit2Sharp.TreeEntryDefinition"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:LibGit2Sharp.TreeEntryDefinition"/>.</param>
            <returns>True if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:LibGit2Sharp.TreeEntryDefinition"/>; otherwise, false.</returns>
        </member>
        <member name="M:LibGit2Sharp.TreeEntryDefinition.Equals(LibGit2Sharp.TreeEntryDefinition)">
            <summary>
              Determines whether the specified <see cref="T:LibGit2Sharp.TreeEntryDefinition"/> is equal to the current <see cref="T:LibGit2Sharp.TreeEntryDefinition"/>.
            </summary>
            <param name="other">The <see cref="T:LibGit2Sharp.TreeEntryDefinition"/> to compare with the current <see cref="T:LibGit2Sharp.TreeEntryDefinition"/>.</param>
            <returns>True if the specified <see cref="T:LibGit2Sharp.TreeEntryDefinition"/> is equal to the current <see cref="T:LibGit2Sharp.TreeEntryDefinition"/>; otherwise, false.</returns>
        </member>
        <member name="M:LibGit2Sharp.TreeEntryDefinition.GetHashCode">
            <summary>
              Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:LibGit2Sharp.TreeEntryDefinition.op_Equality(LibGit2Sharp.TreeEntryDefinition,LibGit2Sharp.TreeEntryDefinition)">
            <summary>
              Tests if two <see cref="T:LibGit2Sharp.TreeEntryDefinition"/> are equal.
            </summary>
            <param name="left">First <see cref="T:LibGit2Sharp.TreeEntryDefinition"/> to compare.</param>
            <param name="right">Second <see cref="T:LibGit2Sharp.TreeEntryDefinition"/> to compare.</param>
            <returns>True if the two objects are equal; false otherwise.</returns>
        </member>
        <member name="M:LibGit2Sharp.TreeEntryDefinition.op_Inequality(LibGit2Sharp.TreeEntryDefinition,LibGit2Sharp.TreeEntryDefinition)">
            <summary>
              Tests if two <see cref="T:LibGit2Sharp.TreeEntryDefinition"/> are different.
            </summary>
            <param name="left">First <see cref="T:LibGit2Sharp.TreeEntryDefinition"/> to compare.</param>
            <param name="right">Second <see cref="T:LibGit2Sharp.TreeEntryDefinition"/> to compare.</param>
            <returns>True if the two objects are different; false otherwise.</returns>
        </member>
        <member name="P:LibGit2Sharp.TreeEntryDefinition.Mode">
            <summary>
              Gets file mode.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.TreeEntryDefinition.Type">
            <summary>
              Gets the <see cref="T:LibGit2Sharp.GitObjectType"/> of the target being pointed at.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.TreeEntryDefinition.TargetId">
            <summary>
              Gets the <see cref="T:LibGit2Sharp.ObjectId"/> of the target being pointed at.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.Tree">
            <summary>
              A container which references a list of other <see cref="T:LibGit2Sharp.Tree"/>s and <see cref="T:LibGit2Sharp.Blob"/>s.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Tree.#ctor">
            <summary>
              Needed for mocking purposes.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Tree.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:LibGit2Sharp.Tree.System#Collections#IEnumerable#GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:LibGit2Sharp.Tree.Count">
            <summary>
              Gets the number of <see cref="T:LibGit2Sharp.TreeEntry"/> immediately under this <see cref="T:LibGit2Sharp.Tree"/>.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Tree.Item(System.String)">
            <summary>
              Gets the <see cref="T:LibGit2Sharp.TreeEntry"/> pointed at by the <paramref name="relativePath"/> in this <see cref="T:LibGit2Sharp.Tree"/> instance.
            </summary>
            <param name="relativePath">The relative path to the <see cref="T:LibGit2Sharp.TreeEntry"/> from this instance.</param>
            <returns><c>null</c> if nothing has been found, the <see cref="T:LibGit2Sharp.TreeEntry"/> otherwise.</returns>
        </member>
        <member name="P:LibGit2Sharp.Tree.Trees">
            <summary>
              Gets the <see cref="T:LibGit2Sharp.Tree"/>s immediately under this <see cref="T:LibGit2Sharp.Tree"/>.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Tree.Blobs">
            <summary>
              Gets the <see cref="T:LibGit2Sharp.Blob"/>s immediately under this <see cref="T:LibGit2Sharp.Tree"/>.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.StatusEntry">
            <summary>
              Holds the calculated status of a particular file at a particular instant.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.StatusEntry.#ctor">
            <summary>
              Needed for mocking purposes.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.StatusEntry.Equals(System.Object)">
            <summary>
              Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:LibGit2Sharp.StatusEntry"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:LibGit2Sharp.StatusEntry"/>.</param>
            <returns>True if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:LibGit2Sharp.StatusEntry"/>; otherwise, false.</returns>
        </member>
        <member name="M:LibGit2Sharp.StatusEntry.Equals(LibGit2Sharp.StatusEntry)">
            <summary>
              Determines whether the specified <see cref="T:LibGit2Sharp.StatusEntry"/> is equal to the current <see cref="T:LibGit2Sharp.StatusEntry"/>.
            </summary>
            <param name="other">The <see cref="T:LibGit2Sharp.StatusEntry"/> to compare with the current <see cref="T:LibGit2Sharp.StatusEntry"/>.</param>
            <returns>True if the specified <see cref="T:LibGit2Sharp.StatusEntry"/> is equal to the current <see cref="T:LibGit2Sharp.StatusEntry"/>; otherwise, false.</returns>
        </member>
        <member name="M:LibGit2Sharp.StatusEntry.GetHashCode">
            <summary>
              Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:LibGit2Sharp.StatusEntry.op_Equality(LibGit2Sharp.StatusEntry,LibGit2Sharp.StatusEntry)">
            <summary>
              Tests if two <see cref="T:LibGit2Sharp.StatusEntry"/> are equal.
            </summary>
            <param name="left">First <see cref="T:LibGit2Sharp.StatusEntry"/> to compare.</param>
            <param name="right">Second <see cref="T:LibGit2Sharp.StatusEntry"/> to compare.</param>
            <returns>True if the two objects are equal; false otherwise.</returns>
        </member>
        <member name="M:LibGit2Sharp.StatusEntry.op_Inequality(LibGit2Sharp.StatusEntry,LibGit2Sharp.StatusEntry)">
            <summary>
              Tests if two <see cref="T:LibGit2Sharp.StatusEntry"/> are different.
            </summary>
            <param name="left">First <see cref="T:LibGit2Sharp.StatusEntry"/> to compare.</param>
            <param name="right">Second <see cref="T:LibGit2Sharp.StatusEntry"/> to compare.</param>
            <returns>True if the two objects are different; false otherwise.</returns>
        </member>
        <member name="P:LibGit2Sharp.StatusEntry.State">
            <summary>
              Gets the <see cref="T:LibGit2Sharp.FileStatus"/> of the file.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.StatusEntry.FilePath">
            <summary>
              Gets the relative filepath to the working directory of the file.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.RepositoryExtensions">
            <summary>
              Provides helper overloads to a <see cref="T:LibGit2Sharp.Repository"/>.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.RepositoryExtensions.Lookup``1(LibGit2Sharp.IRepository,System.String)">
            <summary>
              Try to lookup an object by its sha or a reference name.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="repository">The <see cref="T:LibGit2Sharp.Repository"/> being looked up.</param>
            <param name="objectish">The revparse spec for the object to lookup.</param>
            <returns></returns>
        </member>
        <member name="M:LibGit2Sharp.RepositoryExtensions.Lookup``1(LibGit2Sharp.IRepository,LibGit2Sharp.ObjectId)">
            <summary>
              Try to lookup an object by its <see cref="T:LibGit2Sharp.ObjectId"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="repository">The <see cref="T:LibGit2Sharp.Repository"/> being looked up.</param>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:LibGit2Sharp.RepositoryExtensions.ApplyTag(LibGit2Sharp.IRepository,System.String)">
            <summary>
              Creates a lightweight tag with the specified name. This tag will point at the commit pointed at by the <see cref="P:LibGit2Sharp.Repository.Head"/>.
            </summary>
            <param name="repository">The <see cref="T:LibGit2Sharp.Repository"/> being worked with.</param>
            <param name="tagName">The name of the tag to create.</param>
        </member>
        <member name="M:LibGit2Sharp.RepositoryExtensions.ApplyTag(LibGit2Sharp.IRepository,System.String,System.String)">
            <summary>
              Creates a lightweight tag with the specified name. This tag will point at the <paramref name="objectish"/>.
            </summary>
            <param name="repository">The <see cref="T:LibGit2Sharp.Repository"/> being worked with.</param>
            <param name="tagName">The name of the tag to create.</param>
            <param name="objectish">The revparse spec for the target object.</param>
        </member>
        <member name="M:LibGit2Sharp.RepositoryExtensions.ApplyTag(LibGit2Sharp.IRepository,System.String,LibGit2Sharp.Signature,System.String)">
            <summary>
              Creates an annotated tag with the specified name. This tag will point at the commit pointed at by the <see cref="P:LibGit2Sharp.Repository.Head"/>.
            </summary>
            <param name="repository">The <see cref="T:LibGit2Sharp.Repository"/> being worked with.</param>
            <param name="tagName">The name of the tag to create.</param>
            <param name="tagger">The identity of the creator of this tag.</param>
            <param name="message">The annotation message.</param>
        </member>
        <member name="M:LibGit2Sharp.RepositoryExtensions.ApplyTag(LibGit2Sharp.IRepository,System.String,System.String,LibGit2Sharp.Signature,System.String)">
            <summary>
              Creates an annotated tag with the specified name. This tag will point at the <paramref name="objectish"/>.
            </summary>
            <param name="repository">The <see cref="T:LibGit2Sharp.Repository"/> being worked with.</param>
            <param name="tagName">The name of the tag to create.</param>
            <param name="objectish">The revparse spec for the target object.</param>
            <param name="tagger">The identity of the creator of this tag.</param>
            <param name="message">The annotation message.</param>
        </member>
        <member name="M:LibGit2Sharp.RepositoryExtensions.CreateBranch(LibGit2Sharp.IRepository,System.String)">
            <summary>
              Creates a branch with the specified name. This branch will point at the commit pointed at by the <see cref="P:LibGit2Sharp.Repository.Head"/>.
            </summary>
            <param name="repository">The <see cref="T:LibGit2Sharp.Repository"/> being worked with.</param>
            <param name="branchName">The name of the branch to create.</param>
        </member>
        <member name="M:LibGit2Sharp.RepositoryExtensions.CreateBranch(LibGit2Sharp.IRepository,System.String,LibGit2Sharp.Commit)">
            <summary>
              Creates a branch with the specified name. This branch will point at <paramref name="target"/>.
            </summary>
            <param name="repository">The <see cref="T:LibGit2Sharp.Repository"/> being worked with.</param>
            <param name="branchName">The name of the branch to create.</param>
            <param name="target">The commit which should be pointed at by the Branch.</param>
        </member>
        <member name="M:LibGit2Sharp.RepositoryExtensions.CreateBranch(LibGit2Sharp.IRepository,System.String,System.String)">
            <summary>
              Creates a branch with the specified name. This branch will point at the commit pointed at by the <see cref="P:LibGit2Sharp.Repository.Head"/>.
            </summary>
            <param name="repository">The <see cref="T:LibGit2Sharp.Repository"/> being worked with.</param>
            <param name="branchName">The name of the branch to create.</param>
            <param name="commitish">The revparse spec for the target commit.</param>
        </member>
        <member name="M:LibGit2Sharp.RepositoryExtensions.Commit(LibGit2Sharp.IRepository,System.String,System.Boolean)">
            <summary>
              Stores the content of the <see cref="P:LibGit2Sharp.Repository.Index"/> as a new <see cref="T:LibGit2Sharp.Commit"/> into the repository.
              The tip of the <see cref="P:LibGit2Sharp.Repository.Head"/> will be used as the parent of this new Commit.
              Once the commit is created, the <see cref="P:LibGit2Sharp.Repository.Head"/> will move forward to point at it.
              <para>Both the Author and Committer will be guessed from the Git configuration. An exception will be raised if no configuration is reachable.</para>
            </summary>
            <param name="repository">The <see cref="T:LibGit2Sharp.Repository"/> being worked with.</param>
            <param name="message">The description of why a change was made to the repository.</param>
            <param name="amendPreviousCommit">True to amend the current <see cref="T:LibGit2Sharp.Commit"/> pointed at by <see cref="P:LibGit2Sharp.Repository.Head"/>, false otherwise.</param>
            <returns>The generated <see cref="T:LibGit2Sharp.Commit"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.RepositoryExtensions.Commit(LibGit2Sharp.IRepository,System.String,LibGit2Sharp.Signature,System.Boolean)">
            <summary>
              Stores the content of the <see cref="P:LibGit2Sharp.Repository.Index"/> as a new <see cref="T:LibGit2Sharp.Commit"/> into the repository.
              The tip of the <see cref="P:LibGit2Sharp.Repository.Head"/> will be used as the parent of this new Commit.
              Once the commit is created, the <see cref="P:LibGit2Sharp.Repository.Head"/> will move forward to point at it.
              <para>The Committer will be guessed from the Git configuration. An exception will be raised if no configuration is reachable.</para>
            </summary>
            <param name="repository">The <see cref="T:LibGit2Sharp.Repository"/> being worked with.</param>
            <param name="author">The <see cref="T:LibGit2Sharp.Signature"/> of who made the change.</param>
            <param name="message">The description of why a change was made to the repository.</param>
            <param name="amendPreviousCommit">True to amend the current <see cref="T:LibGit2Sharp.Commit"/> pointed at by <see cref="P:LibGit2Sharp.Repository.Head"/>, false otherwise.</param>
            <returns>The generated <see cref="T:LibGit2Sharp.Commit"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.RepositoryExtensions.Fetch(LibGit2Sharp.IRepository,System.String,LibGit2Sharp.TagFetchMode,LibGit2Sharp.Handlers.ProgressHandler,LibGit2Sharp.Handlers.CompletionHandler,LibGit2Sharp.Handlers.UpdateTipsHandler,LibGit2Sharp.Handlers.TransferProgressHandler)">
            <summary>
              Fetch from the specified remote.
            </summary>
            <param name="repository">The <see cref="T:LibGit2Sharp.Repository"/> being worked with.</param>
            <param name="remoteName">The name of the <see cref="T:LibGit2Sharp.Remote"/> to fetch from.</param>
            <param name="tagFetchMode">Optional parameter indicating what tags to download.</param>
            <param name="onProgress">Progress callback. Corresponds to libgit2 progress callback.</param>
            <param name="onCompletion">Completion callback. Corresponds to libgit2 completion callback.</param>
            <param name="onUpdateTips">UpdateTips callback. Corresponds to libgit2 update_tips callback.</param>
            <param name="onTransferProgress">Callback method that transfer progress will be reported through.
              Reports the client's state regarding the received and processed (bytes, objects) from the server.</param>
        </member>
        <member name="T:LibGit2Sharp.RepositoryOptions">
            <summary>
              Provides optional additional information to the Repository to be opened.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.RepositoryOptions.WorkingDirectoryPath">
            <summary>
              Overrides the probed location of the working directory of a standard repository,
              or, combined with <see cref="P:LibGit2Sharp.RepositoryOptions.IndexPath"/>, would
              allow to work against a bare repository as it was a standard one.
              <para>
                The path has to lead to an existing directory.
              </para>
            </summary>
        </member>
        <member name="P:LibGit2Sharp.RepositoryOptions.IndexPath">
            <summary>
              Overrides the probed location of the Index file of a standard repository,
              or, combined with <see cref="P:LibGit2Sharp.RepositoryOptions.WorkingDirectoryPath"/>, would
              allow to work against a bare repository as it was a standard one.
              <para>
                The path has either to lead to an existing valid Index file,
                or to a non existent Index file which will be eventually created.
              </para>
            </summary>
        </member>
        <member name="P:LibGit2Sharp.RepositoryOptions.GlobalConfigurationLocation">
            <summary>
              Overrides the probed location of the Global configuration file of a repository.
              <para>
                The path has either to lead to an existing valid configuration file,
                or to a non existent configuration file which will be eventually created.
              </para>
            </summary>
        </member>
        <member name="P:LibGit2Sharp.RepositoryOptions.SystemConfigurationLocation">
            <summary>
              Overrides the probed location of the System configuration file of a repository.
              <para>
                The path has to lead to an existing valid configuration file,
                or to a non existent configuration file which will be eventually created.
              </para>
            </summary>
        </member>
        <member name="T:LibGit2Sharp.Core.GitOid">
            <summary>
              Represents a unique id in git which is the sha1 hash of this id's content.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitOid.Id">
            <summary>
              The raw binary 20 byte Id.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitOdbBackend.Odb">
            <summary>
            This field is populated by libgit2 at backend addition time, and exists for its
            use only. From this side of the interop, it is unreferenced.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.Core.GitOdbBackend.read_callback">
            <summary>
            The backend is passed an OID. From that data the backend is expected to return a pointer to the
            data for that object, the size of the data, and the type of the object.
            </summary>
            <param name="buffer_p">[out] If the call is successful, the backend will write the address of a buffer containing the object contents here.</param>
            <param name="len_p">[out] If the call is successful, the backend will write the length of the buffer containing the object contents here.</param>
            <param name="type_p">[out] If the call is successful, the backend will write the type of the object here.</param>
            <param name="backend">[in] A pointer to the backend which is being asked to perform the task.</param>
            <param name="oid">[in] The OID which the backend is being asked to look up.</param>
            <returns>0 if successful; an error code otherwise.</returns>
        </member>
        <member name="T:LibGit2Sharp.Core.GitOdbBackend.read_prefix_callback">
            <summary>
            The backend is passed a short OID and the number of characters in that short OID.
            From that data the backend is expected to return the full OID (in out_oid), a pointer
            to the data (in buffer_p), the size of the buffer returned in buffer_p (in len_p),
            and the object type (in type_p). The short OID might not be long enough to resolve
            to just one object. In that case the backend should return GIT_EAMBIGUOUS.
            </summary>
            <param name="out_oid">[out] If the call is successful, the backend will write the full OID if the object here.</param>
            <param name="buffer_p">[out] If the call is successful, the backend will write the address of a buffer containing the object contents here.</param>
            <param name="len_p">[out] If the call is successful, the backend will write the length of the buffer containing the object contents here.</param>
            <param name="type_p">[out] If the call is successful, the backend will write the type of the object here.</param>
            <param name="backend">[in] A pointer to the backend which is being asked to perform the task.</param>
            <param name="short_oid">[in] The short-form OID which the backend is being asked to look up.</param>
            <param name="len">[in] The length of the short-form OID (short_oid).</param>
            <returns>0 if successful; an error code otherwise.</returns>
        </member>
        <member name="T:LibGit2Sharp.Core.GitOdbBackend.read_header_callback">
            <summary>
            The backend is passed an OID. From that data the backend is expected to return the size of the
            data for that OID, and the type of that OID.
            </summary>
            <param name="len_p">[out] If the call is successful, the backend will write the length of the data for the OID here.</param>
            <param name="type_p">[out] If the call is successful, the backend will write the type of the object here.</param>
            <param name="backend">[in] A pointer to the backend which is being asked to perform the task.</param>
            <param name="oid">[in] The OID which the backend is being asked to look up.</param>
            <returns>0 if successful; an error code otherwise.</returns>
        </member>
        <member name="T:LibGit2Sharp.Core.GitOdbBackend.write_callback">
            <summary>
            The backend is passed an OID, the type of the object, and its contents. The backend is asked to write
            that data to the backing store.
            </summary>
            <param name="oid">[in] The OID which the backend is being asked to write.</param>
            <param name="backend">[in] A pointer to the backend which is being asked to perform the task.</param>
            <param name="data">[in] A pointer to the data for this object.</param>
            <param name="len">[in] The length of the buffer pointed to by data.</param>
            <param name="type">[in] The type of the object.</param>
            <returns>0 if successful; an error code otherwise.</returns>
        </member>
        <member name="T:LibGit2Sharp.Core.GitOdbBackend.writestream_callback">
            <summary>
            The backend is passed an OID, the type of the object, and the length of its contents. The backend is
            asked to return a stream object which the caller can use to write the contents of the object to the
            backing store.
            </summary>
            <param name="stream_out">[out] The stream object which the caller will use to write the contents for this object.</param>
            <param name="backend">[in] A pointer to the backend which is being asked to perform the task.</param>
            <param name="length">[in] The length of the object's contents.</param>
            <param name="type">[in] The type of the object being written.</param>
            <returns>0 if successful; an error code otherwise.</returns>
        </member>
        <member name="T:LibGit2Sharp.Core.GitOdbBackend.readstream_callback">
            <summary>
            The backend is passed an OID. The backend is asked to return a stream object which the caller can use
            to read the contents of this object from the backing store.
            </summary>
            <param name="stream_out">[out] The stream object which the caller will use to read the contents of this object.</param>
            <param name="backend">[in] A pointer to the backend which is being asked to perform the task.</param>
            <param name="oid">[in] The object ID that the caller is requesting.</param>
            <returns>0 if successful; an error code otherwise.</returns>
        </member>
        <member name="T:LibGit2Sharp.Core.GitOdbBackend.exists_callback">
            <summary>
            The backend is passed an OID. The backend is asked to return a value that indicates whether or not
            the object exists in the backing store.
            </summary>
            <param name="backend">[in] A pointer to the backend which is being asked to perform the task.</param>
            <param name="oid">[in] The object ID that the caller is requesting.</param>
            <returns>True if the object exists; false otherwise</returns>
        </member>
        <member name="T:LibGit2Sharp.Core.GitOdbBackend.foreach_callback">
            <summary>
            The backend is passed a callback function and a void* to pass through to the callback. The backend is
            asked to iterate through all objects in the backing store, invoking the callback for each item.
            </summary>
            <param name="backend">[in] A pointer to the backend which is being asked to perform the task.</param>
            <param name="cb">[in] The callback function to invoke.</param>
            <param name="data">[in] An arbitrary parameter to pass through to the callback</param>
        </member>
        <member name="T:LibGit2Sharp.Core.GitOdbBackend.free_callback">
            <summary>
            The owner of this backend is finished with it. The backend is asked to clean up and shut down.
            </summary>
            <param name="backend">[in] A pointer to the backend which is being freed.</param>
        </member>
        <member name="T:LibGit2Sharp.Core.GitOdbBackend.foreach_callback_callback">
            <summary>
            A callback for the backend's implementation of foreach.
            </summary>
            <param name="oid">The oid of each object in the backing store.</param>
            <param name="data">The arbitrary parameter given to foreach_callback.</param>
            <returns>A non-negative result indicates the enumeration should continue. Otherwise, the enumeration should stop.</returns>
        </member>
        <member name="T:LibGit2Sharp.Core.GitTransferProgress">
            <summary>
              Managed structure corresponding to git_transfer_progress native structure.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.CheckoutCallbacks">
            <summary>
              Class to handle the mapping between libgit2 progress_cb callback on the git_checkout_opts
              structure to the CheckoutProgressHandler delegate.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.CheckoutCallbacks.onCheckoutProgress">
            <summary>
              Managed delegate to call in response to checkout progress_cb callback.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.CheckoutCallbacks.#ctor(LibGit2Sharp.Handlers.CheckoutProgressHandler)">
            <summary>
              Constructor to set up native callback for given managed delegate.
            </summary>
            <param name="onCheckoutProgress"><see cref="T:LibGit2Sharp.Handlers.CheckoutProgressHandler"/> delegate to call in response to checkout progress_cb</param>
        </member>
        <member name="M:LibGit2Sharp.CheckoutCallbacks.GenerateCheckoutCallbacks(LibGit2Sharp.Handlers.CheckoutProgressHandler)">
            <summary>
              Generate a delegate matching the signature of the native progress_cb callback and wraps the <see cref="T:LibGit2Sharp.Handlers.CheckoutProgressHandler"/> delegate.
            </summary>
            <param name="onCheckoutProgress"><see cref="T:LibGit2Sharp.Handlers.CheckoutProgressHandler"/> that should be wrapped in the native callback.</param>
            <returns>The delegate with signature matching the expected native callback. </returns>
        </member>
        <member name="M:LibGit2Sharp.CheckoutCallbacks.OnGitCheckoutProgress(System.IntPtr,System.UIntPtr,System.UIntPtr,System.IntPtr)">
            <summary>
              The delegate with a signature that matches the native checkout progress_cb function's signature.
            </summary>
            <param name="str">The path that was updated.</param>
            <param name="completedSteps">The number of completed steps.</param>
            <param name="totalSteps">The total number of steps.</param>
            <param name="payload">Payload object.</param>
        </member>
        <member name="T:LibGit2Sharp.SymbolicReference">
            <summary>
              A SymbolicReference is a reference that points to another reference
            </summary>
        </member>
        <member name="M:LibGit2Sharp.SymbolicReference.ResolveToDirectReference">
            <summary>
              Recursively peels the target of the reference until a direct reference is encountered.
            </summary>
            <returns>The <see cref="T:LibGit2Sharp.DirectReference"/> this <see cref="T:LibGit2Sharp.SymbolicReference"/> points to.</returns>
        </member>
        <member name="P:LibGit2Sharp.SymbolicReference.Target">
            <summary>
              Gets the target of this <see cref="T:LibGit2Sharp.SymbolicReference"/>
            </summary>
        </member>
        <member name="T:LibGit2Sharp.OdbBackend">
            <summary>
              Base class for all custom managed backends for the libgit2 object database (ODB).
            </summary>
        </member>
        <member name="M:LibGit2Sharp.OdbBackend.Dispose">
            <summary>
              Invoked by libgit2 when this backend is no longer needed.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.OdbBackend.Allocate(System.Int64)">
            <summary>
              Call this method from your implementations of Read and ReadPrefix to allocate a buffer in
              which to return the object's data.
            </summary>
            <param name="bytes">Number of bytes to allocate</param>
            <returns>An Stream for you to write to and then return. Do not dispose this object before returning it.</returns>
        </member>
        <member name="M:LibGit2Sharp.OdbBackend.Read(System.Byte[],System.IO.Stream@,LibGit2Sharp.GitObjectType@)">
            <summary>
              Requests that this backend read an object.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.OdbBackend.ReadPrefix(System.Byte[],System.Byte[]@,System.IO.Stream@,LibGit2Sharp.GitObjectType@)">
            <summary>
              Requests that this backend read an object. The object ID may not be complete (may be a prefix).
            </summary>
        </member>
        <member name="M:LibGit2Sharp.OdbBackend.ReadHeader(System.Byte[],System.Int32@,LibGit2Sharp.GitObjectType@)">
            <summary>
              Requests that this backend read an object's header (length and object type) but not its contents.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.OdbBackend.Write(System.Byte[],System.IO.Stream,System.Int64,LibGit2Sharp.GitObjectType,System.Byte[]@)">
            <summary>
              Requests that this backend write an object to the backing store. The backend may need to compute the object ID
              and return it to the caller.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.OdbBackend.ReadStream(System.Byte[],LibGit2Sharp.OdbBackendStream@)">
            <summary>
              Requests that this backend read an object. Returns a stream so that the caller can read the data in chunks.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.OdbBackend.WriteStream(System.Int64,LibGit2Sharp.GitObjectType,LibGit2Sharp.OdbBackendStream@)">
            <summary>
              Requests that this backend write an object to the backing store. Returns a stream so that the caller can write
              the data in chunks.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.OdbBackend.Exists(System.Byte[])">
            <summary>
              Requests that this backend check if an object ID exists.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.OdbBackend.Foreach(LibGit2Sharp.OdbBackend.ForeachCallback)">
            <summary>
              Requests that this backend enumerate all items in the backing store.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.OdbBackend.SupportedOperations">
            <summary>
              In your subclass, override this member to provide the list of actions your backend supports.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.OdbBackend.ForeachCallback">
            <summary>
              The signature of the callback method provided to the Foreach method.
            </summary>
            <param name="oid">The object ID of the object in the backing store.</param>
            <returns>A non-negative result indicates the enumeration should continue. Otherwise, the enumeration should stop.</returns>
        </member>
        <member name="T:LibGit2Sharp.OdbBackend.OdbBackendOperations">
            <summary>
              Flags used by subclasses of OdbBackend to indicate which operations they support.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.OdbBackend.OdbBackendOperations.Read">
            <summary>
              This OdbBackend declares that it supports the Read method.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.OdbBackend.OdbBackendOperations.ReadPrefix">
            <summary>
              This OdbBackend declares that it supports the ReadPrefix method.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.OdbBackend.OdbBackendOperations.ReadHeader">
            <summary>
              This OdbBackend declares that it supports the ReadHeader method.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.OdbBackend.OdbBackendOperations.Write">
            <summary>
              This OdbBackend declares that it supports the Write method.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.OdbBackend.OdbBackendOperations.ReadStream">
            <summary>
              This OdbBackend declares that it supports the ReadStream method.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.OdbBackend.OdbBackendOperations.WriteStream">
            <summary>
              This OdbBackend declares that it supports the WriteStream method.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.OdbBackend.OdbBackendOperations.Exists">
            <summary>
              This OdbBackend declares that it supports the Exists method.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.OdbBackend.OdbBackendOperations.Foreach">
            <summary>
              This OdbBackend declares that it supports the Foreach method.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.Index">
            <summary>
              The Index is a staging area between the Working directory and the Repository.
              It's used to prepare and aggregate the changes that will be part of the next commit.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Index.#ctor">
            <summary>
              Needed for mocking purposes.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.Index.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:LibGit2Sharp.Index.System#Collections#IEnumerable#GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:LibGit2Sharp.Index.Stage(System.String)">
            <summary>
              Promotes to the staging area the latest modifications of a file in the working directory (addition, updation or removal).
            </summary>
            <param name = "path">The path of the file within the working directory.</param>
        </member>
        <member name="M:LibGit2Sharp.Index.Stage(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
              Promotes to the staging area the latest modifications of a collection of files in the working directory (addition, updation or removal).
            </summary>
            <param name = "paths">The collection of paths of the files within the working directory.</param>
        </member>
        <member name="M:LibGit2Sharp.Index.Unstage(System.String)">
            <summary>
              Removes from the staging area all the modifications of a file since the latest commit (addition, updation or removal).
            </summary>
            <param name = "path">The path of the file within the working directory.</param>
        </member>
        <member name="M:LibGit2Sharp.Index.Unstage(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
              Removes from the staging area all the modifications of a collection of file since the latest commit (addition, updation or removal).
            </summary>
            <param name = "paths">The collection of paths of the files within the working directory.</param>
        </member>
        <member name="M:LibGit2Sharp.Index.Move(System.String,System.String)">
            <summary>
              Moves and/or renames a file in the working directory and promotes the change to the staging area.
            </summary>
            <param name = "sourcePath">The path of the file within the working directory which has to be moved/renamed.</param>
            <param name = "destinationPath">The target path of the file within the working directory.</param>
        </member>
        <member name="M:LibGit2Sharp.Index.Move(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
              Moves and/or renames a collection of files in the working directory and promotes the changes to the staging area.
            </summary>
            <param name = "sourcePaths">The paths of the files within the working directory which have to be moved/renamed.</param>
            <param name = "destinationPaths">The target paths of the files within the working directory.</param>
        </member>
        <member name="M:LibGit2Sharp.Index.Remove(System.String)">
            <summary>
              Removes a file from the working directory and promotes the removal to the staging area.
              <para>
                If the file has already been deleted from the working directory, this method will only deal
                with promoting the removal to the staging area.
              </para>
            </summary>
            <param name = "path">The path of the file within the working directory.</param>
        </member>
        <member name="M:LibGit2Sharp.Index.Remove(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
              Removes a collection of files from the working directory and promotes the removal to the staging area.
              <para>
                If a file has already been deleted from the working directory, this method will only deal
                with promoting the removal to the staging area.
              </para>
            </summary>
            <param name = "paths">The collection of paths of the files within the working directory.</param>
        </member>
        <member name="M:LibGit2Sharp.Index.RetrieveStatus(System.String)">
            <summary>
              Retrieves the state of a file in the working directory, comparing it against the staging area and the latest commmit.
            </summary>
            <param name="filePath">The relative path within the working directory to the file.</param>
            <returns>A <see cref="T:LibGit2Sharp.FileStatus"/> representing the state of the <paramref name="filePath"/> parameter.</returns>
        </member>
        <member name="M:LibGit2Sharp.Index.RetrieveStatus">
            <summary>
              Retrieves the state of all files in the working directory, comparing them against the staging area and the latest commmit.
            </summary>
            <returns>A <see cref="T:LibGit2Sharp.RepositoryStatus"/> holding the state of all the files.</returns>
        </member>
        <member name="P:LibGit2Sharp.Index.Count">
            <summary>
              Gets the number of <see cref="T:LibGit2Sharp.IndexEntry"/> in the index.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Index.Item(System.String)">
            <summary>
              Gets the <see cref="T:LibGit2Sharp.IndexEntry"/> with the specified relative path.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.Core.Compat.Tuple`2">
            <summary>
              Represents a 2-tuple, or pair.
            </summary>
            <typeparam name = "T1">The type of the tuple's first component.</typeparam>
            <typeparam name = "T2">The type of the tuple's second component.</typeparam>
        </member>
        <member name="M:LibGit2Sharp.Core.Compat.Tuple`2.#ctor(`0,`1)">
            <summary>
              Initializes a new instance of the <see cref="T:LibGit2Sharp.Core.Compat.Tuple`2"/> class.
            </summary>
            <param name="item1">The value of the tuple's first component.</param>
            <param name="item2">The value of the tuple's second component.</param>
        </member>
        <member name="M:LibGit2Sharp.Core.Compat.Tuple`2.GetHashCode">
            <summary>
              Returns the hash code for the current <see cref="T:LibGit2Sharp.Core.Compat.Tuple`2"/> object.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:LibGit2Sharp.Core.Compat.Tuple`2.Equals(System.Object)">
            <summary>
              Returns a value that indicates whether the current <see cref="T:LibGit2Sharp.Core.Compat.Tuple`2"/> object is equal to a specified object.
            </summary>
            <param name="obj">The object to compare with this instance.</param>
            <returns>true if the current instance is equal to the specified object; otherwise, false.</returns>
        </member>
        <member name="P:LibGit2Sharp.Core.Compat.Tuple`2.Item2">
            <summary>
              Gets the value of the current <see cref="T:LibGit2Sharp.Core.Compat.Tuple`2"/> object's second component.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.Core.Compat.Tuple`2.Item1">
            <summary>
              Gets the value of the current <see cref="T:LibGit2Sharp.Core.Compat.Tuple`2"/> object's first component.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.ContentChanges">
            <summary>
              Holds the changes between two <see cref="T:LibGit2Sharp.Blob"/>s.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.ContentChanges.#ctor">
            <summary>
              Needed for mocking purposes.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.BranchCollectionExtensions">
            <summary>
              Provides helper overloads to a <see cref="T:LibGit2Sharp.BranchCollection"/>.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.BranchCollectionExtensions.Add(LibGit2Sharp.BranchCollection,System.String,System.String,System.Boolean)">
            <summary>
              Create a new local branch with the specified name
            </summary>
            <param name="name">The name of the branch.</param>
            <param name="commitish">Revparse spec for the target commit.</param>
            <param name="allowOverwrite">True to allow silent overwriting a potentially existing branch, false otherwise.</param>
            <param name="branches">The <see cref="T:LibGit2Sharp.BranchCollection"/> being worked with.</param>
            <returns>A new <see cref="T:LibGit2Sharp.Branch"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.BranchCollectionExtensions.Remove(LibGit2Sharp.BranchCollection,System.String,System.Boolean)">
            <summary>
              Deletes the branch with the specified name.
            </summary>
            <param name="name">The name of the branch to delete.</param>
            <param name="isRemote">True if the provided <paramref name="name"/> is the name of a remote branch, false otherwise.</param>
            <param name="branches">The <see cref="T:LibGit2Sharp.BranchCollection"/> being worked with.</param>
        </member>
        <member name="M:LibGit2Sharp.BranchCollectionExtensions.Move(LibGit2Sharp.BranchCollection,System.String,System.String,System.Boolean)">
            <summary>
              Renames an existing local branch with a new name.
            </summary>
            <param name="currentName">The current branch name.</param>
            <param name="newName">The new name the existing branch should bear.</param>
            <param name="allowOverwrite">True to allow silent overwriting a potentially existing branch, false otherwise.</param>
            <param name="branches">The <see cref="T:LibGit2Sharp.BranchCollection"/> being worked with.</param>
            <returns>A new <see cref="T:LibGit2Sharp.Branch"/>.</returns>
        </member>
        <member name="T:LibGit2Sharp.Core.NativeMethods.LibraryLifetimeObject">
            <summary>
            Internal hack to ensure that the call to git_threads_shutdown is called after all handle finalizers 
            have run to completion ensuring that no dangling git-related finalizer runs after git_threads_shutdown. 
            There should never be more than one instance of this object per AppDomain.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitErrorCode.NotFound">
            <summary>
              Input does not exist in the scope searched.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitErrorCode.Exists">
            <summary>
              Input already exists in the processed scope.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitErrorCode.Ambiguous">
            <summary>
              The given short oid is ambiguous.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitErrorCode.Buffer">
            <summary>
              Buffer related issue.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitErrorCode.User">
            <summary>
              Callback error.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitErrorCode.BareRepo">
            <summary>
              Operation cannot be performed against a bare repository.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitErrorCode.PassThrough">
            <summary>
              Skip and passthrough the given ODB backend.
            </summary>
        </member>
        <member name="F:LibGit2Sharp.Core.GitErrorCode.IterOver">
            <summary>
              There are no more entries left to iterate.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.TreeDefinition">
            <summary>
              Holds the meta data of a <see cref="T:LibGit2Sharp.Tree"/>.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.TreeDefinition.From(LibGit2Sharp.Tree)">
            <summary>
              Builds a <see cref="T:LibGit2Sharp.TreeDefinition"/> from an existing <see cref="T:LibGit2Sharp.Tree"/>.
            </summary>
            <param name="tree">The <see cref="T:LibGit2Sharp.Tree"/> to be processed.</param>
            <returns>A new <see cref="T:LibGit2Sharp.TreeDefinition"/> holding the meta data of the <paramref name="tree"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.TreeDefinition.Remove(System.String)">
            <summary>
              Removes a <see cref="T:LibGit2Sharp.TreeEntryDefinition"/> located the specified <paramref name="treeEntryPath"/> path.
            </summary>
            <param name="treeEntryPath">The path within this <see cref="T:LibGit2Sharp.TreeDefinition"/>.</param>
            <returns>The current <see cref="T:LibGit2Sharp.TreeDefinition"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.TreeDefinition.Add(System.String,LibGit2Sharp.TreeEntryDefinition)">
            <summary>
              Adds or replaces a <see cref="T:LibGit2Sharp.TreeEntryDefinition"/> at the specified <paramref name="targetTreeEntryPath"/> location.
            </summary>
            <param name="targetTreeEntryPath">The path within this <see cref="T:LibGit2Sharp.TreeDefinition"/>.</param>
            <param name="treeEntryDefinition">The <see cref="T:LibGit2Sharp.TreeEntryDefinition"/> to be stored at the described location.</param>
            <returns>The current <see cref="T:LibGit2Sharp.TreeDefinition"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.TreeDefinition.Add(System.String,LibGit2Sharp.Blob,LibGit2Sharp.Mode)">
            <summary>
              Adds or replaces a <see cref="T:LibGit2Sharp.TreeEntryDefinition"/>, dynamically built from the provided <see cref="T:LibGit2Sharp.Blob"/>, at the specified <paramref name="targetTreeEntryPath"/> location.
            </summary>
            <param name="targetTreeEntryPath">The path within this <see cref="T:LibGit2Sharp.TreeDefinition"/>.</param>
            <param name="blob">The <see cref="T:LibGit2Sharp.Blob"/> to be stored at the described location.</param>
            <param name="mode">The file related <see cref="T:LibGit2Sharp.Mode"/> attributes.</param>
            <returns>The current <see cref="T:LibGit2Sharp.TreeDefinition"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.TreeDefinition.Add(System.String,System.String,LibGit2Sharp.Mode)">
            <summary>
              Adds or replaces a <see cref="T:LibGit2Sharp.TreeEntryDefinition"/>, dynamically built from the content of the file, at the specified <paramref name="targetTreeEntryPath"/> location.
            </summary>
            <param name="targetTreeEntryPath">The path within this <see cref="T:LibGit2Sharp.TreeDefinition"/>.</param>
            <param name="filePath">The path to the file from which a <see cref="T:LibGit2Sharp.Blob"/> will be built and stored at the described location. A relative path is allowed to be passed if the target
            <see cref="T:LibGit2Sharp.Repository"/> is a standard, non-bare, repository. The path will then be considered as a path relative to the root of the working directory.</param>
            <param name="mode">The file related <see cref="T:LibGit2Sharp.Mode"/> attributes.</param>
            <returns>The current <see cref="T:LibGit2Sharp.TreeDefinition"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.TreeDefinition.Add(System.String,LibGit2Sharp.Tree)">
            <summary>
              Adds or replaces a <see cref="T:LibGit2Sharp.TreeEntryDefinition"/>, dynamically built from the provided <see cref="T:LibGit2Sharp.Tree"/>, at the specified <paramref name="targetTreeEntryPath"/> location.
            </summary>
            <param name="targetTreeEntryPath">The path within this <see cref="T:LibGit2Sharp.TreeDefinition"/>.</param>
            <param name="tree">The <see cref="T:LibGit2Sharp.Tree"/> to be stored at the described location.</param>
            <returns>The current <see cref="T:LibGit2Sharp.TreeDefinition"/>.</returns>
        </member>
        <member name="P:LibGit2Sharp.TreeDefinition.Item(System.String)">
            <summary>
              Retrieves the <see cref="T:LibGit2Sharp.TreeEntryDefinition"/> located the specified <paramref name="treeEntryPath"/> path.
            </summary>
            <param name="treeEntryPath">The path within this <see cref="T:LibGit2Sharp.TreeDefinition"/>.</param>
            <returns>The found <see cref="T:LibGit2Sharp.TreeEntryDefinition"/> if any; null otherwise.</returns>
        </member>
        <member name="T:LibGit2Sharp.ObjectDatabase">
            <summary>
              Provides methods to directly work against the Git object database
              without involving the index nor the working directory.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.ObjectDatabase.#ctor">
            <summary>
              Needed for mocking purposes.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.ObjectDatabase.Contains(LibGit2Sharp.ObjectId)">
            <summary>
              Determines if the given object can be found in the object database.
            </summary>
            <param name="objectId">Identifier of the object being searched for.</param>
            <returns>True if the object has been found; false otherwise.</returns>
        </member>
        <member name="M:LibGit2Sharp.ObjectDatabase.CreateBlob(System.String)">
            <summary>
              Inserts a <see cref="T:LibGit2Sharp.Blob"/> into the object database, created from the content of a file.
            </summary>
            <param name="path">Path to the file to create the blob from.  A relative path is allowed to
              be passed if the <see cref="T:LibGit2Sharp.Repository"/> is a standard, non-bare, repository. The path
              will then be considered as a path relative to the root of the working directory.</param>
            <returns>The created <see cref="T:LibGit2Sharp.Blob"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.ObjectDatabase.AddBackend(LibGit2Sharp.OdbBackend,System.Int32)">
            <summary>
              Adds the provided backend to the object database with the specified priority.
            </summary>
            <param name="backend">The backend to add</param>
            <param name="priority">The priority at which libgit2 should consult this backend (higher values are consulted first)</param>
        </member>
        <member name="M:LibGit2Sharp.ObjectDatabase.CreateBlob(System.IO.BinaryReader,System.String)">
            <summary>
              Inserts a <see cref="T:LibGit2Sharp.Blob"/> into the object database, created from the content of a data provider.
            </summary>
            <param name="reader">The reader that will provide the content of the blob to be created.</param>
            <param name="hintpath">The hintpath is used to determine what git filters should be applied to the object before it can be placed to the object database.</param>
            <returns>The created <see cref="T:LibGit2Sharp.Blob"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.ObjectDatabase.CreateTree(LibGit2Sharp.TreeDefinition)">
            <summary>
              Inserts a <see cref="T:LibGit2Sharp.Tree"/> into the object database, created from a <see cref="T:LibGit2Sharp.TreeDefinition"/>.
            </summary>
            <param name="treeDefinition">The <see cref="T:LibGit2Sharp.TreeDefinition"/>.</param>
            <returns>The created <see cref="T:LibGit2Sharp.Tree"/>.</returns>
        </member>
        <member name="M:LibGit2Sharp.ObjectDatabase.CreateCommit(System.String,LibGit2Sharp.Signature,LibGit2Sharp.Signature,LibGit2Sharp.Tree,System.Collections.Generic.IEnumerable{LibGit2Sharp.Commit})">
            <summary>
              Inserts a <see cref="T:LibGit2Sharp.Commit"/> into the object database, referencing an existing <see cref="T:LibGit2Sharp.Tree"/>.
            </summary>
            <param name="message">The description of why a change was made to the repository.</param>
            <param name="author">The <see cref="T:LibGit2Sharp.Signature"/> of who made the change.</param>
            <param name="committer">The <see cref="T:LibGit2Sharp.Signature"/> of who added the change to the repository.</param>
            <param name="tree">The <see cref="T:LibGit2Sharp.Tree"/> of the <see cref="T:LibGit2Sharp.Commit"/> to be created.</param>
            <param name="parents">The parents of the <see cref="T:LibGit2Sharp.Commit"/> to be created.</param>
            <returns>The created <see cref="T:LibGit2Sharp.Commit"/>.</returns>
        </member>
        <member name="T:LibGit2Sharp.TreeChanges">
            <summary>
              Holds the result of a diff between two trees.
              <para>Changes at the granularity of the file can be obtained through the different sub-collections <see cref="P:LibGit2Sharp.TreeChanges.Added"/>, <see cref="P:LibGit2Sharp.TreeChanges.Deleted"/> and <see cref="P:LibGit2Sharp.TreeChanges.Modified"/>.</para>
            </summary>
        </member>
        <member name="M:LibGit2Sharp.TreeChanges.#ctor">
            <summary>
              Needed for mocking purposes.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.TreeChanges.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="M:LibGit2Sharp.TreeChanges.System#Collections#IEnumerable#GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the collection.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:LibGit2Sharp.TreeChanges.Item(System.String)">
            <summary>
              Gets the <see cref="T:LibGit2Sharp.TreeEntryChanges"/> corresponding to the specified <paramref name="path"/>.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.TreeChanges.Added">
            <summary>
              List of <see cref="T:LibGit2Sharp.TreeEntryChanges"/> that have been been added.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.TreeChanges.Deleted">
            <summary>
              List of <see cref="T:LibGit2Sharp.TreeEntryChanges"/> that have been deleted.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.TreeChanges.Modified">
            <summary>
              List of <see cref="T:LibGit2Sharp.TreeEntryChanges"/> that have been modified.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.TreeChanges.LinesAdded">
            <summary>
              The total number of lines added in this diff.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.TreeChanges.LinesDeleted">
            <summary>
              The total number of lines added in this diff.
            </summary>
        </member>
        <member name="P:LibGit2Sharp.TreeChanges.Patch">
            <summary>
              The full patch file of this diff.
            </summary>
        </member>
        <member name="T:LibGit2Sharp.RepositoryNotFoundException">
            <summary>
              The exception that is thrown when a <see cref="T:LibGit2Sharp.Repository"/> is being built with
              a path that doesn't point at a valid Git repository or workdir.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.RepositoryNotFoundException.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:LibGit2Sharp.RepositoryNotFoundException"/> class.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.RepositoryNotFoundException.#ctor(System.String)">
            <summary>
              Initializes a new instance of the <see cref="T:LibGit2Sharp.RepositoryNotFoundException"/> class with a specified error message.
            </summary>
            <param name="message">A message that describes the error. </param>
        </member>
        <member name="M:LibGit2Sharp.RepositoryNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
              Initializes a new instance of the <see cref="T:LibGit2Sharp.RepositoryNotFoundException"/> class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception. </param>
            <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException"/> parameter is not a null reference, the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:LibGit2Sharp.RepositoryNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
              Initializes a new instance of the <see cref="T:LibGit2Sharp.RepositoryNotFoundException"/> class with a serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:LibGit2Sharp.CommitLog">
            <summary>
              A log of commits in a <see cref="T:LibGit2Sharp.Repository"/>
            </summary>
        </member>
        <member name="M:LibGit2Sharp.CommitLog.#ctor">
            <summary>
              Needed for mocking purposes.
            </summary>
        </member>
        <member name="M:LibGit2Sharp.CommitLog.#ctor(LibGit2Sharp.Repository)">
            <summary>
              Initializes a new instance of the <see cref="T:LibGit2Sharp.CommitLog"/> class.
              The commits will be enumerated according in reverse chronological order.
            </summary>
            <param name="repo">The repository.</param>
        </member>
        <member name="M:LibGit2Sharp.CommitLog.#ctor(LibGit2Sharp.Repository,LibGit2Sharp.Filter)">
            <summary>
              Initializes a new instance of the <see cref="T:LibGit2Sharp.CommitLog"/> class.
            </summary>
            <param name="repo">The repository.</param>
            <param name="queryFilter">The filter to use in querying commits</param>
        </member>
        <member name="M:LibGit2Sharp.CommitLog.GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the log.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> object that can be used to iterate through the log.</returns>
        </member>
        <member name="M:LibGit2Sharp.CommitLog.System#Collections#IEnumerable#GetEnumerator">
            <summary>
              Returns an enumerator that iterates through the log.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the log.</returns>
        </member>
        <member name="M:LibGit2Sharp.CommitLog.QueryBy(LibGit2Sharp.Filter)">
            <summary>
              Returns the list of commits of the repository matching the specified <paramref name = "filter" />.
            </summary>
            <param name = "filter">The options used to control which commits will be returned.</param>
            <returns>A list of commits, ready to be enumerated.</returns>
        </member>
        <member name="M:LibGit2Sharp.CommitLog.FindCommonAncestor(LibGit2Sharp.Commit,LibGit2Sharp.Commit)">
            <summary>
              Find the best possible common ancestor given two <see cref="T:LibGit2Sharp.Commit"/>s.
            </summary>
            <param name="first">The first <see cref="T:LibGit2Sharp.Commit"/>.</param>
            <param name="second">The second <see cref="T:LibGit2Sharp.Commit"/>.</param>
            <returns>The common ancestor or null if none found.</returns>
        </member>
        <member name="M:LibGit2Sharp.CommitLog.FindCommonAncestor(System.Collections.Generic.IEnumerable{LibGit2Sharp.Commit})">
            <summary>
              Find the best possible common ancestor given two or more <see cref="T:LibGit2Sharp.Commit"/>.
            </summary>
            <param name="commits">The <see cref="T:LibGit2Sharp.Commit"/>s for which to find the common ancestor.</param>
            <returns>The common ancestor or null if none found.</returns>
        </member>
        <member name="M:LibGit2Sharp.CommitLog.Create(System.String,LibGit2Sharp.Signature,LibGit2Sharp.Signature,System.Boolean)">
            <summary>
              Stores the content of the <see cref="P:LibGit2Sharp.Repository.Index"/> as a new <see cref="T:LibGit2Sharp.Commit"/> into the repository.
              The tip of the <see cref="P:LibGit2Sharp.Repository.Head"/> will be used as the parent of this new Commit.
              Once the commit is created, the <see cref="P:LibGit2Sharp.Repository.Head"/> will move forward to point at it.
            </summary>
            <param name="message">The description of why a change was made to the repository.</param>
            <param name="author">The <see cref="T:LibGit2Sharp.Signature"/> of who made the change.</param>
            <param name="committer">The <see cref="T:LibGit2Sharp.Signature"/> of who added the change to the repository.</param>
            <param name="amendPreviousCommit">True to amend the current <see cref="T:LibGit2Sharp.Commit"/> pointed at by <see cref="P:LibGit2Sharp.Repository.Head"/>, false otherwise.</param>
            <returns>The generated <see cref="T:LibGit2Sharp.Commit"/>.</returns>
        </member>
        <member name="P:LibGit2Sharp.CommitLog.SortedBy">
            <summary>
              Gets the current sorting strategy applied when enumerating the log
            </summary>
        </member>
    </members>
</doc>
