From c362c7c905e4d6cc5fb3425a8b8315e8502427da Mon Sep 17 00:00:00 2001
From: Simon Sasburg <Simon.Sasburg@gmail.com>
Date: Sat, 10 Nov 2007 12:53:55 +0100
Subject: [PATCH] Import interesting stuff from perl-5.6.1-MSYS-1.0.11-src.tar.bz2.

It is mostly imitating cygwin (since MSys is a fork of Cygwin).
---
 Configure                   |   24 +++++-
 EXTERN.h                    |    2 +-
 MSYS-STUFF/Policy.sh        |   41 ++++++++
 MSYS-STUFF/msys-build       |  178 ++++++++++++++++++++++++++++++++++++
 MSYS-STUFF/perl-man.pkglist |  112 ++++++++++++++++++++++
 MSYS-STUFF/perl.pkglist     |   29 ++++++
 XSUB.h                      |    2 +-
 doio.c                      |    2 +-
 ext/NDBM_File/Makefile.PL   |    2 +-
 ext/ODBM_File/Makefile.PL   |    2 +-
 ext/POSIX/POSIX.xs          |    4 +-
 ext/SDBM_File/sdbm/pair.c   |    2 +-
 ext/SDBM_File/sdbm/sdbm.c   |    2 +-
 hints/cygwin.sh             |    6 +-
 hints/msys.sh               |   58 ++++++++++++
 installman                  |    2 +-
 installperl                 |    7 +-
 lib/Cwd.pm                  |   22 +++++
 lib/ExtUtils/MM.pm          |    1 +
 lib/ExtUtils/MM_Msys.pm     |  106 +++++++++++++++++++++
 lib/File/Find.pm            |    2 +-
 lib/File/Spec/Epoc.pm       |    2 +-
 lib/File/Temp.pm            |    2 +-
 makedepend.SH               |    1 +
 msys/Makefile.SHs           |  213 +++++++++++++++++++++++++++++++++++++++++++
 msys/ld2.in                 |   20 ++++
 msys/msys.c                 |  162 ++++++++++++++++++++++++++++++++
 msys/perlld.in              |   88 ++++++++++++++++++
 perl.h                      |    6 +-
 pod/perlport.pod            |    3 +-
 pp_sys.c                    |    6 +-
 utils/perlcc.PL             |    1 +
 32 files changed, 1083 insertions(+), 27 deletions(-)
 create mode 100644 MSYS-STUFF/Policy.sh
 create mode 100644 MSYS-STUFF/msys-build
 create mode 100644 MSYS-STUFF/perl-man.pkglist
 create mode 100644 MSYS-STUFF/perl.pkglist
 create mode 100644 hints/msys.sh
 create mode 100644 lib/ExtUtils/MM_Msys.pm
 create mode 100644 msys/Makefile.SHs
 create mode 100644 msys/ld2.in
 create mode 100644 msys/msys.c
 create mode 100644 msys/perlld.in

diff --git a/Configure b/Configure
index c2fedfb..6efc0f0 100644
--- a/Configure
+++ b/Configure
@@ -3118,6 +3118,9 @@ EOM
 		cygwin*) osname=cygwin
 			osvers="$3"
 			;;
+		msys*) osname=msys
+			osvers="$3"
+			;;
 		*dc.osx) osname=dcosx
 			osvers="$3"
 			;;
@@ -7738,7 +7741,7 @@ $undef)
 	;;
 *)	case "$useshrplib" in
 	'')	case "$osname" in
-		svr4*|nonstopux|dgux|dynixptx|esix|powerux|beos|cygwin*)
+		svr4*|nonstopux|dgux|dynixptx|esix|powerux|beos|cygwin*|msys*)
 			dflt=y
 			also='Building a shared libperl is required for dynamic loading to work on your system.'
 			;;
@@ -7808,7 +7811,7 @@ true)
 		linux*|gnu*)  # ld won't link with a bare -lperl otherwise.
 			dflt=libperl.$so
 			;;
-		cygwin*) # ld links against an importlib
+		cygwin*|msys*) # ld links against an importlib
 			dflt=libperl$lib_ext
 			;;
 		*)	# Try to guess based on whether libc has major.minor.
@@ -11143,6 +11146,23 @@ int main()
 }
 EOM
 	: Call the object file tmp-dyna.o in case dlext=o.
+	if $cc $ccflags $cccdlflags -c dyna.c ; then
+	  if mv dyna${_o} tmp-dyna${_o} ; then
+	    if $ld -o dyna.$dlext $lddlflags tmp-dyna${_o} ; then
+	      if $cc -o fred $ccflags $ldflags $cccdlflags $ccdlflags fred.c $libs ; then
+	        ./fred
+	      else
+	        echo failed 4
+	      fi
+	    else
+	      echo failed 3
+	    fi
+	  else
+	    echo failed 2
+	  fi
+	else
+	  echo failed 1
+	fi
 	if $cc $ccflags $cccdlflags -c dyna.c > /dev/null 2>&1 && 
 		mv dyna${_o} tmp-dyna${_o} > /dev/null 2>&1 && 
 		$ld -o dyna.$dlext $ldflags $lddlflags tmp-dyna${_o} > /dev/null 2>&1 && 
diff --git a/EXTERN.h b/EXTERN.h
index fe8a0ee..b743d97 100644
--- a/EXTERN.h
+++ b/EXTERN.h
@@ -41,7 +41,7 @@
 #      define dEXTCONST const
 #    endif
 #  else
-#    if defined(__CYGWIN__) && defined(USEIMPORTLIB)
+#    if (defined(__CYGWIN__) || defined(__MSYS__)) && defined(USEIMPORTLIB)
 #      define EXT extern __declspec(dllimport)
 #      define dEXT 
 #      define EXTCONST extern __declspec(dllimport) const
diff --git a/MSYS-STUFF/Policy.sh b/MSYS-STUFF/Policy.sh
new file mode 100644
index 0000000..006abcf
--- /dev/null
+++ b/MSYS-STUFF/Policy.sh
@@ -0,0 +1,41 @@
+#!/bin/sh
+
+# Policy file for perl-5.8.8-4
+
+# Where things will be.
+prefix='/usr'
+siteprefix='/usr'
+vendorprefix='/usr'
+
+man1dir='/usr/share/man/man1'
+man3dir='/usr/share/man/man3'
+siteman1dir='/usr/share/man/man1'
+siteman3dir='/usr/share/man/man3'
+vendorman1dir='/usr/share/man/man1'
+vendorman3dir='/usr/share/man/man3'
+
+privlib='/usr/lib/perl5/5.6'
+privlibexp='/usr/lib/perl5/5.6'
+archlib='/usr/lib/perl5/5.6/msys'
+archlibexp='/usr/lib/perl5/5.6/msys'
+
+sitelib='/usr/lib/perl5/site_perl/5.6'
+#sitelib_stem='/usr/lib/perl5/site_perl'
+sitelibexp='/usr/lib/perl5/site_perl/5.6'
+sitearch='/usr/lib/perl5/site_perl/5.6/msys'
+sitearchexp='/usr/lib/perl5/site_perl/5.6/msys'
+
+vendorlib='/usr/lib/perl5/vendor_perl/5.6'
+#vendorlib_stem='/usr/lib/perl5/vendor_perl'
+vendorlibexp='/usr/lib/perl5/vendor_perl/5.6'
+vendorarch='/usr/lib/perl5/vendor_perl/5.6/msys'
+vendorarchexp='/usr/lib/perl5/vendor_perl/5.6/msys'
+
+inc_version_list="5.6/msys 5.6 msys"
+
+# The maintainer.
+mydomain='.nowhere.com'
+myhostname='nothing'
+perladmin='nobody@nothing.nowhere.com'
+cf_by='nobody'
+cf_email='nobody@nothing.nowhere.com'
diff --git a/MSYS-STUFF/msys-build b/MSYS-STUFF/msys-build
new file mode 100644
index 0000000..0f5ec70
--- /dev/null
+++ b/MSYS-STUFF/msys-build
@@ -0,0 +1,178 @@
+#!/bin/bash -e
+#
+# Assumptions: msysDVLPR is installed and:
+#   if using 1.0.0-alpha1, the following bugs have been fixed:
+#     (1) /usr/lib/libm.a and /usr/lib/libc.a have been replaced
+#         with copies of or links to libmsys-1.0.dll.a
+#     (2) the silly quote bug in
+#            gcc-lib/i686-pc-msys/2.95.3-1/include/sys/termios.h
+#         is fixed (line 48:  CTRL(c'h') --> CTRL(ch)
+
+
+cp -p Policy.sh ..
+cd ..
+chmod -R +w *
+
+# NO spaces!
+export PATH=`pwd`:/usr/local/bin:/bin:/mingw/bin:/c/WINDOWS/system32:/c/WINDOWS
+
+# clean up
+find . -name "*.o" | xargs rm -f
+find . -name "*.a" | xargs rm -f
+find . -name "*.dll" | xargs rm -f
+find . -name "*.exe" | xargs rm -f
+rm -f config.sh
+rm -f myconfig
+rm -f config.h
+
+./Configure -de 2>&1 | tee MSYS-STUFF/log-configure.txt
+
+echo "manually fixup config.sh, config.h, myconfig in aother window?"
+echo -n "hit return to continue: "
+read dummy
+
+make 2>&1 | tee MSYS-STUFF/log-make.txt
+
+
+#### TESTS
+# do NOT copy msys-1.0.dll into t/
+# this means that taint tests will fail, but
+# there's no way around that given the msys "figure
+# out where I am installed" logic.
+
+echo "you may need to manually keep some stuck processes during"
+echo "the following tests.  Specifically:"
+echo "    op/groups"
+echo "    op/magic"
+echo "    op/taint"
+echo -n "press enter to continue"
+read dummy
+
+export PERL5LIB=/usr/local/src/perl/perl-5.6.1-MSYS-1.0.11/lib
+make test 2>&1 | tee MSYS-STUFF/log-test.txt
+(cd t;./perl harness) 2>&1 | tee MSYS-STUFF/log-harness.txt
+
+#### INSTALL
+# NOTE: "make install" not working (REMIND)
+# To install perl type:          "make install.perl"
+# To install with manpages type: "make install.perl install.man"
+# To install with HTML-docs:     "make install.perl install.man install.html"
+
+echo "going to install into actual /usr directory; CTRL-C to stop"
+echo -n "press enter to continue"
+read dummy
+make install.perl install.man 2>&1 | tee MSYS-STUFF/log-install.txt
+unset PERL5LIB
+export PERL5LIB
+
+#### CPAN
+echo "now installing CPAN:Bundle. Some of these components"
+echo "have interactive tests.  Just hit enter at each step"
+echo -n "press enter to continue"
+read dummy
+
+pushd CYGWIN-PATCHES/Bundle.CPAN
+# NOTE: during make test, there is some interactivity
+# Note: libnet first
+for i in `ls -r`
+do
+    cd $i
+    perl Makefile.PL
+    make
+    make test
+    make install_vendor UNINST=1
+    cd ..
+done
+popd
+
+#### clean up install mistakes
+echo "now cleaning up: the CPAN "vendor" install copied"
+echo "all of the contents of /usr/lib/perl5/5.6 into"
+echo "/usr/lib/perl5/vendor_perl/5.6.  That's wrong..."
+echo -n "press enter to continue"
+read dummy
+
+# fixup vendor-perl duplication
+pushd /usr/lib/perl5/vendor_perl
+for fn in `find 5.6 -type f`
+do
+    if [ -e ../${fn} ]
+    then
+        rm -f ${fn}
+    fi
+done
+
+for fn in `find 5.6 -type d | sort -r`
+do
+    if [ -d ../${fn} ]
+    then
+        # errors here are ok
+        rmdir ${fn}
+    fi
+done
+popd
+
+# remove site configuration files
+perl -MConfig -e 'unlink("$Config{archlib}/CPAN/Config.pm")'
+
+
+#### create binary packages:
+echo "Creating binary packages..."
+echo -n "press enter to continue"
+read dummy
+
+if [ -e MSYS-STUFF/perl.pkglist ]; then
+  tar -C / -c -v -f MSYS-STUFF/perl-5.6.1-MSYS-1.0.11.tar \
+    -T MSYS-STUFF/perl.pkglist
+fi
+if [ -e MSYS-STUFF/perl-5.6.1-MSYS-1.0.11.tar ] ; then
+  if [ -e MSYS-STUFF/perl-5.6.1-MSYS-1.0.11.tar.bz2 ] ; then
+    mv MSYS-STUFF/perl-5.6.1-MSYS-1.0.11.tar.bz2  \
+       MSYS-STUFF/perl-5.6.1-MSYS-1.0.11.tar.bz2-old
+    bzip2 MSYS-STUFF/perl-5.6.1-MSYS-1.0.11.tar
+  fi
+fi
+
+if [ -e MSYS-STUFF/perl-man.pkglist ]; then
+  tar -C / -c -v -f MSYS-STUFF/perl-man-5.6.1-MSYS-1.0.11.tar \
+     -T MSYS-STUFF/perl-man.pkglist
+  find /usr/share/man/man3 -name "*.3pm" | sed -e 's,^/,,' > /tmp/perlmantemp
+  tar -C / -u -v -f MSYS-STUFF/perl-man-5.6.1-MSYS-1.0.11.tar \
+     -T /tmp/perlmantemp
+  rm -f /tmp/perlmantemp
+fi
+if [ -e MSYS-STUFF/perl-man-5.6.1-MSYS-1.0.11.tar ] ; then
+  if [ -e MSYS-STUFF/perl-man-5.6.1-MSYS-1.0.11.tar.bz2 ] ; then
+    mv MSYS-STUFF/perl-man-5.6.1-MSYS-1.0.11.tar.bz2  \
+       MSYS-STUFF/perl-man-5.6.1-MSYS-1.0.11.tar.bz2-old
+    bzip2 MSYS-STUFF/perl-man-5.6.1-MSYS-1.0.11.tar
+  fi
+fi
+
+
+
+#### Clean up source dir
+echo "I'll leave this for you: make sure you've saved off a copy"
+echo "of Policy.sh, config.sh, myconfig, and config.h somewhere,"
+echo "and then do (in <topdir>):"
+echo " "
+echo "    make distclean"
+echo "    cd CYGWIN-PATCHES/Bundle.CPAN"
+echo "    for i in `ls -r`"
+echo "    do"
+echo "       cd $i"
+echo "       make distclean"
+echo "       cd .."
+echo "    done"
+echo "    cd ../.."
+echo " "
+echo "followed by:"
+echo " "
+echo "   find . -name "*.exe" | xargs rm -f"
+echo "   find . -name "*.a"   | xargs rm -f"
+echo "   find . -name "*.dll" | xargs rm -f"
+echo " "
+echo -n "press enter to continue"
+read dummy
+
+echo "Now go tar up the src dir, and you're done!"
diff --git a/MSYS-STUFF/perl-man.pkglist b/MSYS-STUFF/perl-man.pkglist
new file mode 100644
index 0000000..68a79c4
--- /dev/null
+++ b/MSYS-STUFF/perl-man.pkglist
@@ -0,0 +1,112 @@
+usr/share/man/man1/a2p.1
+usr/share/man/man1/c2ph.1
+usr/share/man/man1/dprofpp.1
+usr/share/man/man1/find2perl.1
+usr/share/man/man1/h2ph.1
+usr/share/man/man1/h2xs.1
+usr/share/man/man1/perl.1
+usr/share/man/man1/perl5004delta.1
+usr/share/man/man1/perl5005delta.1
+usr/share/man/man1/perlaix.1
+usr/share/man/man1/perlamiga.1
+usr/share/man/man1/perlapi.1
+usr/share/man/man1/perlapio.1
+usr/share/man/man1/perlbook.1
+usr/share/man/man1/perlboot.1
+usr/share/man/man1/perlbot.1
+usr/share/man/man1/perlbs2000.1
+usr/share/man/man1/perlbug.1
+usr/share/man/man1/perlcall.1
+usr/share/man/man1/perlcc.1
+usr/share/man/man1/perlclib.1
+usr/share/man/man1/perlcompile.1
+usr/share/man/man1/perlcygwin.1
+usr/share/man/man1/perldata.1
+usr/share/man/man1/perldbmfilter.1
+usr/share/man/man1/perldebguts.1
+usr/share/man/man1/perldebtut.1
+usr/share/man/man1/perldebug.1
+usr/share/man/man1/perldelta.1
+usr/share/man/man1/perldiag.1
+usr/share/man/man1/perldoc.1
+usr/share/man/man1/perldos.1
+usr/share/man/man1/perldsc.1
+usr/share/man/man1/perlebcdic.1
+usr/share/man/man1/perlembed.1
+usr/share/man/man1/perlepoc.1
+usr/share/man/man1/perlfaq.1
+usr/share/man/man1/perlfaq1.1
+usr/share/man/man1/perlfaq2.1
+usr/share/man/man1/perlfaq3.1
+usr/share/man/man1/perlfaq4.1
+usr/share/man/man1/perlfaq5.1
+usr/share/man/man1/perlfaq6.1
+usr/share/man/man1/perlfaq7.1
+usr/share/man/man1/perlfaq8.1
+usr/share/man/man1/perlfaq9.1
+usr/share/man/man1/perlfilter.1
+usr/share/man/man1/perlfork.1
+usr/share/man/man1/perlform.1
+usr/share/man/man1/perlfunc.1
+usr/share/man/man1/perlguts.1
+usr/share/man/man1/perlhack.1
+usr/share/man/man1/perlhist.1
+usr/share/man/man1/perlhpux.1
+usr/share/man/man1/perlintern.1
+usr/share/man/man1/perlipc.1
+usr/share/man/man1/perllexwarn.1
+usr/share/man/man1/perllocale.1
+usr/share/man/man1/perllol.1
+usr/share/man/man1/perlmachten.1
+usr/share/man/man1/perlmacos.1
+usr/share/man/man1/perlmod.1
+usr/share/man/man1/perlmodinstall.1
+usr/share/man/man1/perlmodlib.1
+usr/share/man/man1/perlmpeix.1
+usr/share/man/man1/perlnewmod.1
+usr/share/man/man1/perlnumber.1
+usr/share/man/man1/perlobj.1
+usr/share/man/man1/perlop.1
+usr/share/man/man1/perlopentut.1
+usr/share/man/man1/perlos2.1
+usr/share/man/man1/perlos390.1
+usr/share/man/man1/perlpod.1
+usr/share/man/man1/perlport.1
+usr/share/man/man1/perlre.1
+usr/share/man/man1/perlref.1
+usr/share/man/man1/perlreftut.1
+usr/share/man/man1/perlrequick.1
+usr/share/man/man1/perlretut.1
+usr/share/man/man1/perlrun.1
+usr/share/man/man1/perlsec.1
+usr/share/man/man1/perlsolaris.1
+usr/share/man/man1/perlstyle.1
+usr/share/man/man1/perlsub.1
+usr/share/man/man1/perlsyn.1
+usr/share/man/man1/perlthrtut.1
+usr/share/man/man1/perltie.1
+usr/share/man/man1/perltoc.1
+usr/share/man/man1/perltodo.1
+usr/share/man/man1/perltoot.1
+usr/share/man/man1/perltootc.1
+usr/share/man/man1/perltrap.1
+usr/share/man/man1/perlunicode.1
+usr/share/man/man1/perlutil.1
+usr/share/man/man1/perlvar.1
+usr/share/man/man1/perlvmesa.1
+usr/share/man/man1/perlvms.1
+usr/share/man/man1/perlvos.1
+usr/share/man/man1/perlwin32.1
+usr/share/man/man1/perlxs.1
+usr/share/man/man1/perlxstut.1
+usr/share/man/man1/pl2pm.1
+usr/share/man/man1/pod2html.1
+usr/share/man/man1/pod2man.1
+usr/share/man/man1/pod2text.1
+usr/share/man/man1/pod2usage.1
+usr/share/man/man1/podchecker.1
+usr/share/man/man1/podselect.1
+usr/share/man/man1/pstruct.1
+usr/share/man/man1/s2p.1
+usr/share/man/man1/splain.1
+usr/share/man/man1/xsubpp.1
diff --git a/MSYS-STUFF/perl.pkglist b/MSYS-STUFF/perl.pkglist
new file mode 100644
index 0000000..a603300
--- /dev/null
+++ b/MSYS-STUFF/perl.pkglist
@@ -0,0 +1,29 @@
+usr/bin/a2p.exe
+usr/bin/c2ph
+usr/bin/cpan
+usr/bin/dprofpp
+usr/bin/find2perl
+usr/bin/h2ph
+usr/bin/h2xs
+usr/bin/ld2
+usr/bin/msys-perl5_6.dll
+usr/bin/perl.exe
+usr/bin/perl5.6.1.exe
+usr/bin/perlbug
+usr/bin/perlcc
+usr/bin/perldoc
+usr/bin/perlld
+usr/bin/pl2pm
+usr/bin/pod2html
+usr/bin/pod2latex
+usr/bin/pod2man
+usr/bin/pod2text
+usr/bin/pod2usage
+usr/bin/podchecker
+usr/bin/podselect
+usr/bin/pstruct
+usr/bin/ptar
+usr/bin/s2p
+usr/bin/splain
+usr/lib/perl5/5.6/
+usr/lib/perl5/vendor_perl/5.6/
diff --git a/XSUB.h b/XSUB.h
index 2a8e90c..7403238 100644
--- a/XSUB.h
+++ b/XSUB.h
@@ -88,7 +88,7 @@ handled automatically by C<xsubpp>.
 
 #define ST(off) PL_stack_base[ax + (off)]
 
-#if defined(__CYGWIN__) && defined(USE_DYNAMIC_LOADING)
+#if (defined(__CYGWIN__) || defined(__MSYS__)) && defined(USE_DYNAMIC_LOADING)
 #  define XS(name) __declspec(dllexport) void name(pTHX_ CV* cv)
 #else
 #  ifdef HASATTRIBUTE_UNUSED
diff --git a/doio.c b/doio.c
index 8fc87fc..ee68453 100644
--- a/doio.c
+++ b/doio.c
@@ -834,7 +834,7 @@ Perl_nextargv(pTHX_ register GV *gv)
 		    }
 #endif
 #ifdef HAS_RENAME
-#if !defined(DOSISH) && !defined(__CYGWIN__) && !defined(EPOC)
+#if !defined(DOSISH) && !(defined(__CYGWIN__) || defined(__MSYS__)) && !defined(EPOC)
 		    if (PerlLIO_rename(PL_oldname,SvPVX_const(sv)) < 0) {
 		        if (ckWARN_d(WARN_INPLACE))	
 			    Perl_warner(aTHX_ packWARN(WARN_INPLACE),
diff --git a/ext/NDBM_File/Makefile.PL b/ext/NDBM_File/Makefile.PL
index 7b58601..38a5a62 100644
--- a/ext/NDBM_File/Makefile.PL
+++ b/ext/NDBM_File/Makefile.PL
@@ -1,7 +1,7 @@
 use ExtUtils::MakeMaker;
 WriteMakefile(
     NAME	=> 'NDBM_File',
-    LIBS => ["-L/usr/local/lib -lndbm", "-ldbm -lucb"],
+    LIBS => ["-L/usr/local/lib -lgdbm_compat", "-lgdbm"],
     MAN3PODS 	=> {}, 	# Pods will be built by installman.
     XSPROTOARG => '-noprototypes', 		# XXX remove later?
     VERSION_FROM => 'NDBM_File.pm',
diff --git a/ext/ODBM_File/Makefile.PL b/ext/ODBM_File/Makefile.PL
index 2732a32..36ec9c6 100644
--- a/ext/ODBM_File/Makefile.PL
+++ b/ext/ODBM_File/Makefile.PL
@@ -1,7 +1,7 @@
 use ExtUtils::MakeMaker;
 WriteMakefile(
     NAME	=> 'ODBM_File',
-    LIBS => ["-ldbm -lucb"],
+    LIBS => ["-lgdbm_compat -lgdbm"],
     MAN3PODS 	=> {}, 	# Pods will be built by installman.
     XSPROTOARG => '-noprototypes', 		# XXX remove later?
     VERSION_FROM => 'ODBM_File.pm', 
diff --git a/ext/POSIX/POSIX.xs b/ext/POSIX/POSIX.xs
index 34ea429..b51c958 100644
--- a/ext/POSIX/POSIX.xs
+++ b/ext/POSIX/POSIX.xs
@@ -76,7 +76,7 @@
 #include <fcntl.h>
 
 #ifdef HAS_TZNAME
-#  if !defined(WIN32) && !defined(__CYGWIN__) && !defined(NETWARE) && !defined(__UWIN__)
+#  if !defined(WIN32) && !defined(__CYGWIN__) && !defined(__MSYS__) && !defined(NETWARE) && !defined(__UWIN__)
 extern char *tzname[];
 #  endif
 #else
@@ -154,7 +154,7 @@ char *tzname[] = { "" , "" };
    }
 #  define times(t) vms_times(t)
 #else
-#if defined (__CYGWIN__)
+#if defined (__CYGWIN__) || defined (__MSYS__)
 #    define tzname _tzname
 #endif
 #if defined (WIN32) || defined (NETWARE)
diff --git a/ext/SDBM_File/sdbm/pair.c b/ext/SDBM_File/sdbm/pair.c
index 4f0fde2..5a6c5da 100644
--- a/ext/SDBM_File/sdbm/pair.c
+++ b/ext/SDBM_File/sdbm/pair.c
@@ -8,7 +8,7 @@
  */
 
 #include "config.h"
-#ifdef __CYGWIN__
+#if defined (__CYGWIN__) || defined (__MSYS__)
 # define EXTCONST extern const
 #else
 # include "EXTERN.h"
diff --git a/ext/SDBM_File/sdbm/sdbm.c b/ext/SDBM_File/sdbm/sdbm.c
index d544416..b884ab4 100644
--- a/ext/SDBM_File/sdbm/sdbm.c
+++ b/ext/SDBM_File/sdbm/sdbm.c
@@ -127,7 +127,7 @@ sdbm_prep(char *dirname, char *pagname, int flags, int mode)
  * open the files in sequence, and stat the dirfile.
  * If we fail anywhere, undo everything, return NULL.
  */
-#if defined(OS2) || defined(MSDOS) || defined(WIN32) || defined(__CYGWIN__)
+#if defined(OS2) || defined(MSDOS) || defined(WIN32) || defined(__CYGWIN__) || defined(__MSYS__)
 	flags |= O_BINARY;
 #	endif
 	if ((db->pagf = open(pagname, flags, mode)) > -1) {
diff --git a/hints/cygwin.sh b/hints/cygwin.sh
index aca6998..30feb7d 100644
--- a/hints/cygwin.sh
+++ b/hints/cygwin.sh
@@ -54,6 +54,6 @@ esac;
 d_eofnblk='define'
 
 # strip exe's and dll's
-#ldflags="$ldflags -s"
-#ccdlflags="$ccdlflags -s"
-#lddlflags="$lddlflags -s"
+ldflags="$ldflags -s"
+ccdlflags="$ccdlflags -s"
+lddlflags="$lddlflags -s"
diff --git a/hints/msys.sh b/hints/msys.sh
new file mode 100644
index 0000000..5415a58
--- /dev/null
+++ b/hints/msys.sh
@@ -0,0 +1,58 @@
+#! /bin/sh
+# msys.sh - hints for building perl using the MSYS environment for Win32
+#
+
+# not otherwise settable
+exe_ext='.exe'
+firstmakefile='GNUmakefile'
+case "$ldlibpthname" in
+'') ldlibpthname=PATH ;;
+esac
+archobjs='msys.o'
+
+# mandatory (overrides incorrect defaults)
+test -z "$cc" && cc='gcc'
+if test -z "$plibpth"
+then
+    plibpth=`gcc -print-file-name=libc.a`
+    plibpth=`dirname $plibpth`
+    plibpth=`cd $plibpth && pwd`
+fi
+so='dll'
+# - eliminate -lc, implied by gcc and a symlink to libmsys.a
+libswanted=`echo " $libswanted " | sed -e 's/ c / /g'`
+# - eliminate -lm, symlink to libmsys.a
+libswanted=`echo " $libswanted " | sed -e 's/ m / /g'`
+libswanted="$libswanted gdbm_compat"
+# - add libgdbm_compat $libswanted
+# - libcygipc is for cygwin, silly rabbit
+test -z "$optimize" && optimize='-O3 -s -mcpu=pentium'
+ccflags="$ccflags -DPERL_USE_SAFE_PUTENV -fnative-struct"
+# - otherwise i686-msys
+archname='msys'
+
+# dynamic loading
+# - otherwise -fpic
+cccdlflags=' '
+ld='ld2'
+
+# optional(ish)
+# - perl malloc needs to be unpolluted
+bincompat5005='undef'
+
+# Win9x problem with non-blocking read from a closed pipe
+d_eofnblk='define'
+
+ldflags="$ldflags -s"
+ccdlflags="$ccdlflags -s"
+lddlflags="$lddlflags -s"
+
+
+# stuff in /usr/local/ is probably mingw-, not msys- related
+locincpth=""
+libc='/usr/lib/libmsys-1.0.dll.a'
+libpth='/usr/lib /lib'
+libspath=' /usr/lib /lib'
+
+useshrplib=yes
+man3ext="3pm"
diff --git a/installman b/installman
index c736a9e..1f94141 100644
--- a/installman
+++ b/installman
@@ -169,7 +169,7 @@ sub pod2man {
 	# Convert name from  File/Basename.pm to File::Basename.3 format,
 	# if necessary.
 	$manpage =~ s#\.p(m|od)$##;
-	if ($^O eq 'os2' || $^O eq 'amigaos' || $^O eq 'uwin' || $^O eq 'cygwin') {
+	if ($^O eq 'os2' || $^O eq 'amigaos' || $^O eq 'uwin' || $^O eq 'cygwin' || $^O eq 'msys') {
 	  $manpage =~ s#/#.#g;
 	}
 	else {
diff --git a/installperl b/installperl
index 252170d..c6651d8 100644
--- a/installperl
+++ b/installperl
@@ -8,7 +8,7 @@ BEGIN {
 }
 
 use strict;
-my ($Is_VMS, $Is_W32, $Is_OS2, $Is_Cygwin, $Is_Darwin,
+my ($Is_VMS, $Is_W32, $Is_OS2, $Is_Cygwin, $Is_Msys, $Is_Darwin,
     $nonono, $dostrip, $versiononly, $silent, $verbose, $force,
     $otherperls, $archname, $Is_NetWare, $nwinstall, $nopods);
 use vars qw /$depth/;
@@ -19,6 +19,7 @@ BEGIN {
     $Is_OS2 = $^O eq 'os2';
     $Is_Cygwin = $^O eq 'cygwin';
     $Is_Darwin = $^O eq 'darwin';
+    $Is_Msys = $^O eq 'msys';
     if ($Is_VMS) { eval 'use VMS::Filespec;' }
 }
 
@@ -588,7 +589,7 @@ if ($versiononly) {
 # Install pod pages.  Where? I guess in $installprivlib/pod
 # ($installprivlib/pods for cygwin).
 
-my $pod = ($Is_Cygwin || $Is_Darwin || $Is_VMS) ? 'pods' : 'pod';
+my $pod = ($Is_Cygwin || $Is_Darwin || $Is_Msys || $Is_VMS) ? 'pods' : 'pod';
 if ( !$versiononly || ($installprivlib =~ m/\Q$ver/)) {
     mkpath("${installprivlib}/$pod", $verbose, 0777);
 
@@ -682,7 +683,7 @@ sub unlink {
 
     foreach my $name (@names) {
 	next unless -e $name;
-	chmod 0777, $name if ($Is_OS2 || $Is_W32 || $Is_Cygwin || $Is_NetWare);
+	chmod 0777, $name if ($Is_OS2 || $Is_W32 || $Is_Cygwin || $Is_Msys || $Is_NetWare);
 	print "  unlink $name\n" if $verbose;
 	( CORE::unlink($name) and ++$cnt
 	  or warn "Couldn't unlink $name: $!\n" ) unless $nonono;
diff --git a/lib/Cwd.pm b/lib/Cwd.pm
index 8d25af9..3fe7aeb 100644
--- a/lib/Cwd.pm
+++ b/lib/Cwd.pm
@@ -164,6 +164,28 @@ details.
 
 L<File::chdir>
 
+=head1 NOTES
+
+=over 4
+
+=item *
+
+On Mac OS (Classic), the path separator is ':', not '/', and the
+current directory is denoted as ':', not '.'. To move up the directory
+tree, you will use '::' to move up one level, but ':::' and so on to
+move up the tree two or more levels (i.e. the equivalent to '../../..'
+is '::::'). Generally, you should be careful about specifying relative pathnames.
+While a full path always begins with a volume name, a relative pathname
+should always begin with a ':'.  If specifying a volume name only, a
+trailing ':' is required.
+
+Actually, on Mac OS, the C<getcwd()>, C<fastgetcwd()> and C<fastcwd()>
+functions  are all aliases for the C<cwd()> function, which, on Mac OS,
+calls `pwd`. Likewise, the C<abs_path()> function is an alias for
+C<fast_abs_path()>.
+
+=back
+
 =cut
 
 use strict;
diff --git a/lib/ExtUtils/MM.pm b/lib/ExtUtils/MM.pm
index 8aaa55f..978ceda 100644
--- a/lib/ExtUtils/MM.pm
+++ b/lib/ExtUtils/MM.pm
@@ -52,6 +52,7 @@ if( $^O eq 'MSWin32' ) {
 }
 $Is{UWIN}   = $^O =~ /^uwin(-nt)?$/;
 $Is{Cygwin} = $^O eq 'cygwin';
+$Is{Msys}   = $^O eq 'msys';
 $Is{NW5}    = $Config{osname} eq 'NetWare';  # intentional
 $Is{BeOS}   = $^O =~ /beos/i;    # XXX should this be that loose?
 $Is{DOS}    = $^O eq 'dos';
diff --git a/lib/ExtUtils/MM_Msys.pm b/lib/ExtUtils/MM_Msys.pm
new file mode 100644
index 0000000..a55e0b1
--- /dev/null
+++ b/lib/ExtUtils/MM_Msys.pm
@@ -0,0 +1,106 @@
+package ExtUtils::MM_Msys;
+
+use strict;
+use vars qw($VERSION @ISA);
+
+use ExtUtils::MakeMaker::Config;
+use File::Spec;
+
+require ExtUtils::MM_Any;
+require ExtUtils::MM_Unix;
+@ISA = qw( ExtUtils::MM_Any ExtUtils::MM_Unix );
+
+$VERSION = '1.08';
+
+
+=head1 NAME
+
+ExtUtils::MM_Msys - methods to override UN*X behaviour in ExtUtils::MakeMaker
+
+=head1 SYNOPSIS
+
+ use ExtUtils::MM_Msys; # Done internally by ExtUtils::MakeMaker if needed
+
+=head1 DESCRIPTION
+
+See ExtUtils::MM_Unix for a documentation of the methods provided there.
+
+=over 4
+
+=item os_flavor
+
+We're Unix and Msys.
+
+=cut
+
+sub os_flavor {
+    return('Unix', 'Msys');
+}
+
+=item cflags
+
+if configured for dynamic loading, triggers #define EXT in EXTERN.h
+
+=cut
+
+sub cflags {
+    my($self,$libperl)=@_;
+    return $self->{CFLAGS} if $self->{CFLAGS};
+    return '' unless $self->needs_linking();
+
+    my $base = $self->SUPER::cflags($libperl);
+    foreach (split /\n/, $base) {
+        /^(\S*)\s*=\s*(\S*)$/ and $self->{$1} = $2;
+    };
+    $self->{CCFLAGS} .= " -DUSEIMPORTLIB" if ($Config{useshrplib} eq 'true');
+
+    return $self->{CFLAGS} = qq{
+CCFLAGS = $self->{CCFLAGS}
+OPTIMIZE = $self->{OPTIMIZE}
+PERLTYPE = $self->{PERLTYPE}
+};
+
+}
+
+
+=item replace_manpage_separator
+
+replaces strings '::' with '.' in MAN*POD man page names
+
+=cut
+
+sub replace_manpage_separator {
+    my($self, $man) = @_;
+    $man =~ s{/+}{.}g;
+    return $man;
+}
+
+=item init_linker
+
+points to libperl.a
+
+=cut
+
+sub init_linker {
+    my $self = shift;
+
+    if ($Config{useshrplib} eq 'true') {
+        my $libperl = '$(PERL_INC)' .'/'. "$Config{libperl}";
+        if( $] >= 5.006002 ) {
+            $libperl =~ s/a$/dll.a/;
+        }
+        $self->{PERL_ARCHIVE} = $libperl;
+    } else {
+        $self->{PERL_ARCHIVE} =
+          '$(PERL_INC)' .'/'. ("$Config{libperl}" or "libperl.a");
+    }
+
+    $self->{PERL_ARCHIVE_AFTER} ||= '';
+    $self->{EXPORT_LIST}  ||= '';
+}
+
+=back
+
+=cut
+
+1;
diff --git a/lib/File/Find.pm b/lib/File/Find.pm
index 497051e..d30ae23 100644
--- a/lib/File/Find.pm
+++ b/lib/File/Find.pm
@@ -1251,7 +1251,7 @@ $File::Find::current_dir = File::Spec->curdir || '.';
 
 $File::Find::dont_use_nlink = 1
     if $^O eq 'os2' || $^O eq 'dos' || $^O eq 'amigaos' || $^O eq 'MSWin32' ||
-       $^O eq 'interix' || $^O eq 'cygwin' || $^O eq 'epoc' || $^O eq 'qnx' ||
+       $^O eq 'interix' || $^O eq 'cygwin' || $^O eq 'msys' || $^O eq 'epoc' || $^O eq 'qnx' ||
 	   $^O eq 'nto';
 
 # Set dont_use_nlink in your hint file if your system's stat doesn't
diff --git a/lib/File/Spec/Epoc.pm b/lib/File/Spec/Epoc.pm
index a7168f9..0c77124 100644
--- a/lib/File/Spec/Epoc.pm
+++ b/lib/File/Spec/Epoc.pm
@@ -46,7 +46,7 @@ path. On UNIX eliminated successive slashes and successive "/.".
 sub canonpath {
     my ($self,$path) = @_;
 
-    $path =~ s|/+|/|g;                             # xx////xx  -> xx/xx
+    $path =~ s|/+|/|g unless($^O eq 'cygwin' or $^O eq 'msys');     # xx////xx  -> xx/xx
     $path =~ s|(/\.)+/|/|g;                        # xx/././xx -> xx/xx
     $path =~ s|^(\./)+||s unless $path eq "./";    # ./xx      -> xx
     $path =~ s|^/(\.\./)+|/|s;                     # /../../xx -> xx
diff --git a/lib/File/Temp.pm b/lib/File/Temp.pm
index 6ddcb36..f3e913e 100644
--- a/lib/File/Temp.pm
+++ b/lib/File/Temp.pm
@@ -825,7 +825,7 @@ sub _can_do_level {
   return 1 if $level == STANDARD;
 
   # Currently, the systems that can do HIGH or MEDIUM are identical
-  if ( $^O eq 'MSWin32' || $^O eq 'os2' || $^O eq 'cygwin' || $^O eq 'dos' || $^O eq 'MacOS' || $^O eq 'mpeix') {
+  if ( $^O eq 'MSWin32' || $^O eq 'os2' || $^O eq 'cygwin' || $^O eq 'msys' || $^O eq 'dos' || $^O eq 'MacOS' || $^O eq 'mpeix') {
     return 0;
   } else {
     return 1;
diff --git a/makedepend.SH b/makedepend.SH
index 688f656..fe96a64 100644
--- a/makedepend.SH
+++ b/makedepend.SH
@@ -119,6 +119,7 @@ for file in `$cat .clist`; do
     uwin)     uwinfix="-e s,\\\\\\\\,/,g -e s,\\([a-zA-Z]\\):/,/\\1/,g" ;;
     os2)      uwinfix="-e s,\\\\\\\\,/,g" ;;
     cygwin)   uwinfix="-e s,\\\\\\\\,/,g" ;;
+    msys)     uwinfix="-e s,\\\\\\\\,/,g" ;;
     posix-bc) uwinfix="-e s/\\*POSIX(\\(.*\\))/\\1/" ;;
     vos)      uwinfix="-e s/\#/\\\#/" ;;
     *)        uwinfix="" ;;
diff --git a/msys/Makefile.SHs b/msys/Makefile.SHs
new file mode 100644
index 0000000..a2932d6
--- /dev/null
+++ b/msys/Makefile.SHs
@@ -0,0 +1,213 @@
+# This file is read by Makefile.SH to produce rules for $(LIBPERL) (and
+# some additional rules as well).
+
+# Rerun `sh Makefile.SH; make depend' after making any change.
+
+# Additional rules supported: libperls.a (for static linking),
+# ld2, perlld (dynamic linking tools)
+#
+
+#! /bin/sh
+case $CONFIG in
+'')
+	if test -f config.sh; then TOP=.;
+	elif test -f ../config.sh; then TOP=..;
+	elif test -f ../../config.sh; then TOP=../..;
+	elif test -f ../../../config.sh; then TOP=../../..;
+	elif test -f ../../../../config.sh; then TOP=../../../..;
+	else
+		echo "Can't find config.sh."; exit 1
+	fi
+	. $TOP/config.sh
+	;;
+esac
+
+addtopath=`pwd`
+$spitshell >>Makefile <<!GROK!THIS!
+
+msys.c: msys/msys.c
+	\$(LNS) msys/msys.c
+
+# shell script feeding perlld to decent perl
+ld2: $& Makefile perlld ${src}/msys/ld2.in
+	@echo "extracting ld2 (with variable substitutions)"
+	@$sed s,@buildpath@,$addtopath,g <${src}/msys/ld2.in >ld2
+	@echo "installing ld2 into $installbin"
+# install is included in MSYS distributions, and we make a note of th
+# requirement in the README.msys file. However, let's give them
+# a warning.
+	@/usr/bin/install -c -m 755 ld2 ${installbin}/ld2
+	@if test ! -f  ${installbin}/ld2; then \
+		echo "*************************************************" ; \
+		echo "Make will probably fail in a few more steps." ; \
+		echo "When it does, copy \"ld2\" to a directory in" ; \
+		echo "your path, other than \".\"." ; \
+		echo "\"/usr/local/bin\" or something similar will do." ; \
+		echo "Then restart make." ; \
+		echo "*************************************************" ; \
+	fi
+
+!GROK!THIS!
+
+$spitshell >>Makefile <<!GROK!THIS!
+
+# perlld parameters
+#
+# these are mandatory
+DLLWRAP = 'dllwrap'
+VERSION = '$version'
+
+# following are optional.
+WRAPDRIVER = gcc
+DLLTOOL = dlltool
+EXPORT_ALL = 1
+
+# if some of extensions are empty,
+# no corresponding output will be done.
+# most probably, you'd like to have an export library
+DEF_EXT = .def
+EXP_EXT = .exp
+
+perlld: $& Makefile ${src}/msys/perlld.in
+	@echo "extracting perlld (with variable substitutions)"
+	@$sed -e s,@CC@,\${CC}, -e s,@DLLWRAP@,\${DLLWRAP},g \\
+	-e s,@WRAPDRIVER@,\${WRAPDRIVER},g -e s,@DLLTOOL@,\${DLLTOOL},g \\
+	-e s,@AS@,\${AS},g -e s,@EXPORT_ALL@,\${EXPORT_ALL},g \\
+	-e s,@DEF_EXT@,\${DEF_EXT},g -e s,@EXP_EXT@,\${EXP_EXT},g \\
+	-e s,@LIB_EXT@,\${LIB_EXT},g -e s,@VERSION@,\${VERSION},g \\
+	${src}/msys/perlld.in >perlld
+
+!GROK!THIS!
+
+# make sure that all library names are not malformed
+libperl=`echo $libperl|sed -e s,\\\..*,,`
+
+# it would be nice to allow dll to have any name,
+# but for now i insist on 'lib<whatever>.dll'
+if ( ! echo $libperl | grep '^lib' >/dev/null )
+then
+  libperl=lib$libperl
+fi
+linklibperl=-l`echo $libperl|sed -e s,^lib,,`
+
+$spitshell >>Makefile <<!GROK!THIS!
+LIBPERL = $libperl
+LLIBPERL= $linklibperl
+CLDFLAGS= -L$addtopath $ldflags
+CAT = $cat
+AWK = $awk
+!GROK!THIS!
+
+case "$useshrplib" in
+true)
+	$spitshell >>Makefile <<'!NO!SUBS!'
+cwobj = $(obj)
+
+# override default rule (NB: make croaks!) to force dll usage
+perlmain$(OBJ_EXT): perlmain.c
+	$(CCCMD) $(PLDLFLAGS) -DUSEIMPORTLIB $*.c
+
+# library used to make statically linked executables
+# miniperl is linked against it to avoid libperl.dll locking
+$(LIBPERL)$(LIB_EXT): $& perl$(OBJ_EXT) $(cwobj)
+	$(AR) rcu $@ perl$(OBJ_EXT) $(cwobj)
+
+# dll and import library
+$(LIBPERL).dll$(LIB_EXT): $& perl$(OBJ_EXT) $(cwobj) ld2
+	$(LDLIBPTH) ld2 $(SHRPLDFLAGS) -o $(LIBPERL)$(DLSUFFIX) \
+	perl$(OBJ_EXT) $(cwobj) $(libs)
+
+# How to build executables.
+
+# The miniperl -w -MExporter line is a basic cheap test to catch errors
+# before make goes on to run preplibrary and then MakeMaker on extensions.
+# This is very handy because later errors are often caused by miniperl
+# build problems but that's not obvious to the novice.
+# The Module used here must not depend on Config or any extensions.
+
+miniperl.exe \
+miniperl: $& miniperlmain$(OBJ_EXT) $(LIBPERL)$(LIB_EXT) opmini$(OBJ_EXT)
+	$(LDLIBPTH) $(CC) $(CLDFLAGS) -o miniperl miniperlmain$(OBJ_EXT) opmini$(OBJ_EXT) -Wl,-Bstatic $(LLIBPERL) -Wl,-Bdynamic $(libs)
+	$(LDLIBPTH) ./miniperl -w -Ilib -MExporter -e '<?>' || $(MAKE) minitest
+
+perl.exe \
+perl: $& perlmain$(OBJ_EXT) $(LIBPERL).dll$(LIB_EXT) $(DYNALOADER) $(static_ext) ext.libs
+	$(SHRPENV) $(LDLIBPTH) $(CC) $(CLDFLAGS) $(CCDLFLAGS) -o perl perlmain$(OBJ_EXT) $(DYNALOADER) $(static_ext) $(LLIBPERL) `cat ext.libs` $(libs)
+
+pureperl: $& perlmain$(OBJ_EXT) $(LIBPERL).dll$(LIB_EXT) $(DYNALOADER) $(static_ext) ext.libs
+	$(SHRPENV) $(LDLIBPTH) purify $(CC) $(CLDFLAGS) $(CCDLFLAGS) -o pureperl perlmain$(OBJ_EXT) $(DYNALOADER) $(static_ext) $(LLIBPERL) `cat ext.libs` $(libs)
+
+purecovperl: $& perlmain$(OBJ_EXT) $(LIBPERL).dll$(LIB_EXT) $(DYNALOADER) $(static_ext) ext.libs
+	$(SHRPENV) $(LDLIBPTH) purecov $(CC) $(CLDFLAGS) $(CCDLFLAGS) -o purecovperl perlmain$(OBJ_EXT) $(DYNALOADER) $(static_ext) $(LLIBPERL) `cat ext.libs` $(libs)
+
+quantperl: $& perlmain$(OBJ_EXT) $(LIBPERL).dll$(LIB_EXT) $(DYNALOADER) $(static_ext) ext.libs
+	$(SHRPENV) $(LDLIBPTH) quantify $(CC) $(CLDFLAGS) $(CCDLFLAGS) -o quantperl perlmain$(OBJ_EXT) $(DYNALOADER) $(static_ext) $(LLIBPERL) `cat ext.libs` $(libs)
+
+!NO!SUBS!
+	;;
+*)
+$spitshell >>Makefile <<'!NO!SUBS!'
+cwobj = $(obj)
+
+# perl library
+$(LIBPERL)$(LIB_EXT): $& perl$(OBJ_EXT) $(cwobj)
+	$(AR) rcu $@ perl$(OBJ_EXT) $(cwobj)
+
+# How to build executables.
+
+# The miniperl -w -MExporter line is a basic cheap test to catch errors
+# before make goes on to run preplibrary and then MakeMaker on extensions.
+# This is very handy because later errors are often caused by miniperl
+# build problems but that's not obvious to the novice.
+# The Module used here must not depend on Config or any extensions.
+
+miniperl.exe \
+miniperl: $& miniperlmain$(OBJ_EXT) $(LIBPERL)$(LIB_EXT) opmini$(OBJ_EXT)
+	$(LDLIBPTH) $(CC) $(CLDFLAGS) -o miniperl miniperlmain$(OBJ_EXT) opmini$(OBJ_EXT) -Wl,-Bstatic $(LLIBPERL) -Wl,-Bdynamic  $(libs)
+	$(LDLIBPTH) ./miniperl -w -Ilib -MExporter -e '<?>' || $(MAKE) minitest
+
+perl.exe \
+perl: $& perlmain$(OBJ_EXT) $(LIBPERL)$(LIB_EXT) $(DYNALOADER) $(static_ext) ext.libs
+	$(SHRPENV) $(LDLIBPTH) $(CC) $(CLDFLAGS) $(CCDLFLAGS) -o perl perlmain$(OBJ_EXT) $(DYNALOADER) $(static_ext) -Wl,-Bstatic $(LLIBPERL) -Wl,-Bdynamic `cat ext.libs` $(libs)
+
+pureperl: $& perlmain$(OBJ_EXT) $(LIBPERL)$(LIB_EXT) $(DYNALOADER) $(static_ext) ext.libs
+	$(SHRPENV) $(LDLIBPTH) purify $(CC) $(CLDFLAGS) $(CCDLFLAGS) -o pureperl perlmain$(OBJ_EXT) $(DYNALOADER) $(static_ext) $(LLIBPERL) `cat ext.libs` $(libs)
+
+purecovperl: $& perlmain$(OBJ_EXT) $(LIBPERL)$(LIB_EXT) $(DYNALOADER) $(static_ext) ext.libs
+	$(SHRPENV) $(LDLIBPTH) purecov $(CC) $(CLDFLAGS) $(CCDLFLAGS) -o purecovperl perlmain$(OBJ_EXT) $(DYNALOADER) $(static_ext) $(LLIBPERL) `cat ext.libs` $(libs)
+
+quantperl: $& perlmain$(OBJ_EXT) $(LIBPERL)$(LIB_EXT) $(DYNALOADER) $(static_ext) ext.libs
+	$(SHRPENV) $(LDLIBPTH) quantify $(CC) $(CLDFLAGS) $(CCDLFLAGS) -o quantperl perlmain$(OBJ_EXT) $(DYNALOADER) $(static_ext) $(LLIBPERL) `cat ext.libs` $(libs)
+
+!NO!SUBS!
+	;;
+esac
+
+# libperl.a is _the_ library both in dll and static cases
+# $(LIBPERL)$(LIB_EXT) expands to this name dependless of build model
+#
+# NOTE: The "-Wl,-Bstatic $(LLIBPERL) -Wl,-Bdynamic" is required to give
+# the import library linking priority over the dynamic library, since both
+# the .dll and .a are in the same directory.  When the new standard for
+# naming import/dynamic/static libraries emerges this should be updated.
+#
+$spitshell >>Makefile <<'!NO!SUBS!'
+
+
+!NO!SUBS!
+
+# suid perl is removed - i've never seen suid scripts for win32
+
+##############################################
+# additional targets
+
+$spitshell >>Makefile <<'!NO!SUBS!'
+
+DIST_DIRECTORY = .dist
+
+distdir: miniperl
+	-mkdir $(DIST_DIRECTORY)
+	./miniperl '-MExtUtils::Manifest' \
+	-e "ExtUtils::Manifest::manicopy(ExtUtils::Manifest::maniread(),'$(DIST_DIRECTORY)')"
+
+!NO!SUBS!
diff --git a/msys/ld2.in b/msys/ld2.in
new file mode 100644
index 0000000..3776c71
--- /dev/null
+++ b/msys/ld2.in
@@ -0,0 +1,20 @@
+#!/bin/sh
+#
+# ld wrapper for building dynamic lib version of perl;
+#  passes all args to perlld
+#
+
+# own miniperl is first candidate 'cause it doesn not lock libperl.dll
+for trythis in @buildpath@/miniperl @buildpath@/perl perl
+do
+  if [ -x $trythis ]
+  then
+    $trythis @buildpath@/perlld "$@"
+    exit $?
+  fi
+done
+# hard luck!
+echo i see no perl executable around there
+echo perl is required to build dynamic libraries
+echo go fetch one or build this one static
+exit 1
diff --git a/msys/msys.c b/msys/msys.c
new file mode 100644
index 0000000..f9ba75b
--- /dev/null
+++ b/msys/msys.c
@@ -0,0 +1,162 @@
+/*
+ * MSYS extras
+ */
+
+#include "EXTERN.h"
+#include "perl.h"
+#undef USE_DYNAMIC_LOADING
+#include "XSUB.h"
+
+#include <unistd.h>
+#include <process.h>
+
+/*
+ * pp_system() implemented via spawn()
+ * - more efficient and useful when embedding Perl in non-MSYS apps
+ * - code mostly borrowed from djgpp.c
+ */
+static int
+do_spawnvp (const char *path, const char * const *argv)
+{
+    dTHX;
+    Sigsave_t ihand,qhand;
+    int childpid, result, status;
+
+    rsignal_save(SIGINT, SIG_IGN, &ihand);
+    rsignal_save(SIGQUIT, SIG_IGN, &qhand);
+    childpid = spawnvp(_P_NOWAIT,path,argv);
+    if (childpid < 0) {
+	status = -1;
+	if(ckWARN(WARN_EXEC))
+	    Perl_warner(aTHX_ WARN_EXEC,"Can't spawn \"%s\": %s",
+		    path,Strerror (errno));
+    } else {
+	do {
+	    result = wait4pid(childpid, &status, 0);
+	} while (result == -1 && errno == EINTR);
+	if(result < 0)
+	    status = -1;
+    }
+    (void)rsignal_restore(SIGINT, &ihand);
+    (void)rsignal_restore(SIGQUIT, &qhand);
+    return status;
+}
+
+int
+do_aspawn (SV *really, void **mark, void **sp)
+{
+    dTHX;
+    int  rc;
+    char **a,*tmps,**argv;
+    STRLEN n_a;
+
+    if (sp<=mark)
+        return -1;
+    a=argv=(char**) alloca ((sp-mark+3)*sizeof (char*));
+
+    while (++mark <= sp)
+        if (*mark)
+            *a++ = SvPVx(*mark, n_a);
+        else
+            *a++ = "";
+    *a = Nullch;
+
+    if (argv[0][0] != '/' && argv[0][0] != '\\'
+        && !(argv[0][0] && argv[0][1] == ':'
+        && (argv[0][2] == '/' || argv[0][2] != '\\'))
+     ) /* will swawnvp use PATH? */
+         TAINT_ENV();	/* testing IFS here is overkill, probably */
+
+    if (really && *(tmps = SvPV(really, n_a)))
+        rc=do_spawnvp (tmps,(const char * const *)argv);
+    else
+        rc=do_spawnvp (argv[0],(const char *const *)argv);
+
+    return rc;
+}
+
+int
+do_spawn (char *cmd)
+{
+    dTHX;
+    char **a,*s,*metachars = "$&*(){}[]'\";\\?>|<~`\n";
+    const char *command[4];
+
+    while (*cmd && isSPACE(*cmd))
+	cmd++;
+
+    if (strnEQ (cmd,"/bin/sh",7) && isSPACE (cmd[7]))
+        cmd+=5;
+
+    /* save an extra exec if possible */
+    /* see if there are shell metacharacters in it */
+    if (strstr (cmd,"..."))
+	goto doshell;
+    if (*cmd=='.' && isSPACE (cmd[1]))
+	goto doshell;
+    if (strnEQ (cmd,"exec",4) && isSPACE (cmd[4]))
+	goto doshell;
+    for (s=cmd; *s && isALPHA (*s); s++) ;	/* catch VAR=val gizmo */
+	if (*s=='=')
+	    goto doshell;
+
+    for (s=cmd; *s; s++)
+	if (strchr (metachars,*s))
+	{
+	    if (*s=='\n' && s[1]=='\0')
+	    {
+		*s='\0';
+		break;
+	    }
+	doshell:
+	    command[0] = "sh";
+	    command[1] = "-c";
+	    command[2] = cmd;
+	    command[3] = NULL;
+
+	    return do_spawnvp("sh",command);
+	}
+
+    New (1303,PL_Argv,(s-cmd)/2+2,char*);
+    PL_Cmd=savepvn (cmd,s-cmd);
+    a=PL_Argv;
+    for (s=PL_Cmd; *s;) {
+	while (*s && isSPACE (*s)) s++;
+	if (*s)
+	    *(a++)=s;
+	while (*s && !isSPACE (*s)) s++;
+	if (*s)
+	    *s++='\0';
+    }
+    *a=Nullch;
+    if (!PL_Argv[0])
+        return -1;
+
+    return do_spawnvp(PL_Argv[0],(const char * const *)PL_Argv);
+}
+
+/* see also Cwd.pm */
+static
+XS(Msys_cwd)
+{
+    dXSARGS;
+    char *cwd;
+
+    if(items != 0)
+	Perl_croak(aTHX_ "Usage: Cwd::cwd()");
+    if((cwd = getcwd(NULL, -1))) {
+	ST(0) = sv_2mortal(newSVpv(cwd, 0));
+	safesysfree(cwd);
+	XSRETURN(1);
+    }
+    XSRETURN_UNDEF;
+}
+
+void
+init_os_extras(void)
+{
+    char *file = __FILE__;
+    dTHX;
+
+    newXS("Cwd::cwd", Msys_cwd, file);
+}
diff --git a/msys/perlld.in b/msys/perlld.in
new file mode 100644
index 0000000..098095c
--- /dev/null
+++ b/msys/perlld.in
@@ -0,0 +1,88 @@
+#
+# Perl script being a wrapper around the gnu ld. When a dll is specified to
+#   to be built, special processing is done, else the standard ld is called.
+#
+
+# these are pretty mandatory
+my $CC = '@CC@';
+my $EXPORT_ALL = @EXPORT_ALL@;
+
+# if some of extensions are undefined,
+# no corresponding output will be done.
+# most probably, you'd like to have an export library
+# my $DEF_EXT = '@DEF_EXT@';
+# my $EXP_EXT = '@EXP_EXT@';
+my $LIB_EXT = '@LIB_EXT@';
+
+#my $DEBUG ="perlld.out";
+my $DEBUG =undef;
+
+my $args = join(" ",@ARGV); # get args
+my $verbose =grep(/^\-(v|\-verbose)$/, @ARGV);
+
+sub shellexec;
+
+if ($DEBUG) {
+  open DEBUGFILE, ">>$DEBUG";
+  print DEBUGFILE "\n--- " .localtime() ."\nargs:\n$args\n\nenvironment:\n";
+  foreach (keys(%ENV)) { print DEBUGFILE $_, "=", $ENV{$_}, "\n"; };
+}
+
+if ($args !~ /\-o (\S+)/) {
+  print DEBUGFILE "+ no dll output -- passing to gcc\n\n" if $DEBUG;
+  shellexec("$CC $args\n");
+} else {
+  my ($path, $command, $dllname, $libname) ='';
+
+  $dllname =$1;
+  print DEBUGFILE "output file: $dllname\n" if $DEBUG;
+  # remove -o from args
+  $args =~ s/(^| )\-o \S+/$1/;
+
+  # Check for path:
+  if( $dllname =~ /.*[\/\\]/){
+    $dllname = $';
+    $path = $&;
+    $path =~ s,[/\\](\.[/\\])*,/,g;
+  }
+  if ($dllname =~ /\./) { $libname =$`; } else { $libname =$dllname; };
+  my $v_e_r_s = substr("@VERSION@",0,-2);
+  $v_e_r_s =~ tr/./_/;
+  if ( $dllname =~ /libperl.*/) {
+    $dllname ="msys-perl$v_e_r_s.dll";
+  } else {
+    $dllname ="$libname.dll";
+  }
+  $libname ="lib$libname" unless ($libname =~ /^lib/);
+  print DEBUGFILE "dll name: $dllname\nimport library: $libname\npath: $path\n" if $DEBUG;
+
+  $command ="$CC -shared -o $dllname";
+#  $command .=" --verbose" if $verbose;
+  $command .=" -Wl,--output-def=$libname$DEF_EXT" if $DEF_EXT;
+  $command .=" -Wl,--output-exp=$libname$EXP_EXT" if $EXP_EXT;
+  $command .=" -Wl,--out-implib=$libname.dll$LIB_EXT" if $LIB_EXT;
+  $command .=" -Wl,--export-all-symbols" if $EXPORT_ALL;
+  $command .=" -Wl,--enable-auto-import -Wl,--stack,8388608"; # always
+  $command .=" -Wl,--enable-auto-image-base"; # always
+
+  # other args are passed through
+  shellexec("$command \\\n$args\n");
+
+  if ($path) {
+    $command ="mv $dllname";
+    $command .=" $libname.dll$LIB_EXT" if $LIB_EXT;
+    shellexec("$command $path\n");
+  };
+};
+close DEBUGFILE if $DEBUG;
+
+#---------------------------------------------------------------------------
+sub shellexec {
+  my $command = shift;
+  print STDERR $command;
+  print DEBUGFILE $command if $DEBUG;
+  system($command) == 0
+    or die "perlld: *** system() failed to execute\n$command\n";
+};
+
+1;
diff --git a/perl.h b/perl.h
index 3c89362..5124869 100644
--- a/perl.h
+++ b/perl.h
@@ -2670,7 +2670,7 @@ typedef pthread_key_t	perl_key;
 #   endif
 #endif
 
-#if defined(__CYGWIN__)
+#if defined(__CYGWIN__) || defined(__MSYS__)
 /* USEMYBINMODE
  *   This symbol, if defined, indicates that the program should
  *   use the routine my_binmode(FILE *fp, char iotype, int mode) to insure
@@ -2683,7 +2683,7 @@ typedef pthread_key_t	perl_key;
             (PerlLIO_setmode(fileno(fp), mode) != -1 ? TRUE : FALSE)
 #endif
 
-#ifdef __CYGWIN__
+#if defined(__CYGWIN__) || defined(__MSYS__)
 void init_os_extras(void);
 #endif
 
@@ -4634,7 +4634,7 @@ int flock(int fd, int op);
 #if O_TEXT != O_BINARY
     /* If you have different O_TEXT and O_BINARY and you are a CLRF shop,
      * that is, you are somehow DOSish. */
-#   if defined(__BEOS__) || defined(__VOS__) || defined(__CYGWIN__)
+#   if defined(__BEOS__) || defined(__VOS__) || defined(__CYGWIN__) || defined(__MSYS__)
     /* BeOS has O_TEXT != O_BINARY but O_TEXT and O_BINARY have no effect;
      * BeOS is always UNIXoid (LF), not DOSish (CRLF). */
     /* VOS has O_TEXT != O_BINARY, and they have effect,
diff --git a/pod/perlport.pod b/pod/perlport.pod
index 65d7d15..ac4b1c7 100644
--- a/pod/perlport.pod
+++ b/pod/perlport.pod
@@ -2217,7 +2217,7 @@ L<perlaix>, L<perlamiga>, L<perlapollo>, L<perlbeos>, L<perlbs2000>,
 L<perlce>, L<perlcygwin>, L<perldgux>, L<perldos>, L<perlepoc>,
 L<perlebcdic>, L<perlfreebsd>, L<perlhurd>, L<perlhpux>, L<perlirix>,
 L<perlmachten>, L<perlmacos>, L<perlmacosx>, L<perlmint>, L<perlmpeix>,
-L<perlnetware>, L<perlos2>, L<perlos390>, L<perlos400>,
+L(perlmsys), L<perlnetware>, L<perlos2>, L<perlos390>, L<perlos400>,
 L<perlplan9>, L<perlqnx>, L<perlsolaris>, L<perltru64>,
 L<perlunicode>, L<perlvmesa>, L<perlvms>, L<perlvos>,
 L<perlwin32>, and L<Win32>.
diff --git a/pp_sys.c b/pp_sys.c
index 73c1381..dc51cfc 100644
--- a/pp_sys.c
+++ b/pp_sys.c
@@ -70,8 +70,10 @@ NETDB_DEFINE_CONTEXT
    compiling multithreaded and singlethreaded ($ccflags et al).
    HOST_NOT_FOUND is typically defined in <netdb.h>.
 */
-#if defined(HOST_NOT_FOUND) && !defined(h_errno) && !defined(__CYGWIN__)
+#if defined(HOST_NOT_FOUND) && !defined(h_errno) && !defined(__CYGWIN__) && !defined(__MSYS__)
 extern int h_errno;
+#else
+#include <errno.h>
 #endif
 
 #ifdef HAS_PASSWD
@@ -5302,7 +5304,7 @@ PP(pp_gpwent)
      * --jhi
      */
 
-#   if defined(__CYGWIN__) && defined(USE_REENTRANT_API)
+#   if (defined(__CYGWIN__) || defined(__MSYS__)) && defined(USE_REENTRANT_API)
     /* Cygwin 1.5.3-1 has buggy getpwnam_r() and getpwuid_r():
      * the pw_comment is left uninitialized. */
     PL_reentrant_buffer->_pwent_struct.pw_comment = NULL;
diff --git a/utils/perlcc.PL b/utils/perlcc.PL
index 361069e..635d24c 100644
--- a/utils/perlcc.PL
+++ b/utils/perlcc.PL
@@ -339,6 +339,7 @@ sub cc_harness {
 	my ($cfile,$stash)=@_;
 	use ExtUtils::Embed ();
 	my $command = ExtUtils::Embed::ccopts." -o $Output $cfile ";
+	$command .= " -DUSEIMPORTLIB";
 	$command .= " -I".$_ for split /\s+/, opt(I);
 	$command .= " -L".$_ for split /\s+/, opt(L);
 	my @mods = split /-?u /, $stash;
-- 
1.5.3.5.2233.g50e2

